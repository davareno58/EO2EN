// EO2EN.cpp
/**
* Esperanto AnywhereCPP, Version 1.0, Esperanto-to-English Machine Translation
*
* @author David Kenneth Crandall, © 2014.
*/
// Cx cx Gx gx Hx hx Jx jx Sx sx Ux ux

#include "stdafx.h"
#include "stdio.h"
#include <stdlib.h>
#include <string.h>
#include <iostream>
#include <string>
#include <regex>
#include <array>
#include <locale>
#include <sstream>
#include <iomanip>
#include <fstream>
#include <sstream>
#include <tchar.h>

using namespace std;

// Letters in words, plus the apostrophe and apostrophe-like characters:
// Esperanto alphabet for X-method using cx gx hx jx sx ux:
// Mass nouns and others such as colors, days of week and months of year, which don't require determiners:
//public:
// Initialize constants:
static string translateEsperanto(string txxt);
static int indexof(string st, string seg);
static int indexof(string st, string seg, int start);
int _tmain(int argc, _TCHAR* argv[]);
//int _wWinMain(int argc, _TCHAR* argv[]);
static bool addPrefix(string w, string f, string esperantoPrefix, string englishPrefix);
static bool wordPrefix(string w, string f);
static bool wordStem(string w, string f);
static bool addSuffixes(string w, string f, string esperantoSuffix, string englishTranslation);
static bool addEsperantoSuffix(string w, string f, string esperantoSuffix);
static bool addSuffixesPartOfSpeech(string w, string f, string eoSuf, string enTran, string POS);
static bool wordEnding(string w, string f);
static void loadDictionary();
static string cutTo(string ee);
static string affix(string entry, string prefix, string suffix);
static string verbalAdjective(string entry, string suffix);
static string addVerbEr(string entry, string suffix);
static string addPassiveOne(string entry, string suffix);
static string previousWord(int i);
static string nextWord(int i);
static bool countNounFound();
static bool adjectivePhraseFound();
static string justEO(string wd);
static bool adjectiveFound();
static void lookForAdverb();
static void lookForAdjectiveExtension();
static void putAdjectiveBeforeNoun(string nn, string a);
static void cleanup();
static string korrections(string t, string tx1a);
static string korrections1(string t);
static string korrections2(string t);
static string korrections3(string t);
static string korrections4(string t);
static string korrections5(string t);
static string korrections6(string t);
static string korrections7(string t);
static string korrections8(string t);

static string englishRoots[] = { "dismay", "may", "can", "scribe", "bribe", "jibe", "abide", "blacken", "darken", "thicken", "weaken", "awaken", "woken", "essay", "torpedo", "arise", "awake", "bear", "beat", "become", "befall", "beget", "begin", "behold", "bend", "bereave", "beseech", "beset", "bespeak", "bestrew", "abet", "betake", "bethink", "forbid", "bid", "bid", "bide", "bind", "bleed", "blend", "bless", "blow", "break", "breastfeed", "breed", "bring", "broadcast", "browbeat", "build", "burn", "burst", "bust", "buy", "cast", "catch", "chide", "choose", "cleave", "cleave", "cling", "close", "colorbreed", "come", "cost", "creep", "crow", "cut", "deal", "dig", "dive", "draw", "dream", "drink", "drive", "dwell", "enwind", "fall", "feed", "feel", "fight", "find", "fit", "flee", "fling", "fly", "forbear", "forecast", "forego", "forefeel", "foreknow", "forerun", "foresee", "foreshow", "forespeak", "foretell", "forget", "forgive", "forgo", "forsake", "forswear", "freeze", "get", "ghostwrite", "gild", "give", "go", "grave", "grind", "grow", "hagride", "handwrite", "hang", "have", "hear", "heave", "hew", "hide", "hold", "housesit", "hurt", "input", "inset", "interbreed", "interweave", "keep", "kneel", "knit", "know", "lay", "lead", "lean", "leap", "learn", "leave", "lend", "light", "lip-read", "lose", "make", "mean", "meet", "miscast", "mishear", "mislay", "mislead", "misread", "misspell", "mistake", "misunderstand", "mow", "outbid", "outdo", "outgrow", "outrun", "outsell", "overcast", "overcome", "overdo", "overdraw", "overeat", "overhang", "overhear", "overlay", "overlie", "overpay", "override", "overrun", "oversee", "oversell", "overshoot", "oversleep", "overtake", "overthrow", "over-cast", "over-come", "over-do", "over-draw", "over-eat", "over-hang", "over-hear", "over-lay", "over-lie", "over-pay", "over-ride", "over-run", "over-see", "over-sell", "over-shoot", "over-sleep", "over-take", "over-throw", "panic", "partake", "pay", "pen", "picnic", "plead", "pre-set", "proofread", "prove", "put", "quit", "read", "reave", "rebind", "rebuild", "recast", "redo", "re-lay", "remake", "rend", "repay", "rerun", "resell", "reset", "rethink", "rewind", "rewrite", "rid", "ride", "ring", "rise", "rive", "run", "saw", "see", "seek", "sell", "send", "set", "sew", "shake", "shall", "shave", "shear", "shed", "shend", "shine", "shit", "hit", "shite", "shoe", "shoot", "show", "shrink", "shrive", "shut", "sing", "sink", "sit", "slay", "sleep", "slide", "sling", "slink", "slit", "smell", "smite", "sneak", "sow", "speak", "speed", "spell", "spend", "spill", "spin", "spit", "split", "spoil", "spoon-feed", "spread", "spring", "stand", "steal", "stick", "sting", "stink", "strew", "stride", "strike", "string", "strive", "swear", "sweat", "sweep", "swell", "swim", "swing", "take", "teach", "tear", "tell", "think", "thrive", "throw", "thrust", "tread", "unbind", "undergo", "underlie", "understand", "undertake", "underwrite", "undo", "unwind", "uphold", "upset", "wake", "waylay", "wear", "weave", "weep", "wend", "wet", "will", "win", "wind", "withdraw", "withhold", "withstand", "work", "wring", "write", "cheat", "heat", "defeat", "sweat", "repeat", "retreat", "seat", "treat", "bleat", "eat", "be", "ken", "let", "lie", "wed", "say", "bet", "do", "bite" };
static string englishPreterites[] = { "dismayed", "might", "could", "scribed", "bribed", "jibed", "abided", "blackened", "darkened", "thickened", "weakened", "awakened", "wokened", "essayed", "torpedoed", "arose", "awoke", "bore", "beat", "became", "befell", "begat", "began", "beheld", "bent", "bereaved", "beseeched", "beset", "bespoke", "bestrewed", "abetted", "betook", "bethought", "forbade", "bid", "bid", "bided", "bound", "bled", "blended", "blessed", "blew", "broke", "breastfed", "bred", "brought", "broadcast", "browbeat", "built", "burned", "burst", "busted", "bought", "cast", "caught", "chided", "chose", "clove", "cleft", "clung", "closed", "colorbred", "came", "cost", "crept", "crowed", "cut", "dealt", "dug", "dove", "drew", "dreamt", "drank", "drove", "dwelled", "enwound", "fell", "fed", "felt", "fought", "found", "fit", "fled", "flung", "flew", "forbore", "forecasted", "forewent", "forefelt", "foreknew", "foreran", "foresaw", "foreshowed", "forespoke", "foretold", "forgot", "forgave", "forwent", "forsook", "forswore", "froze", "got", "ghostwrote", "gilded", "gave", "went", "graved", "ground", "grew", "hagrode", "handwrote", "hanged", "had", "heard", "heaved", "hewed", "hid", "held", "housesat", "hurt", "inputted", "inset", "interbred", "interwove", "kept", "knelt", "knitted", "knew", "laid", "led", "leaned", "leapt", "learned", "left", "lent", "lit", "lip-read", "lost", "made", "meant", "met", "miscast", "misheard", "mislaid", "misled", "misread", "misspelled", "mistook", "misunderstood", "mowed", "outbid", "outdid", "outgrew", "outran", "outsold", "overcast", "overcame", "overdid", "overdrew", "overate", "overhung", "overheard", "overlaid", "overlay", "overpaid", "overrode", "overran", "oversaw", "oversold", "overshot", "overslept", "overtook", "overthrew", "overcast", "overcame", "overdid", "overdrew", "overate", "overhung", "overheard", "overlaid", "overlay", "overpaid", "overrode", "overran", "oversaw", "oversold", "overshot", "overslept", "overtook", "overthrew", "panicked", "partook", "paid", "penned", "picnicked", "pled", "pre-set", "proofread", "proved", "put", "quit", "read", "reft", "rebound", "rebuilt", "recast", "redid", "re-laid", "remade", "rended", "repaid", "reran", "resold", "reset", "rethought", "rewound", "rewrote", "ridded", "rode", "rang", "rose", "rived", "ran", "sawed", "saw", "sought", "sold", "sent", "set", "sewed", "shook", "should", "shaved", "sheared", "shed", "shent", "shone", "shitted", "hit", "shat", "shoed", "shot", "showed", "shrank", "shrove", "shut", "sang", "sank", "sat", "slew", "slept", "slid", "slung", "slinked", "slit", "smelled", "smote", "snuck", "sowed", "spoke", "speeded", "spelled", "spent", "spilled", "spun", "spat", "split", "spoiled", "spoon-fed", "spread", "sprang", "stood", "stole", "stuck", "stung", "stank", "strewed", "strode", "struck", "strung", "strived", "swore", "sweated", "swept", "swelled", "swam", "swung", "took", "taught", "tore", "told", "thought", "thrived", "threw", "thrust", "trod", "unbound", "underwent", "underlay", "understood", "undertook", "underwrote", "undid", "unwound", "upheld", "upset", "woke", "waylaid", "wore", "wove", "wept", "went", "wetted", "willed", "won", "wound", "withdrew", "withheld", "withstood", "worked", "wrung", "wrote", "cheated", "heated", "defeated", "sweated", "repeated", "retreated", "seated", "treated", "bleated", "ate", "was", "kenned", "let", "lay", "wedded", "said", "bet", "did", "bit" };
static string englishPastParticiples[] = { "dismayed", "been allowed to", "been able to", "scribed", "bribed", "jibed", "abided", "blackened", "darkened", "thickened", "weakened", "awakened", "wokened", "essayed", "torpedoed", "arisen", "awoken", "borne", "beaten", "become", "befallen", "begotten", "begun", "beheld", "bent", "bereaved", "beseeched", "beset", "bespoken", "bestrewn", "abetted", "betaken", "bethought", "forbidden", "bid", "bidden", "bided", "bound", "bled", "blended", "blessed", "blown", "broken", "breastfed", "bred", "brought", "broadcast", "browbeaten", "built", "burned", "burst", "busted", "bought", "cast", "caught", "chided", "chosen", "cloven", "cleft", "clung", "closed", "colorbred", "come", "cost", "crept", "crowed", "cut", "dealt", "dug", "dove", "drawn", "dreamt", "drunk", "driven", "dwelled", "enwound", "fallen", "fed", "felt", "fought", "found", "fit", "fled", "flung", "flown", "forborne", "forecasted", "foregone", "forefelt", "foreknown", "forerun", "foreseen", "foreshown", "forespoken", "foretold", "forgotten", "forgiven", "forgone", "forsaken", "forsworn", "frozen", "gotten", "ghostwritten", "gilded", "given", "gone", "graved", "ground", "grown", "hagridden", "handwritten", "hanged", "had", "heard", "heaved", "hewn", "hidden", "held", "housesat", "hurt", "inputted", "inset", "interbred", "interwoven", "kept", "knelt", "knitted", "known", "laid", "led", "leaned", "leapt", "learned", "left", "lent", "lit", "lip-read", "lost", "made", "meant", "met", "miscast", "misheard", "mislaid", "misled", "misread", "misspelled", "mistaken", "misunderstood", "mown", "outbidden", "outdone", "outgrown", "outrun", "outsold", "overcast", "overcome", "overdone", "overdrawn", "overeaten", "overhung", "overheard", "overlaid", "overlain", "overpaid", "overridden", "overrun", "overseen", "oversold", "overshot", "overslept", "overtaken", "overthrown", "overcast", "overcome", "overdone", "overdrawn", "overeaten", "overhung", "overheard", "overlaid", "overlain", "overpaid", "overridden", "overrun", "overseen", "oversold", "overshot", "overslept", "overtaken", "overthrown", "panicked", "partaken", "paid", "penned", "picnicked", "pled", "pre-set", "proofread", "proven", "put", "quit", "read", "reaven", "rebound", "rebuilt", "recast", "redone", "re-laid", "remade", "rended", "repaid", "rerun", "resold", "reset", "rethought", "rewound", "rewritten", "ridded", "ridden", "rung", "risen", "rived", "run", "sawed", "seen", "sought", "sold", "sent", "set", "sewn", "shaken", "shaved", "sheared", "shed", "shent", "shone", "shitted", "hit", "shat", "shoed", "shot", "shown", "shrunken", "shriven", "shut", "sung", "sunk", "sat", "slain", "slept", "slid", "slung", "slinked", "slit", "smelled", "smitten", "snuck", "sown", "spoken", "speeded", "spelled", "spent", "spilled", "spun", "spat", "split", "spoiled", "spoon-fed", "spread", "sprung", "stood", "stolen", "stuck", "stung", "stunk", "strewn", "strode", "struck", "strung", "strived", "sworn", "sweated", "swept", "swollen", "swum", "swung", "taken", "taught", "torn", "told", "thought", "thrived", "thrown", "thrust", "trodden", "unbound", "undergone", "underlain", "understood", "undertaken", "underwritten", "undone", "unwound", "upheld", "upset", "woken", "waylaid", "worn", "woven", "wept", "went", "wetted", "willed", "won", "wound", "withdrawn", "withheld", "withstood", "worked", "wrung", "written", "cheated", "heated", "defeated", "sweated", "repeated", "retreated", "seated", "treated", "bleated", "eaten", "been", "kenned", "let", "lain", "wedded", "said", "bet", "done", "bitten" };
static string englishNonalterables[] = { "Alousy", "Alousy", "Alousy", "Alousy", "Flousily", "Aaction", "Aaction", "Aaction", "Aaction", "Acontinuing", "Acontinuing", "Acontinuing", "Acontinuing", "Ocontinuer", "Ocontinuer", "Ocontinuer", "Ocontinuer", "Icontinue", "Acontinued", "Acontinued", "Acontinued", "Acontinued", "Ocontinued|one", "Ocontinued|one", "Ocontinued|one", "Ocontinued|one", "Fcontinuingly", "Ito|continue", "Fgood-bye", "Apreviously|continuing", "Apreviously|continuing", "Apreviously|continuing", "Apreviously|continuing", "Opreviously|continuer", "Opreviously|continuer", "Opreviously|continuer", "Opreviously|continuer", "Icontinued", "Apreviously|continued", "Apreviously|continued", "Apreviously|continued", "Apreviously|continued", "Opreviously|continued|one", "Opreviously|continued|one", "Opreviously|continued|one", "Opreviously|continued|one", "Oaction", "Oaction", "Oaction", "Oaction", "Agoing|to|continue", "Agoing|to|continue", "Agoing|to|continue", "Agoing|to|continue", "Ogoing|to|be|continuer", "Ogoing|to|be|continuer", "Ogoing|to|be|continuer", "Ogoing|to|be|continuer", "Iwill|continue", "Agoing|to|be|continued", "Agoing|to|be|continued", "Agoing|to|be|continued", "Agoing|to|be|continued", "Ogoing|to|be|continued|one", "Ogoing|to|be|continued|one", "Ogoing|to|be|continued|one", "Ogoing|to|be|continued|one", "Ishould|continue", "Awould|be|continuing", "Awould|be|continuing", "Awould|be|continuing", "Awould|be|continuing", "Owould|be|continuer", "Owould|be|continuer", "Owould|be|continuer", "Owould|be|continuer", "Iwould|continue", "Awould|be|continued", "Awould|be|continued", "Awould|be|continued", "Awould|be|continued", "Owould|be|continued|one", "Owould|be|continued|one", "Owould|be|continued|one", "Owould|be|continued|one", "Foh", "Fq749kqz", "F-ever/at|all", "Athing", "Athing", "Athing", "Athing", "Othing", "Othing", "Othing", "Othing", "Pto", "Fotherwise", "Fat|least", "Fboth", "Fq749kq", "Amember", "Amember", "Amember", "Amember", "Falso", "Fstill", "Omember", "Omember", "Omember", "Omember", "Pinstead|of", "Acurrent", "Acurrent", "Acurrent", "Acurrent", "Pbefore/ago", "Fforward", "Fthe|day|before|yesterday", "Fbarely", "Pnear", "Agroup/set", "Agroup/set", "Agroup/set", "Agroup/set", "Fin|a|group/set", "Ogroup/set", "Ogroup/set", "Ogroup/set", "Ogroup/set", "Cor/either", "Fc'mon", "Fsoon", "Fone|more|time/encore", "NB", "Fplease", "Fplease", "None|hundred", "Aone|hundredth", "Aone|hundredth", "Aone|hundredth", "Aone|hundredth", "None|hundred|thousand", "Aone|hundred|thousandth", "Aone|hundred|thousandth", "Aone|hundred|thousandth", "Aone|hundred|thousandth", "Aone|hundredth", "Aone|hundredth", "Aone|hundredth", "Aone|hundredth", "None|hundredth", "None|hundredth", "None|hundredth", "None|hundredth", "Agroup|of|one|hundred", "Agroups|of|one|hundred", "Agroups|of|one|hundred", "Agroup|of|one|hundred", "Ngroup|of|one|hundred", "Ngroups|of|one|hundred", "Ngroups|of|one|hundred", "Ngroup|of|one|hundred", "Zyou", "Ayour", "Ayour", "Ayour", "Ayour", "Zyou", "NC", "Cbecause", "Pat", "Amain", "Amain", "Amain", "Amain", "Fmainly", "Fnear|me", "Aevery|kind|zqx", "Falways", "Aall|kinds|zqx", "Aall|kinds|zqx", "Ffor|every|reason", "Falways", "Fin|every|way", "Aevery|kind|zqx", "Feverywhere", "Fin|every|way", "Feverywhere", "Aeverybody's", "Zeverything", "Zall|thing", "Zall|thing", "Fevery|amount", "Aevery|number|zqx", "Fall|the|time", "Zeverything", "Faround", "Aeach", "Aall", "Aall", "Aeach", "NCx", "Cwhether/or", "Pof", "Pof/from", "Nten", "Atenth", "Atenth", "Atenth", "Atenth", "Ftenthly", "Nten|thousand", "Aten|thousandth", "Aten|thousandth", "Aten|thousandth", "Aten|thousandth", "Atenth", "Atenth", "Atenth", "Atenth", "Ntenth", "Ntenth", "Ntenth", "Ntenth", "Atensome", "Atensome", "Atensome", "Atensome", "Ntensome", "Ntensome", "Ntensome", "Ntensome", "Fto|the|right", "Pever|since", "Cthe", "Fapart", "Ascattered/disjoint", "Ascattered/disjoint", "Ascattered/disjoint", "Ascattered/disjoint", "Pout|of", "Fapart", "Cso", "Fto|the|back", "Ntwo", "Asecond", "Asecond", "Asecond", "Asecond", "Ntwo|hundred", "Atwo|hundredth", "Atwo|hundredth", "Atwo|hundredth", "Atwo|hundredth", "Atwo|hundredth", "Atwo|hundredth", "Atwo|hundredth", "Atwo|hundredth", "Ntwo|hundredth", "Ntwo|hundredth", "Ntwo|hundredth", "Ntwo|hundredth", "Agroup|of|two|hundred", "Agroups|of|two|hundred", "Agroups|of|two|hundred", "Agroup|of|two|hundred", "Ngroup|of|two|hundred", "Ngroups|of|two|hundred", "Ngroups|of|two|hundred", "Ngroup|of|two|hundred", "Ntwenty", "Atwentieth", "Atwentieth", "Atwentieth", "Atwentieth", "Atwentieth", "Atwentieth", "Atwentieth", "Atwentieth", "Ntwentieth", "Ntwentieth", "Ntwentieth", "Ntwentieth", "Atwentysome", "Atwentysome", "Atwentysome", "Atwentysome", "Ntwentysome", "Ntwentysome", "Ntwentysome", "Ntwentysome", "Fsecondly", "Pduring/while", "Fmeanwhile", "Ntwo|thousand", "Atwo|thousandth", "Atwo|thousandth", "Atwo|thousandth", "Atwo|thousandth", "Atwo|billionth", "Atwo|billionth", "Atwo|billionth", "Atwo|billionth", "Ntwo|billion", "Ntwo|billion", "Ntwo|billion", "Ntwo|billion", "Atwo|billionth", "Atwo|billionth", "Atwo|billionth", "Atwo|billionth", "Ntwo|billionth", "Ntwo|billionth", "Ntwo|billionth", "Ntwo|billionth", "Atwo|millionth", "Atwo|millionth", "Atwo|millionth", "Atwo|millionth", "Atwo|millionth", "Atwo|millionth", "Atwo|millionth", "Atwo|millionth", "Ntwo|million", "Ntwo|million", "Ntwo|million", "Ntwo|million", "Atwo|millionth", "Atwo|millionth", "Atwo|millionth", "Atwo|millionth", "Ntwo|millionth", "Ntwo|millionth", "Ntwo|millionth", "Ntwo|millionth", "Atwo|thousandth", "Atwo|thousandth", "Atwo|thousandth", "Atwo|thousandth", "Ntwo|thousandth", "Ntwo|thousandth", "Ntwo|thousandth", "Ntwo|thousandth", "Ahalf", "Ahalf", "Ahalf", "Ahalf", "Nhalf", "Nhalve", "Nhalve", "Nhalf", "Aduo", "Aduo", "Aduo", "Aduo", "Nduo", "Nduo", "Nduo", "Nduo", "Opossibility", "Apossible", "Abeing|possible", "Abeing|possible", "Abeing|possible", "Abeing|possible", "Obeing|possible", "Obeing|possible", "Apossible", "Apossible", "Apossible", "Abeing|possible", "Abeing|possible", "Abeing|possible", "Abeing|possible", "Oone|being|possible", "Oones|being|possible", "Oones|being|possible", "Oone|being|possible", "Iit|is|possible", "Fmaybe", "Atending|to|be|possible", "Atending|to|be|possible", "Atending|to|be|possible", "Atending|to|be|possible", "Otendency|to|be|possible", "Otendencies|to|be|possible", "Otendencies|to|be|possible", "Otendency|to|be|possible", "Ito|be|possible", "Apossible-making", "Apossible-making", "Apossible-making", "Apossible-making", "Opossible-making", "Opossible-making", "Abecoming|possible", "Abecoming|possible", "Abecoming|possible", "Abecoming|possible", "Obecoming|possible", "Obecoming|possible", "Apreviously|possible", "Apreviously|possible", "Apreviously|possible", "Apreviously|possible", "Opreviously|possible|one", "Opreviously|possible|ones", "Opreviously|possible|ones", "Opreviously|possible|one", "Iit|was|possible", "Aable|to|be|possible", "Aable|to|be|possible", "Aable|to|be|possible", "Aable|to|be|possible", "Opossibility", "Opossibility", "Opossibility", "Opossibility", "Afuture|possible", "Afuture|possible", "Afuture|possible", "Afuture|possible", "Ofuture|possible|one", "Ofuture|possible|ones", "Ofuture|possible|ones", "Ofuture|possible|one", "Iit|will|be|possible", "Iit|should|be|possible", "Awould|be|possible", "Awould|be|possible", "Awould|be|possible", "Awould|be|possible", "Owould|be|possible|one", "Owould|be|possible|ones", "Owould|be|possible|ones", "Owould|be|possible|one", "Iit|would|be|possible", "Aquality", "Aquality", "Aquality", "Aquality", "Oquality", "Oqualitie", "Oqualitie", "Oquality", "Feven", "Abig", "Abig", "Abig", "Abig", "Fextremely", "Aplace", "Aplace", "Aplace", "Aplace", "Oplace", "Oplace", "Oplace", "Oplace", "Ito|start", "Ostart", "Pstarting|from", "Poutside", "Foutside/outward", "Pfrom", "Ftending", "Otendency", "Otendency", "Otendency", "Otendency", "Pin", "Ainternal", "Ainternal", "Ainternal", "Ainternal", "Finside", "Finwards", "Aparticle", "Aparticle", "Aparticle", "Aparticle", "Oparticle/piece", "Oparticle/piece", "Oparticle/piece", "Oparticle/piece", "Aleader", "Aleader", "Aleader", "Aleader", "Oleader", "Oleader", "Oleader", "Oleader", "Alittle", "Alittle", "Alittle", "Alittle", "Fa|little", "Pby", "Pbyxx", "Fshame", "Adisgusting", "Adisgusting", "Adisgusting", "Adisgusting", "Fdisgustingly", "NF", "Faway", "NG", "Zit", "Aits", "Aits", "Aits", "Aits", "Zit", "Pup|to", "Aending", "Aending", "Aending", "Aending", "Oending", "Oending", "Oending", "Oending", "NGx", "Fah", "Fhallelujah", "Fhey", "Fhey", "Fhome", "Fyesterday", "Foh", "Ftoday", "Fahoy", "Fget|going", "Fboo", "Fhurray", "Asome|kind|zqx", "Fsometimes", "Asome|kinds|zqx", "Asome|kinds|zqx", "Ffor|some|reason", "Fsometime", "Asometime", "Fin|some|way", "Asome|kind|zqx", "Okiller", "Amale", "Amale", "Amale", "Amale", "Omale", "Omale", "Omale", "Omale", "Aoffspring", "Aoffspring", "Aoffspring", "Aoffspring", "Ooffspring", "Ooffspring", "Ooffspring", "Ooffspring", "Fsomewhere", "Fsomehow", "Fsomewhere", "Asomeone's", "NX", "Atool", "Atool", "Atool", "Atool", "Zthey", "Atheir", "Atheir", "Atheir", "Atheir", "Zthem", "Otool", "Otool", "Otool", "Otool", "Afemale", "Afemale", "Afemale", "Afemale", "Adeserving", "Adeserving", "Adeserving", "Adeserving", "Fdeservedly", "Ovalue", "Ovalue", "Ovalue", "Ovalue", "Aholder", "Aholder", "Aholder", "Aholder", "Oholder", "Oholder", "Oholder", "Oholder", "Ofemale", "Ofemale", "Ofemale", "Ofemale", "Apast", "Apast", "Apast", "Apast", "Pbetween/among", "Finside/inwards", "Zsomething", "Zsome|thing", "Zsome|thing", "Fsome", "Asome|number|zqx", "Fat|some|time", "Zsomething", "AY", "NY", "Apractice", "Apractice", "Apractice", "Apractice", "Opractice", "Opractice", "Opractice", "Opractice", "Apracticer", "Apracticer", "Apracticer", "Apracticer", "Opracticer", "Opracticer", "Opracticer", "Opracticer", "Asomeone/some", "Asomebody/some", "Asomebody/some", "Asomeone/some", "Findeed", "Falready", "Pon/in", "Fhere's", "Fyes", "NJ", "Cthe", "NJx", "Fjust|now", "Cand", "Cand/or", "Ocapability", "Acapable", "Acapable", "Abeing|capable", "Abeing|capable", "Abeing|capable", "Abeing|capable", "Obeing|capable", "Obeing|capable", "Acapable", "Acapable", "Acapable", "Acapable", "Acapable", "Acapable", "Abeing|capable", "Abeing|capable", "Abeing|capable", "Abeing|capable", "Oone|being|capable", "Oones|being|capable", "Oones|being|capable", "Oone|being|capable", "Iare|capable", "Fcapably", "Fcapably", "Atending|to|be|capable", "Atending|to|be|capable", "Atending|to|be|capable", "Atending|to|be|capable", "Otendency|to|be|capable", "Otendencies|to|be|capable", "Otendencies|to|be|capable", "Otendency|to|be|capable", "Ito|(capable)|be", "Acapable-making", "Acapable-making", "Acapable-making", "Acapable-making", "Ocapable-making", "Ocapable-making", "Abecoming|capable", "Abecoming|capable", "Abecoming|capable", "Abecoming|capable", "Obecoming|capable", "Obecoming|capable", "Apreviously|capable", "Apreviously|capable", "Apreviously|capable", "Apreviously|capable", "Opreviously|capable|one", "Opreviously|capable|ones", "Opreviously|capable|ones", "Opreviously|capable|one", "Iwas|capable", "Aable|to|be|capable", "Aable|to|be|capable", "Aable|to|be|capable", "Aable|to|be|capable", "Ocapability", "Ocapability", "Ocapability", "Ocapability", "Afuture|capable", "Afuture|capable", "Afuture|capable", "Afuture|capable", "Ofuture|capable|one", "Ofuture|capable|ones", "Ofuture|capable|ones", "Ofuture|capable|one", "Iwill|be|capable", "Iit|should|be|capable", "Awould|be|capable", "Awould|be|capable", "Awould|be|capable", "Awould|be|capable", "Owould|be|capable|one", "Owould|be|capable|ones", "Owould|be|capable|ones", "Owould|be|capable|one", "Iwould|be|capable", "Cthatxqyy", "Awhat|kind|zqx", "Awhat|kinds|zqx", "Awhat|kinds|zqx", "Cwhy", "Cwhen", "Fin|what|way", "Awhat|kind|zqx", "Cwhere", "Clike/how", "Cwhere", "Awhose", "Owhat", "Owhat|thing", "Owhat|thing", "Fhow|much/many", "Awhich|number|zqx", "Fwhat|time", "Owhat", "Awho/which", "Awho/which", "Awhom/which", "Awhom/which", "NK", "Pagainst", "Papart|from", "Fetc", "Pwith", "NQ", "Calthough", "Nfour", "Afourth", "Afourth", "Afourth", "Afourth", "Nfour|hundred", "Afour|hundredth", "Afour|hundredth", "Afour|hundredth", "Afour|hundredth", "Afour|hundredth", "Afour|hundredth", "Afour|hundredth", "Afour|hundredth", "Nfour|hundredth", "Nfour|hundredth", "Nfour|hundredth", "Nfour|hundredth", "Agroup|of|four|hundred", "Agroups|of|four|hundred", "Agroups|of|four|hundred", "Agroup|of|four|hundred", "Ngroup|of|four|hundred", "Ngroups|of|four|hundred", "Ngroups|of|four|hundred", "Ngroup|of|four|hundred", "Nforty", "Afortieth", "Afortieth", "Afortieth", "Afortieth", "Afortieth", "Afortieth", "Afortieth", "Afortieth", "Nfortieth", "Nfortieth", "Nfortieth", "Nfortieth", "Afortysome", "Afortysome", "Afortysome", "Afortysome", "Nfortysome", "Nfortysome", "Nfortysome", "Nfortysome", "Ffourthly", "Nfour|thousand", "Afour|thousandth", "Afour|thousandth", "Afour|thousandth", "Afour|thousandth", "Afour|billionth", "Afour|billionth", "Afour|billionth", "Afour|billionth", "Nfour|billion", "Nfour|billion", "Nfour|billion", "Nfour|billion", "Afour|billionth", "Afour|billionth", "Afour|billionth", "Afour|billionth", "Nfour|billionth", "Nfour|billionth", "Nfour|billionth", "Nfour|billionth", "Afour|millionth", "Afour|millionth", "Afour|millionth", "Afour|millionth", "Afour|millionth", "Afour|millionth", "Afour|millionth", "Afour|millionth", "Nfour|million", "Nfour|million", "Nfour|million", "Nfour|million", "Afour|millionth", "Afour|millionth", "Afour|millionth", "Afour|millionth", "Nfour|millionth", "Nfour|millionth", "Nfour|millionth", "Nfour|millionth", "Afour|thousandth", "Afour|thousandth", "Afour|thousandth", "Afour|thousandth", "Nfour|thousandth", "Nfour|thousandth", "Nfour|thousandth", "Nfour|thousandth", "Aquarter", "Aquarter", "Aquarter", "Aquarter", "Nquarter", "Nquarter", "Nquarter", "Nquarter", "Aquartet", "Aquartet", "Aquartet", "Aquartet", "Nquartet", "Nquartet", "Nquartet", "Nquartet", "Cas|if", "Nfive", "Afifth", "Afifth", "Afifth", "Afifth", "Nfive|hundred", "Afive|hundredth", "Afive|hundredth", "Afive|hundredth", "Afive|hundredth", "Afive|hundredth", "Afive|hundredth", "Afive|hundredth", "Afive|hundredth", "Nfive|hundredth", "Nfive|hundredth", "Nfive|hundredth", "Nfive|hundredth", "Agroup|of|five|hundred", "Agroups|of|five|hundred", "Agroups|of|five|hundred", "Agroup|of|five|hundred", "Ngroup|of|five|hundred", "Ngroups|of|five|hundred", "Ngroups|of|five|hundred", "Ngroup|of|five|hundred", "Nfifty", "Afiftieth", "Afiftieth", "Afiftieth", "Afiftieth", "Afiftieth", "Afiftieth", "Afiftieth", "Afiftieth", "Nfiftieth", "Nfiftieth", "Nfiftieth", "Nfiftieth", "Afiftysome", "Afiftysome", "Afiftysome", "Afiftysome", "Nfiftysome", "Nfiftysome", "Nfiftysome", "Nfiftysome", "Ffifthly", "Nfive|thousand", "Afive|thousandth", "Afive|thousandth", "Afive|thousandth", "Afive|thousandth", "Afive|billionth", "Afive|billionth", "Afive|billionth", "Afive|billionth", "Nfive|billion", "Nfive|billion", "Nfive|billion", "Nfive|billion", "Afive|billionth", "Afive|billionth", "Afive|billionth", "Afive|billionth", "Nfive|billionth", "Nfive|billionth", "Nfive|billionth", "Nfive|billionth", "Afive|millionth", "Afive|millionth", "Afive|millionth", "Afive|millionth", "Afive|millionth", "Afive|millionth", "Afive|millionth", "Afive|millionth", "Nfive|million", "Nfive|million", "Nfive|million", "Nfive|million", "Afive|millionth", "Afive|millionth", "Afive|millionth", "Afive|millionth", "Nfive|millionth", "Nfive|millionth", "Nfive|millionth", "Nfive|millionth", "Afive|thousandth", "Afive|thousandth", "Afive|thousandth", "Afive|thousandth", "Nfive|thousandth", "Nfive|thousandth", "Nfive|thousandth", "Nfive|thousandth", "Agroup|of|five|thousand", "Agroups|of|five|thousand", "Agroups|of|five|thousand", "Agroup|of|five|thousand", "Ngroup|of|five|thousand", "Ngroups|of|five|thousand", "Ngroups|of|five|thousand", "Ngroup|of|five|thousand", "Afifth", "Afifth", "Afifth", "Afifth", "Nfifth", "Nfifth", "Nfifth", "Nfifth", "Aquintet", "Aquintet", "Aquintet", "Aquintet", "Nquintet", "Nquintet", "Nquintet", "Nquintet", "Athe", "Paccording|to", "Zhe", "Ahis", "Ahis", "Ahis", "Ahis", "Zhim", "NL", "Pbehind", "Fbackwards", "Fto|the|left", "Pin|spite|of", "Punlike", "Fleast", "Fless", "Punder", "Fdown", "Fcheckmate", "F-self", "ZI", "Amy", "Amy", "Amy", "Amy", "None|thousand", "Aone|thousandth", "Aone|thousandth", "Aone|thousandth", "Aone|thousandth", "Aone|billionth", "Aone|billionth", "Aone|billionth", "Aone|billionth", "None|billion", "None|billion", "None|billion", "None|billion", "Aone|billionth", "Aone|billionth", "Aone|billionth", "Aone|billionth", "None|billionth", "None|billionth", "None|billionth", "None|billionth", "Agroup|of|one|billion", "Agroups|of|one|billion", "Agroups|of|one|billion", "Agroup|of|one|billion", "Ngroup|of|one|billion", "Ngroups|of|one|billion", "Ngroups|of|one|billion", "Ngroup|of|one|billion", "Aone|millionth", "Aone|millionth", "Aone|millionth", "Aone|millionth", "Aone|millionth", "Aone|millionth", "Aone|millionth", "Aone|millionth", "None|million", "None|million", "None|million", "None|million", "Aone|millionth", "Aone|millionth", "Aone|millionth", "Aone|millionth", "None|millionth", "None|millionth", "None|millionth", "None|millionth", "Agroup|of|one|million", "Agroups|of|one|million", "Agroups|of|one|million", "Agroup|of|one|million", "Ngroup|of|one|million", "Ngroups|of|one|million", "Ngroups|of|one|million", "Ngroup|of|one|million", "Aone|thousandth", "Aone|thousandth", "Aone|thousandth", "Aone|thousandth", "None|thousandth", "None|thousandth", "None|thousandth", "None|thousandth", "Agroup|of|one|thousand", "Agroups|of|one|thousand", "Agroups|of|one|thousand", "Agroup|of|one|thousand", "Ngroup|of|one|thousand", "Ngroups|of|one|thousand", "Ngroups|of|one|thousand", "Ngroup|of|one|thousand", "Zme", "Pminus", "NM", "Fdownhill", "Fuphill", "Ftomorrow", "Amuch", "Amany", "Amany", "Amuch", "Fvery|much", "Nnine", "Aninth", "Aninth", "Aninth", "Aninth", "Nnine|hundred", "Anine|hundredth", "Anine|hundredth", "Anine|hundredth", "Anine|hundredth", "Anine|hundredth", "Anine|hundredth", "Anine|hundredth", "Anine|hundredth", "Nnine|hundredth", "Nnine|hundredth", "Nnine|hundredth", "Nnine|hundredth", "Nninety", "Aninetieth", "Aninetieth", "Aninetieth", "Aninetieth", "Aninetieth", "Aninetieth", "Aninetieth", "Aninetieth", "Nninetieth", "Nninetieth", "Nninetieth", "Nninetieth", "Aninetysome", "Aninetysome", "Aninetysome", "Aninetysome", "Nninetysome", "Nninetysome", "Nninetysome", "Nninetysome", "Fninthly", "Nnine|thousand", "Anine|thousandth", "Anine|thousandth", "Anine|thousandth", "Anine|thousandth", "Anine|billionth", "Anine|billionth", "Anine|billionth", "Anine|billionth", "Nnine|billion", "Nnine|billion", "Nnine|billion", "Nnine|billion", "Anine|billionth", "Anine|billionth", "Anine|billionth", "Anine|billionth", "Nnine|billionth", "Nnine|billionth", "Nnine|billionth", "Nnine|billionth", "Anine|millionth", "Anine|millionth", "Anine|millionth", "Anine|millionth", "Anine|millionth", "Anine|millionth", "Anine|millionth", "Anine|millionth", "Nnine|million", "Nnine|million", "Nnine|million", "Nnine|million", "Anine|millionth", "Anine|millionth", "Anine|millionth", "Anine|millionth", "Nnine|millionth", "Nnine|millionth", "Nnine|millionth", "Nnine|millionth", "Anine|thousandth", "Anine|thousandth", "Anine|thousandth", "Anine|thousandth", "Nnine|thousandth", "Nnine|thousandth", "Nnine|thousandth", "Nnine|thousandth", "Aninth", "Aninth", "Aninth", "Aninth", "Nninth", "Nninth", "Nninth", "Nninth", "Aninesome", "Aninesome", "Aninesome", "Aninesome", "Nninesome", "Nninesome", "Nninesome", "Nninesome", "Fnot/no", "Cneither/nor", "Ano|kind|zqx", "Ano|kinds|zqx", "Ano|kinds|zqx", "Ffor|no|reason", "Fnever", "Fin|no|way", "Ano|kind|zqx", "Fnowhere", "Fin|no|way", "Fnowhere", "Anobody's", "Znothing", "Zno|thing", "Zno|thing", "Fnone", "Ano|number|zqx", "Fat|no|time", "Znothing", "Ano|one/none", "Anone/no", "Anone/no", "Ano|one/none", "Zwe", "Aour", "Aour", "Aour", "Aour", "Zus", "NN", "Fwell", "Nzero", "Azeroeth", "Azeroeth", "Azeroeth", "Azeroeth", "Azerosome", "Azerosome", "Azerosome", "Azerosome", "Nzerosome", "Nzerosome", "Nzerosome", "Nzerosome", "Fnow", "Acurrent", "Acurrent", "Acurrent", "Acurrent", "Fonly", "Amere", "Amere", "Amere", "Amere", "F's", "Neight", "Aeighth", "Aeighth", "Aeighth", "Aeighth", "Neight|hundred", "Aeight|hundredth", "Aeight|hundredth", "Aeight|hundredth", "Aeight|hundredth", "Aeight|hundredth", "Aeight|hundredth", "Aeight|hundredth", "Aeight|hundredth", "Neight|hundredth", "Neight|hundredth", "Neight|hundredth", "Neight|hundredth", "Neighty", "Aeightieth", "Aeightieth", "Aeightieth", "Aeightieth", "Aeightieth", "Aeightieth", "Aeightieth", "Aeightieth", "Neightieth", "Neightieth", "Neightieth", "Neightieth", "Aeightysome", "Aeightysome", "Aeightysome", "Aeightysome", "Neightysome", "Neightysome", "Neightysome", "Neightysome", "Feighthly", "Fokay", "Neight|thousand", "Aeight|thousandth", "Aeight|thousandth", "Aeight|thousandth", "Aeight|thousandth", "Aeight|billionth", "Aeight|billionth", "Aeight|billionth", "Aeight|billionth", "Neight|billion", "Neight|billion", "Neight|billion", "Neight|billion", "Aeight|billionth", "Aeight|billionth", "Aeight|billionth", "Aeight|billionth", "Neight|billionth", "Neight|billionth", "Neight|billionth", "Neight|billionth", "Aeight|millionth", "Aeight|millionth", "Aeight|millionth", "Aeight|millionth", "Aeight|millionth", "Aeight|millionth", "Aeight|millionth", "Aeight|millionth", "Neight|million", "Neight|million", "Neight|million", "Neight|million", "Aeight|millionth", "Aeight|millionth", "Aeight|millionth", "Aeight|millionth", "Neight|millionth", "Neight|millionth", "Neight|millionth", "Neight|millionth", "Aeight|thousandth", "Aeight|thousandth", "Aeight|thousandth", "Aeight|thousandth", "Neight|thousandth", "Neight|thousandth", "Neight|thousandth", "Neight|thousandth", "Aeighth", "Aeighth", "Aeighth", "Aeighth", "Neighth", "Neighth", "Neighth", "Neighth", "Aoctet", "Aoctet", "Aoctet", "Aoctet", "Noctet", "Noctet", "Noctet", "Noctet", "Pthan", "Afraction", "Afraction", "Afraction", "Afraction", "Zone", "Aone's", "Aone's", "Aone's", "Aone's", "Zone", "Nfraction", "Nfraction", "Nfraction", "Nfraction", "Afuture", "Afuture", "Afuture", "Afuture", "Ogroup", "Ogroup", "Ogroup", "Ogroup", "Pwith", "Pthroughxx", "Fmost", "Fmore", "Fmore|or|less", "Fmorewqz", "Pplus", "Peach/at|the|rate|of", "Aper-unit", "Aper-unit", "Aper-unit", "Aper-unit", "Pin|order/for", "Pafter/behind", "Fback", "Fthe|day|after|tomorrow", "Aable", "Abeing|able", "Abeing|able", "Abeing|able", "Abeing|able", "Obeing|able", "Obeing|able", "Aable", "Aable", "Aable", "Abeing|able", "Abeing|able", "Abeing|able", "Abeing|able", "Oone|being|able", "Oones|being|able", "Oones|being|able", "Oone|being|able", "Ican", "Fably", "Atending|to|be|able", "Atending|to|be|able", "Atending|to|be|able", "Atending|to|be|able", "Otendency|to|be|able", "Otendencies|to|be|able", "Otendencies|to|be|able", "Otendency|to|be|able", "Ito|be|able", "Aable-making", "Aable-making", "Aable-making", "Aable-making", "Oable-making", "Oable-making", "Abecoming|able", "Abecoming|able", "Abecoming|able", "Abecoming|able", "Obecoming|able", "Obecoming|able", "Apreviously|able", "Apreviously|able", "Apreviously|able", "Apreviously|able", "Opreviously|able|one", "Opreviously|able|ones", "Opreviously|able|ones", "Opreviously|able|one", "Icould", "Opower", "Opower", "Opower", "Opower", "Agoing|to|be|able", "Agoing|to|be|able", "Agoing|to|be|able", "Agoing|to|be|able", "Ofuture|able|one", "Ofuture|able|ones", "Ofuture|able|ones", "Ofuture|able|one", "Iwill|be|able", "Ishould|be|able", "Awould|be|able", "Awould|be|able", "Awould|be|able", "Awould|be|able", "Owould|be|able|one", "Owould|be|able|ones", "Owould|be|able|ones", "Owould|be|able|one", "Iwould|be|able", "Aprimordial", "Aprimordial", "Aprimordial", "Aprimordial", "Fprimordially", "Falmost", "Pbeyond", "Pabout", "Pbecause|of", "NQ", "Arepeated", "Arepeated", "Arepeated", "Arepeated", "Fagain", "Fback", "NR", "Fhello", "Cjust|like", "Cif", "Cbut", "Pwithout", "Nseven", "Aseventh", "Aseventh", "Aseventh", "Aseventh", "Nseven|hundred", "Aseven|hundredth", "Aseven|hundredth", "Aseven|hundredth", "Aseven|hundredth", "Aseven|hundredth", "Aseven|hundredth", "Aseven|hundredth", "Aseven|hundredth", "Nseven|hundredth", "Nseven|hundredth", "Nseven|hundredth", "Nseven|hundredth", "Nseventy", "Aseventieth", "Aseventieth", "Aseventieth", "Aseventieth", "Aseventieth", "Aseventieth", "Aseventieth", "Aseventieth", "Nseventieth", "Nseventieth", "Nseventieth", "Nseventieth", "Aseventysome", "Aseventysome", "Aseventysome", "Aseventysome", "Nseventysome", "Nseventysome", "Nseventysome", "Nseventysome", "Fseventhly", "Nseven|thousand", "Aseven|thousandth", "Aseven|thousandth", "Aseven|thousandth", "Aseven|thousandth", "Aseven|billionth", "Aseven|billionth", "Aseven|billionth", "Aseven|billionth", "Nseven|billion", "Nseven|billion", "Nseven|billion", "Nseven|billion", "Aseven|billionth", "Aseven|billionth", "Aseven|billionth", "Aseven|billionth", "Nseven|billionth", "Nseven|billionth", "Nseven|billionth", "Nseven|billionth", "Aseven|millionth", "Aseven|millionth", "Aseven|millionth", "Aseven|millionth", "Aseven|millionth", "Aseven|millionth", "Aseven|millionth", "Aseven|millionth", "Nseven|million", "Nseven|million", "Nseven|million", "Nseven|million", "Aseven|millionth", "Aseven|millionth", "Aseven|millionth", "Aseven|millionth", "Nseven|millionth", "Nseven|millionth", "Nseven|millionth", "Nseven|millionth", "Aseven|thousandth", "Aseven|thousandth", "Aseven|thousandth", "Aseven|thousandth", "Nseven|thousandth", "Nseven|thousandth", "Nseven|thousandth", "Nseven|thousandth", "Aseventh", "Aseventh", "Aseventh", "Aseventh", "Nseventh", "Nseventh", "Nseventh", "Nseventh", "Aseptet", "Aseptet", "Aseptet", "Aseptet", "Nseptet", "Nseptet", "Nseptet", "Nseptet", "Nsix", "Asixth", "Asixth", "Asixth", "Asixth", "Nsix|hundred", "Asix|hundredth", "Asix|hundredth", "Asix|hundredth", "Asix|hundredth", "Asix|hundredth", "Asix|hundredth", "Asix|hundredth", "Asix|hundredth", "Nsix|hundredth", "Nsix|hundredth", "Nsix|hundredth", "Nsix|hundredth", "Nsixty", "Asixtieth", "Asixtieth", "Asixtieth", "Asixtieth", "Asixtieth", "Asixtieth", "Asixtieth", "Asixtieth", "Nsixtieth", "Nsixtieth", "Nsixtieth", "Nsixtieth", "Asixtysome", "Asixtysome", "Asixtysome", "Asixtysome", "Nsixtysome", "Nsixtysome", "Nsixtysome", "Nsixtysome", "Fsixthly", "Nsix|thousand", "Asix|thousandth", "Asix|thousandth", "Asix|thousandth", "Asix|thousandth", "Asix|billionth", "Asix|billionth", "Asix|billionth", "Asix|billionth", "Nsix|billion", "Nsix|billion", "Nsix|billion", "Nsix|billion", "Asix|billionth", "Asix|billionth", "Asix|billionth", "Asix|billionth", "Nsix|billionth", "Nsix|billionth", "Nsix|billionth", "Nsix|billionth", "Asix|millionth", "Asix|millionth", "Asix|millionth", "Asix|millionth", "Asix|millionth", "Asix|millionth", "Asix|millionth", "Asix|millionth", "Nsix|million", "Nsix|million", "Nsix|million", "Nsix|million", "Asix|millionth", "Asix|millionth", "Asix|millionth", "Asix|millionth", "Nsix|millionth", "Nsix|millionth", "Nsix|millionth", "Nsix|millionth", "Asix|thousandth", "Asix|thousandth", "Asix|thousandth", "Asix|thousandth", "Nsix|thousandth", "Nsix|thousandth", "Nsix|thousandth", "Nsix|thousandth", "Asixth", "Asixth", "Asixth", "Asixth", "Nsixth", "Nsixth", "Nsixth", "Nsixth", "Asextet", "Asextet", "Asextet", "Asextet", "Nsextet", "Nsextet", "Nsextet", "Nsextet", "Zhimself/herself/itself/themselves", "Ahis/her/its/their|own", "Ahis/her/its/their|own", "Ahis/her/its/their|own", "Ahis/her/its/their|own", "Fconsequently", "Zhimself/herself/itself/themselves", "NS", "Punder", "Alower", "Alower", "Alower", "Alower", "Funderneath", "Fdown/underneath", "Pabove", "Aupper", "Aupper", "Aupper", "Aupper", "Fupstairs/above", "Fup", "Otop", "Otop", "Otop", "Otop", "Pon", "Zshe", "Aher", "Aher", "Aher", "Aher", "Zher", "Fhowever", "Athat|kind|zqx", "Athose|kinds|zqx", "Athose|kinds|zqx", "Fso/therefore", "Fat|that|time", "Fthusly", "Athat|kind|zqx", "Fthere", "Ayonder", "Ayonder", "Ayonder", "Ayonder", "Fas/that|way", "Fthere", "Athat|one's", "Ftick-tock", "Zthat", "Zthose", "Zthose", "Fso|much/many", "Athat|number|zqx", "Zthat", "Athat", "Athose", "Athose", "Athat", "NT", "Pthrough", "Fthrough", "Pon|the|other|side|of", "Fon|the|other|side", "Fvery", "Nthree", "Athird", "Athird", "Athird", "Athird", "Nthree|hundred", "Athree|hundredth", "Athree|hundredth", "Athree|hundredth", "Athree|hundredth", "Athree|hundredth", "Athree|hundredth", "Athree|hundredth", "Athree|hundredth", "Nthree|hundredth", "Nthree|hundredth", "Nthree|hundredth", "Nthree|hundredth", "Agroup|of|three|hundred", "Agroups|of|three|hundred", "Agroups|of|three|hundred", "Agroup|of|three|hundred", "Ngroup|of|three|hundred", "Ngroups|of|three|hundred", "Ngroups|of|three|hundred", "Ngroup|of|three|hundred", "Nthirty", "Athirtieth", "Athirtieth", "Athirtieth", "Athirtieth", "Athirtieth", "Athirtieth", "Athirtieth", "Athirtieth", "Nthirtieth", "Nthirtieth", "Nthirtieth", "Nthirtieth", "Athirtysome", "Athirtysome", "Athirtysome", "Athirtysome", "Nthirtysome", "Nthirtysome", "Nthirtysome", "Nthirtysome", "Fthirdly", "Nthree|thousand", "Athree|thousandth", "Athree|thousandth", "Athree|thousandth", "Athree|thousandth", "Athree|billionth", "Athree|billionth", "Athree|billionth", "Athree|billionth", "Nthree|billion", "Nthree|billion", "Nthree|billion", "Nthree|billion", "Athree|billionth", "Athree|billionth", "Athree|billionth", "Athree|billionth", "Nthree|billionth", "Nthree|billionth", "Nthree|billionth", "Nthree|billionth", "Athree|millionth", "Athree|millionth", "Athree|millionth", "Athree|millionth", "Athree|millionth", "Athree|millionth", "Athree|millionth", "Athree|millionth", "Nthree|million", "Nthree|million", "Nthree|million", "Nthree|million", "Athree|millionth", "Athree|millionth", "Athree|millionth", "Athree|millionth", "Nthree|millionth", "Nthree|millionth", "Nthree|millionth", "Nthree|millionth", "Athree|thousandth", "Athree|thousandth", "Athree|thousandth", "Athree|thousandth", "Nthree|thousandth", "Nthree|thousandth", "Nthree|thousandth", "Nthree|thousandth", "Athird", "Athird", "Athird", "Athird", "Nthird", "Nthird", "Nthird", "Nthird", "Atrio", "Atrio", "Atrio", "Atrio", "Ntrio", "Ntrio", "Ntrio", "Ntrio", "Ftoo", "Atoo|much", "Atoo|many", "Atoo|many", "Atoo|much", "Ftoo|much", "Fimmediately", "Aimmediate", "Aimmediate", "Aimmediate", "Aimmediate", "Acontainer", "Acontainer", "Acontainer", "Acontainer", "Ocontainer", "Ocontainer", "Ocontainer", "Ocontainer", "Ofemale", "Ofemale", "Ofemale", "Ofemale", "Oindividual", "Oindividual", "Oindividual", "Oindividual", "Owhatchamacallit", "Owhatchamacallit", "Owhatchamacallit", "Owhatchamacallit", "Awould-be", "Awould-be", "Awould-be", "Awould-be", "None", "Afirst", "Afirst", "Afirst", "Afirst", "Ffirst", "Nsome", "Awhole", "Awhole", "Awhole", "Awhole", "Nwhole", "Nwhole", "Nwhole", "Nwhole", "Asingle", "Asingle", "Asingle", "Asingle", "Nsingle", "Nsingle", "Nsingle", "Nsingle", "Fdarn|it", "Zyou", "Ayour", "Ayour", "Ayour", "Ayour", "Zyou", "NV", "Awilling/voluntary", "Awilling/voluntary", "Awilling/voluntary", "Awilling/voluntary", "Awilling/glad", "Awilling/glad", "Awilling/glad", "Awilling/glad", "Owisher", "Owisher", "Owisher", "Owisher", "Iwant", "Awanted", "Awanted", "Awanted", "Awanted", "Owanted|one", "Owanted|one", "Owanted|one", "Owanted|one", "Fwillingly", "Fwishingly", "Ito|want", "Apreviously|wishing", "Apreviously|wishing", "Apreviously|wishing", "Apreviously|wishing", "Opreviously|wisher", "Opreviously|wisher", "Opreviously|wisher", "Opreviously|wisher", "Iwanted", "Apreviously|wanted", "Apreviously|wanted", "Apreviously|wanted", "Apreviously|wanted", "Opreviously|wanted|one", "Opreviously|wanted|one", "Opreviously|wanted|one", "Opreviously|wanted|one", "Owill/wish", "Owish/will", "Owill/wish", "Owish/will", "Owill/wish", "Owish/will", "Owill/wish", "Owish/will", "Agoing|to|wish", "Agoing|to|wish", "Agoing|to|wish", "Agoing|to|wish", "Ogoing|to|be|wisher", "Ogoing|to|be|wisher", "Ogoing|to|be|wisher", "Ogoing|to|be|wisher", "Iwill|want", "Agoing|to|be|wanted", "Agoing|to|be|wanted", "Agoing|to|be|wanted", "Agoing|to|be|wanted", "Ogoing|to|be|wanted|one", "Ogoing|to|be|wanted|one", "Ogoing|to|be|wanted|one", "Ogoing|to|be|wanted|one", "Ishould|want", "Awould|be|wishing", "Awould|be|wishing", "Awould|be|wishing", "Awould|be|wishing", "Owould|be|wisher", "Owould|be|wisher", "Owould|be|wisher", "Owould|be|wisher", "Iwould|wish", "Awould|be|wanted", "Awould|be|wanted", "Awould|be|wanted", "Awould|be|wanted", "Owould|be|wanted|one", "Owould|be|wanted|one", "Owould|be|wanted|one", "Owould|be|wanted|one", "NZ", "Fzzix|it", "Fzzwx|it", "Iwants" };
static string esperantoNonalterables[] = { "acxa", "acxaj", "acxajn", "acxan", "acxe", "ada", "adaj", "adajn", "adan", "adanta", "adantaj", "adantajn", "adantan", "adanto", "adantoj", "adantojn", "adanton", "adas", "adata", "adataj", "adatajn", "adatan", "adato", "adatoj", "adatojn", "adaton", "ade", "adi", "adiaux", "adinta", "adintaj", "adintajn", "adintan", "adinto", "adintoj", "adintojn", "adinton", "adis", "adita", "aditaj", "aditajn", "aditan", "adito", "aditoj", "aditojn", "aditon", "ado", "adoj", "adojn", "adon", "adonta", "adontaj", "adontajn", "adontan", "adonto", "adontoj", "adontojn", "adonton", "ados", "adota", "adotaj", "adotajn", "adotan", "adoto", "adotoj", "adotojn", "adoton", "adu", "adunta", "aduntaj", "aduntajn", "aduntan", "adunto", "aduntoj", "aduntojn", "adunton", "adus", "aduta", "adutaj", "adutajn", "adutan", "aduto", "adutoj", "adutojn", "aduton", "ahx", "aj", "ajn", "ajxa", "ajxaj", "ajxajn", "ajxan", "ajxo", "ajxoj", "ajxojn", "ajxon", "al", "alie", "almenaux", "ambaux", "an", "ana", "anaj", "anajn", "anan", "ankaux", "ankoraux", "ano", "anoj", "anojn", "anon", "anstataux", "anta", "antaj", "antajn", "antan", "antaux", "antauxen", "antauxhieraux", "apenaux", "apud", "ara", "araj", "arajn", "aran", "are", "aro", "aroj", "arojn", "aron", "aux", "ba", "baldaux", "bis", "bo", "bonvolu", "bv", "cent", "centa", "centaj", "centajn", "centan", "centmil", "centmila", "centmilaj", "centmilajn", "centmilan", "centona", "centonaj", "centonajn", "centonan", "centono", "centonoj", "centonojn", "centonon", "centopa", "centopaj", "centopajn", "centopan", "centopo", "centopoj", "centopojn", "centopon", "ci", "cia", "ciaj", "ciajn", "cian", "cin", "co", "cxar", "cxe", "cxefa", "cxefaj", "cxefajn", "cxefan", "cxefe", "cxi", "cxia", "cxiafoje", "cxiaj", "cxiajn", "cxial", "cxiam", "cxiamaniere", "cxian", "cxie", "cxiel", "cxien", "cxies", "cxio", "cxioj", "cxiojn", "cxiom", "cxioma", "cxiomaj|horoj", "cxion", "cxirkaux", "cxiu", "cxiuj", "cxiujn", "cxiun", "cxo", "cxu", "da", "de", "dek", "deka", "dekaj", "dekajn", "dekan", "deke", "dekmil", "dekmila", "dekmilaj", "dekmilajn", "dekmilan", "dekona", "dekonaj", "dekonajn", "dekonan", "dekono", "dekonoj", "dekonojn", "dekonon", "dekopa", "dekopaj", "dekopajn", "dekopan", "dekopo", "dekopoj", "dekopojn", "dekopon", "dekstren", "depost", "des", "dis", "disa", "disaj", "disajn", "disan", "disde", "dise", "do", "dorsen", "du", "dua", "duaj", "duajn", "duan", "ducent", "ducenta", "ducentaj", "ducentajn", "ducentan", "ducentona", "ducentonaj", "ducentonajn", "ducentonan", "ducentono", "ducentonoj", "ducentonojn", "ducentonon", "ducentopa", "ducentopaj", "ducentopajn", "ducentopan", "ducentopo", "ducentopoj", "ducentopojn", "ducentopon", "dudek", "dudeka", "dudekaj", "dudekajn", "dudekan", "dudekona", "dudekonaj", "dudekonajn", "dudekonan", "dudekono", "dudekonoj", "dudekonojn", "dudekonon", "dudekopa", "dudekopaj", "dudekopajn", "dudekopan", "dudekopo", "dudekopoj", "dudekopojn", "dudekopon", "due", "dum", "dume", "dumil", "dumila", "dumilaj", "dumilajn", "dumilan", "dumiliarda", "dumiliardaj", "dumiliardajn", "dumiliardan", "dumiliardo", "dumiliardoj", "dumiliardojn", "dumiliardon", "dumiliardona", "dumiliardonaj", "dumiliardonajn", "dumiliardonan", "dumiliardono", "dumiliardonoj", "dumiliardonojn", "dumiliardonon", "dumiliona", "dumiliona", "dumilionaj", "dumilionaj", "dumilionajn", "dumilionajn", "dumilionan", "dumilionan", "dumiliono", "dumilionoj", "dumilionojn", "dumilionon", "dumilionona", "dumiliononaj", "dumiliononajn", "dumiliononan", "dumilionono", "dumiliononoj", "dumiliononojn", "dumiliononon", "dumilona", "dumilonaj", "dumilonajn", "dumilonan", "dumilono", "dumilonoj", "dumilonojn", "dumilonon", "duona", "duonaj", "duonajn", "duonan", "duono", "duonoj", "duonojn", "duonon", "duopa", "duopaj", "duopajn", "duopan", "duopo", "duopoj", "duopojn", "duopon", "ebl", "ebla", "eblada", "ebladaj", "ebladajn", "ebladan", "eblado", "ebladon", "eblaj", "eblajn", "eblan", "eblanta", "eblantaj", "eblantajn", "eblantan", "eblanto", "eblantoj", "eblantojn", "eblanton", "eblas", "eble", "eblema", "eblemaj", "eblemajn", "ebleman", "eblemo", "eblemoj", "eblemojn", "eblemon", "ebli", "ebliga", "ebligaj", "ebligajn", "ebligan", "ebligo", "ebligon", "ebligxa", "ebligxaj", "ebligxajn", "ebligxan", "ebligxo", "ebligxon", "eblinta", "eblintaj", "eblintajn", "eblintan", "eblinto", "eblintoj", "eblintojn", "eblinton", "eblis", "ebliva", "eblivaj", "eblivajn", "eblivan", "eblo", "ebloj", "eblojn", "eblon", "eblonta", "eblontaj", "eblontajn", "eblontan", "eblonto", "eblontoj", "eblontojn", "eblonton", "eblos", "eblu", "eblunta", "ebluntaj", "ebluntajn", "ebluntan", "eblunto", "ebluntoj", "ebluntojn", "eblunton", "eblus", "eca", "ecaj", "ecajn", "ecan", "eco", "ecoj", "ecojn", "econ", "ecx", "ega", "egaj", "egajn", "egan", "ege", "eja", "ejaj", "ejajn", "ejan", "ejo", "ejoj", "ejojn", "ejon", "ek", "ek", "ekde", "ekster", "eksteren", "el", "eme", "emo", "emoj", "emojn", "emon", "en", "ena", "enaj", "enajn", "enan", "ene", "enen", "era", "eraj", "erajn", "eran", "ero", "eroj", "erojn", "eron", "estra", "estraj", "estrajn", "estran", "estro", "estroj", "estrojn", "estron", "eta", "etaj", "etajn", "etan", "ete", "far", "fare", "fi", "fia", "fiaj", "fiajn", "fian", "fie", "fo", "for", "go", "gxi", "gxia", "gxiaj", "gxiajn", "gxian", "gxin", "gxis", "gxisa", "gxisaj", "gxisajn", "gxisan", "gxiso", "gxisoj", "gxisojn", "gxison", "gxo", "ha", "haleluja", "he", "hej", "hejmen", "hieraux", "ho", "hodiaux", "hoj", "hop", "hu", "hura", "ia", "iafoje", "iaj", "iajn", "ial", "iam", "iama", "iamaniere", "ian", "icido", "icxa", "icxaj", "icxajn", "icxan", "icxo", "icxoj", "icxojn", "icxon", "ida", "idaj", "idajn", "idan", "ido", "idoj", "idojn", "idon", "ie", "iel", "ien", "ies", "ikso", "ila", "ilaj", "ilajn", "ilan", "ili", "ilia", "iliaj", "iliajn", "ilian", "ilin", "ilo", "iloj", "ilojn", "ilon", "ina", "inaj", "inajn", "inan", "inda", "indaj", "indajn", "indan", "inde", "indo", "indoj", "indojn", "indon", "inga", "ingaj", "ingajn", "ingan", "ingo", "ingoj", "ingojn", "ingon", "ino", "inoj", "inojn", "inon", "inta", "intaj", "intajn", "intan", "inter", "internen", "io", "ioj", "iojn", "iom", "ioma", "ioma|horo", "ion", "ipsilona", "ipsilono", "isma", "ismaj", "ismajn", "isman", "ismo", "ismoj", "ismojn", "ismon", "ista", "istaj", "istajn", "istan", "isto", "istoj", "istojn", "iston", "iu", "iuj", "iujn", "iun", "ja", "jam", "je", "jen", "jes", "jo", "ju", "jxo", "jxus", "kaj", "kajaux", "kapabl", "kapabla", "kapabla", "kapablada", "kapabladaj", "kapabladajn", "kapabladan", "kapablado", "kapabladon", "kapablaj", "kapablaj", "kapablajn", "kapablajn", "kapablan", "kapablan", "kapablanta", "kapablantaj", "kapablantajn", "kapablantan", "kapablanto", "kapablantoj", "kapablantojn", "kapablanton", "kapablas", "kapable", "kapable", "kapablema", "kapablemaj", "kapablemajn", "kapableman", "kapablemo", "kapablemoj", "kapablemojn", "kapablemon", "kapabli", "kapabliga", "kapabligaj", "kapabligajn", "kapabligan", "kapabligo", "kapabligon", "kapabligxa", "kapabligxaj", "kapabligxajn", "kapabligxan", "kapabligxo", "kapabligxon", "kapablinta", "kapablintaj", "kapablintajn", "kapablintan", "kapablinto", "kapablintoj", "kapablintojn", "kapablinton", "kapablis", "kapabliva", "kapablivaj", "kapablivajn", "kapablivan", "kapablo", "kapabloj", "kapablojn", "kapablon", "kapablonta", "kapablontaj", "kapablontajn", "kapablontan", "kapablonto", "kapablontoj", "kapablontojn", "kapablonton", "kapablos", "kapablu", "kapablunta", "kapabluntaj", "kapabluntajn", "kapabluntan", "kapablunto", "kapabluntoj", "kapabluntojn", "kapablunton", "kapablus", "ke", "kia", "kiaj", "kiajn", "kial", "kiam", "kiamaniere", "kian", "kie", "kiel", "kien", "kies", "kio", "kioj", "kiojn", "kiom", "kioma", "kioma|horo", "kion", "kiu", "kiuj", "kiujn", "kiun", "ko", "kontraux", "krom", "ktp", "kun", "kuo", "kvankam", "kvar", "kvara", "kvaraj", "kvarajn", "kvaran", "kvarcent", "kvarcenta", "kvarcentaj", "kvarcentajn", "kvarcentan", "kvarcentona", "kvarcentonaj", "kvarcentonajn", "kvarcentonan", "kvarcentono", "kvarcentonoj", "kvarcentonojn", "kvarcentonon", "kvarcentopa", "kvarcentopaj", "kvarcentopajn", "kvarcentopan", "kvarcentopo", "kvarcentopoj", "kvarcentopojn", "kvarcentopon", "kvardek", "kvardeka", "kvardekaj", "kvardekajn", "kvardekan", "kvardekona", "kvardekonaj", "kvardekonajn", "kvardekonan", "kvardekono", "kvardekonoj", "kvardekonojn", "kvardekonon", "kvardekopa", "kvardekopaj", "kvardekopajn", "kvardekopan", "kvardekopo", "kvardekopoj", "kvardekopojn", "kvardekopon", "kvare", "kvarmil", "kvarmila", "kvarmilaj", "kvarmilajn", "kvarmilan", "kvarmiliarda", "kvarmiliardaj", "kvarmiliardajn", "kvarmiliardan", "kvarmiliardo", "kvarmiliardoj", "kvarmiliardojn", "kvarmiliardon", "kvarmiliardona", "kvarmiliardonaj", "kvarmiliardonajn", "kvarmiliardonan", "kvarmiliardono", "kvarmiliardonoj", "kvarmiliardonojn", "kvarmiliardonon", "kvarmiliona", "kvarmiliona", "kvarmilionaj", "kvarmilionaj", "kvarmilionajn", "kvarmilionajn", "kvarmilionan", "kvarmilionan", "kvarmiliono", "kvarmilionoj", "kvarmilionojn", "kvarmilionon", "kvarmilionona", "kvarmiliononaj", "kvarmiliononajn", "kvarmiliononan", "kvarmilionono", "kvarmiliononoj", "kvarmiliononojn", "kvarmiliononon", "kvarmilona", "kvarmilonaj", "kvarmilonajn", "kvarmilonan", "kvarmilono", "kvarmilonoj", "kvarmilonojn", "kvarmilonon", "kvarona", "kvaronaj", "kvaronajn", "kvaronan", "kvarono", "kvaronoj", "kvaronojn", "kvaronon", "kvaropa", "kvaropaj", "kvaropajn", "kvaropan", "kvaropo", "kvaropoj", "kvaropojn", "kvaropon", "kvazaux", "kvin", "kvina", "kvinaj", "kvinajn", "kvinan", "kvincent", "kvincenta", "kvincentaj", "kvincentajn", "kvincentan", "kvincentona", "kvincentonaj", "kvincentonajn", "kvincentonan", "kvincentono", "kvincentonoj", "kvincentonojn", "kvincentonon", "kvincentopa", "kvincentopaj", "kvincentopajn", "kvincentopan", "kvincentopo", "kvincentopoj", "kvincentopojn", "kvincentopon", "kvindek", "kvindeka", "kvindekaj", "kvindekajn", "kvindekan", "kvindekona", "kvindekonaj", "kvindekonajn", "kvindekonan", "kvindekono", "kvindekonoj", "kvindekonojn", "kvindekonon", "kvindekopa", "kvindekopaj", "kvindekopajn", "kvindekopan", "kvindekopo", "kvindekopoj", "kvindekopojn", "kvindekopon", "kvine", "kvinmil", "kvinmila", "kvinmilaj", "kvinmilajn", "kvinmilan", "kvinmiliarda", "kvinmiliardaj", "kvinmiliardajn", "kvinmiliardan", "kvinmiliardo", "kvinmiliardoj", "kvinmiliardojn", "kvinmiliardon", "kvinmiliardona", "kvinmiliardonaj", "kvinmiliardonajn", "kvinmiliardonan", "kvinmiliardono", "kvinmiliardonoj", "kvinmiliardonojn", "kvinmiliardonon", "kvinmiliona", "kvinmiliona", "kvinmilionaj", "kvinmilionaj", "kvinmilionajn", "kvinmilionajn", "kvinmilionan", "kvinmilionan", "kvinmiliono", "kvinmilionoj", "kvinmilionojn", "kvinmilionon", "kvinmilionona", "kvinmiliononaj", "kvinmiliononajn", "kvinmiliononan", "kvinmilionono", "kvinmiliononoj", "kvinmiliononojn", "kvinmiliononon", "kvinmilona", "kvinmilonaj", "kvinmilonajn", "kvinmilonan", "kvinmilono", "kvinmilonoj", "kvinmilonojn", "kvinmilonon", "kvinmilopa", "kvinmilopaj", "kvinmilopajn", "kvinmilopan", "kvinmilopo", "kvinmilopoj", "kvinmilopojn", "kvinmilopon", "kvinona", "kvinonaj", "kvinonajn", "kvinonan", "kvinono", "kvinonoj", "kvinonojn", "kvinonon", "kvinopa", "kvinopaj", "kvinopajn", "kvinopan", "kvinopo", "kvinopoj", "kvinopojn", "kvinopon", "la", "laux", "li", "lia", "liaj", "liajn", "lian", "lin", "lo", "malantaux", "malantauxen", "maldekstren", "malgraux", "malkiel", "malplej", "malpli", "malsuper", "malsupren", "mat", "mem", "mi", "mia", "miaj", "miajn", "mian", "mil", "mila", "milaj", "milajn", "milan", "miliarda", "miliardaj", "miliardajn", "miliardan", "miliardo", "miliardoj", "miliardojn", "miliardon", "miliardona", "miliardonaj", "miliardonajn", "miliardonan", "miliardono", "miliardonoj", "miliardonojn", "miliardonon", "miliardopa", "miliardopaj", "miliardopajn", "miliardopan", "miliardopo", "miliardopoj", "miliardopojn", "miliardopon", "miliona", "miliona", "milionaj", "milionaj", "milionajn", "milionajn", "milionan", "milionan", "miliono", "milionoj", "milionojn", "milionon", "milionona", "miliononaj", "miliononajn", "miliononan", "milionono", "miliononoj", "miliononojn", "miliononon", "milionopa", "milionopaj", "milionopajn", "milionopan", "milionopo", "milionopoj", "milionopojn", "milionopon", "milona", "milonaj", "milonajn", "milonan", "milono", "milonoj", "milonojn", "milonon", "milopa", "milopaj", "milopajn", "milopan", "milopo", "milopoj", "milopojn", "milopon", "min", "minus", "mo", "montsuben", "montsupren", "morgaux", "multa", "multaj", "multajn", "multan", "multe", "naux", "nauxa", "nauxaj", "nauxajn", "nauxan", "nauxcent", "nauxcenta", "nauxcentaj", "nauxcentajn", "nauxcentan", "nauxcentona", "nauxcentonaj", "nauxcentonajn", "nauxcentonan", "nauxcentono", "nauxcentonoj", "nauxcentonojn", "nauxcentonon", "nauxdek", "nauxdeka", "nauxdekaj", "nauxdekajn", "nauxdekan", "nauxdekona", "nauxdekonaj", "nauxdekonajn", "nauxdekonan", "nauxdekono", "nauxdekonoj", "nauxdekonojn", "nauxdekonon", "nauxdekopa", "nauxdekopaj", "nauxdekopajn", "nauxdekopan", "nauxdekopo", "nauxdekopoj", "nauxdekopojn", "nauxdekopon", "nauxe", "nauxmil", "nauxmila", "nauxmilaj", "nauxmilajn", "nauxmilan", "nauxmiliarda", "nauxmiliardaj", "nauxmiliardajn", "nauxmiliardan", "nauxmiliardo", "nauxmiliardoj", "nauxmiliardojn", "nauxmiliardon", "nauxmiliardona", "nauxmiliardonaj", "nauxmiliardonajn", "nauxmiliardonan", "nauxmiliardono", "nauxmiliardonoj", "nauxmiliardonojn", "nauxmiliardonon", "nauxmiliona", "nauxmiliona", "nauxmilionaj", "nauxmilionaj", "nauxmilionajn", "nauxmilionajn", "nauxmilionan", "nauxmilionan", "nauxmiliono", "nauxmilionoj", "nauxmilionojn", "nauxmilionon", "nauxmilionona", "nauxmiliononaj", "nauxmiliononajn", "nauxmiliononan", "nauxmilionono", "nauxmiliononoj", "nauxmiliononojn", "nauxmiliononon", "nauxmilona", "nauxmilonaj", "nauxmilonajn", "nauxmilonan", "nauxmilono", "nauxmilonoj", "nauxmilonojn", "nauxmilonon", "nauxona", "nauxonaj", "nauxonajn", "nauxonan", "nauxono", "nauxonoj", "nauxonojn", "nauxonon", "nauxopa", "nauxopaj", "nauxopajn", "nauxopan", "nauxopo", "nauxopoj", "nauxopojn", "nauxopon", "ne", "nek", "nenia", "neniaj", "neniajn", "nenial", "neniam", "neniamaniere", "nenian", "nenie", "neniel", "nenien", "nenies", "nenio", "nenioj", "neniojn", "neniom", "nenioma", "nenioma|horo", "nenion", "neniu", "neniuj", "neniujn", "neniun", "ni", "nia", "niaj", "niajn", "nian", "nin", "no", "nu", "nul", "nula", "nulaj", "nulajn", "nulan", "nulopa", "nulopaj", "nulopajn", "nulopan", "nulopo", "nulopoj", "nulopojn", "nulopon", "nun", "nuna", "nunaj", "nunajn", "nunan", "nur", "nura", "nuraj", "nurajn", "nuran", "oj", "ok", "oka", "okaj", "okajn", "okan", "okcent", "okcenta", "okcentaj", "okcentajn", "okcentan", "okcentona", "okcentonaj", "okcentonajn", "okcentonan", "okcentono", "okcentonoj", "okcentonojn", "okcentonon", "okdek", "okdeka", "okdekaj", "okdekajn", "okdekan", "okdekona", "okdekonaj", "okdekonajn", "okdekonan", "okdekono", "okdekonoj", "okdekonojn", "okdekonon", "okdekopa", "okdekopaj", "okdekopajn", "okdekopan", "okdekopo", "okdekopoj", "okdekopojn", "okdekopon", "oke", "okej", "okmil", "okmila", "okmilaj", "okmilajn", "okmilan", "okmiliarda", "okmiliardaj", "okmiliardajn", "okmiliardan", "okmiliardo", "okmiliardoj", "okmiliardojn", "okmiliardon", "okmiliardona", "okmiliardonaj", "okmiliardonajn", "okmiliardonan", "okmiliardono", "okmiliardonoj", "okmiliardonojn", "okmiliardonon", "okmiliona", "okmiliona", "okmilionaj", "okmilionaj", "okmilionajn", "okmilionajn", "okmilionan", "okmilionan", "okmiliono", "okmilionoj", "okmilionojn", "okmilionon", "okmilionona", "okmiliononaj", "okmiliononajn", "okmiliononan", "okmilionono", "okmiliononoj", "okmiliononojn", "okmiliononon", "okmilona", "okmilonaj", "okmilonajn", "okmilonan", "okmilono", "okmilonoj", "okmilonojn", "okmilonon", "okona", "okonaj", "okonajn", "okonan", "okono", "okonoj", "okonojn", "okonon", "okopa", "okopaj", "okopajn", "okopan", "okopo", "okopoj", "okopojn", "okopon", "ol", "ona", "onaj", "onajn", "onan", "oni", "onia", "oniaj", "oniajn", "onian", "onin", "ono", "onoj", "onojn", "onon", "onta", "ontaj", "ontajn", "ontan", "opo", "opoj", "opojn", "opon", "per", "pere", "plej", "pli", "plimalpli", "plu", "plus", "po", "poa", "poaj", "poajn", "poan", "por", "post", "posten", "postmorgaux", "pova", "povada", "povadaj", "povadajn", "povadan", "povado", "povadon", "povaj", "povajn", "povan", "povanta", "povantaj", "povantajn", "povantan", "povanto", "povantoj", "povantojn", "povanton", "povas", "pove", "povema", "povemaj", "povemajn", "poveman", "povemo", "povemoj", "povemojn", "povemon", "povi", "poviga", "povigaj", "povigajn", "povigan", "povigo", "povigon", "povigxa", "povigxaj", "povigxajn", "povigxan", "povigxo", "povigxon", "povinta", "povintaj", "povintajn", "povintan", "povinto", "povintoj", "povintojn", "povinton", "povis", "povo", "povoj", "povojn", "povon", "povonta", "povontaj", "povontajn", "povontan", "povonto", "povontoj", "povontojn", "povonton", "povos", "povu", "povunta", "povuntaj", "povuntajn", "povuntan", "povunto", "povuntoj", "povuntojn", "povunton", "povus", "praa", "praaj", "praajn", "praan", "prae", "preskaux", "preter", "pri", "pro", "qo", "rea", "reaj", "reajn", "rean", "ree", "reen", "ro", "saluton", "samkiel", "se", "sed", "sen", "sep", "sepa", "sepaj", "sepajn", "sepan", "sepcent", "sepcenta", "sepcentaj", "sepcentajn", "sepcentan", "sepcentona", "sepcentonaj", "sepcentonajn", "sepcentonan", "sepcentono", "sepcentonoj", "sepcentonojn", "sepcentonon", "sepdek", "sepdeka", "sepdekaj", "sepdekajn", "sepdekan", "sepdekona", "sepdekonaj", "sepdekonajn", "sepdekonan", "sepdekono", "sepdekonoj", "sepdekonojn", "sepdekonon", "sepdekopa", "sepdekopaj", "sepdekopajn", "sepdekopan", "sepdekopo", "sepdekopoj", "sepdekopojn", "sepdekopon", "sepe", "sepmil", "sepmila", "sepmilaj", "sepmilajn", "sepmilan", "sepmiliarda", "sepmiliardaj", "sepmiliardajn", "sepmiliardan", "sepmiliardo", "sepmiliardoj", "sepmiliardojn", "sepmiliardon", "sepmiliardona", "sepmiliardonaj", "sepmiliardonajn", "sepmiliardonan", "sepmiliardono", "sepmiliardonoj", "sepmiliardonojn", "sepmiliardonon", "sepmiliona", "sepmiliona", "sepmilionaj", "sepmilionaj", "sepmilionajn", "sepmilionajn", "sepmilionan", "sepmilionan", "sepmiliono", "sepmilionoj", "sepmilionojn", "sepmilionon", "sepmilionona", "sepmiliononaj", "sepmiliononajn", "sepmiliononan", "sepmilionono", "sepmiliononoj", "sepmiliononojn", "sepmiliononon", "sepmilona", "sepmilonaj", "sepmilonajn", "sepmilonan", "sepmilono", "sepmilonoj", "sepmilonojn", "sepmilonon", "sepona", "seponaj", "seponajn", "seponan", "sepono", "seponoj", "seponojn", "seponon", "sepopa", "sepopaj", "sepopajn", "sepopan", "sepopo", "sepopoj", "sepopojn", "sepopon", "ses", "sesa", "sesaj", "sesajn", "sesan", "sescent", "sescenta", "sescentaj", "sescentajn", "sescentan", "sescentona", "sescentonaj", "sescentonajn", "sescentonan", "sescentono", "sescentonoj", "sescentonojn", "sescentonon", "sesdek", "sesdeka", "sesdekaj", "sesdekajn", "sesdekan", "sesdekona", "sesdekonaj", "sesdekonajn", "sesdekonan", "sesdekono", "sesdekonoj", "sesdekonojn", "sesdekonon", "sesdekopa", "sesdekopaj", "sesdekopajn", "sesdekopan", "sesdekopo", "sesdekopoj", "sesdekopojn", "sesdekopon", "sese", "sesmil", "sesmila", "sesmilaj", "sesmilajn", "sesmilan", "sesmiliarda", "sesmiliardaj", "sesmiliardajn", "sesmiliardan", "sesmiliardo", "sesmiliardoj", "sesmiliardojn", "sesmiliardon", "sesmiliardona", "sesmiliardonaj", "sesmiliardonajn", "sesmiliardonan", "sesmiliardono", "sesmiliardonoj", "sesmiliardonojn", "sesmiliardonon", "sesmiliona", "sesmiliona", "sesmilionaj", "sesmilionaj", "sesmilionajn", "sesmilionajn", "sesmilionan", "sesmilionan", "sesmiliono", "sesmilionoj", "sesmilionojn", "sesmilionon", "sesmilionona", "sesmiliononaj", "sesmiliononajn", "sesmiliononan", "sesmilionono", "sesmiliononoj", "sesmiliononojn", "sesmiliononon", "sesmilona", "sesmilonaj", "sesmilonajn", "sesmilonan", "sesmilono", "sesmilonoj", "sesmilonojn", "sesmilonon", "sesona", "sesonaj", "sesonajn", "sesonan", "sesono", "sesonoj", "sesonojn", "sesonon", "sesopa", "sesopaj", "sesopajn", "sesopan", "sesopo", "sesopoj", "sesopojn", "sesopon", "si", "sia", "siaj", "siajn", "sian", "sikve", "sin", "so", "sub", "suba", "subaj", "subajn", "suban", "sube", "suben", "super", "supra", "supraj", "suprajn", "supran", "supre", "supren", "supro", "suproj", "suprojn", "supron", "sur", "sxi", "sxia", "sxiaj", "sxiajn", "sxian", "sxin", "tamen", "tia", "tiaj", "tiajn", "tial", "tiam", "tiamaniere", "tian", "tie", "tiea", "tieaj", "tieajn", "tiean", "tiel", "tien", "ties", "tiktak", "tio", "tioj", "tiojn", "tiom", "tioma", "tion", "tiu", "tiuj", "tiujn", "tiun", "to", "tra", "trae", "trans", "transe", "tre", "tri", "tria", "triaj", "triajn", "trian", "tricent", "tricenta", "tricentaj", "tricentajn", "tricentan", "tricentona", "tricentonaj", "tricentonajn", "tricentonan", "tricentono", "tricentonoj", "tricentonojn", "tricentonon", "tricentopa", "tricentopaj", "tricentopajn", "tricentopan", "tricentopo", "tricentopoj", "tricentopojn", "tricentopon", "tridek", "trideka", "tridekaj", "tridekajn", "tridekan", "tridekona", "tridekonaj", "tridekonajn", "tridekonan", "tridekono", "tridekonoj", "tridekonojn", "tridekonon", "tridekopa", "tridekopaj", "tridekopajn", "tridekopan", "tridekopo", "tridekopoj", "tridekopojn", "tridekopon", "trie", "trimil", "trimila", "trimilaj", "trimilajn", "trimilan", "trimiliarda", "trimiliardaj", "trimiliardajn", "trimiliardan", "trimiliardo", "trimiliardoj", "trimiliardojn", "trimiliardon", "trimiliardona", "trimiliardonaj", "trimiliardonajn", "trimiliardonan", "trimiliardono", "trimiliardonoj", "trimiliardonojn", "trimiliardonon", "trimiliona", "trimiliona", "trimilionaj", "trimilionaj", "trimilionajn", "trimilionajn", "trimilionan", "trimilionan", "trimiliono", "trimilionoj", "trimilionojn", "trimilionon", "trimilionona", "trimiliononaj", "trimiliononajn", "trimiliononan", "trimilionono", "trimiliononoj", "trimiliononojn", "trimiliononon", "trimilona", "trimilonaj", "trimilonajn", "trimilonan", "trimilono", "trimilonoj", "trimilonojn", "trimilonon", "triona", "trionaj", "trionajn", "trionan", "triono", "trionoj", "trionojn", "trionon", "triopa", "triopaj", "triopajn", "triopan", "triopo", "triopoj", "triopojn", "triopon", "tro", "troa", "troaj", "troajn", "troan", "troe", "tuj", "tuja", "tujaj", "tujajn", "tujan", "uja", "ujaj", "ujajn", "ujan", "ujo", "ujoj", "ujojn", "ujon", "ulino", "ulinoj", "ulinojn", "ulinon", "ulo", "uloj", "ulojn", "ulon", "umo", "umoj", "umojn", "umon", "unta", "untaj", "untajn", "untan", "unu", "unua", "unuaj", "unuajn", "unuan", "unue", "unuj", "unuona", "unuonaj", "unuonajn", "unuonan", "unuono", "unuonoj", "unuonojn", "unuonon", "unuopa", "unuopaj", "unuopajn", "unuopan", "unuopo", "unuopoj", "unuopojn", "unuopon", "ve", "vi", "via", "viaj", "viajn", "vian", "vin", "vo", "vola", "volaj", "volajn", "volan", "volanta", "volantaj", "volantajn", "volantan", "volanto", "volantoj", "volantojn", "volanton", "volas", "volata", "volataj", "volatajn", "volatan", "volato", "volatoj", "volatojn", "volaton", "vole", "vole", "voli", "volinta", "volintaj", "volintajn", "volintan", "volinto", "volintoj", "volintojn", "volinton", "volis", "volita", "volitaj", "volitajn", "volitan", "volito", "volitoj", "volitojn", "voliton", "volo", "volo", "voloj", "voloj", "volojn", "volojn", "volon", "volon", "volonta", "volontaj", "volontajn", "volontan", "volonto", "volontoj", "volontojn", "volonton", "volos", "volota", "volotaj", "volotajn", "volotan", "voloto", "volotoj", "volotojn", "voloton", "volu", "volunta", "voluntaj", "voluntajn", "voluntan", "volunto", "voluntoj", "voluntojn", "volunton", "volus", "voluta", "volutaj", "volutajn", "volutan", "voluto", "volutoj", "volutojn", "voluton", "zo", "zumexzate", "zumexzite", "zusxuvolas" };
static string englishPrefixes[] = { "Qto", "Qsubstitute", "Qpre", "Qnearby", "Qato", "Q-in-law", "Qcenti", "Qmain", "Qat", "Qevery-kind-of", "Qevery-number-of", "Qevery", "Qof", "Qdeci", "Qdeca", "Qof/from", "Qduring-the", "Qsince", "Qoutside", "Qexa", "Qex", "Qout-from", "Qinside", "Qfemto", "Qdisgusting", "Qbungled", "Qgiga", "Quntil", "Qhecto", "Qlight -/-", "Qsome-kind-of", "Qbetween/among", "Qsome-number-of", "Qsome", "Qat", "Qyocto", "Qyotta", "Qkilo", "Qagainst", "Qexcept-for", "Qtogether", "Qaccording-to", "Qpost", "Qin-spite-of-the", "Qbelow", "Qopposite-of", "Qmega", "Qmicro", "Qmilli", "Qnano", "Qno-kind-of", "Qno-number-of", "Qno", "Qnon", "Qcurrent", "Qwith", "Qpeta", "Qpico", "Qfor", "Qafter/behind", "Qancestral", "Qbeyond", "Qabout", "Qbecause-of", "Qpseudo", "Q-hyfqless-kx", "Qunder", "Qabove/over", "Qon", "Qtera", "Qthat-kind-of", "Qthat-number-of", "Qthat", "Qacross", "Qthrough", "Qvice", "Qmale", "Qzepto", "Qzetta", "Qnon", "Qto start", "Q-away-kx", "Qself", "Qwrongly", "Q-back/again-kx", "Qthis|", "Q-backwards-kx", "Q--less-kx", "Qwanderingxx", "Q-around-kx", "Qoverly|", "Qboth|sexes|of", "Qsame", "Qself", "Qon-this-side-of-the", "Qambi", "Qgeo", "Qmicro", "Qmacro", "Qpoly", "Qsub", "Qhundred", "Qtwo-hundred", "Qthree-hundred", "Qfour-hundred", "Qfive-hundred", "Qsix-hundred", "Qseven-hundred", "Qeight-hundred", "Qnine-hundred", "Qthousand", "Qtwo-thousand", "Qthree-thousand", "Qfour-thousand", "Qfive-thousand", "Qsix-thousand", "Qseven-thousand", "Qeight-thousand", "Qnine-thousand", "Qmillion", "Qmillion", "Qbillion", "Qbillion", "Qtwenty", "Qthirty", "Qforty", "Qfifty", "Qsixty", "Qseventy", "Qeighty", "Qninety", "Qhundred", "Qhalf", "Qhalf", "Qone", "Qtwo", "Qthree", "Qfour", "Qfive", "Qsix", "Qseven", "Qeight", "Qnine", "Qten", "Qzero", "Qzero" };
static string esperantoPrefixes[] = { "al", "anstataux", "antaux", "apud", "ato", "bo", "centi", "cxef", "cxe", "cxia", "cxioma", "cxiu", "da", "deci", "deka", "de", "dum", "ekde", "ekster", "eksa", "eks", "el", "en", "femto", "fi", "fusx", "giga", "gxis", "hekto", "hel", "ia", "inter", "ioma", "iu", "je", "jokto", "jota", "kilo", "kontraux", "krom", "kun", "laux", "malantaux", "malgraux", "malsuper", "mal", "mega", "mikro", "mili", "nano", "nenia", "nenioma", "neniu", "ne", "nun", "per", "peta", "piko", "por", "post", "pra", "preter", "pri", "pro", "pseuxdo", "sen", "sub", "super", "sur", "tera", "tia", "tioma", "tiu", "trans", "tra", "vic", "vir", "zepto", "zeta", "ne", "ek", "for", "sin", "mis", "re", "cxi", "retro", "sen", "vag", "dis", "tro", "ge", "sam", "mem", "cis", "ambaux", "geo", "mikro", "makro", "poli", "infra", "cent", "ducent", "tricent", "kvarcent", "kvincent", "sescent", "sepcent", "okcent", "nauxcent", "mil", "dumil", "trimil", "kvarmil", "kvinmil", "sesmil", "sepmil", "okmil", "nauxmil", "milion", "miliono", "miliard", "miliardo", "dudek", "tridek", "kvardek", "kvindek", "sesdek", "sepdek", "okdek", "nauxdek", "cent", "duon", "duono", "unu", "du", "tri", "kvar", "kvin", "ses", "sep", "ok", "naux", "dek", "nul", "nulo" };
static string multitermOriginal[] = { "Adena Golfo", "Adenan Golfo", "Alaska Duoninsulo", "Alaska Golfo", "Alaskan Duoninsulo", "Alaskan Golfo", "Aleksandro la Granda", "Aleksandron la Granda", "Aleutaj Insulo", "Aleutajn Insulo", "Altaja lingvofamilio", "Altajan lingvofamilio", "Antarkta Oceano", "Antarktan Oceano", "Auxstrala Krono", "Auxstralan Krono", "Araba Duoninsulo", "Araba Maro", "Araban Duoninsulo", "Araban Maro", "Arkta Oceano", "Arktan Oceano", "Azova Maro", "Azovan Maro", "Baden-Virtembergo", "Baden-Virtembergo", "Balta Maro", "Baltan Maro", "Barita Mozo", "Baritan Mozo", "Bengala Golfo", "Bengalan Golfo", "Berenica Haro", "Berenican Haro", "Beringa Markolo", "Beringa Maro", "Beringan Markolo", "Beringan Maro", "Berviko cxe la Tvido", "Bervikon cxe la Tvido", "Blanka Maro", "Blanka Nilo", "Blankan Maro", "Blankan Nilo", "Blua Nilo", "Blua Rivero", "Bluan Nilo", "Bluan Rivero", "Boreala Krono", "Borealan Krono", "Bosnio kaj Hercegovino", "Bosnio-Hercegovino", "Bosnio-Hercegovino", "Bosnion kajn Hercegovino", "Bosnujo kaj Hercegovino", "Bosnujon kajn Hercegovino", "Botna Golfo", "Botnan Golfo", "Brita Insularo", "Brita Kolombio", "Britan Insularo", "Britan Kolombio", "Celo-aro", "celo-aro", "Cindra Merkredo", "Cindran Merkredo", "Cxukcxa Duoninsulo", "Cxukcxa Maro", "Cxukcxan Duoninsulo", "Cxukcxan Maro", "Dana Markolo", "Danan Markolo", "Datumbaz-manipulilo", "datumbaz-manipulilo", "Dek-duedro", "dek-duedro", "Dek-dulatero", "Dek-dulatero", "dek-unulatero", "dek-unulatero", "Dominika Respubliko", "Dominikan Respubliko", "D-trajno", "D-trajno", "Ekstrema Oriento", "Ekstreman Oriento", "Ekvatora Gvineo", "Ekvatoran Gvineo", "Ekvivalento-klaso", "ekvivalento-klaso", "Ekvivalento-rilato", "ekvivalento-rilato", "Euxropa Unio", "Euxropan Unio", "Festo de Cxiuj Sanktuloj", "Festo de la Sankta Triuno", "Festo de Lauxbo", "Feston de Cxiujn Sanktuloj", "Feston de la Sanktan Triuno", "Feston de Lauxbo", "Finna Golfo", "Finnan Golfo", "Flandraj Ardeno", "Flandrajn Ardeno", "Flava Maro", "Flava Rivero", "Flava Rivero", "Flavan Maro", "Flavan Rivero", "Flavan Rivero", "FM-dissendilo", "FM-dissendilo", "FM-ricevilo", "FM-ricevilo", "Fonto-aro", "fonto-aro", "Franca Giano", "Franca Polinezio", "Francan Giano", "Francan Polinezio", "Frankfurto cxe la Majno", "Frankfurton cxe la Majno", "Germana Demokratia Respubliko", "Germana Federacia Respubliko", "Germanan Demokratian Respubliko", "Germanan Federacian Respubliko", "GNUa Gxenerala Publika Permesilo", "GNUan Gxeneralan Publikan Permesilo", "Granda Bulgarujo", "Granda Fasto", "Granda Fasto", "Granda Sklavolago", "Granda Ursino", "Granda Ursolago", "Grandaj Antilo", "Grandajn Antilo", "Grandan Bulgarujo", "Grandan Fasto", "Grandan Fasto", "Grandan Sklavolago", "Grandan Ursino", "Grandan Ursolago", "Gvineo-Bisauxo", "Gvineo-Bisauxo", "Gxeneva Lago", "Gxenevan Lago", "Gxenova Golfo", "Gxenovan Golfo", "Gxocxia apanagxo", "Gxocxian apanagxo", "Hejmen-klavo", "hejmen-klavo", "Hinda Oceano", "Hindan Oceano", "Holanda Angulo", "Holandan Angulo", "HTML-etikedo", "HTML-etikedo", "Idento-bildigo", "idento-bildigo", "Interna Azio", "Interna Mongolio", "Interna Mongolujo", "Internacia Labor-Organizajxo", "Internacia Mona Fonduso", "Internacian Labor-Organizajxo", "Internacian Monan Fonduso", "Internan Azio", "Internan Mongolio", "Internan Mongolujo", "Irlanda Maro", "Irlandan Maro", "Japana Maro", "Japanan Maro", "Jesuo Kristo", "Jesuon Kristo", "Johano la Orbusxulo", "Johanon la Orbusxulo", "Jonika Maro", "Jonikan Maro", "Kabo de Bona Espero", "Kabon de Bonan Espero", "Kaj-signo", "kaj-signo", "Kalifornia Golfo", "Kalifornian Golfo", "Kanaria Insularo", "Kanariaj Insulo", "Kanariajn Insulo", "Kanarian Insularo", "Kapverdaj Insulo", "Kapverdajn Insulo", "Kauxkaza montaro", "Kauxkazan montaro", "Karaiba Maro", "Karaiban Maro", "Karia Maro", "Karian Maro", "Karolo la Granda", "Kaspia Maro", "Kaspian Maro", "Kieva Regno", "Kievan Regno", "Kongo Brazavila", "Kongo Kinsxasa", "Kongon Brazavila", "Kongon Kinsxasa", "Kosxi-vico", "Kosxi-vico", "Kristnaska Festo", "Kristnaska Viro", "Kristnaskan Festo", "Kristnaskan Viro", "Lakta Vojo", "Laktan Vojo", "Lapteva Maro", "Laptevan Maro", "Latia ligo", "Latian ligo", "Latinida Ameriko", "Latinidan Ameriko", "Lazura Bordo", "Lazuran Bordo", "Ligo de Nacio", "Ligon de Nacio", "Ligura Maro", "Liguran Maro", "Londona Akciborso", "Londonan Akciborso", "Malgranda Ursino", "Malgranda-Azio", "Malgranda-Azio", "Malgrandaj Antilo", "Malgrandajn Antilo", "Malgrandan Ursino", "Malnova Testamento", "Malnovan Testamento", "Malproksima Oriento", "Malproksiman Oriento", "Manika Kolo", "Manikaj Insulo", "Manikajn Insulo", "Manikan Kolo", "Markolo de Forto", "Markolon de Forto", "Meksikia Golfo", "Meksikian Golfo", "Meza Oriento", "Mezafrika Respubliko", "Mezafrikan Respubliko", "Mezan Oriento", "Micxjo Muso", "Micxjon Muso", "Monda Banko", "Monda Naturfonduso", "Monda Organizajxo pri Meteologio", "Monda Organizajxo pri Sano", "Monda Organizajxo pri Turismo", "Mondan Banko", "Mondan Naturfonduso", "Mondan Organizajxon pri Meteologio", "Mondan Organizajxon pri Sano", "Mondan Organizajxon pri Turismo", "Morta Maro", "Mortan Maro", "Nederlanda Suda Maro", "Nederlandaj Antilo", "Nederlandajn Antilo", "Nederlandan Sudan Maro", "Nicxjo la Dormigulo", "Nicxjon la Dormigulo", "Nigra Arbaro", "Nigra Maro", "Nigran Arbaro", "Nigran Maro", "Nord Koreujo", "Nord Koreujo", "Norda Ameriko", "Norda Dvino", "Norda Maro", "Nordan Dvino", "Nordan Maro", "Nord-Atlantika Traktat-Organizajxo", "Nord-Atlantikan Traktat-Organizajxo", "Nord-Holando", "Nord-Holando", "Nova Epoko", "Nova Gvineo", "Nova Kaledonio", "Nova Sudkimrio", "Nova Sudkimrujo", "Nova Testamento", "Novaj Hebrido", "Novajn Hebrido", "Novan Epoko", "Novan Gvineo", "Novan Kaledonio", "Novan Sudkimrio", "Novan Sudkimrujo", "Novan Testamento", "Novjorka Akciborso", "Novjorkan Akciborso", "Nov-Meksikio", "Nov-Meksikio", "Nov-Orleana jxazo", "Nov-Orleanan jxazo", "Nov-Zelando", "Nov-Zelando", "Ohxocka Maro", "Ohxockan Maro", "Okcidenta Azio", "Okcidenta Azio", "Okcidenta Dvino", "Okcidenta Flandrio", "Okcidenta Flandrujo", "Okcidenta Germanujo", "Okcidenta Kongo", "Okcidenta Skeldo", "Okcidentaj Indio", "Okcidentajn Indio", "Okcidentan Azio", "Okcidentan Azio", "Okcidentan Dvino", "Okcidentan Flandrio", "Okcidentan Flandrujo", "Okcidentan Germanujo", "Okcidentan Kongo", "Okcidentan Skeldo", "Omana Golfo", "Omanan Golfo", "Ora Bordo", "Ora hordo", "Ora Lanfelo", "Oran Bordo", "Oran hordo", "Oran Lanfelo", "Ordo-rilato", "ordo-rilato", "Organizajxo de Petrol-Eksportaj Landoj", "Organizajxo por Ekonomiaj Kunlaboro kaj Evoluigo", "Organizajxon de Petrol-Eksportajn Landoj", "Organizajxon por Ekonomiajn Kunlaboron kajn Evoluigo", "Orienta Azio", "Orienta Cxina Maro", "Orienta Flandrio", "Orienta Flandrujo", "Orienta Frislando", "Orienta Frizonio", "Orienta Frizonujo", "Orienta Kongo", "Orienta Skeldo", "Orienta Timoro", "Orienta Timoro", "Orientan Azio", "Orientan Cxinan Maro", "Orientan Flandrio", "Orientan Flandrujo", "Orientan Frislando", "Orientan Frizonio", "Orientan Frizonujo", "Orientan Kongo", "Orientan Skeldo", "Orientan Timoro", "Orientan Timoro", "Orientcxina Maro", "Orientcxinan Maro", "Orientsiberia Maro", "Orientsiberian Maro", "Panama Golfo", "Panaman Golfo", "Papua Nova Gvineo", "Papuan Novan Gvineo", "Paska semajno", "Paska semajno", "Paskan semajno", "Paskan semajno", "Patro Kristnasko", "Patron Kristnasko", "Perioda tabelo", "Periodan tabelo", "Persa Golfo", "Persan Golfo", "Plinio la Juna", "Plinio la Maljuna", "Plinion la Juna", "Plinion la Maljuna", "Polusa stelo", "Polusan stelo", "Po-signo", "po-signo", "Proksima Oriento", "Proksiman Oriento", "Regna Delegitaro", "Regnan Delegitaro", "Regxino Cxarlotinsulo", "Regxinon Cxarlotinsulo", "Rugxa Kruco", "Rugxa Maro", "Rugxan Kruco", "Rugxan Maro", "Ruslanda Federacio", "Ruslanda Imperio", "Ruslandan Federacio", "Ruslandan Imperio", "Sakramenta Tago", "Sakramentan Tago", "Sankta jxauxdo", "Sankta Jxauxdo", "Sankta Mangxo", "Sankta Nikolao", "Sankta Roma Imperio Gxermana", "Sankta Semajno", "Sankta Skribo", "Sankta Spirito", "Sankta Vendredo", "Sanktan jxauxdo", "Sanktan Jxauxdo", "Sanktan Mangxo", "Sanktan Nikolao", "Sanktan Roman Imperion Gxermana", "Sanktan Semajno", "Sanktan Skribo", "Sanktan Spirito", "Sanktan Vendredo", "Sankt-Peterburgo", "Sankt-Peterburgo", "Sanktulara Festo", "Sanktularan Festo", "Santomeo kaj Principeo", "Santomeon kajn Principeo", "Sauxda Arabujo", "Sauxdan Arabujo", "Sauxd-Arabujo", "Sauxd-Arabujo", "Sauda Arabujo", "Saudan Arabujo", "Saud-Arabujo", "Saud-Arabujo", "Sigma-algebro", "sigma-algebro", "Silicia Valo", "Silician Valo", "s-inojn", "s-rojn", "s-tajn", "S-inojn", "S-rojn", "S-tajn", "s-inon", "s-ron", "s-tan", "S-inon", "S-ron", "S-tan", "s-inoj", "s-roj", "s-taj", "S-inoj", "S-roj", "S-taj", "s-ino", "s-ro", "s-ta", "S-ino", "S-ro", "S-ta", "Sud Koreujo", "Sud Koreujo", "Suda Ameriko", "Suda Azio", "Suda Kruco", "Sudan Azio", "Sudan Kruco", "Sudcxina Maro", "Sudcxinan Maro", "Sud-Holando", "Sud-Holando", "Sxlesvigo-Holsxtejno", "Sxlesvigo-Holsxtejno", "Tago de la Mortinto", "Tago de la Patrinoj", "Tago de Pekliberigo", "Tagon de la Mortinto", "Tagon de la Patrinoj", "Tagon de Pekliberigo", "Taja Novjaro", "Tajan Novjaro", "Tajlanda Golfo", "Tajlandan Golfo", "Tirena Maro", "Tirenan Maro", "To-cxemizo", "to-cxemizo", "Trinidado kaj Tobago", "Trinidadon kajn Tobago", "TTT-ejo", "TTT-ejo", "TTT-pagxaro", "TTT-pagxaro", "TTT-pagxo", "TTT-pagxo", "Tut-Tera Teksajxo", "Tut-Teran Teksajxo", "Unio de Sovetaj Socialismaj Respublikoj", "Union de Sovetajn Socialismajn Respublikoj", "Universala Kongreso", "Universalan Kongreso", "Unuigxintaj Nacio", "Unuigxintajn Nacio", "Usona Samoo", "Usonan Samoo", "Valencia Golfo", "Valencian Golfo", "Valo de la Regxoj", "Valon de la Regxoj", "Venezuela Golfo", "Venezuelan Golfo", "Virgulinaj Insulo", "Virgulinajn Insulo", "Volga-Kama Bulgarujo", "Volga-Kaman Bulgarujo", "Zelanda Flandrio", "Zelanda Flandrujo", "Zelandan Flandrio", "Zelandan Flandrujo" };
static string multitermApostrophe[] = { "Adena'Golfo", "Adenan'Golfo", "Alaska'Duoninsulo", "Alaska'Golfo", "Alaskan'Duoninsulo", "Alaskan'Golfo", "Aleksandro'la'Granda", "Aleksandron'la'Granda", "Aleutaj'Insulo", "Aleutajn'Insulo", "Altaja'lingvofamilio", "Altajan'lingvofamilio", "Antarkta'Oceano", "Antarktan'Oceano", "Auxstrala'Krono", "Auxstralan'Krono", "Araba'Duoninsulo", "Araba'Maro", "Araban'Duoninsulo", "Araban'Maro", "Arkta'Oceano", "Arktan'Oceano", "Azova'Maro", "Azovan'Maro", "Baden-Virtembergo", "Baden-Virtembergo", "Balta'Maro", "Baltan'Maro", "Barita'Mozo", "Baritan'Mozo", "Bengala'Golfo", "Bengalan'Golfo", "Berenica'Haro", "Berenican'Haro", "Beringa'Markolo", "Beringa'Maro", "Beringan'Markolo", "Beringan'Maro", "Berviko'cxe'la'Tvido", "Bervikon'cxe'la'Tvido", "Blanka'Maro", "Blanka'Nilo", "Blankan'Maro", "Blankan'Nilo", "Blua'Nilo", "Blua'Rivero", "Bluan'Nilo", "Bluan'Rivero", "Boreala'Krono", "Borealan'Krono", "Bosnio'kaj'Hercegovino", "Bosnio-Hercegovino", "Bosnio-Hercegovino", "Bosnion'kajn'Hercegovino", "Bosnujo'kaj'Hercegovino", "Bosnujon'kajn'Hercegovino", "Botna'Golfo", "Botnan'Golfo", "Brita'Insularo", "Brita'Kolombio", "Britan'Insularo", "Britan'Kolombio", "Celo-aro", "celo-aro", "Cindra'Merkredo", "Cindran'Merkredo", "Cxukcxa'Duoninsulo", "Cxukcxa'Maro", "Cxukcxan'Duoninsulo", "Cxukcxan'Maro", "Dana'Markolo", "Danan'Markolo", "Datumbaz-manipulilo", "datumbaz-manipulilo", "Dek-duedro", "dek-duedro", "Dek-dulatero", "Dek-dulatero", "dek-unulatero", "dek-unulatero", "Dominika'Respubliko", "Dominikan'Respubliko", "D-trajno", "D-trajno", "Ekstrema'Oriento", "Ekstreman'Oriento", "Ekvatora'Gvineo", "Ekvatoran'Gvineo", "Ekvivalento-klaso", "ekvivalento-klaso", "Ekvivalento-rilato", "ekvivalento-rilato", "Euxropa'Unio", "Euxropan'Unio", "Festo'de'Cxiuj'Sanktuloj", "Festo'de'la'Sankta'Triuno", "Festo'de'Lauxbo", "Feston'de'Cxiujn'Sanktuloj", "Feston'de'la'Sanktan'Triuno", "Feston'de'Lauxbo", "Finna'Golfo", "Finnan'Golfo", "Flandraj'Ardeno", "Flandrajn'Ardeno", "Flava'Maro", "Flava'Rivero", "Flava'Rivero", "Flavan'Maro", "Flavan'Rivero", "Flavan'Rivero", "FM-dissendilo", "FM-dissendilo", "FM-ricevilo", "FM-ricevilo", "Fonto-aro", "fonto-aro", "Franca'Giano", "Franca'Polinezio", "Francan'Giano", "Francan'Polinezio", "Frankfurto'cxe'la'Majno", "Frankfurton'cxe'la'Majno", "Germana'Demokratia'Respubliko", "Germana'Federacia'Respubliko", "Germanan'Demokratian'Respubliko", "Germanan'Federacian'Respubliko", "GNUa'Gxenerala'Publika'Permesilo", "GNUan'Gxeneralan'Publikan'Permesilo", "Granda'Bulgarujo", "Granda'Fasto", "Granda'Fasto", "Granda'Sklavolago", "Granda'Ursino", "Granda'Ursolago", "Grandaj'Antilo", "Grandajn'Antilo", "Grandan'Bulgarujo", "Grandan'Fasto", "Grandan'Fasto", "Grandan'Sklavolago", "Grandan'Ursino", "Grandan'Ursolago", "Gvineo-Bisauxo", "Gvineo-Bisauxo", "Gxeneva'Lago", "Gxenevan'Lago", "Gxenova'Golfo", "Gxenovan'Golfo", "Gxocxia'apanagxo", "Gxocxian'apanagxo", "Hejmen-klavo", "hejmen-klavo", "Hinda'Oceano", "Hindan'Oceano", "Holanda'Angulo", "Holandan'Angulo", "HTML-etikedo", "HTML-etikedo", "Idento-bildigo", "idento-bildigo", "Interna'Azio", "Interna'Mongolio", "Interna'Mongolujo", "Internacia'Labor-Organizajxo", "Internacia'Mona'Fonduso", "Internacian'Labor-Organizajxo", "Internacian'Monan'Fonduso", "Internan'Azio", "Internan'Mongolio", "Internan'Mongolujo", "Irlanda'Maro", "Irlandan'Maro", "Japana'Maro", "Japanan'Maro", "Jesuo'Kristo", "Jesuon'Kristo", "Johano'la'Orbusxulo", "Johanon'la'Orbusxulo", "Jonika'Maro", "Jonikan'Maro", "Kabo'de'Bona'Espero", "Kabon'de'Bonan'Espero", "Kaj-signo", "kaj-signo", "Kalifornia'Golfo", "Kalifornian'Golfo", "Kanaria'Insularo", "Kanariaj'Insulo", "Kanariajn'Insulo", "Kanarian'Insularo", "Kapverdaj'Insulo", "Kapverdajn'Insulo", "Kauxkaza'montaro", "Kauxkazan'montaro", "Karaiba'Maro", "Karaiban'Maro", "Karia'Maro", "Karian'Maro", "Karolo'la'Granda", "Kaspia'Maro", "Kaspian'Maro", "Kieva'Regno", "Kievan'Regno", "Kongo'Brazavila", "Kongo'Kinsxasa", "Kongon'Brazavila", "Kongon'Kinsxasa", "Kosxi-vico", "Kosxi-vico", "Kristnaska'Festo", "Kristnaska'Viro", "Kristnaskan'Festo", "Kristnaskan'Viro", "Lakta'Vojo", "Laktan'Vojo", "Lapteva'Maro", "Laptevan'Maro", "Latia'ligo", "Latian'ligo", "Latinida'Ameriko", "Latinidan'Ameriko", "Lazura'Bordo", "Lazuran'Bordo", "Ligo'de'Nacio", "Ligon'de'Nacio", "Ligura'Maro", "Liguran'Maro", "Londona'Akciborso", "Londonan'Akciborso", "Malgranda'Ursino", "Malgranda-Azio", "Malgranda-Azio", "Malgrandaj'Antilo", "Malgrandajn'Antilo", "Malgrandan'Ursino", "Malnova'Testamento", "Malnovan'Testamento", "Malproksima'Oriento", "Malproksiman'Oriento", "Manika'Kolo", "Manikaj'Insulo", "Manikajn'Insulo", "Manikan'Kolo", "Markolo'de'Forto", "Markolon'de'Forto", "Meksikia'Golfo", "Meksikian'Golfo", "Meza'Oriento", "Mezafrika'Respubliko", "Mezafrikan'Respubliko", "Mezan'Oriento", "Micxjo'Muso", "Micxjon'Muso", "Monda'Banko", "Monda'Naturfonduso", "Monda'Organizajxo'pri'Meteologio", "Monda'Organizajxo'pri'Sano", "Monda'Organizajxo'pri'Turismo", "Mondan'Banko", "Mondan'Naturfonduso", "Mondan'Organizajxon'pri'Meteologio", "Mondan'Organizajxon'pri'Sano", "Mondan'Organizajxon'pri'Turismo", "Morta'Maro", "Mortan'Maro", "Nederlanda'Suda'Maro", "Nederlandaj'Antilo", "Nederlandajn'Antilo", "Nederlandan'Sudan'Maro", "Nicxjo'la'Dormigulo", "Nicxjon'la'Dormigulo", "Nigra'Arbaro", "Nigra'Maro", "Nigran'Arbaro", "Nigran'Maro", "Nord'Koreujo", "Nord'Koreujo", "Norda'Ameriko", "Norda'Dvino", "Norda'Maro", "Nordan'Dvino", "Nordan'Maro", "Nord-Atlantika'Traktat-Organizajxo", "Nord-Atlantikan'Traktat-Organizajxo", "Nord-Holando", "Nord-Holando", "Nova'Epoko", "Nova'Gvineo", "Nova'Kaledonio", "Nova'Sudkimrio", "Nova'Sudkimrujo", "Nova'Testamento", "Novaj'Hebrido", "Novajn'Hebrido", "Novan'Epoko", "Novan'Gvineo", "Novan'Kaledonio", "Novan'Sudkimrio", "Novan'Sudkimrujo", "Novan'Testamento", "Novjorka'Akciborso", "Novjorkan'Akciborso", "Nov-Meksikio", "Nov-Meksikio", "Nov-Orleana'jxazo", "Nov-Orleanan'jxazo", "Nov-Zelando", "Nov-Zelando", "Ohxocka'Maro", "Ohxockan'Maro", "Okcidenta'Azio", "Okcidenta'Azio", "Okcidenta'Dvino", "Okcidenta'Flandrio", "Okcidenta'Flandrujo", "Okcidenta'Germanujo", "Okcidenta'Kongo", "Okcidenta'Skeldo", "Okcidentaj'Indio", "Okcidentajn'Indio", "Okcidentan'Azio", "Okcidentan'Azio", "Okcidentan'Dvino", "Okcidentan'Flandrio", "Okcidentan'Flandrujo", "Okcidentan'Germanujo", "Okcidentan'Kongo", "Okcidentan'Skeldo", "Omana'Golfo", "Omanan'Golfo", "Ora'Bordo", "Ora'hordo", "Ora'Lanfelo", "Oran'Bordo", "Oran'hordo", "Oran'Lanfelo", "Ordo-rilato", "ordo-rilato", "Organizajxo'de'Petrol-Eksportaj'Landoj", "Organizajxo'por'Ekonomiaj'Kunlaboro'kaj'Evoluigo", "Organizajxon'de'Petrol-Eksportajn'Landoj", "Organizajxon'por'Ekonomiajn'Kunlaboron'kajn'Evoluigo", "Orienta'Azio", "Orienta'Cxina'Maro", "Orienta'Flandrio", "Orienta'Flandrujo", "Orienta'Frislando", "Orienta'Frizonio", "Orienta'Frizonujo", "Orienta'Kongo", "Orienta'Skeldo", "Orienta'Timoro", "Orienta'Timoro", "Orientan'Azio", "Orientan'Cxinan'Maro", "Orientan'Flandrio", "Orientan'Flandrujo", "Orientan'Frislando", "Orientan'Frizonio", "Orientan'Frizonujo", "Orientan'Kongo", "Orientan'Skeldo", "Orientan'Timoro", "Orientan'Timoro", "Orientcxina'Maro", "Orientcxinan'Maro", "Orientsiberia'Maro", "Orientsiberian'Maro", "Panama'Golfo", "Panaman'Golfo", "Papua'Nova'Gvineo", "Papuan'Novan'Gvineo", "Paska'semajno", "Paska'semajno", "Paskan'semajno", "Paskan'semajno", "Patro'Kristnasko", "Patron'Kristnasko", "Perioda'tabelo", "Periodan'tabelo", "Persa'Golfo", "Persan'Golfo", "Plinio'la'Juna", "Plinio'la'Maljuna", "Plinion'la'Juna", "Plinion'la'Maljuna", "Polusa'stelo", "Polusan'stelo", "Po-signo", "po-signo", "Proksima'Oriento", "Proksiman'Oriento", "Regna'Delegitaro", "Regnan'Delegitaro", "Regxino'Cxarlotinsulo", "Regxinon'Cxarlotinsulo", "Rugxa'Kruco", "Rugxa'Maro", "Rugxan'Kruco", "Rugxan'Maro", "Ruslanda'Federacio", "Ruslanda'Imperio", "Ruslandan'Federacio", "Ruslandan'Imperio", "Sakramenta'Tago", "Sakramentan'Tago", "Sankta'jxauxdo", "Sankta'Jxauxdo", "Sankta'Mangxo", "Sankta'Nikolao", "Sankta'Roma'Imperio'Gxermana", "Sankta'Semajno", "Sankta'Skribo", "Sankta'Spirito", "Sankta'Vendredo", "Sanktan'jxauxdo", "Sanktan'Jxauxdo", "Sanktan'Mangxo", "Sanktan'Nikolao", "Sanktan'Roman'Imperion'Gxermana", "Sanktan'Semajno", "Sanktan'Skribo", "Sanktan'Spirito", "Sanktan'Vendredo", "Sankt-Peterburgo", "Sankt-Peterburgo", "Sanktulara'Festo", "Sanktularan'Festo", "Santomeo'kaj'Principeo", "Santomeon'kajn'Principeo", "Sauxda'Arabujo", "Sauxdan'Arabujo", "Sauxd-Arabujo", "Sauxd-Arabujo", "Sauda'Arabujo", "Saudan'Arabujo", "Saud-Arabujo", "Saud-Arabujo", "Sigma-algebro", "sigma-algebro", "Silicia'Valo", "Silician'Valo", "s-inojn", "s-rojn", "s-tajn", "S-inojn", "S-rojn", "S-tajn", "s-inon", "s-ron", "s-tan", "S-inon", "S-ron", "S-tan", "s-inoj", "s-roj", "s-taj", "S-inoj", "S-roj", "S-taj", "s-ino", "s-ro", "s-ta", "S-ino", "S-ro", "S-ta", "Sud'Koreujo", "Sud'Koreujo", "Suda'Ameriko", "Suda'Azio", "Suda'Kruco", "Sudan'Azio", "Sudan'Kruco", "Sudcxina'Maro", "Sudcxinan'Maro", "Sud-Holando", "Sud-Holando", "Sxlesvigo-Holsxtejno", "Sxlesvigo-Holsxtejno", "Tago'de'la'Mortinto", "Tago'de'la'Patrinoj", "Tago'de'Pekliberigo", "Tagon'de'la'Mortinto", "Tagon'de'la'Patrinoj", "Tagon'de'Pekliberigo", "Taja'Novjaro", "Tajan'Novjaro", "Tajlanda'Golfo", "Tajlandan'Golfo", "Tirena'Maro", "Tirenan'Maro", "To-cxemizo", "to-cxemizo", "Trinidado'kaj'Tobago", "Trinidadon'kajn'Tobago", "TTT-ejo", "TTT-ejo", "TTT-pagxaro", "TTT-pagxaro", "TTT-pagxo", "TTT-pagxo", "Tut-Tera'Teksajxo", "Tut-Teran'Teksajxo", "Unio'de'Sovetaj'Socialismaj'Respublikoj", "Union'de'Sovetajn'Socialismajn'Respublikoj", "Universala'Kongreso", "Universalan'Kongreso", "Unuigxintaj'Nacio", "Unuigxintajn'Nacio", "Usona'Samoo", "Usonan'Samoo", "Valencia'Golfo", "Valencian'Golfo", "Valo'de'la'Regxoj", "Valon'de'la'Regxoj", "Venezuela'Golfo", "Venezuelan'Golfo", "Virgulinaj'Insulo", "Virgulinajn'Insulo", "Volga-Kama'Bulgarujo", "Volga-Kaman'Bulgarujo", "Zelanda'Flandrio", "Zelanda'Flandrujo", "Zelandan'Flandrio", "Zelandan'Flandrujo" };
static string properNouns[] = { " |Abaso:Abbas |Abhxazio : Abkhazia |Abhxazujo : Abkhazia |Abintono : Abington |Abisenio : Abyssinia |Abisenujo : Abyssinia |Abrahamo : Abraham |Acoro : Azore |Adamo : Adam |Adelaido : Adelaide |Adena'Golfo:Gulf|of|Aden |Adeno:Aden |Adisabebo:Addis|Ababa |Admiralto:Admirality|Island |Adono:Adonis |Adrianopolo:Adrianople |Adriatiko:Adriatic |Afganio:Afghanistan |Afganlando:Afghanistan |Afganujo:Afghanistan |Afriko:Africa |Afrodito:Aphrodite |Agamemno:Agamemnon |Agxario:Adzharia |Ahxajo:Achaea |Ahxeno:Aix-la-Chapelle |Ahxerono:Acheron |Ajaco:Ajax |Ajro:Ayr |Akeno:Aix-la-Chapelle |Akerono:Acheron |Akilo:Achilles |Akropolo:Acropolis |Aktio:Actium |Alaho:Allah |Alaska'Duoninsulo : Alaska |Peninsula |Alaska'Golfo:Gulf|of|Alaska |Alasko:Alaska |Albanio:Albania |Albanujo:Albania |Aleksandro:Alexander |Aleksandro'la'Granda:Alexander|the|Great |Aleutaj'Insuloj : Aleutian |Islands |Algxerio : Algeria |Almato : Almaty |Alpoj : Alps |Altairo : Altair |Altaja'lingvofamilio:Altai|language|family |Altajo:Altai |Amazono:Amazon |Ameriko:America |Amoro:Cupid/Eros |Amsterdamo:Amsterdam |Amudarjo:Amu|Darya |Anatolio:Anatolia |Andoro:Andorra |Andromedo:Andromeda |Angaro:Angara |Anglio:England |Anglujo:England |Angolo:Angola |Antarkta'Oceano : Antarctic |Ocean |Antarktiko : Antarctica |Antarkto : Antarctica |Antverpeno : Antwerp |Auxroro : dawn/Aurora |Auxstrala'Krono:Corona|Australis |Auxstralio:Australia |Auxstrio:Austria |Auxstro:Austria |Auxstrujo:Austria |Araba'Duoninsulo : Arabian |Peninsula |Araba'Maro:Arabian|Sea |Arabujo:Arabia |Aralo:Aral|Sea |Argentinio:Argentina |Argentinujo:Argentina |Arhximedo:Archimedes |Aristotelo:Aristotle |Arkta'Oceano : Arctic |Ocean |Arkto : Arctic |Armenujo : Armenia |Arturo : Arthur |Aseno : Assen |Askio : ASCII |Atlantiko : Atlantic |Atlanto : Atlas |of |mythology/telamon |AVI : value-added |tax |Aviceno : Avicenna |Azio : Asia |Azova'Maro:Sea|of|Azov |Azovo:Azov ", " |Baalo:Baal |Babelo:Babel |Babelturo:Tower|of|Babel |Babilonio:Babylonia |Babilono:Babylon |Baden'Virtembergo : Baden-Württemberg |Bafingolfo : Baffin |Bay |Bafinlando : Baffin |Island |Bagdado : Baghdad |Bahamo : Bahama |Bahxrajno : Bahrain |Bajelo : Bailleul |Bajkallago : Lake |Baikal |Bajkalo : Baikal |Bajruto : Beirut |Bakhxo : Bacchus |Baktrio : Bactria |Balimeno : Ballymena |Balkano : Balkan |Balkasxo : Balkhash |Balta'Maro:Baltic|Sea |Baltiko:Baltic |Balta'slavo : Balto-Slavic |Banahxo : Banach |Bandamaro : Banda |Sea |Bankoko : Bangkok |Barato : India |Barbadoso : Barbados |Barbario : Barbary |Barcelono : Barcelona |Barencmaro : Barents |Sea |Barita'Mozo:Dammed|Meuse |Barnabaso:Barnabas |Basro:Basrah |Batuo:Batu |Bavario:Bavaria |Bavarujo:Bavaria |Bazelo:Basel |Bejgxingo:Beijing |Belfasto:Belfast |Belgio:Belgium |Belgujo:Belgium |Belizo:Belize |Belorusujo:Belarus |Benelukso:Benelux |Bengala'Golfo : Bay |of |Bengal |Bengalio : Bengal |Bengalujo : Bengal |Benino : Benin |Beogrado : Belgrade |Beovulfo : Beowulf |Berenica'Haro:Coma|Berenices |Berhxeno:Mons |Beringa'Markolo : Bering |Strait |Beringa'Maro:Bering|Sea |Beringo:Bering |Beringomaro:Bering|Sea |Berlino:Berlin |Bermudo:Bermuda |Berno:Bern |Berviko'cxe'la'Tvido : Berwick |upon |Tweed |Besarabio : Bessarabia |Besarabujo : Bessarabia |Betlehxemo : Bethlehem |Biblio : Bible |Birkenhedo : Birkenhead |Birmo : Myanmar |Bisauxo : Bissau |Bizancio : Byzantium |Bizanco : Byzantium |Bjelorusio : Belarus |Bjelorusujo : Belarus |Blakpulo : Blackpool |Blanka'Maro:White|Sea |Blanka'Nilo : White |Nile |Blua'Nilo:Blue|Nile |Blua'Rivero : Yangtze |Kiang |River |Blubarbulo : Bluebeard |Boacolago : Reindeer |Lake |Bocvano : Botswana |Bodenlago : Constance |Boformaro : Beaufort |Sea |Bohemio : Bohemia |Bohemujo : Bohemia |Bolivio : Bolivia |Bombejo : Mumbai |Boreala'Krono:Corona|Borealis |Borelo:Borel |Borglono:Looz |Borneo:Borneo |Bosnio:Bosnia |Bosnio'kaj'Hercegovino:Bosnia|and|Herzegovina |Bosnio'Hercegovino : Bosnia-Hercegovina |Bosnujo : Bosnia |Bosnujo'kaj'Hercegovino : Bosnia |and |Herzegovina |Bosporo : Bosporus |Botna'Golfo:Gulf|of|Bothnia |Brabanto:Brabant |Brazilo:Brazil |Bretonio:Brittany |Bretonujo:Brittany |Bridlintono:Bridlington |Brita'Insularo : British |Islands |Brita'Kolombio:British|Columbia |Britio:Great|Britain |Brito:Brit |Britujo:Great|Britain |Brodiko:Brodick |Brugo:Bruges |Brugxo:Bruges |Brunejo:Brunei |Brunhildo:Brunhilde |Brunsviko:Brunswick |Bruselo:Brussels |Budao:Buddha |Budapesxto:Budapest |Buddo:Buddha |Bugo:Bug |Buhxoro:Bukhara |Bukuresxto:Bucharest |Bulgario:Bulgaria |Bulgarujo:Bulgaria |Burdegalo:Bordeaux |Burgoponto:Boroughbridge |Burgundio:Burgundy |Burgundujo:Burgundy |Burjatujo:Buryatia |Burkinafaso:Upper|Volta |Burkino:Burkina|Faso |Burundio:Burundi |Burundo:Burundi |Butano:Bhutan ", " |Cefeo:Cepheus |Cejlono:Ceylon |Celebesmaro:Celebes|Sea |Celebeso:Celebes |Celsio:Celsius |Celsiuso:Celsius |Centrafriko:Central|African|Republic |Centroburgo:Middlesbrough |Cerbero:Cerberus |Cereso:Ceres |Cezaro:Caesar |Cesaro:Caesar |Cibelo:Cybele |Cicero:Cicero |Ciklado:Cyclade |Cindra'Merkredo : Ash |Wednesday |Cindromerkredo : Ash |Wednesday |Cindrulino : Cinderella |Ciono : Zion |Cipro : Cyprus |Congo : Tsonga |Cxadio : Chad |Cxado : Chad |Cxadolago : Lake |Chad |Cxagosinsuloj : Chagos |Islands |Cxashundoj : Canes |Venatici |Cxecxenio : Chechnya |Cxecxenujo : Chechnya |Cxehxio : the |Czech |Republic |Cxehxoslovakio : Czechoslovakia |Cxehxoslovakujo : Czechoslovakia |Cxehxujo : the |Czech |Republic |Cxielenpreno : Assumption |Cxikago : Chicago |Cxilio : Chile |Cxingishxano : Genghis |Khan |Cxinio : China |Cxinujo : China |Cxukcxa'Duoninsulo:Chukotski|Peninsula |Cxukcxa'Maro : Chukchee |Sea ", " |Dafno:Daphne |Dagestano:Daghestan |Dagono:Dagon |Dahomeo:Dahomey |Dakaro:Dakar |Dako:Dacca |Dalmacio:Dalmatia |Dalmacujo:Dalmatia |Damasko:Damascus |Damokleso:Damocles |Dana'Markolo:Denmark|Strait |Danio:Denmark |Dankofesto:Thanksgiving|Day |Danlando:Denmark |Danubo:Danube |Danujo:Denmark |Danuo:Don |Dardanelo:Dardanelle |Darlintono:Darlington |Datumbaz'manipulilo:Xqxdata-base|management|system |Davido:David |DBM:data-base|management|system |Dedekindo:Dedekind |Dejmo:Deimos |Dek'duedro:Xqxdodecahedron |Dek'dulatero:Xqxdodecagon |Dek'unulatero:Xqxhendecagon |Delfio:Delphi |Delfto:Delft |Delhio:Delhi |Demetro:Demeter |Derbio:Derby |Devono:Devon/Devonian |Diano:Diana |Dikfingrulo:Tom|Thumb |Diluvio:Diluvium |Dio:God/a|god |Diogeno:Diogenes |Dirako:Dirac |DNA:DNA |Dolomito:Dolomite |Dominika'Respubliko:Dominican|Republic |Dominikanio:Dominican|Republic |Dominikio:Dominican|Republic |Dominiko:Dominica |Donjeco:Donetz |Donkastro:Doncaster |Dornorozeto:the|Sleeping|Beauty |Dosonkriko:Dawson|Creek |Drakmontaro:Drakensberg|Mountains |Drakmontoj:Drakensberg|Mountains |D'trajno:corridor|train |Dublino:Dublin |Duglaso:Douglas |Dukbosko:Bois-le-Duc |Dumbartono:Dumbarton |Dumfriso:Dumfries |Dunkerko:Dunkirk |Dusxanbeo:Dushanbe ", " |Ebro : Ebro |Edeno : Eden |Efeso : Ephesus |Egeja'Maro:Aegean|Sea |Egiptio:Egypt |Egiptujo:Egypt |Egiro:Aegir |Ejfelturo:Eiffel|Tower |Ejnsxtejno:Einstein |Ekstrema'Oriento : Far |East |Ekvadoro : Ecuador |Ekvatora'Gvineo:Equatorial|Guinea |Elacxetinto:Saviour |Elbruso:Mount|Elbrus |Elenhaveno:Port|Ellen |Ekvivalento'klaso : Xqxequivalence |class |Ekvivalento'rilato:Xqxequivalence|relation |Elicinsulo:Ellice|Island |Elio:Elias |Eliro:Exodus |Elsalvadoro:El|Salvador |Eneo:Aeneas |Entempligo:Presentation |Eoceno:Eocene |Eolo:Aeolus |Eoso:Eos |Epifanio:Epiphany |Epikuro:Epicure |Euxfrato:Euphrates |Euxklido:Euclid |Euxlero:Euler |Euxropo:Europe |Eriso:Eris |Eritreo:Eritrea |Ermelo:Ermelo |Esperanto:Esperanto |Esperantokulturo:Esperanto|culture |Estonio:Estonia |Estonujo:Estonia |Eternulo:Eternal|One |Etiopio:Ethiopia |Etiopujo:Ethiopia |Etruskio:Etruria |Etruskujo:Etruria |Euxropa'Unio : European |Union |Everesto : Everest |Evo : Eve ", " |Faetono:Phaeton |Fafno:Fafner |Fajrovulpo:Firefox |Fajrolando:Tierra|del|Fuego |Fenro:Fenris |Fermdigo:IJsselmeer|Dam |Festo'de'Cxiuj'Sanktuloj:All|Saints'|Day |Festo'de'la'Sankta'Triuno:Trinity|Sunday |Festo'de'Lauxbo:Feast|of|Tabernacle |Figxiinsulo:Fiji|Island |Figxio:Fiji |Figxio:Republic|of|the|Fiji|Islands |Filipinoj:Philippines |Finna'Golfo:Gulf|of|Finland |Finnio:Finland |Finnlando:Finland |Finnujo:Finland |Flandraj'Ardeno:Flemmish|Ardenne |Flandrio:Flanders |Flandrujo:Flanders |Flava'Maro:Yellow|Sea |Flava'Rivero:Yellow|River |Flisingo:Flushing |Flitvudo:Fleetwood |Florenco:Florence |Florfontano:Bloemfontein |Florido:Florida |FM'dissendilo:FM|transmitter |FM'ricevilo:FM|receiver |Fobo:Phobos |Fonto'aro:Xqxdomain |Formoso:Formosa |Fortuno:Fortune |Franca'Giano:French|Guiana |Franca'Polinezio:French|Polynesia |Francio:France/francium |Francujo:France |Frankfurto:Frankfurt |Frankfurto'cxe'la'Majno:Frankfort|upon|the|Main |Frankonio:Franconia |Frazerburgo:Fraserburgh |Frederiko:Frederick |Frisio:Frisia |Frislando:Friesland |Frisujo:Frisia |Frizonio:Friesland |Frizonujo:Friesland ", " |Gabono : Gabon |Galapagoinsulo : Galapagos |Island |Galasxilzo : Galashiels |Galegio : Galicia |Galegujo : Galicia |Galezo : Galois |Galicio : Galicia |Galicujo : Galicia |Galilio : Galilee |Galilujo : Galilee |Gambilando : Gambia |Gambio : Gambia |Ganao : Ghana |Gangxeso : Ganges |Ganimedo : Ganymede |Gano : Ghana |Gauxlio : Gaul |Gauxlujo : Gaul |Gauxso : Gauss |Gaskona'Golfo:Bay|of|Biscay |Gelderlando:Guelderland |Geldrio:Guelders |Geldrujo:Guelders |Genezo:Genesis |Germana'Demokratia'Respubliko:East|Germany |Germana'Federacia'Respubliko:German|Federal|Republic |Germanio:Germany |Germanlando:Germany |Germanujo:Germany |Getshedo:Gateshead |Gideono:Gideon |Gilbertinsulo:Gilbert|Island |Gilgamesxo:Gilgamesh |Ginevro:Guinevere |Gxenerala'Publika'Permesilo:General|Public|License |Gogo:Gog |Golgoto:Calvary/Golgotha |Goliato:Goliath |Gorgono:Gorgon |Gotaburgo:Gothenburg |Gotamo:Gautama |Gralkavaliro:Grail|Knight |Gralo:Grail |Gramonto:Grammont |Granda'Bulgarujo : Great |Bulgaria |Granda'Fasto:Lent/Ramadan |Granda'Sklavolago : Great |Slave |Lake |Granda'Ursino:Big|Dipper |Granda'Ursolago : Great |Bear |Lake |Grandaj |Antilo : Greater |Antille |Grandpolujo : Greater |Poland |Grekio : Greece |Grekujo : Greece |Grendlo : Grendel |Grenlanda'Maro:Greenland|Sea |Grenlando:Greenland |Grimzbio:Grimsby |Grinoko:Greenock |Groenlando:Greenland |Gronlando:Greenland |Guglo:Google |Gvatemalo:Guatemala |Gvineo:Guinea |Gvineo'Bisauxo : Guinea-Bissau |Gxakarto : Jakarta |Gxemeloj : Gemini |Gxeneva'Lago:Lake|of|Geneva |Gxenevo:Geneva |Gxengis:Gengis |Gxenova'Golfo : Gulf |of |Genoa |Gxenovo : Genoa |Gxibraltaro : Gibraltar |Gxibutio : Djibouti |Gxingiso : Gengis |Gxingxis : Gengis |Gxocxia'apanagxo:Golden|Horde |Gxocxio:Jöchi |Gxungario:Dzungaria ", " |Hago:The|Hague |Haitio:Haiti |Haito:Haiti |Haloveno:Halloween |Halovino:Halloween |Hamburgo:Hamburg |Hamiltono:Hamilton |Hanibalo:Hannibal |Hanojo:Hanoi |Hanovro:Hanover |Hanso:Hanseatic|League |Harlemo:Harlem |Havajo:Hawaii |Havano:Havana |Haviko:Hawick |Hebrido:Hebride |Hejmen'klavo : Xqxhome |key |Hekato : Hecate |Hektoro : Hector |Helaso : Hellas |Heldero : Den |Helder |Helenio : Greece |Heleno : Helen |Helenujo : Greece |Helsinko : Helsinki |Helvetio : Helvetia |Henegovio : Henegovia |Heraklo : Hercules |Hercegovino : Herzegovina |Herkulo : Hercules |Hermeso : Hermes |Herodoto : Herodotus |Hespero : Hesperus |Hestio : Hestia |Hesujo : Hesse |Hevisido : Heaviside |Hidro : Hydra |Hieronimo : Jerome |Hilberto : Hilbert |Himalajo : Himalayas |Hinda'Oceano:Indian|Ocean |Hindio:India |Hindocxinio:Indo-China |Hindocxinujo:Indo-China |Hindujo:India |Hindukusxo:Hindu|Kush |Hipno:Hypnos |Hipokrato:Hippocrates |Hispanio:Spain |Hispaniolo:Hispaniola |Hispanlando:Spain |Hispanujo:Spain |Hisxamo:Heysham |Holanda'Angulo : Hook |of |Holland |Holando : Holland |Holivudo : Hollywood |Homero : Homer |Honduraso : Honduras |Honduro : Honduras |Honkongo : Hong |Kong |Horuso : Horus |HTML'etikedo:HTML|tag |Huberto:Hubert |Hudsongolfo:Hudson|Bay |Hudsonkolo:Hudson|Strait |Humbro:Humber |Hungario:Hungary |Hungarlando:Hungary |Hungarujo:Hungary |Hxaldeo:Chaldea |Hxamo:Ham |Hxanuko:Chanukah |Hxarkovo:Harkow |Hxarono:Charon |Hxazarujo:Khazar|Empire |Hxeopso:Cheops |Hxeroneo:Chaeronea |Hxinio:China |Hxinujo:China |Hxio:Chios |Hxirono:Chiron |Hz:Hz ", " |Idento'bildigo : Xqxidentity |mapping |Igdrasilo : Yggdrasil |Iliado : Iliad |Imhotepo : Imhotep |Imiro : Ymir |Indonezio : Indonesia |Indro : Indra |Induso : Indus |Ingusxio : Ingushia |Ingusxujo : Ingushia |Interlingvao : Interlingua |Interna'Azio:Central|Asia |Interna'Mongolio : Inner |Mongolia |Interna'Mongolujo:Inner|Mongolia |Internacia'Labor'Organizajxo:International|Labour|Organisation |Internacia'Mona'Fonduso:International|Monetary|Fund |Interreto:Internet |Invergaro:Invergarry |Ipro:Ypres |Irako:Iraq |Irano:Iran |Ireno:Irene |Iriso:Iris |Irlanda'Maro : Irish |Sea |Irlando : Ireland |Irtisxo : Irtysh |Isido : Isis |Islando : Iceland |Islolago : IJsselmeer |Israelo : Israel |Isro : IJzer |Istanbulo : Istanbul |Isxtaro : Ishtar |Itako : Ithaca |Italio : Italy |Italujo : Italy |Izraelo : Israel ", " |Jahuo:Yahoo |Jakobio:Jacobi |Jakobo:Jacob |Jalto:Yalta |Jamajko:Jamaica |Jano:Janus |Japana'Maro:Sea|of|Japan |Japanio:Japan |Japanlando:Japan |Japanujo:Japan |Jasono:Jason |Javo:Java |Javomaro:Java|Sea |Jazono:Jason |Jehovo:Jehovah |Jemeno:Yemen |Jerihxo:Jericho |Jerusalemo:Jerusalem |Jeruzalemo:Jerusalem |Jesuo:Jesus |Jesuo'Kristo:Jesus|Christ |Jezuo:Jesus |Jido:Yiddish |Johanesburgo:Johannesburg |Johanino:Joan |Johano:John |Johano'la'Orbusxulo:John|Chrysostome |Jonika'Maro:Ionian|Sea |Jordanio:Jordan |Jordano:Jordan |Josxuo:Joshua |Jozefo:Joseph |Judujo:Judea |Jugoslavio:Yugoslavia |Jugoslavujo:Yugoslavia |Julo:Yule |Jupitero:Jupiter |Jupitro:Jupiter |Justitio:Justice |Jutlando:Jutland |Jxerzo:Jersey |Jxulo:Joule ", " |Kabalo : Cabbalah |Kabo'de'Bona'Espero:Cape|of|Good|Hope |Kaboprovinco:Cape|Province |Kaboverdo:Cape|Verde |Kabulo:Kabul |Kaburbo:Cape|Town |Kaino:Cain |Kairo:Cairo |Kaj'signo : Xqxampersand |Kajleakino : Kyleakin |Kalabrio : Calabria |Kalabrujo : Calabria |Kalifornia'Golfo:Gulf|of|California |Kalifornio:California |Kalipso:Calypso |Kalisto:Callisto |Kalvario:Calvary |Kalvario:Golgotha |Kalvino:Calvin |Kalvino:John|Calvin |Kambogxo:Cambodia |Kamcxatko:Kamchatka |Kameloto:Camelot |Kamerunio:Cameroon |Kameruno:Cameroon |Kamlopso:Kamloops |Kamo:Kama |Kampino:Kempenland |Kampucxeo:Cambodia |Kanaanio:Canaan |Kanaanujo:Canaan |Kanadio:Canada |Kanado:Canada |Kanaria'Insularo : Canary |Island |chain |Kanariaj'Insulo:Canary|Island |Kandelfesto:Candlemas |Kankro:Cancer/crawfish |Kantio:Kant |Kapitolo:Capitol |Kaprikorno:Capricorn |Kapverdaj'Insulo : Cape |Verde |Island |Karibio : Caribbean |Kauxkaza'Montaro:Caucasus|Mountains |Kauxkazaj'Montoj : Caucasus |Mountains |Kauxkazoj : Caucasus |Karaiba'Maro:Caribbean|Sea |Karbonifero:Carboniferous |Karelio:Karelia |Karia'Maro : Karian |Sea |Karibdo : Charybdis |Karlajlo : Carlisle |Karolo'la'Granda : Charlemagne |Karono : Charon |Karpataro : Carpathian |Mountains |Karpatoj : Carpathian |Mountains |Kartago : Carthage |Kartezio : Descartes |Kartvelio : Georgia |Kartvelujo : Georgia |Kasandro : Cassandra |Kasiopeo : Cassiopeia |Kaspia'Maro:Caspian|Sea |Kaspio:Caspian|Sea |Kastelburgo:Castlebury |Kastilio:Castile |Kastilujo:Castile |Kasxmiro:Kashmir |Kataro:head-cold/Qatar |Kategato:Kattegat |Kazahxio:Kazakhstan |Kazahxujo:Kazakhstan |Kelvino:Kelvin |Kenjo:Kenya |Kenozoiko:Cenozoic |Keplero:Kepler |Kerbero:Cerberus |Kergelo:Kerguelen |Kieva'Regno : Kievan |Rus' |Kievo:Kiev |Kijevo:Kiev |Kimberlio:Kimberley |Kimrio:Wales |Kimrujo:Wales |Kipro:Cyprus |Kirgizio:Kyrgyzstan |Kirgizujo:Kyrgyzstan |Kiribato:Kiribati |Kitimato:Kitimat |Kleopatro:Cleopatra |Klohxo:Clough |Kokosinsulo:Cocos|Island |Kolhxido:Colchis |Kolombio:Colombia |Kolumbo:Columbus |Kolonjo:Cologne |Kolonsajo:Colonsay |Kolvinbajo:Colwyn|Bay |Komino:Comine |Komoro:Comoro|Island |Konfuceismo:Confucianism |Konfuceo:Confucius |Kongo:Congo |Kongo'Brazavila : Republic |of |the |Congo |Kongo'Kinsxasa:Democratic|Republic|of|the|Congo |Kongolando:Congo |Konstanteno:Constantine |Konstantinopolo:Constantinople |Kopenhago:Copenhagen |Korano:Koran |Korantino:Corantin |Koreio:Korea |Koreujo:Korea |Korsikio:Corsica |Korsiko:Corsica |Kortrajo:Courtrai |Korveno:Corwen |Kosovo:Kosovo |Kostabravo:Costa|Brava |Kostariko:Costa|Rica |Kosxio:Cauchy |Kosxi'vico : fundamental |sequence |Krakovo : Krakow |Kremlo : Kremlin |Kretaceo : Cretaceous |Kreto : chalk/Crete |Krianlariko : Crianlarich |Krimeo : Crimea |Kristanujo : Christendom |Kristnaska'Festo:Christmas|season |Kristnaska'Viro : Santa |Claus |Kristnasko : Christmas |Kristo : Christ |Krisxno : Krishna |Kroatio : Croatia |Kroatujo : Croatia |Kromero : Cromer |Kubo : cube/die/Cuba |Kuraso : Curaçao |Kurdio : Kurdistan |Kurdujo : Kurdistan |Kurilo : Kurile |Island |Kuvajto : Kuwait ", " |Ladono:Ladon |Laerto:Laertes |Lakadivo:Laccadive |Lakta'Vojo:Milky|Way |Laoso:Laos |Laplaco:Laplace |Laponio:Lapland |Laponujo:Lapland |Lapteva'Maro:Laptev|Sea |Laptevmaro:Sea|of|Laptev |Lauxrenco:Lawrence |Larno:Larne |Laterono:Latheron |Latia'ligo:Latin|League |Latinida'Ameriko:Latin|America |Latino:Latin |Latvio:Latvia |Latvujo:Latvia |Lazura'Bordo:French|Riviera |Lebanono:Lebanon |Lebego:Lebesgue |Ledao:Leda |Lejdeno:Leyden |Leno:Lena |Lesoto:Lesotho |Leto:Lethe |Levanto:Levant |Liaso:Lias |Libano:Lebanon |Liberio:Liberia |Libio:Libya |Licio:boxthorn/Lycia |Lidio:Lydia |Liegxo:Liege |Liero:Lyra |Ligo'de'Nacio:League|of|Nation |Ligura'Maro:Ligurian|Sea |Ligurujo:Liguria |Lihxtenstejno:Liechtenstein |Lihxtensxtejno:Liechtenstein |Lilito:Lilith |Limburgo:Limburg |Limeriko:Limerick |Linko:Lynx |Linkolno:Lincoln |Linukso:Linux |Lisbono:Lisbon |Litovio:Lithuania |Litovujo:Lithuania |Livonio:Livonia |Livonujo:Livonia |Lofoto:Lofoten |Loglano:Loglan |Lohxalino:Lochaline |Lohxmado:Lochmaddy |Lojxbano:Lojban |Lombardujo:Lombardy |Londona'Akciborso:London|Stock|Exchange |Londono:London |Lorelejo:Lorelei |Loreno:Lorraine |Loveno:Louvain |Lucifero:Lucifer |Luko:Luke |Luksemburgio:Luxembourg |Luksemburgo:Luxembourg |Luksoro:Luxor ", " |Madagaskaro : Madagascar |Madejro : Madeira |Madono : Madonna |Madrido : Madrid |Magdalenio : Magdalenian |Magdaleno : Magdalena |Magogo : Magog |Mahometo : Mohammed |Majno : Maine |Majorko : Mallorca |Makabeo : Maccabee |Makao : Macau |Makauxo : Macao |Makedonio : Macedonia |Makedonujo : Macedonia |Makiavelo : Machiavelli |Makmuro : MacMurray |Malagasio : Madagascar |Malajgo : Mallaig |Malajio : Malaysia |Malajujo : Malaysia |Malajzio : Malaysia |Malako : Malacca |Malavilago : Lake |Malawi |Malavio : Malawi |Maldivoj : Maldives |Maldivoj : Republic |of |Maldives |Maledivo : Maldive |Island |Malgranda'Azio:Asia|Minor |Malgranda'Ursino : Little |Dipper |Malgrandaj'Antilo:Lesser|Antille |Malgrand'Azio : Asia |Minor |Malgrandpolujo : Little |Poland |Malio : Mali |Malnova'Testamento:Old|Testament |Malnovbavarujo:Old|Bavaria |Malproksima'Oriento : Far |East |Malto : malt/Malta |Mamono : Mammon |Mancxurio : Manchuria |Mancxurujo : Manchuria |Mangxurio : Manchuria |Manika'Kolo:Strait|of|Dover |Manikaj'Insulo : Channel |Island |Maniko : sleeve/English |Channel |Manikuagano : Manikuagan |Manilo : Manila |Manitobolago : Lake |Manitoba |Mauxricio : Mauritius |Mauxrolando : Mauritania |Mauxrujo : Mauritania |Mariano : Mariana |Island |Markiso : Marquesas |Island |Markolo'de'Forto : Firth |of |Forth |Markso : Marx |Maro : Sea |Maroko : Morocco |Marso : Mars |Marsxalinsulo : Marshall |Island |Marsxaloj : Marshall |Islands |Mastrihxto : Maastricht |Materhorno : Matterhorn |Medino : Medina |Mediteraneo : Mediterranean |Meduzo : Medusa |Mefisto : Mephistopheles |Mefistofelo : Mephistopheles |Mehxleno : Mechlin |Mehxlino : Mechlin |Mekko : Mecca |Mekongo : Mekong |Meksikia'Golfo:Gulf|of|Mexico |Meksikio:Mexico |Meksiklando:Mexico |Meksiko:Mexico|City |Meksikujo:Mexico |Melanezio:Melanesia |Mendelevo:Mendeleev |Merkuro:Mercury |Mesino:Messina |Metodio:Methodius |Metusxelahxo:Methuselah |Meza'Oriento : Middle |East |Mezafrika'Respubliko:Central|African|Republic |Mezameriko:Central|America |Mezazio:Central|Asia |Mezepoko:Middle|Ages |Mezeuxropo:Central|Europe |Mezmaro:Mediterranean |Mezolitiko:Mesolithic|Age |Mezopotamio:Mesopotamia |Mezoriento:Middle|East |Mezozoiko:Mesozoic |Mianmaro:Myanmar |Micxjo'Muso : Mickey |Mouse |Midaso : Midas |Mihxaelo : Michael |Mikelangxelo : Michelangelo |Mikeno : Mycenae |Mikronezio : Micronesia |Milano : Milan |Mincxo : Minch |Minervo : Minerva |Mioceno : Miocene |Moldavio : Moldavia |Moldavujo : Moldavia |Molohxo : Moloch |Moluko : Molucca |Monako : monk/Monaco |Monda'Banko:World|Bank |Monda'Naturfonduso : World |Wildlife |Fund |Monda'Organizajxo'pri'Meteologio:World|Meteorological|Organisation |Monda'Organizajxo'pri'Sano : World |Health |Organisation |Monda'Organizajxo'pri'Turismo:World|Tourism|Organisation |Mongolio:Mongolia |Mongolujo:Mongolia |Montenegro:Montenegro |Montrozo:Montrose |Moravio:Moravia |Morfeo:Morpheus |Morifirto:Moray|Firth |Morso:Morse |Morta'Maro : Dead |Sea |Moseo : Moses |Moskvo : Moscow |Mozambiko : Mozambique |Mozelo : Moselle |Mozo : Meuse |Muhamado : Mohammed |Mumbajo : Mumbai ", " |Nameno:Namur |Namibio:Namibia |Napoleono:Napoleon |Napolo:Naples |Naserlago:Lake|Nasser |Natalo:Natal |Nauro:Nauru |Nauro:Republic|of|Nauru |Nazareto:Nazareth |Nebukadnezo:Nebuchadnezzar |Nederlanda'Suda'Maro:Zuider|Zee |Nederlandaj'Antilo:Netherlands|Antille |Nederlando:ññthe|Netherlands |Negxulino:Snow|White |Nemeso:Nemesis |Neolitiko:Neolithic |Nepalo:Nepal |Nepero:Napier |Neptuno:Neptune |Neuxrenbergo:Nuremberg |Neuxtono:Newton |Nia'Sinjorino:Our|Lady |Nicxjo'la'Dormigulo:the|Sandman |Nigerio:Nigeria |Nigra'Arbaro:Black|Forest |Nigra'Maro:Black|Sea |Nigxerio:Nigeria |Nigxero:Niger |Nikaragvo:Nicaragua |Nikobaro:Nicobar|Island |Nikolao:Nicholas |Nilo:Nile |Nimego:Nimwegen |Nimrodo:Nimrod |Noahxo:Noah |Nord'Koreujo:North|Korea |Norda'Ameriko:North|America |Norda'Dvino:Northern|Dvina |Norda'Maro:North|Sea |Nordafriko:North|Africa |Nordameriko:North|America |Nord'Atlantika'Traktat'Organizajxo:NATO |Nordbrabanto:North|Brabant |Nordholando:North|Holland |Nord'Holando:North|Holland |Nordirlando:Northern|Ireland |Nordkoreio:North|Korea |Nordkoreujo:North|Korea |Nordvjetnamo:North|Vietnam |Normandio:Normandy |Norvegio:Norway |Norvegujo:Norway |Nov:New |Nova'Epoko:New|Age |Nova'Gvineo:New|Guinea |Nova'Kaledonio:New|Caledonia |Nova'Sudkimrio:New|South|Wales |Nova'Sudkimrujo:New|South|Wales |Nova'Testamento:New|Testament |Novaj'Hebrido:New|Hebride |Novjaro:New|Year's |Novjartago:New|Year's|Day |Novjarvespero:New|Year's|Eve |Novjorka'Akciborso:Wall|Street/NYSE |Novjorko:New|York|City |Novkaledonio:New|Caledonia |Novkaledonujo:New|Caledonia |Nov'Meksikio:New|Mexico |Nov'Orleana'jxazo:New|Orleans|jazz |Novosibirsko:Novosibirsk |Novtero:Newfoundland |Novzelando:New|Zealand |Nov'Zelando:New|Zealand |Nubio:Nubia |Nurio:Newry ", " |Oberono : Oberon |Obo : Ob |Oceanio : Oceania |Odino : Odin |Odiseado : Odyssey |Odiseo : Ulysses |Odro : Oder |Ohxocka'Maro:Sea|of|Okhotsk |Ojdipo:Oedipus |Okao:Oka |Okcidenta'Azio : Western |Asia |Okcidenta'Azio:Western|Asia |Okcidenta'Dvino : Western |Dvina |Okcidenta'Flandrio:West|Flanders |Okcidenta'Flandrujo : West |Flanders |Okcidenta'Germanujo:West|Germany |Okcidenta'Kongo : Republic |of |the |Congo |Okcidenta'Skeldo:Western|Skeldt |Okcidentaj'Indio : West |Indie |Okcidentauxstralio : West |Australia |Okeano : Oceanus |Oligoceno : Oligocene |Olimpo : Olympus |Omana'Golfo:Gulf|of|Oman |Omano:Oman |Onufrio:Humphrey |Ora'Bordo : Gold |Coast |Ora'hordo:Golden|Horde |Ora'Lanfelo : Golden |Fleece |Orangxrespubliko : Orange |Free |State |Ordo'rilato:Xqxorder|relation |Orfeo:Orpheus |Organizajxo'de'Petrol'Eksportaj'Landoj:OPEC |Organizajxo'por'Ekonomiaj'Kunlaboro'kaj'Evoluigo : Organisation |for |Economic |Cooperation |and |Development |Orienta'Azio:East|Asia |Orienta'Cxina'Maro:East|China|Sea |Orienta'Flandrio : East |Flanders |Orienta'Flandrujo:East|Flanders |Orienta'Frislando : East |Friesland |Orienta'Frizonio:East|Friesland |Orienta'Frizonujo : East |Friesland |Orienta'Kongo:Democratic|Republic|of|the|Congo |Orienta'Skeldo : East |Skeldt |Orienta'Timoro:Democratic|Republic|of|Timor-Leste |Orienta'Timoro : East |Timor |Orientazio : East |Asia |Orientcxina'Maro:East|China|Sea |Orientsiberia'Maro : East |Siberian |Sea |Oriono : Orion |Orkniinsularo : Orkney |Island |chain |Osetio : Ossetia |Osetujo : Ossetia |Osiro : Osiris |Oslo : Oslo |Ostendo : Ostend |Oterburno : Otterburn ", " |Pacifiko:Pacific |Pado:Po |Pajno:Pan |Pakistano:Pakistan |Palauxo:Palau |Paleoceno:Paleocene |Paleolitiko:Paleolithic |Paleozoiko:Paleozoic |Palestino:Palestine |Palio:Pali |Palmodimancxo:Palm|Sunday |Palmofesto:Palm|Sunday |Panama'Golfo:Gulf|of|Panama |Panamo:Panama |Pandoro:Pandora |Papo:Pope |Papua'Nova'Gvineo:Papua|New|Guinea |Pauxlino:Pauline |Pauxlo:Paul |Paragvajo:Paraguay |Parakleto:Paraclete |Paralimpiko:Paralympic|Games |Pariso:Paris |Parizo:Paris |Parnaso:Parnassus |Pasiono:Passion |Paska'semajno:Easter|Week |Paskalo:Pascal |Pasko:Easter/Passover |Patagonio:Patagonia |Patro'Kristnasko:Santa|Claus |Pegaso:Pegasus |Pekino:Beijing |Penelopo:Penelope |Pentateuxko:Pentateuch |Pentekosto:Pentecost |Perioda'tabelo:Periodic|Table |Permo:Perm |Persa'Golfo:Persian|Gulf |Persefono:Persephone |Perseo:Perseus |Persio:Persia |Persujo:Persia |Peruo:Peru |Pesilo:scale/Libra |Petroburgo:Saint|Petersburg |Petromaricburgo:Pietermaritzburg |Pfalzo:Palatinate |Pilato:Pilate |Pinjino:pinyin |Pirenearo:Pyrenees |Pireneoj:Pyrenees |Pitagoro:Pythagoras |Piterhedo:Peterhead |Pitono:Python |Pjangxo:Pandj |Platono:Plato |Platono:Plato |Pleistoceno:Pleistocene |Plejado:Pleiade |Plinio:Pliny |Plinio'la'Juna:Pliny|the|Younger |Plinio'la'Maljuna:Pliny|the|Elder |Plioceno:Pliocene |Pluto:Pluto |Plutono:Pluto |Po'signo:Xqxat|sign |Polinezio:Polynesia |Polio:Poland |Pollando:Poland |Polujo:Poland |Polusa'stelo:North|star/Polaris |Pomerio:Pomerania |Pomerujo:Pomerania |Pompejo:Pompeii |Portaskajgo:Port|Askaig |Porto:Oporto |Portugalio:Portugal |Portugalujo:Portugal |Posejdono:Poseidon |Prago:Prague |Pretorio:Pretoria |Principeo:Príncipe |Proksima'Oriento:Middle|East |Prometeo:Prometheus |Proteo:Proteus |Proterozoiko:Proterozoic |Prusio:Prussia |Pruslando:Prussia |Prusujo:Prussia |Psihxo:Psyche |Ptolemeo:Ptolemy |Pulcxinelo:Punch |Purimfesto:Purim ", " |uxajto : Isle |of |Wight ", " |Ragxastujo:Rajasthan |Rao:Ra |Readmono:Deuteronomy |Redemptoro:Saviour |Reformacio:Reformation |Regna'Delegitaro:States|General |Regxino'Cxarlotinsulo:Queen|Charlotte|Island |Rejnlando:Rhineland |Rejno:Rhine |Renesanco:Renaissance |Renaskigxo:Renaissance |Riado:Riyadh |Rimano:Riemann |Riviero:Italian|Riviera |Roberto:Robert |Rodano:Rhone |Rodesio:Rhodesia |Rodezio:Rhodesia |Rogxero:Roger |Rokmontaro:Rocky|Mountains |Rokmontoj:Rocky|Mountains |Romio:the|Roman|Empire |Romo:Rome/novel |Roterdamo:Rotterdam |Ruando:Rwanda |Rubikono:Rubicon |Rudolflago:Lake|Rudolf |Rugxa'Kruco:Red|Cross |Rugxa'Maro:Red|Sea |Rugxkufulineto:Little|Red|Ridinghood |Rumanio:Romania |Rumanujo:Romania |Ruro:Ruhr |Rurvalo:Ruhr |Rusio:Russia |Ruslanda'Federacio:Russian|Federation |Ruslanda'Imperio:Russian|Empire |Ruslando:Russia |Rusujo:Russia ", " |Sagitario : Sagittarius |Saharo : Sahara |Sahxaleno : Sakhalin |Sakramenta'Tago:Corpus|Christi |Saksio:Saxony |Saksujo:Saxony |Salomono:Solomon|Island |Samoo:Samoa |Sanktuloj:Saints |Sanktulo:Saint |Sankta'Jxauxdo : Maundy |Thursday |Sankta'Mangxo:Last|Supper |Sankta'Nikolao : Saint |Nicholas |Sankta'Roma'Imperio'Gxermana:Holy|Roman|Empire |Sankta'Semajno : Holy |Week |Sankta'Skribo:Holy|Scripture |Sankta'Spirito : Holy |Spirit |Sankta'Vendredo:Good|Friday |Sankt'Peterburgo : Saint-Petersburg |Sanktulara'Festo:All|Saints' |Day |Sanmarino : San |Marino |Sanskrito : Sanskrit |Santomeo : São |Tomé |Santomeo'kaj'Principeo : São |Tomé |and |Príncipe |Sauxda'Arabujo:Saudi|Arabia |Sauxd'Arabujo : Saudi |Arabia |Sardinio : Sardinia |Sardio : Sardinia |Sardlando : Sardina |Sardujo : Sardinia |Sarlando : Saarland |Satano : devil/Satan |Saturnalio : Saturnalia |Saturno : Saturn |Sauda'Arabujo:Saudi|Arabia |Saudarabio:Saudi|Arabia |Saud'Arabujo : Saudi |Arabia |Savarmeo : Salvation |Army |Savinto : Saviour |Sejsxeloj : Seychelles |Selando : Zealand |Senegalio : Senegal |Senegalo : Senegal |Sentheleno : Saint |Helena |Septuaginto : Septuagint |Serbio : Serbia |Serbujo : Serbia |Sergio : Sergius |Sesxelo : Seychelle |Seto : Seth |Siamo : Siam/Thailand |Siberio : Siberia |Sibrandaboro : Sijbrandaburen |Sicilio : Sicily |Sieraleono : Sierra |Leone |Sigma'algebro:Xqxsigma-algebra/sigma-field |Silezio:Silesia |Silicia'Valo : Silicon |Valley |Silurio : Silurian |Siluro : Silurian |Silvestro : Sylvester |Singapuro : Singapore |Sinjorojn : Misters |Sinjoron : Mr |Sinjorinojn : Missuses |Sinjorinon : Mrs |Sinjoroj : Misters |Sinjoro : Mr |Sinjorinoj : Missuses |Sinjorino : Mrs |Sirakuso : Syracuse |Sirdarjo : Jaxartes |Sirio : Syria |Siriuso : Sirius |Skandinavio : Scandinavia |Skandinavujo : Scandinavia |Skeldo : Scheldt |Skilo : Scylla |Skitujo : Scythia |Skorpio : Scorpio |Skotio : Scotland |Skotlando : Scotland |Skotujo : Scotland |Skrablo : Scrabble |Slavonio : Slavonia |Slavono : Church |Slavonic |Slavono : Slavonic |Slavonujo : Slavonia |Slovakio : Slovakia |Slovakujo : Slovakia |Slovenio : Slovenia |Slovenujo : Slovenia |Sokrato : Socrates |Somalio : Somalia |Somalujo : Somalia |Sovetio : the |Soviet |Union |Sovetujo : the |Soviet |Union |Sovetunio : Soviet |Union |Sparto : Sparta |Srilanko : Sri |Lanka |s'ta:St |Stanislavo:Stanislaus |Stefano:Stephen |Stikso:Styx |Stirio:Styria |Stokholmo:Stockholm |Strasburgo:Strassburg |Sud'Koreujo : South |Korea |Suda'Ameriko:South|America |Suda'Azio : Southern |Asia |Suda'Kruco:Southern|Cross |Sudafriko:South|Africa |Sudameriko:South|America |Sudano:Sudan |Sudauxstralio:South|Australia |Sudcxina'Maro : South |China |Sea |Sud'Holando:South|Holland |Sudkoreio:South|Korea |Sudkoreujo:South|Korea |Sudorientazio:Southeast|Asia |Sudvjetnamo:South|Vietnam |Sulumaro:Sulu|Sea |Sumatro:Sumatra |Sumerio:Sumer |Sumerujo:Sumer |Superviro:Superman |Suprelago:Lake|Superior |Surinamo:Surinam |Svalbardo:Spitsbergen |Svazilando:Swaziland |Svedio:Sweden |Svedlando:Sweden |Svedujo:Sweden |Svisio:Switzerland |Svislando:Switzerland |Svisujo:Switzerland |Sxanhajo:Shanghai |Sxekspiro:William|Shakespeare |Sxengenion:the|Schengen|countries |Sxlesvigholstinio:Schleswig-Holstein |Sxlesvigo'Holsxtejno : Schleswig-Holstein |Sxvabi : Swabia |Sxvabuj : Swabia |s'ro:Mr |s'ino : Mrs ", " |Tago'de'la'Mortinto:All|Souls'|Day |Tago'de'la'Patrinoj:Mother's|Day |Tago'de'Pekliberigo:Day|of|Atonement |Tagxikio:Tajikistan |Tagxikujo:Tajikistan |Tahito:Tahiti |Tahxo:Tagus |Taja'Novjaro:Thai|New|Year |Tajlanda'Golfo:Gulf|of|Thailand |Tajlando:Thailand |Tajvano:Taiwan |Taleso:Thales |Talmudo:Talmud |Tamizo:Thames |Tangxero:Tangier |Tanzanio:Tanzania |Tasmanio:Tasmania |Tasxkento:Tashkent |Tatarujo:Tatarstan |Tehxrano:Teheran |Teksaso:Texas |Tendofesto:Feast|of|Tabernacles |Teravado:Theravada |Tero:earth |Tersolo:Terzool |Tertiaro:Tertiary |Tiberio:Tiberius |Tibero:Tiber |Tibeto:Tibet |Tigriso:Tigris |Timormaro:Timor|Sea |Timoro:Timor |Tincxjo:Tintin |Tirena'Maro:Tyrrhenian|Sea |Titano:Titan |To'cxemizo:XqxT-shirt |Tobago:Tobago |Togo:Togo/toga |Tokjo:Tokyo |Tongo:Tonga |Torao:Pentateuch |Torino:Turin |Toskanio:Tuscany |Toskanujo:Tuscany |Tracio:Thrace |Transfigurigxo:Transfiguration |Transilvanio:Transylvania |Transkejo:Transkei |Transvalo:the|Transvaal |Triaso:Triassic |Triero:Treves |Triesto:Trieste |Trinidado:Trinidad |Trinidado'kaj'Tobago:Trinidad|and|Tobago |Tripitako:Tripitaka |Tripolo:Tripoli |Tritono:Triton |Triunuo:Trinity |Trojo:Troy |TTT:World-Wide|Web |TTT'ejo:web|site |TTT'pagxaro:web|site |TTT'pagxo:web|page |Tukano:Toucan |Tuniso:Tunis |Tunizio:Tunisia |Tunizo:Tunis |Turkio:Turkey |Turkmenio:Turkmenistan |Turkmenujo:Turkmenistan |Turkujo:Turkey |Tut'Tera'Teksajxo:World-Wide|Web |Tuvalo:Tuvalu ", " |Ugando : Uganda |Ukrainio : the |Ukraine |Ukrainio : Ukraine |Ukrainujo : the |Ukraine |Ukrajnujo : the |Ukraine |Uliso : Ulysses |Unikodo : Unicode |Unikso : Unix |Unio'de'Sovetaj'Socialismaj'Respublikoj : Soviet |Union |Universala'Kongreso:Esperanto|World|Congress |Unuigxintaj'Nacio : United |Nation |Unuigxintaj'nacioj:United|Nations |Uralaro:Ural|Mountains |Uraloj:Ural|Mountains |Urano:Uranus |Ursinsulo:Bear|Island |Urugvajo:Uruguay |Usona'Samoo : American |Samoa |Usono : the |United |States |Utopio : Utopia |Utrehxto : Utrecht |Uzbekio : Uzbekistan |Uzbekujo : Uzbekistan ", " |Valakio:Wallachia |Valencia'Golfo:Gulf|of|Valencia |Valencio:Valencia |Valencujo:Valencia |Valhalo:Valhalla |Valo'de'la'Regxoj:Valley|of|the|Kings |Valonio:Wallonia |Valonujo:Wallonia |Vanuatuo:Vanuatu |Varsovio:Warsaw |Vaskio:Basque|country |Vaskujo:Basque|Country |Vatikana:Vatican |Vatikano:Vatican |Vatikanurbo:Vatican|City |Veneco:Venice |Venezuela'Golfo:Gulf|of|Venezuela |Venezuelo:Venezuela |Venusa:Venusian |Venuso:Venus |Vestfalio:Westphalia |Vezero:Weser |Vezuvio:Vesuvius |Vezuvo:Vesuvius |Vieno:Vienna |Viktorilago:Lake|Victoria |Viktorio:Victoria |Vilhelmfortikajxo:Fort|William |Vindozo:Windows |Virgulinaj'Insulo:Virgin|Island |Virhidro:Hydrus |Vistulo:Vistula |Visxnuo:Vishnu |Vjetnamio:Vietnam |Vjetnamo:Vietnam |Vjetnamujo:Vietnam |Voduismo:Voodoo |Vogezo:Vosge |Volga'Kama'Bulgarujo:Volga|Bulgaria |Volgo:Volga |Voltao:Volta |Vulgato:Vulgate ", " |W : W ", " |X:X ", " |Y : Y ", " |Zairio:Zaire |Zairo:Zaire |Zambio:Zambia |Zamenhofo:Zamenhof |Zamo:Zama |Zelanda'Flandrio:Dutch|Flanders |Zelanda'Flandrujo:Dutch|Flanders |Zelando:Zealand |Zeuxso:Zeus |Zimbabvo:Zimbabwe |" };
static int EITHER_PLURAL_OR_YOU_SINGULAR = 4;
static int EXISTS = 1;
static int FIRST_PERSON_SINGULAR = 1;
static int FOUND = 0;
static int NOT_FOUND = -1;
static int START = 1;
static int THIRD_PERSON_SINGULAR = 3;
static string ABSTRACT_ENDING = "eco";
static string ADJECTIVE_ACCUSATIVE = "*a*n*¯";
static string ADJECTIVE_ACCUSATIVE_ORIG = "an*¯";
static string ADJECTIVE_ACCUSATIVE_SUFFIX = "a*n*¯";
static string ADJECTIVE_ENDING = "*a*";
static string ADJECTIVE_MARKER = "A";
static string ADJECTIVE_MARKER_LC = "a";
static string ADJECTIVE_PLURAL = "*a*j*¯";
static string ADJECTIVE_PLURAL_ACCUSATIVE = "*a*j*n*¯";
static string ADJECTIVE_PLURAL_ACCUSATIVE_ORIG = "ajn*¯";
static string ADJECTIVE_PLURAL_ACCUSATIVE_SUFFIX = "a*j*n*¯";
static string ADJECTIVE_PLURAL_ORIG = "aj*¯";
static string ADJECTIVE_PLURAL_SUFFIX = "a*j*¯";
static string ADJECTIVE_SINGULAR = "*a*¯";
static string ADJECTIVE_SUFFIX = "a*¯";
static string ADJECTIVE_TAG = "*¯*A";
static string ADVERB = "¯*E";
static string ADVERB_OR_EXCLAMATION = "¯*F";
static string ADVERB_OR_EXCLAMATION_LC = "¯*f";
static string ADVERB_ENDING = "*e*";
static string ADVERB_LC = "¯*e";
static string ADVERB_MARKER = "E";
static string ADVERB_MARKER_LC = "e";
static string ADVERB_SUFFIX = "e*¯";
static string CONDITIONAL = "us";
static string CONDITIONAL_ENDING = "*us*";
static string CONDITIONAL_SUFFIX = "*us*¯";
static string CONJUNCTION = "¯*C";
static string CORELATIVE = "iu*¯*A";
static string CORELATIVE_ACCUSATIVE = "un*¯*A";
static string CORELATIVE_PLURAL = "uj*¯*A";
static string CORELATIVE_PLURAL_ACCUSATIVE = "ujn*¯*A";
static string DIGITS = "0123456789";
static string DIVIDER = "*¯*";
static string DIV = "¯";
static string EO_LETTERS_NO_CIRC = "cghjsuCGHJSU";
static string EO_LETTERS_CIRC = "\u0109\u011d\u0125\u0135\u015d\u016d\u0108\u011c\u0124\u0134\u015c\u016c";
static string FEMALE_ENDING = "in*o*¯";
static string FUTURE = "os";
static string FUTURE_ENDING = "*os*";
static string FUTURE_SUFFIX = "*os*¯";
static string IMPERATIVE = "u*¯*I";
static string IMPERATIVE_ENDING = "*u*";
static string INFINITIVE = "i*¯*I";
static string INFINITIVE_ENDING = "*i*";
static string INFINITIVE_MARKER = "I";
static string INFINITIVE_MARKER_LC = "i";
static string MARKERS = "AEOIF";
static string NEGATIVE_ENGLISH_CONTRACTION = "n't";
static string NOT_THIRD_PERSON_SINGULAR = "not 3ps";
static string NOUN = "o*¯*O";
static string NOUN_ACCUSATIVE_ENDING = "*o*n*¯";
static string NOUN_ACCUSATIVE_ENDING_ORIG = "on*¯";
static string NOUN_ACCUSATIVE_SUFFIX = "o*n*¯";
static string NOUN_ENDING = "*o*";
static string NOUN_MARKER = "O";
static string NOUN_MARKER_LC = "o";
static string NOUN_PLURAL_ACCUSATIVE_ENDING = "*o*j*n*¯";
static string NOUN_PLURAL_ACCUSATIVE_ENDING_ORIG = "ojn*¯";
static string NOUN_PLURAL_ACCUSATIVE_SUFFIX = "o*j*n*¯";
static string NOUN_PLURAL_ENDING = "*o*j*¯";
static string NOUN_PLURAL_ENDING_ORIG = "oj*¯";
static string NOUN_PLURAL_SUFFIX = "o*j*¯";
static string NOUN_SINGULAR = "o*¯";
static string NOUN_SINGULAR_ENDING = "*o*¯";
static string NUMBER = "¯*N";
static string PAREN = "|*¯*|Wzx";
static string PART_OF_SPEECH_TAGS = "OAEIFPCZQXoaeifpczqx";
static string PLURAL = "j*¯*O";
static string PREPOSITION = "¯*P";
static string PREPOSITION_MARKER = "*¯*P";
static string PRESENT = "as";
static string PRESENT_ENDING = "*as*";
static string PRESENT_SUFFIX = "*as*¯";
static string PRETERITE_ENDING = "*is*";
static string PRETERITE = "is";
static string PRETERITE_SUFFIX = "*is*¯";
static string PRONOUN_ACCUSATIVE_ENDING = "in*¯*Z";
static string PRONOUN_ENDING = "i*¯*Z";
static string PROPER_NOUN_ACCUSATIVE_ENDING = "n|*¯*|";
static string PROPER_NOUN_DIVIDER = "|*¯*|";
static string PROPER_NOUN_DIVIDER_AMBIG = "d|*¯*|";
static string PROPER_NOUN_PLURAL_ENDING = "j|*¯*|";
static string PROPER_NOUN_SINGULAR_ENDING = "o|*¯*|";
static string SENTENCE_END_PUNCTUATION = ".!?;";
static string VERB_AS_ENDING = "as*¯*I";
static string VERB_S_ENDING = "s*¯*I";
static string VOWELS = "aeiou";
static string instructions = "Click the Erase button above, "
"and type or copy and paste a text in Esperanto here, then click on "
"the Translate button above to see its meaning. Translation of a "
"paragraph requires a few seconds. Letters with circumflexes are "
"allowed, and also the X-method is allowed. Other options are below."
"\r\n\r\nIf you like this program and want to "
"donate money, please send a check or money order in U.S. dollars to:\r\n\r\n"
"David Crandall\r\n4667 Cimarron Way\r\nGranite Bay, CA 95746\r\nU.S.A.\r\n\r\nThe "
"creator of this program doesn't assume responsibility for its use or accuracy.";
static string instructions2 = "Klaku sur la butono Skrapu supre "
"kaj skribu au kopiu kaj gluu tekston maldekstre en Esperanto, kaj poste "
"klaku sur la butono Traduku supre por vidi ghian signifon en la "
"angla. Traduko de paragrafo postulas kelkajn sekundojn. "
"Cirkumfleksoj estas permesataj, kaj ankau la X-metodo estas "
"permesata. Aliaj alternativoj estas malsupre. "
"\r\n\r\nSe vi shatas chi tiun programon kaj vi volas donacii monon, "
"bonvolu sendi chekon au posxtmandaton de usonaj dolaroj al:\r\n "
"\r\nDavid Crandall\r\n4667 Cimarron Way\r\nGranite Bay, CA 95746\r\nU.S.A. "
"\r\n\r\nLa kreinto de chi tiu programo ne havas prirespondecon pri "
"ghiaj uzo au ghusteco.";
static string indexAlphabet = " abcdefghijklmnopqrstuvxz";
//static string multitermProperNouns = "Adena Golfo:Adena'GolfoAdenan Golfo:Adena'GolfoAlaska Duoninsulo:Alaska'DuoninsuloAlaska Golfo:Alaska'GolfoAlaskan Duoninsulo:Alaska'DuoninsuloAlaskan Golfo:Alaska'GolfoAleksandro la Granda:Aleksandro'la'GrandaAleksandron la Granda:Aleksandro'la'GrandaAleutaj Insulo:Aleutaj'InsuloAleutajn Insulo:Aleutaj'InsuloAltaja lingvofamilio:Altaja'lingvofamilioAltajan lingvofamilio:Altaja'lingvofamilioAntarkta Oceano:Antarkta'OceanoAntarktan Oceano:Antarkta'OceanoAuxstrala Krono:Auxstrala'KronoAuxstralan Krono:Auxstrala'KronoAraba Duoninsulo:Araba'DuoninsuloAraba Maro:Araba'MaroAraban Duoninsulo:Araba'DuoninsuloAraban Maro:Araba'MaroArkta Oceano:Arkta'OceanoArktan Oceano:Arkta'OceanoAzova Maro:Azova'MaroAzovan Maro:Azova'MaroBaden-Virtembergo:Baden'VirtembergoBaden-Virtembergo:Baden'VirtembergoBalta Maro:Balta'MaroBaltan Maro:Balta'MaroBarita Mozo:Barita'MozoBaritan Mozo:Barita'MozoBengala Golfo:Bengala'GolfoBengalan Golfo:Bengala'GolfoBerenica Haro:Berenica'HaroBerenican Haro:Berenica'HaroBeringa Markolo:Beringa'MarkoloBeringa Maro:Beringa'MaroBeringan Markolo:Beringa'MarkoloBeringan Maro:Beringa'MaroBerviko cxe la Tvido:Berviko'cxe'la'TvidoBervikon cxe la Tvido:Berviko'cxe'la'TvidoBlanka Maro:Blanka'MaroBlanka Nilo:Blanka'NiloBlankan Maro:Blanka'MaroBlankan Nilo:Blanka'NiloBlua Nilo:Blua'NiloBlua Rivero:Blua'RiveroBluan Nilo:Blua'NiloBluan Rivero:Blua'RiveroBoreala Krono:Boreala'KronoBorealan Krono:Boreala'KronoBosnio kaj Hercegovino:Bosnio'kaj'HercegovinoBosnio-Hercegovino:Bosnio'HercegovinoBosnio-Hercegovino:Bosnio'HercegovinoBosnion kajn Hercegovino:Bosnio'kaj'HercegovinoBosnujo kaj Hercegovino:Bosnujo'kaj'HercegovinoBosnujon kajn Hercegovino:Bosnujo'kaj'HercegovinoBotna Golfo:Botna'GolfoBotnan Golfo:Botna'GolfoBrita Insularo:Brita'InsularoBrita Kolombio:Brita'KolombioBritan Insularo:Brita'InsularoBritan Kolombio:Brita'KolombioCelo-aro:Celo'arocelo-aro:Celo'aroCindra Merkredo:Cindra'MerkredoCindran Merkredo:Cindra'MerkredoCxukcxa Duoninsulo:Cxukcxa'DuoninsuloCxukcxa Maro:Cxukcxa'MaroCxukcxan Duoninsulo:Cxukcxa'DuoninsuloCxukcxan Maro:Cxukcxa'MaroDana Markolo:Dana'MarkoloDanan Markolo:Dana'MarkoloDatumbaz-manipulilo:Datumbaz'manipulilodatumbaz-manipulilo:Datumbaz'manipuliloDek-duedro:Dek'duedrodek-duedro:Dek'duedroDek-dulatero:Dek'dulateroDek-dulatero:Dek'dulaterodek-unulatero:Dek'unulaterodek-unulatero:Dek'unulateroDominika Respubliko:Dominika'RespublikoDominikan Respubliko:Dominika'RespublikoD-trajno:D'trajnoD-trajno:D'trajnoEkstrema Oriento:Ekstrema'OrientoEkstreman Oriento:Ekstrema'OrientoEkvatora Gvineo:Ekvatora'GvineoEkvatoran Gvineo:Ekvatora'GvineoEkvivalento-klaso:Ekvivalento'klasoekvivalento-klaso:Ekvivalento'klasoEkvivalento-rilato:Ekvivalento'rilatoekvivalento-rilato:Ekvivalento'rilatoEuxropa Unio:Euxropa'UnioEuxropan Unio:Euxropa'UnioFesto de Cxiuj Sanktuloj:Festo'de'Cxiuj'SanktulojFesto de la Sankta Triuno:Festo'de'la'Sankta'TriunoFesto de Lauxbo:Festo'de'LauxboFeston de Cxiujn Sanktuloj:Festo'de'Cxiuj'SanktulojFeston de la Sanktan Triuno:Festo'de'la'Sankta'TriunoFeston de Lauxbo:Festo'de'LauxboFinna Golfo:Finna'GolfoFinnan Golfo:Finna'GolfoFlandraj Ardeno:Flandraj'ArdenoFlandrajn Ardeno:Flandraj'ArdenoFlava Maro:Flava'MaroFlava Rivero:Flava'RiveroFlava Rivero:Flava'RiveroFlavan Maro:Flava'MaroFlavan Rivero:Flava'RiveroFlavan Rivero:Flava'RiveroFM-dissendilo:FM'dissendiloFM-dissendilo:FM'dissendiloFM-ricevilo:FM'riceviloFM-ricevilo:FM'riceviloFonto-aro:Fonto'arofonto-aro:Fonto'aroFranca Giano:Franca'GianoFranca Polinezio:Franca'PolinezioFrancan Giano:Franca'GianoFrancan Polinezio:Franca'PolinezioFrankfurto cxe la Majno:Frankfurto'cxe'la'MajnoFrankfurton cxe la Majno:Frankfurto'cxe'la'MajnoGermana Demokratia Respubliko:Germana'Demokratia'RespublikoGermana Federacia Respubliko:Germana'Federacia'RespublikoGermanan Demokratian Respubliko:Germana'Demokratia'RespublikoGermanan Federacian Respubliko:Germana'Federacia'RespublikoGNUa Gxenerala Publika Permesilo:GNUa'Gxenerala'Publika'PermesiloGNUan Gxeneralan Publikan Permesilo:GNUa'Gxenerala'Publika'PermesiloGranda Bulgarujo:Granda'BulgarujoGranda Fasto:Granda'FastoGranda Fasto:Granda'FastoGranda Sklavolago:Granda'SklavolagoGranda Ursino:Granda'UrsinoGranda Ursolago:Granda'UrsolagoGrandaj Antilo:Grandaj'AntiloGrandajn Antilo:Grandaj'AntiloGrandan Bulgarujo:Granda'BulgarujoGrandan Fasto:Granda'FastoGrandan Fasto:Granda'FastoGrandan Sklavolago:Granda'SklavolagoGrandan Ursino:Granda'UrsinoGrandan Ursolago:Granda'UrsolagoGvineo-Bisauxo:Gvineo'BisauxoGvineo-Bisauxo:Gvineo'BisauxoGxeneva Lago:Gxeneva'LagoGxenevan Lago:Gxeneva'LagoGxenova Golfo:Gxenova'GolfoGxenovan Golfo:Gxenova'GolfoGxocxia apanagxo:Gxocxia'apanagxoGxocxian apanagxo:Gxocxia'apanagxoHejmen-klavo:Hejmen'klavohejmen-klavo:Hejmen'klavoHinda Oceano:Hinda'OceanoHindan Oceano:Hinda'OceanoHolanda Angulo:Holanda'AnguloHolandan Angulo:Holanda'AnguloHTML-etikedo:HTML'etikedoHTML-etikedo:HTML'etikedoIdento-bildigo:Idento'bildigoidento-bildigo:Idento'bildigoInterna Azio:Interna'AzioInterna Mongolio:Interna'MongolioInterna Mongolujo:Interna'MongolujoInternacia Labor-Organizajxo:Internacia'Labor'OrganizajxoInternacia Mona Fonduso:Internacia'Mona'FondusoInternacian Labor-Organizajxo:Internacia'Labor'OrganizajxoInternacian Monan Fonduso:Internacia'Mona'FondusoInternan Azio:Interna'AzioInternan Mongolio:Interna'MongolioInternan Mongolujo:Interna'MongolujoIrlanda Maro:Irlanda'MaroIrlandan Maro:Irlanda'MaroJapana Maro:Japana'MaroJapanan Maro:Japana'MaroJesuo Kristo:Jesuo'KristoJesuon Kristo:Jesuo'KristoJohano la Orbusxulo:Johano'la'OrbusxuloJohanon la Orbusxulo:Johano'la'OrbusxuloJonika Maro:Jonika'MaroJonikan Maro:Jonika'MaroKabo de Bona Espero:Kabo'de'Bona'EsperoKabon de Bonan Espero:Kabo'de'Bona'EsperoKaj-signo:Kaj'signokaj-signo:Kaj'signoKalifornia Golfo:Kalifornia'GolfoKalifornian Golfo:Kalifornia'GolfoKanaria Insularo:Kanaria'InsularoKanariaj Insulo:Kanariaj'InsuloKanariajn Insulo:Kanariaj'InsuloKanarian Insularo:Kanaria'InsularoKapverdaj Insulo:Kapverdaj'InsuloKapverdajn Insulo:Kapverdaj'InsuloKauxkaza montaro:Kauxkaza'montaroKauxkazan montaro:Kauxkaza'montaroKaraiba Maro:Karaiba'MaroKaraiban Maro:Karaiba'MaroKaria Maro:Karia'MaroKarian Maro:Karia'MaroKarolo la Granda:Karolo'la'GrandaKaspia Maro:Kaspia'MaroKaspian Maro:Kaspia'MaroKieva Regno:Kieva'RegnoKievan Regno:Kieva'RegnoKongo Brazavila:Kongo'BrazavilaKongo Kinsxasa:Kongo'KinsxasaKongon Brazavila:Kongo'BrazavilaKongon Kinsxasa:Kongo'KinsxasaKosxi-vico:Kosxi'vicoKosxi-vico:Kosxi'vicoKristnaska Festo:Kristnaska'FestoKristnaska Viro:Kristnaska'ViroKristnaskan Festo:Kristnaska'FestoKristnaskan Viro:Kristnaska'ViroLakta Vojo:Lakta'VojoLaktan Vojo:Lakta'VojoLapteva Maro:Lapteva'MaroLaptevan Maro:Lapteva'MaroLatia ligo:Latia'ligoLatian ligo:Latia'ligoLatinida Ameriko:Latinida'AmerikoLatinidan Ameriko:Latinida'AmerikoLazura Bordo:Lazura'BordoLazuran Bordo:Lazura'BordoLigo de Nacio:Ligo'de'NacioLigon de Nacio:Ligo'de'NacioLigura Maro:Ligura'MaroLiguran Maro:Ligura'MaroLondona Akciborso:Londona'AkciborsoLondonan Akciborso:Londona'AkciborsoMalgranda Ursino:Malgranda'UrsinoMalgranda-Azio:Malgranda'AzioMalgranda-Azio:Malgranda'AzioMalgrandaj Antilo:Malgrandaj'AntiloMalgrandajn Antilo:Malgrandaj'AntiloMalgrandan Ursino:Malgranda'UrsinoMalnova Testamento:Malnova'TestamentoMalnovan Testamento:Malnova'TestamentoMalproksima Oriento:Malproksima'OrientoMalproksiman Oriento:Malproksima'OrientoManika Kolo:Manika'KoloManikaj Insulo:Manikaj'InsuloManikajn Insulo:Manikaj'InsuloManikan Kolo:Manika'KoloMarkolo de Forto:Markolo'de'FortoMarkolon de Forto:Markolo'de'FortoMeksikia Golfo:Meksikia'GolfoMeksikian Golfo:Meksikia'GolfoMeza Oriento:Meza'OrientoMezafrika Respubliko:Mezafrika'RespublikoMezafrikan Respubliko:Mezafrika'RespublikoMezan Oriento:Meza'OrientoMicxjo Muso:Micxjo'MusoMicxjon Muso:Micxjo'MusoMonda Banko:Monda'BankoMonda Naturfonduso:Monda'NaturfondusoMonda Organizajxo pri Meteologio:Monda'Organizajxo'pri'MeteologioMonda Organizajxo pri Sano:Monda'Organizajxo'pri'SanoMonda Organizajxo pri Turismo:Monda'Organizajxo'pri'TurismoMondan Banko:Monda'BankoMondan Naturfonduso:Monda'NaturfondusoMondan Organizajxon pri Meteologio:Monda'Organizajxo'pri'MeteologioMondan Organizajxon pri Sano:Monda'Organizajxo'pri'SanoMondan Organizajxon pri Turismo:Monda'Organizajxo'pri'TurismoMorta Maro:Morta'MaroMortan Maro:Morta'MaroNederlanda Suda Maro:Nederlanda'Suda'MaroNederlandaj Antilo:Nederlandaj'AntiloNederlandajn Antilo:Nederlandaj'AntiloNederlandan Sudan Maro:Nederlanda'Suda'MaroNicxjo la Dormigulo:Nicxjo'la'DormiguloNicxjon la Dormigulo:Nicxjo'la'DormiguloNigra Arbaro:Nigra'ArbaroNigra Maro:Nigra'MaroNigran Arbaro:Nigra'ArbaroNigran Maro:Nigra'MaroNord Koreujo:Nord'KoreujoNord Koreujo:Nord'KoreujoNorda Ameriko:Norda'AmerikoNorda Dvino:Norda'DvinoNorda Maro:Norda'MaroNordan Dvino:Norda'DvinoNordan Maro:Norda'MaroNord-Atlantika Traktat-Organizajxo:Nord'Atlantika'Traktat'OrganizajxoNord-Atlantikan Traktat-Organizajxo:Nord'Atlantika'Traktat'OrganizajxoNord-Holando:Nord'HolandoNord-Holando:Nord'HolandoNova Epoko:Nova'EpokoNova Gvineo:Nova'GvineoNova Kaledonio:Nova'KaledonioNova Sudkimrio:Nova'SudkimrioNova Sudkimrujo:Nova'SudkimrujoNova Testamento:Nova'TestamentoNovaj Hebrido:Novaj'HebridoNovajn Hebrido:Novaj'HebridoNovan Epoko:Nova'EpokoNovan Gvineo:Nova'GvineoNovan Kaledonio:Nova'KaledonioNovan Sudkimrio:Nova'SudkimrioNovan Sudkimrujo:Nova'SudkimrujoNovan Testamento:Nova'TestamentoNovjorka Akciborso:Novjorka'AkciborsoNovjorkan Akciborso:Novjorka'AkciborsoNov-Meksikio:Nov'MeksikioNov-Meksikio:Nov'MeksikioNov-Orleana jxazo:Nov'Orleana'jxazoNov-Orleanan jxazo:Nov'Orleana'jxazoNov-Zelando:Nov'ZelandoNov-Zelando:Nov'ZelandoOhxocka Maro:Ohxocka'MaroOhxockan Maro:Ohxocka'MaroOkcidenta Azio:Okcidenta'AzioOkcidenta Azio:Okcidenta'AzioOkcidenta Dvino:Okcidenta'DvinoOkcidenta Flandrio:Okcidenta'FlandrioOkcidenta Flandrujo:Okcidenta'FlandrujoOkcidenta Germanujo:Okcidenta'GermanujoOkcidenta Kongo:Okcidenta'KongoOkcidenta Skeldo:Okcidenta'SkeldoOkcidentaj Indio:Okcidentaj'IndioOkcidentajn Indio:Okcidentaj'IndioOkcidentan Azio:Okcidenta'AzioOkcidentan Azio:Okcidenta'AzioOkcidentan Dvino:Okcidenta'DvinoOkcidentan Flandrio:Okcidenta'FlandrioOkcidentan Flandrujo:Okcidenta'FlandrujoOkcidentan Germanujo:Okcidenta'GermanujoOkcidentan Kongo:Okcidenta'KongoOkcidentan Skeldo:Okcidenta'SkeldoOmana Golfo:Omana'GolfoOmanan Golfo:Omana'GolfoOra Bordo:Ora'BordoOra hordo:Ora'hordoOra Lanfelo:Ora'LanfeloOran Bordo:Ora'BordoOran hordo:Ora'hordoOran Lanfelo:Ora'LanfeloOrdo-rilato:Ordo'rilatoordo-rilato:Ordo'rilatoOrganizajxo de Petrol-Eksportaj Landoj:Organizajxo'de'Petrol'Eksportaj'LandojOrganizajxo por Ekonomiaj Kunlaboro kaj Evoluigo:Organizajxo'por'Ekonomiaj'Kunlaboro'kaj'EvoluigoOrganizajxon de Petrol-Eksportajn Landoj:Organizajxo'de'Petrol'Eksportaj'LandojOrganizajxon por Ekonomiajn Kunlaboron kajn Evoluigo:Organizajxo'por'Ekonomiaj'Kunlaboro'kaj'EvoluigoOrienta Azio:Orienta'AzioOrienta Cxina Maro:Orienta'Cxina'MaroOrienta Flandrio:Orienta'FlandrioOrienta Flandrujo:Orienta'FlandrujoOrienta Frislando:Orienta'FrislandoOrienta Frizonio:Orienta'FrizonioOrienta Frizonujo:Orienta'FrizonujoOrienta Kongo:Orienta'KongoOrienta Skeldo:Orienta'SkeldoOrienta Timoro:Orienta'TimoroOrienta Timoro:Orienta'TimoroOrientan Azio:Orienta'AzioOrientan Cxinan Maro:Orienta'Cxina'MaroOrientan Flandrio:Orienta'FlandrioOrientan Flandrujo:Orienta'FlandrujoOrientan Frislando:Orienta'FrislandoOrientan Frizonio:Orienta'FrizonioOrientan Frizonujo:Orienta'FrizonujoOrientan Kongo:Orienta'KongoOrientan Skeldo:Orienta'SkeldoOrientan Timoro:Orienta'TimoroOrientan Timoro:Orienta'TimoroOrientcxina Maro:Orientcxina'MaroOrientcxinan Maro:Orientcxina'MaroOrientsiberia Maro:Orientsiberia'MaroOrientsiberian Maro:Orientsiberia'MaroPanama Golfo:Panama'GolfoPanaman Golfo:Panama'GolfoPapua Nova Gvineo:Papua'Nova'GvineoPapuan Novan Gvineo:Papua'Nova'GvineoPaska semajno:Paska'semajnoPaska semajno:Paska'semajnoPaskan semajno:Paska'semajnoPaskan semajno:Paska'semajnoPatro Kristnasko:Patro'KristnaskoPatron Kristnasko:Patro'KristnaskoPerioda tabelo:Perioda'tabeloPeriodan tabelo:Perioda'tabeloPersa Golfo:Persa'GolfoPersan Golfo:Persa'GolfoPlinio la Juna:Plinio'la'JunaPlinio la Maljuna:Plinio'la'MaljunaPlinion la Juna:Plinio'la'JunaPlinion la Maljuna:Plinio'la'MaljunaPolusa stelo:Polusa'steloPolusan stelo:Polusa'steloPo-signo:Po'signopo-signo:Po'signoProksima Oriento:Proksima'OrientoProksiman Oriento:Proksima'OrientoRegna Delegitaro:Regna'DelegitaroRegnan Delegitaro:Regna'DelegitaroRegxino Cxarlotinsulo:Regxino'CxarlotinsuloRegxinon Cxarlotinsulo:Regxino'CxarlotinsuloRugxa Kruco:Rugxa'KrucoRugxa Maro:Rugxa'MaroRugxan Kruco:Rugxa'KrucoRugxan Maro:Rugxa'MaroRuslanda Federacio:Ruslanda'FederacioRuslanda Imperio:Ruslanda'ImperioRuslandan Federacio:Ruslanda'FederacioRuslandan Imperio:Ruslanda'ImperioSakramenta Tago:Sakramenta'TagoSakramentan Tago:Sakramenta'TagoSankta jxauxdo:Sankta'jxauxdoSankta Jxauxdo:Sankta'JxauxdoSankta Mangxo:Sankta'MangxoSankta Nikolao:Sankta'NikolaoSankta Roma Imperio Gxermana:Sankta'Roma'Imperio'GxermanaSankta Semajno:Sankta'SemajnoSankta Skribo:Sankta'SkriboSankta Spirito:Sankta'SpiritoSankta Vendredo:Sankta'VendredoSanktan jxauxdo:Sankta'jxauxdoSanktan Jxauxdo:Sankta'JxauxdoSanktan Mangxo:Sankta'MangxoSanktan Nikolao:Sankta'NikolaoSanktan Roman Imperion Gxermana:Sankta'Roma'Imperio'GxermanaSanktan Semajno:Sankta'SemajnoSanktan Skribo:Sankta'SkriboSanktan Spirito:Sankta'SpiritoSanktan Vendredo:Sankta'VendredoSankt-Peterburgo:Sankt'PeterburgoSankt-Peterburgo:Sankt'PeterburgoSanktulara Festo:Sanktulara'FestoSanktularan Festo:Sanktulara'FestoSantomeo kaj Principeo:Santomeo'kaj'PrincipeoSantomeon kajn Principeo:Santomeo'kaj'PrincipeoSauxda Arabujo:Sauxda'ArabujoSauxdan Arabujo:Sauxda'ArabujoSauxd-Arabujo:Sauxd'ArabujoSauxd-Arabujo:Sauxd'ArabujoSauda Arabujo:Sauda'ArabujoSaudan Arabujo:Sauda'ArabujoSaud-Arabujo:Saud'ArabujoSaud-Arabujo:Saud'ArabujoSigma-algebro:Sigma'algebrosigma-algebro:Sigma'algebroSilicia Valo:Silicia'ValoSilician Valo:Silicia'Valos-inojn:sinjorinojns-rojn:sinjorojns-tajn:sanktajnS-inojn:SinjorinojnS-rojn:SinjorojnS-tajn:Sanktajns-inon:sinjorinons-ron:sinjorons-tan:sanktanS-inon:SinjorinonS-ron:SinjoronS-tan:Sanktans-inoj:sinjorinojs-roj:sinjorojs-taj:sanktajS-inoj:SinjorinojS-roj:SinjorojS-taj:Sanktajs-ino:sinjorinos-ro:sinjoros-ta:sanktaS-ino:SinjorinoS-ro:SinjoroS-ta:SanktaSud Koreujo:Sud'KoreujoSud Koreujo:Sud'KoreujoSuda Ameriko:Suda'AmerikoSuda Azio:Suda'AzioSuda Kruco:Suda'KrucoSudan Azio:Suda'AzioSudan Kruco:Suda'KrucoSudcxina Maro:Sudcxina'MaroSudcxinan Maro:Sudcxina'MaroSud-Holando:Sud'HolandoSud-Holando:Sud'HolandoSxlesvigo-Holsxtejno:Sxlesvigo'HolsxtejnoSxlesvigo-Holsxtejno:Sxlesvigo'HolsxtejnoTago de la Mortinto:Tago'de'la'MortintoTago de la Patrinoj:Tago'de'la'PatrinojTago de Pekliberigo:Tago'de'PekliberigoTagon de la Mortinto:Tago'de'la'MortintoTagon de la Patrinoj:Tago'de'la'PatrinojTagon de Pekliberigo:Tago'de'PekliberigoTaja Novjaro:Taja'NovjaroTajan Novjaro:Taja'NovjaroTajlanda Golfo:Tajlanda'GolfoTajlandan Golfo:Tajlanda'GolfoTirena Maro:Tirena'MaroTirenan Maro:Tirena'MaroTo-cxemizo:To'cxemizoto-cxemizo:To'cxemizoTrinidado kaj Tobago:Trinidado'kaj'TobagoTrinidadon kajn Tobago:Trinidado'kaj'TobagoTTT-ejo:TTT'ejoTTT-ejo:TTT'ejoTTT-pagxaro:TTT'pagxaroTTT-pagxaro:TTT'pagxaroTTT-pagxo:TTT'pagxoTTT-pagxo:TTT'pagxoTut-Tera Teksajxo:Tut'Tera'TeksajxoTut-Teran Teksajxo:Tut'Tera'TeksajxoUnio de Sovetaj Socialismaj Respublikoj:Unio'de'Sovetaj'Socialismaj'RespublikojUnion de Sovetajn Socialismajn Respublikoj:Unio'de'Sovetaj'Socialismaj'RespublikojUniversala Kongreso:Universala'KongresoUniversalan Kongreso:Universala'KongresoUnuigxintaj Nacio:Unuigxintaj'nacioUnuigxintajn Nacio:Unuigxintaj'nacioUsona Samoo:Usona'SamooUsonan Samoo:Usona'SamooValencia Golfo:Valencia'GolfoValencian Golfo:Valencia'GolfoValo de la Regxoj:Valo'de'la'RegxojValon de la Regxoj:Valo'de'la'RegxojVenezuela Golfo:Venezuela'GolfoVenezuelan Golfo:Venezuela'GolfoVirgulinaj Insulo:Virgulinaj'InsuloVirgulinajn Insulo:Virgulinaj'InsuloVolga-Kama Bulgarujo:Volga'Kama'BulgarujoVolga-Kaman Bulgarujo:Volga'Kama'BulgarujoZelanda Flandrio:Zelanda'FlandrioZelanda Flandrujo:Zelanda'FlandrujoZelandan Flandrio:Zelanda'FlandrioZelandan Flandrujo:Zelanda'Flandrujo";
static string nonalterables = "acxa:Alousy";// acxaj:Alousyacxajn:Alousyacxan:Alousyacxe:Flousilyada : Aactionadaj : Aactionadajn : Aactionadan : Aactionadanta : Acontinuingadantaj : Acontinuingadantajn : Acontinuingadantan : Acontinuingadanto : Ocontinueradantoj : Ocontinueradantojn : Ocontinueradanton : Ocontinueradas : Icontinueadata : Acontinuedadataj : Acontinuedadatajn : Acontinuedadatan : Acontinuedadato : Ocontinued|oneadatoj : Ocontinued|oneadatojn : Ocontinued|oneadaton : Ocontinued|oneade : Fcontinuinglyadi : Ito|continueadiaux : Fgood-byeadinta : Apreviously|continuingadintaj : Apreviously|continuingadintajn : Apreviously|continuingadintan : Apreviously|continuingadinto : Opreviously|continueradintoj : Opreviously|continueradintojn : Opreviously|continueradinton : Opreviously|continueradis : Icontinuedadita : Apreviously|continuedaditaj : Apreviously|continuedaditajn : Apreviously|continuedaditan : Apreviously|continuedadito : Opreviously|continued|oneaditoj : Opreviously|continued|oneaditojn : Opreviously|continued|oneaditon : Opreviously|continued|oneado : Oactionadoj : Oactionadojn : Oactionadon : Oactionadonta : Agoing|to|continueadontaj : Agoing|to|continueadontajn : Agoing|to|continueadontan : Agoing|to|continueadonto : Ogoing|to|be|continueradontoj : Ogoing|to|be|continueradontojn : Ogoing|to|be|continueradonton : Ogoing|to|be|continuerados : Iwill|continueadota : Agoing|to|be|continuedadotaj : Agoing|to|be|continuedadotajn : Agoing|to|be|continuedadotan : Agoing|to|be|continuedadoto : Ogoing|to|be|continued|oneadotoj : Ogoing|to|be|continued|oneadotojn : Ogoing|to|be|continued|oneadoton : Ogoing|to|be|continued|oneadu : Ishould|continueadunta : Awould|be|continuingaduntaj : Awould|be|continuingaduntajn : Awould|be|continuingaduntan : Awould|be|continuingadunto : Owould|be|continueraduntoj : Owould|be|continueraduntojn : Owould|be|continueradunton : Owould|be|continueradus : Iwould|continueaduta : Awould|be|continuedadutaj : Awould|be|continuedadutajn : Awould|be|continuedadutan : Awould|be|continuedaduto : Owould|be|continued|oneadutoj : Owould|be|continued|oneadutojn : Owould|be|continued|oneaduton : Owould|be|continued|oneahx : Fohaj : Fq749kqzajn : F-ever/at|allajxa : Athingajxaj : Athingajxajn : Athingajxan : Athingajxo : Othingajxoj : Othingajxojn : Othingajxon : Othingal : Ptoalie : Fotherwisealmenaux : Fat|leastambaux : Fbothan : Fq749kqana : Amemberanaj : Amemberanajn : Amemberanan : Amemberankaux : Falsoankoraux : Fstillano : Omemberanoj : Omemberanojn : Omemberanon : Omemberanstataux : Pinstead|ofanta : Acurrentantaj : Acurrentantajn : Acurrentantan : Acurrentantaux : Pbefore/agoantauxen : Fforwardantauxhieraux : Fthe|day|before|yesterdayapenaux : Fbarelyapud : Pnearara : Agroup/setaraj : Agroup/setarajn : Agroup/setaran : Agroup/setare : Fin|a|group/setaro : Ogroup/setaroj : Ogroup/setarojn : Ogroup/setaron : Ogroup/setaux : Cor/eitherba : Fc'monbaldaux:Fsoonbis:Fone|more|time/encorebo:NBbonvolu:Fpleasebv:Fpleasecent:None|hundredcenta:Aone|hundredthcentaj:Aone|hundredthcentajn:Aone|hundredthcentan:Aone|hundredthcentmil:None|hundred|thousandcentmila:Aone|hundred|thousandthcentmilaj:Aone|hundred|thousandthcentmilajn:Aone|hundred|thousandthcentmilan:Aone|hundred|thousandthcentona:Aone|hundredthcentonaj:Aone|hundredthcentonajn:Aone|hundredthcentonan:Aone|hundredthcentono:None|hundredthcentonoj:None|hundredthcentonojn:None|hundredthcentonon:None|hundredthcentopa:Agroup|of|one|hundredcentopaj:Agroups|of|one|hundredcentopajn:Agroups|of|one|hundredcentopan:Agroup|of|one|hundredcentopo:Ngroup|of|one|hundredcentopoj:Ngroups|of|one|hundredcentopojn:Ngroups|of|one|hundredcentopon:Ngroup|of|one|hundredci:Zyoucia:Ayourciaj:Ayourciajn:Ayourcian:Ayourcin:Zyouco:NCcxar:Cbecausecxe:Patcxefa:Amaincxefaj:Amaincxefajn:Amaincxefan:Amaincxefe:Fmainlycxi:Fnear|mecxia:Aevery|kind|zqxcxiafoje:Falwayscxiaj:Aall|kinds|zqxcxiajn:Aall|kinds|zqxcxial:Ffor|every|reasoncxiam:Falwayscxiamaniere:Fin|every|waycxian:Aevery|kind|zqxcxie:Feverywherecxiel:Fin|every|waycxien:Feverywherecxies:Aeverybody'scxio : Zeverythingcxioj : Zall|thingcxiojn : Zall|thingcxiom : Fevery|amountcxioma : Aevery|number|zqxcxiomaj|horoj : Fall|the|timecxion : Zeverythingcxirkaux : Faroundcxiu : Aeachcxiuj : Aallcxiujn : Aallcxiun : Aeachcxo : NCxcxu : Cwhether/orda : Pofde : Pof/fromdek : Ntendeka : Atenthdekaj : Atenthdekajn : Atenthdekan : Atenthdeke : Ftenthlydekmil : Nten|thousanddekmila : Aten|thousandthdekmilaj : Aten|thousandthdekmilajn : Aten|thousandthdekmilan : Aten|thousandthdekona : Atenthdekonaj : Atenthdekonajn : Atenthdekonan : Atenthdekono : Ntenthdekonoj : Ntenthdekonojn : Ntenthdekonon : Ntenthdekopa : Atensomedekopaj : Atensomedekopajn : Atensomedekopan : Atensomedekopo : Ntensomedekopoj : Ntensomedekopojn : Ntensomedekopon : Ntensomedekstren : Fto|the|rightdepost : Pever|sincedes : Cthedis : Fapartdisa : Ascattered/disjointdisaj : Ascattered/disjointdisajn : Ascattered/disjointdisan : Ascattered/disjointdisde : Pout|ofdise : Fapartdo : Csodorsen : Fto|the|backdu : Ntwodua : Asecondduaj : Asecondduajn : Asecondduan : Asecondducent : Ntwo|hundredducenta : Atwo|hundredthducentaj : Atwo|hundredthducentajn : Atwo|hundredthducentan : Atwo|hundredthducentona : Atwo|hundredthducentonaj : Atwo|hundredthducentonajn : Atwo|hundredthducentonan : Atwo|hundredthducentono : Ntwo|hundredthducentonoj : Ntwo|hundredthducentonojn : Ntwo|hundredthducentonon : Ntwo|hundredthducentopa : Agroup|of|two|hundredducentopaj : Agroups|of|two|hundredducentopajn : Agroups|of|two|hundredducentopan : Agroup|of|two|hundredducentopo : Ngroup|of|two|hundredducentopoj : Ngroups|of|two|hundredducentopojn : Ngroups|of|two|hundredducentopon : Ngroup|of|two|hundreddudek : Ntwentydudeka : Atwentiethdudekaj : Atwentiethdudekajn : Atwentiethdudekan : Atwentiethdudekona : Atwentiethdudekonaj : Atwentiethdudekonajn : Atwentiethdudekonan : Atwentiethdudekono : Ntwentiethdudekonoj : Ntwentiethdudekonojn : Ntwentiethdudekonon : Ntwentiethdudekopa : Atwentysomedudekopaj : Atwentysomedudekopajn : Atwentysomedudekopan : Atwentysomedudekopo : Ntwentysomedudekopoj : Ntwentysomedudekopojn : Ntwentysomedudekopon : Ntwentysomedue : Fsecondlydum : Pduring/whiledume : Fmeanwhiledumil : Ntwo|thousanddumila : Atwo|thousandthdumilaj : Atwo|thousandthdumilajn : Atwo|thousandthdumilan : Atwo|thousandthdumiliarda : Atwo|billionthdumiliardaj : Atwo|billionthdumiliardajn : Atwo|billionthdumiliardan : Atwo|billionthdumiliardo : Ntwo|billiondumiliardoj : Ntwo|billiondumiliardojn : Ntwo|billiondumiliardon : Ntwo|billiondumiliardona : Atwo|billionthdumiliardonaj : Atwo|billionthdumiliardonajn : Atwo|billionthdumiliardonan : Atwo|billionthdumiliardono : Ntwo|billionthdumiliardonoj : Ntwo|billionthdumiliardonojn : Ntwo|billionthdumiliardonon : Ntwo|billionthdumiliona : Atwo|millionthdumiliona : Atwo|millionthdumilionaj : Atwo|millionthdumilionaj : Atwo|millionthdumilionajn : Atwo|millionthdumilionajn : Atwo|millionthdumilionan : Atwo|millionthdumilionan : Atwo|millionthdumiliono : Ntwo|milliondumilionoj : Ntwo|milliondumilionojn : Ntwo|milliondumilionon : Ntwo|milliondumilionona : Atwo|millionthdumiliononaj : Atwo|millionthdumiliononajn : Atwo|millionthdumiliononan : Atwo|millionthdumilionono : Ntwo|millionthdumiliononoj : Ntwo|millionthdumiliononojn : Ntwo|millionthdumiliononon : Ntwo|millionthdumilona : Atwo|thousandthdumilonaj : Atwo|thousandthdumilonajn : Atwo|thousandthdumilonan : Atwo|thousandthdumilono : Ntwo|thousandthdumilonoj : Ntwo|thousandthdumilonojn : Ntwo|thousandthdumilonon : Ntwo|thousandthduona : Ahalfduonaj : Ahalfduonajn : Ahalfduonan : Ahalfduono : Nhalfduonoj : Nhalveduonojn : Nhalveduonon : Nhalfduopa : Aduoduopaj : Aduoduopajn : Aduoduopan : Aduoduopo : Nduoduopoj : Nduoduopojn : Nduoduopon : Nduoebl : Opossibilityebla : Apossibleeblada : Abeing|possibleebladaj : Abeing|possibleebladajn : Abeing|possibleebladan : Abeing|possibleeblado : Obeing|possibleebladon : Obeing|possibleeblaj : Apossibleeblajn : Apossibleeblan : Apossibleeblanta : Abeing|possibleeblantaj : Abeing|possibleeblantajn : Abeing|possibleeblantan : Abeing|possibleeblanto : Oone|being|possibleeblantoj : Oones|being|possibleeblantojn : Oones|being|possibleeblanton : Oone|being|possibleeblas : Iit|is|possibleeble : Fmaybeeblema : Atending|to|be|possibleeblemaj : Atending|to|be|possibleeblemajn : Atending|to|be|possibleebleman : Atending|to|be|possibleeblemo : Otendency|to|be|possibleeblemoj : Otendencies|to|be|possibleeblemojn : Otendencies|to|be|possibleeblemon : Otendency|to|be|possibleebli : Ito|be|possibleebliga : Apossible-makingebligaj : Apossible-makingebligajn : Apossible-makingebligan : Apossible-makingebligo : Opossible-makingebligon : Opossible-makingebligxa : Abecoming|possibleebligxaj : Abecoming|possibleebligxajn : Abecoming|possibleebligxan : Abecoming|possibleebligxo : Obecoming|possibleebligxon : Obecoming|possibleeblinta : Apreviously|possibleeblintaj : Apreviously|possibleeblintajn : Apreviously|possibleeblintan : Apreviously|possibleeblinto : Opreviously|possible|oneeblintoj : Opreviously|possible|oneseblintojn : Opreviously|possible|oneseblinton : Opreviously|possible|oneeblis : Iit|was|possibleebliva : Aable|to|be|possibleeblivaj : Aable|to|be|possibleeblivajn : Aable|to|be|possibleeblivan : Aable|to|be|possibleeblo : Opossibilityebloj : Opossibilityeblojn : Opossibilityeblon : Opossibilityeblonta : Afuture|possibleeblontaj : Afuture|possibleeblontajn : Afuture|possibleeblontan : Afuture|possibleeblonto : Ofuture|possible|oneeblontoj : Ofuture|possible|oneseblontojn : Ofuture|possible|oneseblonton : Ofuture|possible|oneeblos : Iit|will|be|possibleeblu : Iit|should|be|possibleeblunta : Awould|be|possibleebluntaj : Awould|be|possibleebluntajn : Awould|be|possibleebluntan : Awould|be|possibleeblunto : Owould|be|possible|oneebluntoj : Owould|be|possible|onesebluntojn : Owould|be|possible|oneseblunton : Owould|be|possible|oneeblus : Iit|would|be|possibleeca : Aqualityecaj : Aqualityecajn : Aqualityecan : Aqualityeco : Oqualityecoj : Oqualitieecojn : Oqualitieecon : Oqualityecx : Fevenega : Abigegaj : Abigegajn : Abigegan : Abigege : Fextremelyeja : Aplaceejaj : Aplaceejajn : Aplaceejan : Aplaceejo : Oplaceejoj : Oplaceejojn : Oplaceejon : Oplaceek : Ito|startek : Ostartekde : Pstarting|fromekster : Poutsideeksteren : Foutside/outwardel : Pfromeme : Ftendingemo : Otendencyemoj : Otendencyemojn : Otendencyemon : Otendencyen : Pinena : Ainternalenaj : Ainternalenajn : Ainternalenan : Ainternalene : Finsideenen : Finwardsera : Aparticleeraj : Aparticleerajn : Aparticleeran : Aparticleero : Oparticle/pieceeroj : Oparticle/pieceerojn : Oparticle/pieceeron : Oparticle/pieceestra : Aleaderestraj : Aleaderestrajn : Aleaderestran : Aleaderestro : Oleaderestroj : Oleaderestrojn : Oleaderestron : Oleadereta : Alittleetaj : Alittleetajn : Alittleetan : Alittleete : Fa|littlefar : Pbyfare : Pbyxxfi : Fshamefia : Adisgustingfiaj : Adisgustingfiajn : Adisgustingfian : Adisgustingfie : Fdisgustinglyfo : NFfor : Fawaygo : NGgxi : Zitgxia : Aitsgxiaj : Aitsgxiajn : Aitsgxian : Aitsgxin : Zitgxis : Pup|togxisa : Aendinggxisaj : Aendinggxisajn : Aendinggxisan : Aendinggxiso : Oendinggxisoj : Oendinggxisojn : Oendinggxison : Oendinggxo : NGxha : Fahhaleluja : Fhallelujahhe : Fheyhej : Fheyhejmen : Fhomehieraux : Fyesterdayho : Fohhodiaux : Ftodayhoj : Fahoyhop : Fget|goinghu : Fboohura : Fhurrayia : Asome|kind|zqxiafoje : Fsometimesiaj : Asome|kinds|zqxiajn : Asome|kinds|zqxial : Ffor|some|reasoniam : Fsometimeiama : Asometimeiamaniere : Fin|some|wayian : Asome|kind|zqxicido : Okillericxa : Amaleicxaj : Amaleicxajn : Amaleicxan : Amaleicxo : Omaleicxoj : Omaleicxojn : Omaleicxon : Omaleida : Aoffspringidaj : Aoffspringidajn : Aoffspringidan : Aoffspringido : Ooffspringidoj : Ooffspringidojn : Ooffspringidon : Ooffspringie : Fsomewhereiel : Fsomehowien : Fsomewhereies : Asomeone'sikso:NXila:Atoolilaj:Atoolilajn:Atoolilan:Atoolili:Ztheyilia:Atheiriliaj:Atheiriliajn:Atheirilian:Atheirilin:Zthemilo:Otooliloj:Otoolilojn:Otoolilon:Otoolina:Afemaleinaj:Afemaleinajn:Afemaleinan:Afemaleinda:Adeservingindaj:Adeservingindajn:Adeservingindan:Adeservinginde:Fdeservedlyindo:Ovalueindoj:Ovalueindojn:Ovalueindon:Ovalueinga:Aholderingaj:Aholderingajn:Aholderingan:Aholderingo:Oholderingoj:Oholderingojn:Oholderingon:Oholderino:Ofemaleinoj:Ofemaleinojn:Ofemaleinon:Ofemaleinta:Apastintaj:Apastintajn:Apastintan:Apastinter:Pbetween/amonginternen:Finside/inwardsio:Zsomethingioj:Zsome|thingiojn:Zsome|thingiom:Fsomeioma:Asome|number|zqxioma|horo:Fat|some|timeion:Zsomethingipsilona:AYipsilono:NYisma:Apracticeismaj:Apracticeismajn:Apracticeisman:Apracticeismo:Opracticeismoj:Opracticeismojn:Opracticeismon:Opracticeista:Apracticeristaj:Apracticeristajn:Apracticeristan:Apracticeristo:Opracticeristoj:Opracticeristojn:Opracticeriston:Opracticeriu:Asomeone/someiuj:Asomebody/someiujn:Asomebody/someiun:Asomeone/someja:Findeedjam:Falreadyje:Pon/injen:Fhere'sjes : Fyesjo : NJju : Cthejxo : NJxjxus : Fjust|nowkaj : Candkajaux : Cand/orkapabl : Ocapabilitykapabla : Acapablekapabla : Acapablekapablada : Abeing|capablekapabladaj : Abeing|capablekapabladajn : Abeing|capablekapabladan : Abeing|capablekapablado : Obeing|capablekapabladon : Obeing|capablekapablaj : Acapablekapablaj : Acapablekapablajn : Acapablekapablajn : Acapablekapablan : Acapablekapablan : Acapablekapablanta : Abeing|capablekapablantaj : Abeing|capablekapablantajn : Abeing|capablekapablantan : Abeing|capablekapablanto : Oone|being|capablekapablantoj : Oones|being|capablekapablantojn : Oones|being|capablekapablanton : Oone|being|capablekapablas : Iare|capablekapable : Fcapablykapable : Fcapablykapablema : Atending|to|be|capablekapablemaj : Atending|to|be|capablekapablemajn : Atending|to|be|capablekapableman : Atending|to|be|capablekapablemo : Otendency|to|be|capablekapablemoj : Otendencies|to|be|capablekapablemojn : Otendencies|to|be|capablekapablemon : Otendency|to|be|capablekapabli : Ito|(capable)|bekapabliga : Acapable-makingkapabligaj : Acapable-makingkapabligajn : Acapable-makingkapabligan : Acapable-makingkapabligo : Ocapable-makingkapabligon : Ocapable-makingkapabligxa : Abecoming|capablekapabligxaj : Abecoming|capablekapabligxajn : Abecoming|capablekapabligxan : Abecoming|capablekapabligxo : Obecoming|capablekapabligxon : Obecoming|capablekapablinta : Apreviously|capablekapablintaj : Apreviously|capablekapablintajn : Apreviously|capablekapablintan : Apreviously|capablekapablinto : Opreviously|capable|onekapablintoj : Opreviously|capable|oneskapablintojn : Opreviously|capable|oneskapablinton : Opreviously|capable|onekapablis : Iwas|capablekapabliva : Aable|to|be|capablekapablivaj : Aable|to|be|capablekapablivajn : Aable|to|be|capablekapablivan : Aable|to|be|capablekapablo : Ocapabilitykapabloj : Ocapabilitykapablojn : Ocapabilitykapablon : Ocapabilitykapablonta : Afuture|capablekapablontaj : Afuture|capablekapablontajn : Afuture|capablekapablontan : Afuture|capablekapablonto : Ofuture|capable|onekapablontoj : Ofuture|capable|oneskapablontojn : Ofuture|capable|oneskapablonton : Ofuture|capable|onekapablos : Iwill|be|capablekapablu : Iit|should|be|capablekapablunta : Awould|be|capablekapabluntaj : Awould|be|capablekapabluntajn : Awould|be|capablekapabluntan : Awould|be|capablekapablunto : Owould|be|capable|onekapabluntoj : Owould|be|capable|oneskapabluntojn : Owould|be|capable|oneskapablunton : Owould|be|capable|onekapablus : Iwould|be|capableke : Cthatxqyykia : Awhat|kind|zqxkiaj : Awhat|kinds|zqxkiajn : Awhat|kinds|zqxkial : Cwhykiam : Cwhenkiamaniere : Fin|what|waykian : Awhat|kind|zqxkie : Cwherekiel : Clike/howkien : Cwherekies : Awhosekio : Owhatkioj : Owhat|thingkiojn : Owhat|thingkiom : Fhow|much/manykioma : Awhich|number|zqxkioma|horo : Fwhat|timekion : Owhatkiu : Awho/whichkiuj : Awho/whichkiujn : Awhom/whichkiun : Awhom/whichko : NKkontraux : Pagainstkrom : Papart|fromktp : Fetckun : Pwithkuo : NQkvankam : Calthoughkvar : Nfourkvara : Afourthkvaraj : Afourthkvarajn : Afourthkvaran : Afourthkvarcent : Nfour|hundredkvarcenta : Afour|hundredthkvarcentaj : Afour|hundredthkvarcentajn : Afour|hundredthkvarcentan : Afour|hundredthkvarcentona : Afour|hundredthkvarcentonaj : Afour|hundredthkvarcentonajn : Afour|hundredthkvarcentonan : Afour|hundredthkvarcentono : Nfour|hundredthkvarcentonoj : Nfour|hundredthkvarcentonojn : Nfour|hundredthkvarcentonon : Nfour|hundredthkvarcentopa : Agroup|of|four|hundredkvarcentopaj : Agroups|of|four|hundredkvarcentopajn : Agroups|of|four|hundredkvarcentopan : Agroup|of|four|hundredkvarcentopo : Ngroup|of|four|hundredkvarcentopoj : Ngroups|of|four|hundredkvarcentopojn : Ngroups|of|four|hundredkvarcentopon : Ngroup|of|four|hundredkvardek : Nfortykvardeka : Afortiethkvardekaj : Afortiethkvardekajn : Afortiethkvardekan : Afortiethkvardekona : Afortiethkvardekonaj : Afortiethkvardekonajn : Afortiethkvardekonan : Afortiethkvardekono : Nfortiethkvardekonoj : Nfortiethkvardekonojn : Nfortiethkvardekonon : Nfortiethkvardekopa : Afortysomekvardekopaj : Afortysomekvardekopajn : Afortysomekvardekopan : Afortysomekvardekopo : Nfortysomekvardekopoj : Nfortysomekvardekopojn : Nfortysomekvardekopon : Nfortysomekvare : Ffourthlykvarmil : Nfour|thousandkvarmila : Afour|thousandthkvarmilaj : Afour|thousandthkvarmilajn : Afour|thousandthkvarmilan : Afour|thousandthkvarmiliarda : Afour|billionthkvarmiliardaj : Afour|billionthkvarmiliardajn : Afour|billionthkvarmiliardan : Afour|billionthkvarmiliardo : Nfour|billionkvarmiliardoj : Nfour|billionkvarmiliardojn : Nfour|billionkvarmiliardon : Nfour|billionkvarmiliardona : Afour|billionthkvarmiliardonaj : Afour|billionthkvarmiliardonajn : Afour|billionthkvarmiliardonan : Afour|billionthkvarmiliardono : Nfour|billionthkvarmiliardonoj : Nfour|billionthkvarmiliardonojn : Nfour|billionthkvarmiliardonon : Nfour|billionthkvarmiliona : Afour|millionthkvarmiliona : Afour|millionthkvarmilionaj : Afour|millionthkvarmilionaj : Afour|millionthkvarmilionajn : Afour|millionthkvarmilionajn : Afour|millionthkvarmilionan : Afour|millionthkvarmilionan : Afour|millionthkvarmiliono : Nfour|millionkvarmilionoj : Nfour|millionkvarmilionojn : Nfour|millionkvarmilionon : Nfour|millionkvarmilionona : Afour|millionthkvarmiliononaj : Afour|millionthkvarmiliononajn : Afour|millionthkvarmiliononan : Afour|millionthkvarmilionono : Nfour|millionthkvarmiliononoj : Nfour|millionthkvarmiliononojn : Nfour|millionthkvarmiliononon : Nfour|millionthkvarmilona : Afour|thousandthkvarmilonaj : Afour|thousandthkvarmilonajn : Afour|thousandthkvarmilonan : Afour|thousandthkvarmilono : Nfour|thousandthkvarmilonoj : Nfour|thousandthkvarmilonojn : Nfour|thousandthkvarmilonon : Nfour|thousandthkvarona : Aquarterkvaronaj : Aquarterkvaronajn : Aquarterkvaronan : Aquarterkvarono : Nquarterkvaronoj : Nquarterkvaronojn : Nquarterkvaronon : Nquarterkvaropa : Aquartetkvaropaj : Aquartetkvaropajn : Aquartetkvaropan : Aquartetkvaropo : Nquartetkvaropoj : Nquartetkvaropojn : Nquartetkvaropon : Nquartetkvazaux : Cas|ifkvin : Nfivekvina : Afifthkvinaj : Afifthkvinajn : Afifthkvinan : Afifthkvincent : Nfive|hundredkvincenta : Afive|hundredthkvincentaj : Afive|hundredthkvincentajn : Afive|hundredthkvincentan : Afive|hundredthkvincentona : Afive|hundredthkvincentonaj : Afive|hundredthkvincentonajn : Afive|hundredthkvincentonan : Afive|hundredthkvincentono : Nfive|hundredthkvincentonoj : Nfive|hundredthkvincentonojn : Nfive|hundredthkvincentonon : Nfive|hundredthkvincentopa : Agroup|of|five|hundredkvincentopaj : Agroups|of|five|hundredkvincentopajn : Agroups|of|five|hundredkvincentopan : Agroup|of|five|hundredkvincentopo : Ngroup|of|five|hundredkvincentopoj : Ngroups|of|five|hundredkvincentopojn : Ngroups|of|five|hundredkvincentopon : Ngroup|of|five|hundredkvindek : Nfiftykvindeka : Afiftiethkvindekaj : Afiftiethkvindekajn : Afiftiethkvindekan : Afiftiethkvindekona : Afiftiethkvindekonaj : Afiftiethkvindekonajn : Afiftiethkvindekonan : Afiftiethkvindekono : Nfiftiethkvindekonoj : Nfiftiethkvindekonojn : Nfiftiethkvindekonon : Nfiftiethkvindekopa : Afiftysomekvindekopaj : Afiftysomekvindekopajn : Afiftysomekvindekopan : Afiftysomekvindekopo : Nfiftysomekvindekopoj : Nfiftysomekvindekopojn : Nfiftysomekvindekopon : Nfiftysomekvine : Ffifthlykvinmil : Nfive|thousandkvinmila : Afive|thousandthkvinmilaj : Afive|thousandthkvinmilajn : Afive|thousandthkvinmilan : Afive|thousandthkvinmiliarda : Afive|billionthkvinmiliardaj : Afive|billionthkvinmiliardajn : Afive|billionthkvinmiliardan : Afive|billionthkvinmiliardo : Nfive|billionkvinmiliardoj : Nfive|billionkvinmiliardojn : Nfive|billionkvinmiliardon : Nfive|billionkvinmiliardona : Afive|billionthkvinmiliardonaj : Afive|billionthkvinmiliardonajn : Afive|billionthkvinmiliardonan : Afive|billionthkvinmiliardono : Nfive|billionthkvinmiliardonoj : Nfive|billionthkvinmiliardonojn : Nfive|billionthkvinmiliardonon : Nfive|billionthkvinmiliona : Afive|millionthkvinmiliona : Afive|millionthkvinmilionaj : Afive|millionthkvinmilionaj : Afive|millionthkvinmilionajn : Afive|millionthkvinmilionajn : Afive|millionthkvinmilionan : Afive|millionthkvinmilionan : Afive|millionthkvinmiliono : Nfive|millionkvinmilionoj : Nfive|millionkvinmilionojn : Nfive|millionkvinmilionon : Nfive|millionkvinmilionona : Afive|millionthkvinmiliononaj : Afive|millionthkvinmiliononajn : Afive|millionthkvinmiliononan : Afive|millionthkvinmilionono : Nfive|millionthkvinmiliononoj : Nfive|millionthkvinmiliononojn : Nfive|millionthkvinmiliononon : Nfive|millionthkvinmilona : Afive|thousandthkvinmilonaj : Afive|thousandthkvinmilonajn : Afive|thousandthkvinmilonan : Afive|thousandthkvinmilono : Nfive|thousandthkvinmilonoj : Nfive|thousandthkvinmilonojn : Nfive|thousandthkvinmilonon : Nfive|thousandthkvinmilopa : Agroup|of|five|thousandkvinmilopaj : Agroups|of|five|thousandkvinmilopajn : Agroups|of|five|thousandkvinmilopan : Agroup|of|five|thousandkvinmilopo : Ngroup|of|five|thousandkvinmilopoj : Ngroups|of|five|thousandkvinmilopojn : Ngroups|of|five|thousandkvinmilopon : Ngroup|of|five|thousandkvinona : Afifthkvinonaj : Afifthkvinonajn : Afifthkvinonan : Afifthkvinono : Nfifthkvinonoj : Nfifthkvinonojn : Nfifthkvinonon : Nfifthkvinopa : Aquintetkvinopaj : Aquintetkvinopajn : Aquintetkvinopan : Aquintetkvinopo : Nquintetkvinopoj : Nquintetkvinopojn : Nquintetkvinopon : Nquintetla : Athelaux : Paccording|toli : Zhelia : Ahisliaj : Ahisliajn : Ahislian : Ahislin : Zhimlo : NLmalantaux : Pbehindmalantauxen : Fbackwardsmaldekstren : Fto|the|leftmalgraux : Pin|spite|ofmalkiel : Punlikemalplej : Fleastmalpli : Flessmalsuper : Pundermalsupren : Fdownmat : Fcheckmatemem : F-selfmi : ZImia : Amymiaj : Amymiajn : Amymian : Amymil : None|thousandmila : Aone|thousandthmilaj : Aone|thousandthmilajn : Aone|thousandthmilan : Aone|thousandthmiliarda : Aone|billionthmiliardaj : Aone|billionthmiliardajn : Aone|billionthmiliardan : Aone|billionthmiliardo : None|billionmiliardoj : None|billionmiliardojn : None|billionmiliardon : None|billionmiliardona : Aone|billionthmiliardonaj : Aone|billionthmiliardonajn : Aone|billionthmiliardonan : Aone|billionthmiliardono : None|billionthmiliardonoj : None|billionthmiliardonojn : None|billionthmiliardonon : None|billionthmiliardopa : Agroup|of|one|billionmiliardopaj : Agroups|of|one|billionmiliardopajn : Agroups|of|one|billionmiliardopan : Agroup|of|one|billionmiliardopo : Ngroup|of|one|billionmiliardopoj : Ngroups|of|one|billionmiliardopojn : Ngroups|of|one|billionmiliardopon : Ngroup|of|one|billionmiliona : Aone|millionthmiliona : Aone|millionthmilionaj : Aone|millionthmilionaj : Aone|millionthmilionajn : Aone|millionthmilionajn : Aone|millionthmilionan : Aone|millionthmilionan : Aone|millionthmiliono : None|millionmilionoj : None|millionmilionojn : None|millionmilionon : None|millionmilionona : Aone|millionthmiliononaj : Aone|millionthmiliononajn : Aone|millionthmiliononan : Aone|millionthmilionono : None|millionthmiliononoj : None|millionthmiliononojn : None|millionthmiliononon : None|millionthmilionopa : Agroup|of|one|millionmilionopaj : Agroups|of|one|millionmilionopajn : Agroups|of|one|millionmilionopan : Agroup|of|one|millionmilionopo : Ngroup|of|one|millionmilionopoj : Ngroups|of|one|millionmilionopojn : Ngroups|of|one|millionmilionopon : Ngroup|of|one|millionmilona : Aone|thousandthmilonaj : Aone|thousandthmilonajn : Aone|thousandthmilonan : Aone|thousandthmilono : None|thousandthmilonoj : None|thousandthmilonojn : None|thousandthmilonon : None|thousandthmilopa : Agroup|of|one|thousandmilopaj : Agroups|of|one|thousandmilopajn : Agroups|of|one|thousandmilopan : Agroup|of|one|thousandmilopo : Ngroup|of|one|thousandmilopoj : Ngroups|of|one|thousandmilopojn : Ngroups|of|one|thousandmilopon : Ngroup|of|one|thousandmin : Zmeminus : Pminusmo : NMmontsuben : Fdownhillmontsupren : Fuphillmorgaux : Ftomorrowmulta : Amuchmultaj : Amanymultajn : Amanymultan : Amuchmulte : Fvery|muchnaux : Nninenauxa : Aninthnauxaj : Aninthnauxajn : Aninthnauxan : Aninthnauxcent : Nnine|hundrednauxcenta : Anine|hundredthnauxcentaj : Anine|hundredthnauxcentajn : Anine|hundredthnauxcentan : Anine|hundredthnauxcentona : Anine|hundredthnauxcentonaj : Anine|hundredthnauxcentonajn : Anine|hundredthnauxcentonan : Anine|hundredthnauxcentono : Nnine|hundredthnauxcentonoj : Nnine|hundredthnauxcentonojn : Nnine|hundredthnauxcentonon : Nnine|hundredthnauxdek : Nninetynauxdeka : Aninetiethnauxdekaj : Aninetiethnauxdekajn : Aninetiethnauxdekan : Aninetiethnauxdekona : Aninetiethnauxdekonaj : Aninetiethnauxdekonajn : Aninetiethnauxdekonan : Aninetiethnauxdekono : Nninetiethnauxdekonoj : Nninetiethnauxdekonojn : Nninetiethnauxdekonon : Nninetiethnauxdekopa : Aninetysomenauxdekopaj : Aninetysomenauxdekopajn : Aninetysomenauxdekopan : Aninetysomenauxdekopo : Nninetysomenauxdekopoj : Nninetysomenauxdekopojn : Nninetysomenauxdekopon : Nninetysomenauxe : Fninthlynauxmil : Nnine|thousandnauxmila : Anine|thousandthnauxmilaj : Anine|thousandthnauxmilajn : Anine|thousandthnauxmilan : Anine|thousandthnauxmiliarda : Anine|billionthnauxmiliardaj : Anine|billionthnauxmiliardajn : Anine|billionthnauxmiliardan : Anine|billionthnauxmiliardo : Nnine|billionnauxmiliardoj : Nnine|billionnauxmiliardojn : Nnine|billionnauxmiliardon : Nnine|billionnauxmiliardona : Anine|billionthnauxmiliardonaj : Anine|billionthnauxmiliardonajn : Anine|billionthnauxmiliardonan : Anine|billionthnauxmiliardono : Nnine|billionthnauxmiliardonoj : Nnine|billionthnauxmiliardonojn : Nnine|billionthnauxmiliardonon : Nnine|billionthnauxmiliona : Anine|millionthnauxmiliona : Anine|millionthnauxmilionaj : Anine|millionthnauxmilionaj : Anine|millionthnauxmilionajn : Anine|millionthnauxmilionajn : Anine|millionthnauxmilionan : Anine|millionthnauxmilionan : Anine|millionthnauxmiliono : Nnine|millionnauxmilionoj : Nnine|millionnauxmilionojn : Nnine|millionnauxmilionon : Nnine|millionnauxmilionona : Anine|millionthnauxmiliononaj : Anine|millionthnauxmiliononajn : Anine|millionthnauxmiliononan : Anine|millionthnauxmilionono : Nnine|millionthnauxmiliononoj : Nnine|millionthnauxmiliononojn : Nnine|millionthnauxmiliononon : Nnine|millionthnauxmilona : Anine|thousandthnauxmilonaj : Anine|thousandthnauxmilonajn : Anine|thousandthnauxmilonan : Anine|thousandthnauxmilono : Nnine|thousandthnauxmilonoj : Nnine|thousandthnauxmilonojn : Nnine|thousandthnauxmilonon : Nnine|thousandthnauxona : Aninthnauxonaj : Aninthnauxonajn : Aninthnauxonan : Aninthnauxono : Nninthnauxonoj : Nninthnauxonojn : Nninthnauxonon : Nninthnauxopa : Aninesomenauxopaj : Aninesomenauxopajn : Aninesomenauxopan : Aninesomenauxopo : Nninesomenauxopoj : Nninesomenauxopojn : Nninesomenauxopon : Nninesomene : Fnot/nonek : Cneither/nornenia : Ano|kind|zqxneniaj : Ano|kinds|zqxneniajn : Ano|kinds|zqxnenial : Ffor|no|reasonneniam : Fneverneniamaniere : Fin|no|waynenian : Ano|kind|zqxnenie : Fnowhereneniel : Fin|no|waynenien : Fnowherenenies : Anobody'snenio:Znothingnenioj:Zno|thingneniojn:Zno|thingneniom:Fnonenenioma:Ano|number|zqxnenioma|horo:Fat|no|timenenion:Znothingneniu:Ano|one/noneneniuj:Anone/noneniujn:Anone/noneniun:Ano|one/noneni:Zwenia:Aourniaj:Aourniajn:Aournian:Aournin:Zusno:NNnu:Fwellnul:Nzeronula:Azeroethnulaj:Azeroethnulajn:Azeroethnulan:Azeroethnulopa:Azerosomenulopaj:Azerosomenulopajn:Azerosomenulopan:Azerosomenulopo:Nzerosomenulopoj:Nzerosomenulopojn:Nzerosomenulopon:Nzerosomenun:Fnownuna:Acurrentnunaj:Acurrentnunajn:Acurrentnunan:Acurrentnur:Fonlynura:Amerenuraj:Amerenurajn:Amerenuran:Amereoj:F'sok : Neightoka : Aeighthokaj : Aeighthokajn : Aeighthokan : Aeighthokcent : Neight|hundredokcenta : Aeight|hundredthokcentaj : Aeight|hundredthokcentajn : Aeight|hundredthokcentan : Aeight|hundredthokcentona : Aeight|hundredthokcentonaj : Aeight|hundredthokcentonajn : Aeight|hundredthokcentonan : Aeight|hundredthokcentono : Neight|hundredthokcentonoj : Neight|hundredthokcentonojn : Neight|hundredthokcentonon : Neight|hundredthokdek : Neightyokdeka : Aeightiethokdekaj : Aeightiethokdekajn : Aeightiethokdekan : Aeightiethokdekona : Aeightiethokdekonaj : Aeightiethokdekonajn : Aeightiethokdekonan : Aeightiethokdekono : Neightiethokdekonoj : Neightiethokdekonojn : Neightiethokdekonon : Neightiethokdekopa : Aeightysomeokdekopaj : Aeightysomeokdekopajn : Aeightysomeokdekopan : Aeightysomeokdekopo : Neightysomeokdekopoj : Neightysomeokdekopojn : Neightysomeokdekopon : Neightysomeoke : Feighthlyokej : Fokayokmil : Neight|thousandokmila : Aeight|thousandthokmilaj : Aeight|thousandthokmilajn : Aeight|thousandthokmilan : Aeight|thousandthokmiliarda : Aeight|billionthokmiliardaj : Aeight|billionthokmiliardajn : Aeight|billionthokmiliardan : Aeight|billionthokmiliardo : Neight|billionokmiliardoj : Neight|billionokmiliardojn : Neight|billionokmiliardon : Neight|billionokmiliardona : Aeight|billionthokmiliardonaj : Aeight|billionthokmiliardonajn : Aeight|billionthokmiliardonan : Aeight|billionthokmiliardono : Neight|billionthokmiliardonoj : Neight|billionthokmiliardonojn : Neight|billionthokmiliardonon : Neight|billionthokmiliona : Aeight|millionthokmiliona : Aeight|millionthokmilionaj : Aeight|millionthokmilionaj : Aeight|millionthokmilionajn : Aeight|millionthokmilionajn : Aeight|millionthokmilionan : Aeight|millionthokmilionan : Aeight|millionthokmiliono : Neight|millionokmilionoj : Neight|millionokmilionojn : Neight|millionokmilionon : Neight|millionokmilionona : Aeight|millionthokmiliononaj : Aeight|millionthokmiliononajn : Aeight|millionthokmiliononan : Aeight|millionthokmilionono : Neight|millionthokmiliononoj : Neight|millionthokmiliononojn : Neight|millionthokmiliononon : Neight|millionthokmilona : Aeight|thousandthokmilonaj : Aeight|thousandthokmilonajn : Aeight|thousandthokmilonan : Aeight|thousandthokmilono : Neight|thousandthokmilonoj : Neight|thousandthokmilonojn : Neight|thousandthokmilonon : Neight|thousandthokona : Aeighthokonaj : Aeighthokonajn : Aeighthokonan : Aeighthokono : Neighthokonoj : Neighthokonojn : Neighthokonon : Neighthokopa : Aoctetokopaj : Aoctetokopajn : Aoctetokopan : Aoctetokopo : Noctetokopoj : Noctetokopojn : Noctetokopon : Noctetol : Pthanona : Afractiononaj : Afractiononajn : Afractiononan : Afractiononi : Zoneonia : Aone'soniaj:Aone'soniajn : Aone'sonian:Aone'sonin : Zoneono : Nfractiononoj : Nfractiononojn : Nfractiononon : Nfractiononta : Afutureontaj : Afutureontajn : Afutureontan : Afutureopo : Ogroupopoj : Ogroupopojn : Ogroupopon : Ogroupper : Pwithpere : Pthroughxxplej : Fmostpli : Fmoreplimalpli : Fmore|or|lessplu : Fmorewqzplus : Ppluspo : Peach/at|the|rate|ofpoa : Aper-unitpoaj : Aper-unitpoajn : Aper-unitpoan : Aper-unitpor : Pin|order/forpost : Pafter/behindposten : Fbackpostmorgaux : Fthe|day|after|tomorrowpova : Aablepovada : Abeing|ablepovadaj : Abeing|ablepovadajn : Abeing|ablepovadan : Abeing|ablepovado : Obeing|ablepovadon : Obeing|ablepovaj : Aablepovajn : Aablepovan : Aablepovanta : Abeing|ablepovantaj : Abeing|ablepovantajn : Abeing|ablepovantan : Abeing|ablepovanto : Oone|being|ablepovantoj : Oones|being|ablepovantojn : Oones|being|ablepovanton : Oone|being|ablepovas : Icanpove : Fablypovema : Atending|to|be|ablepovemaj : Atending|to|be|ablepovemajn : Atending|to|be|ablepoveman : Atending|to|be|ablepovemo : Otendency|to|be|ablepovemoj : Otendencies|to|be|ablepovemojn : Otendencies|to|be|ablepovemon : Otendency|to|be|ablepovi : Ito|be|ablepoviga : Aable-makingpovigaj : Aable-makingpovigajn : Aable-makingpovigan : Aable-makingpovigo : Oable-makingpovigon : Oable-makingpovigxa : Abecoming|ablepovigxaj : Abecoming|ablepovigxajn : Abecoming|ablepovigxan : Abecoming|ablepovigxo : Obecoming|ablepovigxon : Obecoming|ablepovinta : Apreviously|ablepovintaj : Apreviously|ablepovintajn : Apreviously|ablepovintan : Apreviously|ablepovinto : Opreviously|able|onepovintoj : Opreviously|able|onespovintojn : Opreviously|able|onespovinton : Opreviously|able|onepovis : Icouldpovo : Opowerpovoj : Opowerpovojn : Opowerpovon : Opowerpovonta : Agoing|to|be|ablepovontaj : Agoing|to|be|ablepovontajn : Agoing|to|be|ablepovontan : Agoing|to|be|ablepovonto : Ofuture|able|onepovontoj : Ofuture|able|onespovontojn : Ofuture|able|onespovonton : Ofuture|able|onepovos : Iwill|be|ablepovu : Ishould|be|ablepovunta : Awould|be|ablepovuntaj : Awould|be|ablepovuntajn : Awould|be|ablepovuntan : Awould|be|ablepovunto : Owould|be|able|onepovuntoj : Owould|be|able|onespovuntojn : Owould|be|able|onespovunton : Owould|be|able|onepovus : Iwould|be|ablepraa : Aprimordialpraaj : Aprimordialpraajn : Aprimordialpraan : Aprimordialprae : Fprimordiallypreskaux : Falmostpreter : Pbeyondpri : Paboutpro : Pbecause|ofqo : NQrea : Arepeatedreaj : Arepeatedreajn : Arepeatedrean : Arepeatedree : Fagainreen : Fbackro : NRsaluton : Fhellosamkiel : Cjust|likese : Cifsed : Cbutsen : Pwithoutsep : Nsevensepa : Aseventhsepaj : Aseventhsepajn : Aseventhsepan : Aseventhsepcent : Nseven|hundredsepcenta : Aseven|hundredthsepcentaj : Aseven|hundredthsepcentajn : Aseven|hundredthsepcentan : Aseven|hundredthsepcentona : Aseven|hundredthsepcentonaj : Aseven|hundredthsepcentonajn : Aseven|hundredthsepcentonan : Aseven|hundredthsepcentono : Nseven|hundredthsepcentonoj : Nseven|hundredthsepcentonojn : Nseven|hundredthsepcentonon : Nseven|hundredthsepdek : Nseventysepdeka : Aseventiethsepdekaj : Aseventiethsepdekajn : Aseventiethsepdekan : Aseventiethsepdekona : Aseventiethsepdekonaj : Aseventiethsepdekonajn : Aseventiethsepdekonan : Aseventiethsepdekono : Nseventiethsepdekonoj : Nseventiethsepdekonojn : Nseventiethsepdekonon : Nseventiethsepdekopa : Aseventysomesepdekopaj : Aseventysomesepdekopajn : Aseventysomesepdekopan : Aseventysomesepdekopo : Nseventysomesepdekopoj : Nseventysomesepdekopojn : Nseventysomesepdekopon : Nseventysomesepe : Fseventhlysepmil : Nseven|thousandsepmila : Aseven|thousandthsepmilaj : Aseven|thousandthsepmilajn : Aseven|thousandthsepmilan : Aseven|thousandthsepmiliarda : Aseven|billionthsepmiliardaj : Aseven|billionthsepmiliardajn : Aseven|billionthsepmiliardan : Aseven|billionthsepmiliardo : Nseven|billionsepmiliardoj : Nseven|billionsepmiliardojn : Nseven|billionsepmiliardon : Nseven|billionsepmiliardona : Aseven|billionthsepmiliardonaj : Aseven|billionthsepmiliardonajn : Aseven|billionthsepmiliardonan : Aseven|billionthsepmiliardono : Nseven|billionthsepmiliardonoj : Nseven|billionthsepmiliardonojn : Nseven|billionthsepmiliardonon : Nseven|billionthsepmiliona : Aseven|millionthsepmiliona : Aseven|millionthsepmilionaj : Aseven|millionthsepmilionaj : Aseven|millionthsepmilionajn : Aseven|millionthsepmilionajn : Aseven|millionthsepmilionan : Aseven|millionthsepmilionan : Aseven|millionthsepmiliono : Nseven|millionsepmilionoj : Nseven|millionsepmilionojn : Nseven|millionsepmilionon : Nseven|millionsepmilionona : Aseven|millionthsepmiliononaj : Aseven|millionthsepmiliononajn : Aseven|millionthsepmiliononan : Aseven|millionthsepmilionono : Nseven|millionthsepmiliononoj : Nseven|millionthsepmiliononojn : Nseven|millionthsepmiliononon : Nseven|millionthsepmilona : Aseven|thousandthsepmilonaj : Aseven|thousandthsepmilonajn : Aseven|thousandthsepmilonan : Aseven|thousandthsepmilono : Nseven|thousandthsepmilonoj : Nseven|thousandthsepmilonojn : Nseven|thousandthsepmilonon : Nseven|thousandthsepona : Aseventhseponaj : Aseventhseponajn : Aseventhseponan : Aseventhsepono : Nseventhseponoj : Nseventhseponojn : Nseventhseponon : Nseventhsepopa : Aseptetsepopaj : Aseptetsepopajn : Aseptetsepopan : Aseptetsepopo : Nseptetsepopoj : Nseptetsepopojn : Nseptetsepopon : Nseptetses : Nsixsesa : Asixthsesaj : Asixthsesajn : Asixthsesan : Asixthsescent : Nsix|hundredsescenta : Asix|hundredthsescentaj : Asix|hundredthsescentajn : Asix|hundredthsescentan : Asix|hundredthsescentona : Asix|hundredthsescentonaj : Asix|hundredthsescentonajn : Asix|hundredthsescentonan : Asix|hundredthsescentono : Nsix|hundredthsescentonoj : Nsix|hundredthsescentonojn : Nsix|hundredthsescentonon : Nsix|hundredthsesdek : Nsixtysesdeka : Asixtiethsesdekaj : Asixtiethsesdekajn : Asixtiethsesdekan : Asixtiethsesdekona : Asixtiethsesdekonaj : Asixtiethsesdekonajn : Asixtiethsesdekonan : Asixtiethsesdekono : Nsixtiethsesdekonoj : Nsixtiethsesdekonojn : Nsixtiethsesdekonon : Nsixtiethsesdekopa : Asixtysomesesdekopaj : Asixtysomesesdekopajn : Asixtysomesesdekopan : Asixtysomesesdekopo : Nsixtysomesesdekopoj : Nsixtysomesesdekopojn : Nsixtysomesesdekopon : Nsixtysomesese : Fsixthlysesmil : Nsix|thousandsesmila : Asix|thousandthsesmilaj : Asix|thousandthsesmilajn : Asix|thousandthsesmilan : Asix|thousandthsesmiliarda : Asix|billionthsesmiliardaj : Asix|billionthsesmiliardajn : Asix|billionthsesmiliardan : Asix|billionthsesmiliardo : Nsix|billionsesmiliardoj : Nsix|billionsesmiliardojn : Nsix|billionsesmiliardon : Nsix|billionsesmiliardona : Asix|billionthsesmiliardonaj : Asix|billionthsesmiliardonajn : Asix|billionthsesmiliardonan : Asix|billionthsesmiliardono : Nsix|billionthsesmiliardonoj : Nsix|billionthsesmiliardonojn : Nsix|billionthsesmiliardonon : Nsix|billionthsesmiliona : Asix|millionthsesmiliona : Asix|millionthsesmilionaj : Asix|millionthsesmilionaj : Asix|millionthsesmilionajn : Asix|millionthsesmilionajn : Asix|millionthsesmilionan : Asix|millionthsesmilionan : Asix|millionthsesmiliono : Nsix|millionsesmilionoj : Nsix|millionsesmilionojn : Nsix|millionsesmilionon : Nsix|millionsesmilionona : Asix|millionthsesmiliononaj : Asix|millionthsesmiliononajn : Asix|millionthsesmiliononan : Asix|millionthsesmilionono : Nsix|millionthsesmiliononoj : Nsix|millionthsesmiliononojn : Nsix|millionthsesmiliononon : Nsix|millionthsesmilona : Asix|thousandthsesmilonaj : Asix|thousandthsesmilonajn : Asix|thousandthsesmilonan : Asix|thousandthsesmilono : Nsix|thousandthsesmilonoj : Nsix|thousandthsesmilonojn : Nsix|thousandthsesmilonon : Nsix|thousandthsesona : Asixthsesonaj : Asixthsesonajn : Asixthsesonan : Asixthsesono : Nsixthsesonoj : Nsixthsesonojn : Nsixthsesonon : Nsixthsesopa : Asextetsesopaj : Asextetsesopajn : Asextetsesopan : Asextetsesopo : Nsextetsesopoj : Nsextetsesopojn : Nsextetsesopon : Nsextetsi : Zhimself/herself/itself/themselvessia : Ahis/her/its/their|ownsiaj : Ahis/her/its/their|ownsiajn : Ahis/her/its/their|ownsian : Ahis/her/its/their|ownsikve : Fconsequentlysin : Zhimself/herself/itself/themselvesso : NSsub : Pundersuba : Alowersubaj : Alowersubajn : Alowersuban : Alowersube : Funderneathsuben : Fdown/underneathsuper : Pabovesupra : Auppersupraj : Auppersuprajn : Auppersupran : Auppersupre : Fupstairs/abovesupren : Fupsupro : Otopsuproj : Otopsuprojn : Otopsupron : Otopsur : Ponsxi : Zshesxia : Ahersxiaj : Ahersxiajn : Ahersxian : Ahersxin : Zhertamen : Fhowevertia : Athat|kind|zqxtiaj : Athose|kinds|zqxtiajn : Athose|kinds|zqxtial : Fso/thereforetiam : Fat|that|timetiamaniere : Fthuslytian : Athat|kind|zqxtie : Ftheretiea : Ayondertieaj : Ayondertieajn : Ayondertiean : Ayondertiel : Fas/that|waytien : Fthereties : Athat|one'stiktak:Ftick-tocktio:Zthattioj:Zthosetiojn:Zthosetiom:Fso|much/manytioma:Athat|number|zqxtion:Zthattiu:Athattiuj:Athosetiujn:Athosetiun:Athatto:NTtra:Pthroughtrae:Fthroughtrans:Pon|the|other|side|oftranse:Fon|the|other|sidetre:Fverytri:Nthreetria:Athirdtriaj:Athirdtriajn:Athirdtrian:Athirdtricent:Nthree|hundredtricenta:Athree|hundredthtricentaj:Athree|hundredthtricentajn:Athree|hundredthtricentan:Athree|hundredthtricentona:Athree|hundredthtricentonaj:Athree|hundredthtricentonajn:Athree|hundredthtricentonan:Athree|hundredthtricentono:Nthree|hundredthtricentonoj:Nthree|hundredthtricentonojn:Nthree|hundredthtricentonon:Nthree|hundredthtricentopa:Agroup|of|three|hundredtricentopaj:Agroups|of|three|hundredtricentopajn:Agroups|of|three|hundredtricentopan:Agroup|of|three|hundredtricentopo:Ngroup|of|three|hundredtricentopoj:Ngroups|of|three|hundredtricentopojn:Ngroups|of|three|hundredtricentopon:Ngroup|of|three|hundredtridek:Nthirtytrideka:Athirtiethtridekaj:Athirtiethtridekajn:Athirtiethtridekan:Athirtiethtridekona:Athirtiethtridekonaj:Athirtiethtridekonajn:Athirtiethtridekonan:Athirtiethtridekono:Nthirtiethtridekonoj:Nthirtiethtridekonojn:Nthirtiethtridekonon:Nthirtiethtridekopa:Athirtysometridekopaj:Athirtysometridekopajn:Athirtysometridekopan:Athirtysometridekopo:Nthirtysometridekopoj:Nthirtysometridekopojn:Nthirtysometridekopon:Nthirtysometrie:Fthirdlytrimil:Nthree|thousandtrimila:Athree|thousandthtrimilaj:Athree|thousandthtrimilajn:Athree|thousandthtrimilan:Athree|thousandthtrimiliarda:Athree|billionthtrimiliardaj:Athree|billionthtrimiliardajn:Athree|billionthtrimiliardan:Athree|billionthtrimiliardo:Nthree|billiontrimiliardoj:Nthree|billiontrimiliardojn:Nthree|billiontrimiliardon:Nthree|billiontrimiliardona:Athree|billionthtrimiliardonaj:Athree|billionthtrimiliardonajn:Athree|billionthtrimiliardonan:Athree|billionthtrimiliardono:Nthree|billionthtrimiliardonoj:Nthree|billionthtrimiliardonojn:Nthree|billionthtrimiliardonon:Nthree|billionthtrimiliona:Athree|millionthtrimiliona:Athree|millionthtrimilionaj:Athree|millionthtrimilionaj:Athree|millionthtrimilionajn:Athree|millionthtrimilionajn:Athree|millionthtrimilionan:Athree|millionthtrimilionan:Athree|millionthtrimiliono:Nthree|milliontrimilionoj:Nthree|milliontrimilionojn:Nthree|milliontrimilionon:Nthree|milliontrimilionona:Athree|millionthtrimiliononaj:Athree|millionthtrimiliononajn:Athree|millionthtrimiliononan:Athree|millionthtrimilionono:Nthree|millionthtrimiliononoj:Nthree|millionthtrimiliononojn:Nthree|millionthtrimiliononon:Nthree|millionthtrimilona:Athree|thousandthtrimilonaj:Athree|thousandthtrimilonajn:Athree|thousandthtrimilonan:Athree|thousandthtrimilono:Nthree|thousandthtrimilonoj:Nthree|thousandthtrimilonojn:Nthree|thousandthtrimilonon:Nthree|thousandthtriona:Athirdtrionaj:Athirdtrionajn:Athirdtrionan:Athirdtriono:Nthirdtrionoj:Nthirdtrionojn:Nthirdtrionon:Nthirdtriopa:Atriotriopaj:Atriotriopajn:Atriotriopan:Atriotriopo:Ntriotriopoj:Ntriotriopojn:Ntriotriopon:Ntriotro:Ftootroa:Atoo|muchtroaj:Atoo|manytroajn:Atoo|manytroan:Atoo|muchtroe:Ftoo|muchtuj:Fimmediatelytuja:Aimmediatetujaj:Aimmediatetujajn:Aimmediatetujan:Aimmediateuja:Acontainerujaj:Acontainerujajn:Acontainerujan:Acontainerujo:Ocontainerujoj:Ocontainerujojn:Ocontainerujon:Ocontainerulino:Ofemaleulinoj:Ofemaleulinojn:Ofemaleulinon:Ofemaleulo:Oindividualuloj:Oindividualulojn:Oindividualulon:Oindividualumo:Owhatchamacallitumoj:Owhatchamacallitumojn:Owhatchamacallitumon:Owhatchamacallitunta:Awould-beuntaj:Awould-beuntajn:Awould-beuntan:Awould-beunu:Noneunua:Afirstunuaj:Afirstunuajn:Afirstunuan:Afirstunue:Ffirstunuj:Nsomeunuona:Awholeunuonaj:Awholeunuonajn:Awholeunuonan:Awholeunuono:Nwholeunuonoj:Nwholeunuonojn:Nwholeunuonon:Nwholeunuopa:Asingleunuopaj:Asingleunuopajn:Asingleunuopan:Asingleunuopo:Nsingleunuopoj:Nsingleunuopojn:Nsingleunuopon:Nsingleve:Fdarn|itvi:Zyouvia:Ayourviaj:Ayourviajn:Ayourvian:Ayourvin:Zyouvo:NVvola:Awilling/voluntaryvolaj:Awilling/voluntaryvolajn:Awilling/voluntaryvolan:Awilling/voluntaryvolanta:Awilling/gladvolantaj:Awilling/gladvolantajn:Awilling/gladvolantan:Awilling/gladvolanto:Owishervolantoj:Owishervolantojn:Owishervolanton:Owishervolas:Iwantvolata:Awantedvolataj:Awantedvolatajn:Awantedvolatan:Awantedvolato:Owanted|onevolatoj:Owanted|onevolatojn:Owanted|onevolaton:Owanted|onevole:Fwillinglyvole:Fwishinglyvoli:Ito|wantvolinta:Apreviously|wishingvolintaj:Apreviously|wishingvolintajn:Apreviously|wishingvolintan:Apreviously|wishingvolinto:Opreviously|wishervolintoj:Opreviously|wishervolintojn:Opreviously|wishervolinton:Opreviously|wishervolis:Iwantedvolita:Apreviously|wantedvolitaj:Apreviously|wantedvolitajn:Apreviously|wantedvolitan:Apreviously|wantedvolito:Opreviously|wanted|onevolitoj:Opreviously|wanted|onevolitojn:Opreviously|wanted|onevoliton:Opreviously|wanted|onevolo:Owill/wishvolo:Owish/willvoloj:Owill/wishvoloj:Owish/willvolojn:Owill/wishvolojn:Owish/willvolon:Owill/wishvolon:Owish/willvolonta:Agoing|to|wishvolontaj:Agoing|to|wishvolontajn:Agoing|to|wishvolontan:Agoing|to|wishvolonto:Ogoing|to|be|wishervolontoj:Ogoing|to|be|wishervolontojn:Ogoing|to|be|wishervolonton:Ogoing|to|be|wishervolos:Iwill|wantvolota:Agoing|to|be|wantedvolotaj:Agoing|to|be|wantedvolotajn:Agoing|to|be|wantedvolotan:Agoing|to|be|wantedvoloto:Ogoing|to|be|wanted|onevolotoj:Ogoing|to|be|wanted|onevolotojn:Ogoing|to|be|wanted|onevoloton:Ogoing|to|be|wanted|onevolu:Ishould|wantvolunta:Awould|be|wishingvoluntaj:Awould|be|wishingvoluntajn:Awould|be|wishingvoluntan:Awould|be|wishingvolunto:Owould|be|wishervoluntoj:Owould|be|wishervoluntojn:Owould|be|wishervolunton:Owould|be|wishervolus:Iwould|wishvoluta:Awould|be|wantedvolutaj:Awould|be|wantedvolutajn:Awould|be|wantedvolutan:Awould|be|wantedvoluto:Owould|be|wanted|onevolutoj:Owould|be|wanted|onevolutojn:Owould|be|wanted|onevoluton:Owould|be|wanted|onezo:NZzumexzate:Fzzix|itzumexzite:Fzzwx|itzusxuvolas:Iwants";
static int nonalterablesIndex[] = { 0, 0x083, 0x089, 0x0cc, 0x168, 0x1f3, 0x1fd, 0x20e, 0x21a, 0x283, 0x28c, 0x3ea, 0x3f3, 0x457, 0x4f7, 0x579, 0x5db, 0x5dc, 0x5e3, 0x6db, 0x778, 0x7a7, 0xfff, 0x803, 0xfff };
static string alphabetLower = "abcdefghijklmnopqrstuvwxyz";
static string alpha = "abcdefghijklmnopqrstuvwxyz'`´";
static string alphabetLowerUpper = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ";
static string alphabetUpper = "ABCDEFGHIJKLMNOPQRSTUVWXYZ";
static string consonants = "bcdfghjklmnprstvwxz";
static string decimalDigits = "1234567890";
static string determiners = "{*cxiu*¯*aeach*}{*cxiun*¯*aeach*}{*gxi*a*¯*aits*}{*gxi*a*n*¯*aits*}{*i*a*¯*asome|kind|zqx*}{*i*a*n*¯*asome|kind|zqx*}{*ies*¯*asomeone's*}{*ili*a*¯*atheir*}{*ili*a*n*¯*atheir*}{*iu*¯*asomeone/some*}{*iu*¯*asomeone/some*}{*iun*¯*asomeone/some*}{*la*¯*athe*}{*kelk*a*¯*nsome*}{*kelk*a*n*¯*nsome*}{*ki*a*¯*awhat|kind|zqx*}{*ki*a*n*¯*awhat|kind|zqx*}{*kies*¯*awhose/which|one's*}{*kiom*a*¯*awhich|number*}{*kioma*¯*awhich|number|zqx*}{*kiu*¯*awho/which*}{*kiun*¯*awhom/which*}{*li*a*¯*ahis*}{*li*a*n*¯*ahis*}{*mi*a*¯*amy*}{*mi*a*n*¯*amy*}{*neni*a*¯*ano|kind|zqx*}{*neni*a*n*¯*ano|kind|zqx*}{*nenies*¯*anobody's*}{*neniu*¯*ano|one/none*}{*neniun*¯*ano|one/none*}{*ni*a*¯*aour*}{*ni*a*n*¯*aour*}{*oni*a*¯*aone's*}{*oni*a*n*¯*aone's*}{*si*a*¯*ahis/her/its/their|own*}{*si*a*n*¯*ahis/her/its/their|own*}{*sxi*a*¯*aher*}{*sxi*a*n*¯*aher*}{*ti*a*¯*athat|kind|zqx*}{*ti*a*n*¯*athat|kind|zqx*}{*ties*¯*athat|one's*}{*tiu*¯*athat*}{*tiun*¯*athat*}{*unu*¯*na*}{*unu*¯*nan*}{*unu*¯*none*}{*vi*a*¯*ayour*}{*vi*a*n*¯*ayour*}{*ci*a*¯*ayour*}{*ci*a*n*¯*ayour*}{*cxi*a*¯*aevery|kind|zqx*}{*cxi*a*n*¯*aevery|kind|zqx*}{*cxies*¯*aeverybody's*}{*cxioma*¯*aevery|number|zqx*}{*ioma*¯*asome|number|zqx*}{*nenioma*¯*ano|number|zqx*}{*tioma*¯*athat|number|zqx*}";
static string ecoAbstracts = " speco peco estanteco estonteco estinteco estunteco membreco monstreco mordpeco najbareco pasinteco subspeco sxakpeco tagnoktegaleco vortospeco ";
static string englishAlphabet = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZÇçÉéÑñ'`´";
static string entryDelim = "";
static string esperantoConsonants = "bcdfgjklmnprstvz";
static string esperantoXChars = "cxgxhxjxsxuxCxGxHxJxSxUxCXGXHXJXSXUX";
static string hexDigits = "0123456789abcdef";
static string massNouns = " januaro februaro marto aprilo majo junio julio auxgusto septembro oktobro novembro decembro lundo mardo merkredo jxauxdo vendredo sabato dimancxo bluo rugxo flavo orangxo purpuro violo verdo bruno nigro grizo blanko transviolo transrugxo hidrogeno fotosintezo tergaso dizeloleo biodizeloleo absurdo acido tio kio tioj kioj nenio nenioj cxio cxioj io ioj aero agenturo agondio agregato agro agxo ajlo akcelo aktinio akvo algebro algo alkoholo altiro aluminio ambicio amo amoro amuzo analizo ananaso antauxjugxo antauxmalhelpo apelo aprobo auxdo auxtoritato auxtuno argilo argxento aritmetiko artilerio asekuro asfalto atento aveno avizo azilo bakfaruno bambuo bario beletro benzino berilio betono bieno biero bingo bonsxanco botaniko bovajxo brajlo brando brasiko briko bronzo brulajxo bruo brutaro budho buljono butero cedemo celerio cemento cerio cezio cidro cinamo cindro cirkonstanco ciro cxampano cxokolado damagxo dangxero danko datumo deliro deprimo deserto diareo difekto digesto dinamito direkto disciplino disdono diskriminacio distribuo divido doloro dormo dramo drapo duonlumo duumo eburo efektivo egalpezo egido ejnstejnio ekipajxo ekipo ekonomiko eksceso ekspono ekzameno ekzisto elektro elspirajxo emajlo emfazo energio enhavo eniro enspezo entuziasmo euxropio erbio esperanto Esperanto estinto etiketo etiko fadeno fajenco fajro fantazio farbo faro faruno fecxo felicxeco felicxo felto fermio fero fervoro fibro fikcio fikomerco filmruleto filozofio financo fiziko flanelo fluagxo fluido fojno fojo fokuso fonetiko foresto forto fosforo fromagxo frosto frukto fulgo fulmo fumo funebro fungo furagxo futbalo gadolinio gajlo galiumo galo germaniumo gaso gazetaro gazo gelateno geometrio gimnastiko gipso glacio gladilo glaso gloro gluo golfludo graco grafiko gramatiko granito graso gravito greno greso grio gripo grundo gruzo gudro gxardenumado gxino gxojo hafnio hajlo haladzo hauxto hararo haringo harmonio haro hasxisxo hazardo hejtajxo heliumo helpo hepato herbo herezo higieno hipnoto hipotezo historio holmio honoro hororo humo hurao hxaoso hxemio hxirurgio hxolero ilekso imago indio industrio infero informajxo informo influo ingxenierarto inko insisto inspekto inspirajxo inspiro instanco instinkto instrukcio intelekto inteligento interezo interpreto interpunkcio ironio iterbio itrio jodo jugxo juro justeco justo jxargono kacxo kadmio kafo kakao kalcio kalio kalko kalo kamparo kancero kaoso hxaso kapitalo kauxcxuko karbo karbono karitato karno kartono katuno kemio hxemio kinino kinomatografio kirurgio kloro klorofilo koito kokaino komerco komforto komuniko komunio koncerno konduto konflikto konfuzo konjako konkurenco kono konsentemo konsilo kontakto kontanto korko kosmo kostumo koto kotono kredito kremo krepusko kreto kristalo kristnasko kromo kulpo kulto kunularo kupro kuragxo kurento kvanto kvieto lacxo lado lafo lako lakso lakto laktuko laktumo lando lano lanugo lardo latuno ledo lepro lesivo lezo libereco libero ligno likvo likvoro limonado lino linoleo linoleono linoleumo literaturo litio logiko lukso lumo lupago macxgumo magio magnezio maizo makadamo makaronio malamo malaprobo malbonajxo malbonsxanco malfido malhelo malkuragxo malkvieto mallauxto mallumo malpacienco malprofito malprospero malsagxeco malsagxo maltrankvilo malutilo malvenko malvarmo malvo mangxajxo marmelado marmoro matematiko matenmangxo mateo Mateo materialo materio meblaro medicino medikamento mehxaniko mekaniko mendelevio metalo metalurgio mielo milito mirho mistero misuzo modesto modo molibdeno mono moralo morfemscienco morto mosxto movo muko multipliko municio murdo musko mustardo muziko nauxzo nasklaboro natrio naturo nebulo negxo nektaro neodimo neptunio nikelo nilono niobo nobelio observo ofendo oksigeno okulvitro oleo olibano opinio onidiro onikso opio ordeno ordo oro ortografio osmio pacienco paco pajlo paladio paniko pano papero paradizo parafino parfumo parlamento parolkapablo parolmaniero parolo pasio pasko pastecxo pasto pavimo pecxo peko pelto pento perforto pergameno perlo permeso perspektivo petrolo petrolgaso pezo pipro plasto plateno plezuro plumbo plutonio pluvo pneuxmonio poezio pogrando politiko polonio poluro polvo porcelano pornografajxo posedo posxto potenco povo praktiko prazEONoLdimo premo preslitero preso printempo printo prizorgo progreso prometio prononco proprajxo propulso protaktinio proteino prozo prudento psikologio pudingo pudro pulvo puncxo puno punto puso rabio racio radaro radio radiumo ravo redundanco registaro regularo regxlando religio renio rento rentumo respekto reveno revolucio rezervo rezignacio rezisto ritmo rizo rodio romanco roso rubidio rubo rumo rutenio rusto sablo sagxeco sagxo salajro salato saldo salo sango sangomanko sano sanskrito sapo sauxco satiro scienco sekalo sekso seksumo semantiko senco sero serumo silko sintakso sintezo siropo skandio skrapgumo somero sono sorcxo sorgo sorto spaco sperto spezo spico spinaco spiro spleno stano statistiko staturo steno sterko stoko storo strategio strecxo studo sudo sufero suferado sukceso sukero suko sunbrilo sunlumo supersticxo supo suspekto sxako sxanco sxangxmono sxauxmo sxinko sxlimo sxtalo sxtelo sxtofo sxtono sxvito tabako taglumo tagmangxo tagmezo taktiko takto taliumo tapeto tapisxo tegolo teknecio teknologio teksto televido teluro temperaturo tempo teniso teo terbio tereno tergrundo tero teruro timo tinkturo titanio tolo tondro torfo torio torturo tosto tradicio trafiko trakto trankvilo travivajxo travivo tritiko tuberkulozo teksajxo tulio tumultemo uesto unuformo uranio urino vakso valuto vanilo vaporo vario varmego varmo vato veluro veneno venko vento vesto vetero viando vinagro vino vintro virto viskio vitro vivo vizio volumeno vomajxo zingibro zinko zoologio zorgo abnegacio abrogacio administracio arbitracio civilizacio dekoracio deviacio diskriminacio dislokigo glacio gracio inflacio konfirmacio kremacio mediacio racio rezignacio segregacio felo ";
static string notFemale = " adrenalino akrulino akvamarino albino albumino alsino alumino angino anilino antauxdestino antipirino antirino argentino arsxino aspirino atropino aventurino balzamino begino benzino bikino bombazino bovino cervino ciprino cxino destino difino disciplino doktrino drasxmasxino eglefino ehxino ekino elimino erbino fino flugmasxino frankolino gabardino galantino galino gilotino gxino hxino hxitino igumenino inklino insulino kafeino kanino kantino kaolino kardamino karmezino karmino kazeino kazino kino kinino kokaino kolcxikino koncertino korinklino krinolino kudromasxino kulmino kumino latino latrino lavmasxino lecitino lino litorino magazino mandarino mandolino margarino masxino medicino merino mino montspino morfino mozelvino muezino muskatvino muslino naftalino neuxtrino nikotino nitroglicerino obstino origino parafino pelerino penicilino pepsino pino pingvino poplino pozicidetermino proteino ravelino ravino retino rezino ribgxino ricino rizvino ruino rutino sardino semajnfino sino skribmasxino spino stearino striknino tamburino tanino termino tornmasxino trakino trampolino turbino ukraino urino uzino vagino vakcino vazelino vino vitamino vitrino zepelino ";
static string notMale = " akronicxo dedicxo felicxo feticxo kondicxo laborkondicxo malfelicxo nicxo picxo sandvicxo suficxo superfelicxo supersticxo ";
static string numberWords = "|unu|du|tri|kvar|kvin|ses|sep|ok|naux|dek|dudek|tridek|kvardek|kvindek|sesdek|sepdek|okdek|nauxdek|cent|ducent|tricent|kvarcent|kvincent|sescent|sepcent|okcent|nauxcent|mil|dumil|trimil|kvarmil|kvinmil|sesmil|sepmil|okmil|nauxmil|miliono|dumiliono|trimiliono|kvarmiliono|kvinmiliono|sesmiliono|sepmiliono|okmiliono|nauxmiliono|miliardo|dumiliardo|trimiliardo|kvarmiliardo|kvinmiliardo|sesmiliardo|sepmiliardo|okmiliardo|nauxmiliardo|nulo|"; // *** Note: miliono, miliardo, and nulo omit -o before adding suffix (or using as prefix). ten-first=11th etc.
static string wordDivisionAlphabet = "¯{}|abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZÇçÉéÑñ'`´";
static string dictionaryIndex = "j006b008300e30108014101900191019701a10264031c03820450045104a0g055305a205da062e0656g0663g0789i07f7i085cj0888j0913j0993j09fe09iff0a01i0a55i0abdi0abeg0ac1hg0ac2g0b9bj0beai0d13i0e1chg0e74j0e9bj0f05hg0f1cg0f34g0f470f610f64g0f68105b10fb111d11c711c811e5g12071249126d127c129512961298g1344i13a2i143f1440g14a3j1569j15eeg15f01631h1697i16e3i16faj1747g174b175cj17d1j17f117fe184dj18a0i18fei194ehg19a7h19a919d3g1a031a04g1a061a09g1a25g1a261a2ci1a361a421a9d1bfa1bfd1bff1c001c141c201c251c26j1c38g1c53i1c62i1c63hg1c70hg1ca8g1cdbj1ee7i1f0gf1f10g1f3jf1f9f1fa01faa22ebj23bb23c423c524a02502i25c6i261bi26cbhg2716hg2769h2b08i2bd3g2bd4g2c8e2c8gf2c902c912c922d8ei2d8gf2e17h2e8ej2e8f2f50g2f51g2f7ahg2fe1hg3013h30143039303c3041g30623065j306630a930b730c430d3g30f1g315431673168g3174g3175g32b1i338a338bj33fdj34b7g34bb35b1j3773378cg37e9hhhhhhhg3879i39d6i3a54hg3aa0hg3ae1h3ba4g3bbdg3d033d08j3da3g3e043e0e3e113e143e823ef3g3ef6g3fb640e140f841e3j4258i4324i436b436dh43b7j44c7g44c845174519hi451ag451di4524452c4531456dg456eg4589458e4595g4596459745a6g4622i46cdi47724776h47bahg47c5hhhhhhhg47cai47d5i47e0hg47f3hg47f7hj";
static string hyphenatedDataAlphabet = "()|/abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZÇçÉéÑñ'`´";
static string hyphenatedDataAlphabet2 = "-()|/abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZÇçÉéÑñ'`´";
//static char onedetermTokens[] = "*¯*Athe*},*¯*AThe*},*¯*Aall*},*¯*Aeach*},*¯*Aevery|kind|zqx*},*¯*Aevery|number|zqx*},*¯*Aeverybodys*},*¯*Aher*},*¯*Ahis*},*¯*Ahis/her/its/ones/their|own*},*¯*Ahis/her/its/their|own*},*¯*Aits*},*¯*Amy*},*¯*Ano|kind|zqx*},*¯*Ano|kinds|zqx*},*¯*Ano|number|zqx*},*¯*Ano|one/none*},*¯*Anobodys*},*¯*Anone/no*},*¯*Aones*},*¯*Aour*},*¯*Asome|kind|zqx*},*¯*Asome|kinds|zqx*},*¯*Asome|number|zqx*},*¯*Asomeone/some*},*¯*Asomeones*},*¯*Athat*},*¯*Athat|kind|zqx*},*¯*Athat|number|zqx*},*¯*Athat|ones*},*¯*Atheir*},*¯*Athese|kinds|zqx*},*¯*Athis*},*¯*Athis|kind|zqx*},*¯*Athis|number|zqx*},*¯*Athis|ones*},*¯*Athose*},*¯*Athose|kinds|zqx*},*¯*Awhat|kind|zqx*},*¯*Awhat|kinds|zqx*},*¯*Awhichnumber*},*¯*Awhich|number|zqx*},*¯*Awho/which*},*¯*Awhom/which*},*¯*Awhose/which|ones*},*¯*Ayour*},*¯*AAll*},*¯*AEach*},*¯*AEvery|kind|zqx*},*¯*AEvery|number|zqx*},*¯*AEverybodys*},*¯*AHer*},*¯*AHis*},*¯*AHis/her/its/ones/their|own*},*¯*AHis/her/its/their|own*},*¯*AIts*},*¯*AMy*},*¯*ANo|kind|zqx*},*¯*ANo|kinds|zqx*},*¯*ANo|number|zqx*},*¯*ANo|one/none*},*¯*ANobodys*},*¯*ANone/no*},*¯*AOnes*},*¯*AOur*},*¯*ASome|kind|zqx*},*¯*ASome|kinds|zqx*},*¯*ASome|number|zqx*},*¯*ASomeone/some*},*¯*ASomeones*},*¯*AThat*},*¯*AThat|kind|zqx*},*¯*AThat|number|zqx*},*¯*AThat|ones*},*¯*ATheir*},*¯*AThese|kinds|zqx*},*¯*AThis*},*¯*AThis|kind|zqx*},*¯*AThis|number|zqx*},*¯*AThis|ones*},*¯*AThose*},*¯*AThose|kinds|zqx*},*¯*AWhat|kind|zqx*},*¯*AWhat|kinds|zqx*},*¯*AWhichnumber*},*¯*AWhich|number|zqx*},*¯*AWho/which*},*¯*AWhom/which*},*¯*AWhose/which|ones*},*¯*AYour*}";
static string determTokens[] = { "*¯*Athe*}", "*¯*AThe*}", "*¯*Aall*}", "*¯*Aeach*}", "*¯*Aevery|kind|zqx*}", "*¯*Aevery|number|zqx*}", "*¯*Aeverybodys*}", "*¯*Aher*}", "*¯*Ahis*}", "*¯*Ahis/her/its/ones/their|own*}", "*¯*Ahis/her/its/their|own*}", "*¯*Aits*}", "*¯*Amy*}", "*¯*Ano|kind|zqx*}", "*¯*Ano|kinds|zqx*}", "*¯*Ano|number|zqx*}", "*¯*Ano|one/none*}", "*¯*Anobodys*}", "*¯*Anone/no*}", "*¯*Aones*}", "*¯*Aour*}", "*¯*Asome|kind|zqx*}", "*¯*Asome|kinds|zqx*}", "*¯*Asome|number|zqx*}", "*¯*Asomeone/some*}", "*¯*Asomeones*}", "*¯*Athat*}", "*¯*Athat|kind|zqx*}", "*¯*Athat|number|zqx*}", "*¯*Athat|ones*}", "*¯*Atheir*}", "*¯*Athese|kinds|zqx*}", "*¯*Athis*}", "*¯*Athis|kind|zqx*}", "*¯*Athis|number|zqx*}", "*¯*Athis|ones*}", "*¯*Athose*}", "*¯*Athose|kinds|zqx*}", "*¯*Awhat|kind|zqx*}", "*¯*Awhat|kinds|zqx*}", "*¯*Awhichnumber*}", "*¯*Awhich|number|zqx*}", "*¯*Awho/which*}", "*¯*Awhom/which*}", "*¯*Awhose/which|ones*}", "*¯*Ayour*}", "*¯*AAll*}", "*¯*AEach*}", "*¯*AEvery|kind|zqx*}", "*¯*AEvery|number|zqx*}", "*¯*AEverybodys*}", "*¯*AHer*}", "*¯*AHis*}", "*¯*AHis/her/its/ones/their|own*}", "*¯*AHis/her/its/their|own*}", "*¯*AIts*}", "*¯*AMy*}", "*¯*ANo|kind|zqx*}", "*¯*ANo|kinds|zqx*}", "*¯*ANo|number|zqx*}", "*¯*ANo|one/none*}", "*¯*ANobodys*}", "*¯*ANone/no*}", "*¯*AOnes*}", "*¯*AOur*}", "*¯*ASome|kind|zqx*}", "*¯*ASome|kinds|zqx*}", "*¯*ASome|number|zqx*}", "*¯*ASomeone/some*}", "*¯*ASomeones*}", "*¯*AThat*}", "*¯*AThat|kind|zqx*}", "*¯*AThat|number|zqx*}", "*¯*AThat|ones*}", "*¯*ATheir*}", "*¯*AThese|kinds|zqx*}", "*¯*AThis*}", "*¯*AThis|kind|zqx*}", "*¯*AThis|number|zqx*}", "*¯*AThis|ones*}", "*¯*AThose*}", "*¯*AThose|kinds|zqx*}", "*¯*AWhat|kind|zqx*}", "*¯*AWhat|kinds|zqx*}", "*¯*AWhichnumber*}", "*¯*AWhich|number|zqx*}", "*¯*AWho/which*}", "*¯*AWhom/which*}", "*¯*AWhose/which|ones*}", "*¯*AYour*}" };
static string manynewlines = "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n";

// Compressed dictionary index with headwords' first 2 letters pointed to by 4 hex digits:
//public:
static regex rgx;
static string asciiCharacters = "                                                                                                                                                                                                                                                                "; // "\u0000\u0001\u0002\u0003\u0004\u0005\u0006\u0007\u0008\t\n\u000b\u000c\r\u000e\u000f\u0010\u0011\u0012\u0013\u0014\u0015\u0016\u0017\u0018\u0019\u001a\u001b\u001c\u001d\u001e\u001f !\"#$%&'()*+,-./0123456789:;<=>?@" + upperall(alphabetLower) + "[\\]^_`" + alphabetLower + "{|}~" ¡¢£¤¥¦§¨©ª«­®¯°±²³´µ¸¹º»¼½¾¿ÀÁÂÃÄÅÆÇÈÉÊËÌÍÎÏÐÑÒÓÔÕÖ×ØÙÚÛÜÝÞßàáâãäåæçèéêëìíîïðñòóôõö÷øùúûüýþÿ";
static string demonymEnd, demonymSuffixes, english, entry, esperanto, f, g, h, indefinite, ip, j, m,
oldVocable, partOfSpeech, pejorative, person, phrase, pp, prefix, prefixedPart, remainder1, remainder2,
remainder3, remainder4, saveEO, stem, startText, t, textIn, textIn2, textOut, tx, tx2, txt1, txtxt, v,
vocable, vocableCircum, w, wd;

static string previousPerson = "";
static string b = "   ";
static string fs = ""; // temp string
static locale loc;

static string englishTranslations[18500];
static string esperantoWords[18500];

const static int totalNonalt = 2055;
const static int totalIrregularVerbs = 342;
const static int totalPrefixes = 146;
const static int totalMultiterm = 525;
static bool H_Method = false;
static bool circumflexCorrection = true;
static bool dontTranslateCapWords = true;

static unsigned int ii;
static int c, carriageReturns, connect, d, ee, i, indl, insertPosition, iz,
leadingSpaces, lineFeeds, ma, mnvfd, n, negativeFound, nounPosition, p,
previousPosition, tabs, totalEntries, verbPerson, x, y, z;
static bool adjSubjectFound, allCapitalized, allCaps, capitalized, commaAllowed,
endDash, foundAdjPhrase, noItq, perfect, startDash;
static int nearbyWordIndex, currentWordIndex;

static int indexof(string st, string seg) {
  unsigned int pos = st.find(seg);
  if (pos == string::npos) return NOT_FOUND;
  if (pos == 4294967295) return NOT_FOUND;
  return (int)pos;
}

static int indexof(string st, string seg, int start) {
  unsigned int pos = st.find(seg, start);
  if (pos == string::npos) return NOT_FOUND;
  if (pos == 4294967295) return NOT_FOUND;
  return (int)pos;
}

static string rep(string st, string oldd, string neww) { // replace
  int pos;
  if (neww.compare(oldd) == 0) return st;
  string str = st;
  if ((indexof(neww, oldd) >= FOUND) && ((pos = indexof(str, oldd)) >= FOUND)) {
	str.replace(pos, oldd.length(), neww);
	return str;
  }
  while ((pos = indexof(str, oldd)) >= FOUND) {
	str.replace(pos, oldd.length(), neww);
  }
  return str;
}

static string upperall(string str) {
  string st2 = "";
  for (string::size_type i = 0; i < str.length(); ++i) st2 += toupper(str[i], loc);
  return st2;
}

static string lowerall(string str) {
  string st2 = "";
  for (string::size_type i = 0; i < str.length(); ++i) st2 += tolower(str[i], loc);
  return st2;
}

static string rplF(string st, string oldSeg, string newSeg) {
  // Replace string, preserving case of first character:
  return rep((rep(st, lowerall(oldSeg.substr(0, 1)) + oldSeg.substr(1),
	newSeg.substr(0, 1) + newSeg.substr(1))), upperall(oldSeg.substr(0, 1)) +
	oldSeg.substr(1), upperall(newSeg.substr(0, 1)) +
	newSeg.substr(1));
}

static string rplUL(string st, string oldSeg, string newSeg) {
  // Replace lowercase and capitalized string starting with space:
  string s = st;
  string oldUpper = upperall(oldSeg.substr(0, 2))
	+ oldSeg.substr(2);
  string newUpper = upperall(newSeg.substr(0, 2))
	+ newSeg.substr(2);
  int p = -1 * newSeg.length();
  while ((p = indexof(s, oldSeg, p + newSeg.length())) >= FOUND) s = s.substr(0, p) + newSeg +
	s.substr(p + oldSeg.length());
  p = -1 * newUpper.length();
  while ((p = indexof(s, oldUpper, p + newUpper.length())) >= FOUND) s = s.substr(0, p) + newUpper +
	s.substr(p + oldUpper.length());
  return s;
}

static bool startswith(string str, string seg) {
  return str.substr(0, seg.length()).compare(seg) == 0;
}

static bool endswith(string str, string seg) {
  if (str.length() - seg.length() > 214783647) return false;
  //try {
  return str.substr(str.length() - seg.length()).compare(seg) == 0;
  //}
 // catch (exception ee) {
	//exception ee2 = ee;
	//string s;
	//out << (str.length()-seg.length());
	//out << str.length();
	//out << seg.length();
	//  cin >> s;
 // }
  //return true;
}

static string commaAdjust(string tx) {
  /* Comma adjustments for conjunctions or subordinates, so phrases can be divided
  correctly; adjusting decimals < 1: */
  string tx2 = tx;
  tx2 = rep(tx2, " , ", ", ");
  tx2 = rep(tx2, " ,", ", ");
  rgx = " \\.(\\d)";
  tx2 = regex_replace(tx2, rgx, " 0.$1");
  rgx = "(e|n|s)(|kaj)aux ";
  tx2 = regex_replace(tx2, rgx, "$1,$2aux ");
  rgx = "u(|kaj)auxq ";
  tx2 = regex_replace(tx2, rgx, "u,$1auxq ");
  rgx = "(iu|u),(|kaj)auxq ";
  tx2 = regex_replace(tx2, rgx, "$1$2aux ");
  rgx = "(e|n|s) (kiuj?n?) ";
  tx2 = regex_replace(tx2, rgx, "$1, $2 ");
  rgx = "u (kiuj?n?q) ";
  tx2 = regex_replace(tx2, rgx, "u, $1 ");
  rgx = "(iu|u), (kiuj?n?q) ";
  tx2 = regex_replace(tx2, rgx, "$1 $2 ");
  return tx2;
}

static string numberAdjust(string tx) {
  // Adjust number hyphens, and add "and" before one's place
  string phrase = " " + tx;
  phrase = rep(phrase, "", "-");
  rgx = "-(unu|du|tri|kvar|kvin|ses|sep|ok|naux)(aj?n?)([ .,?!:;}])";
  phrase = regex_replace(phrase, rgx, " && $1$2$3");
  rgx = "-(unu|du|tri|kvar|kvin|ses|sep|ok|naux)([ .,?!:;}])";
  phrase = regex_replace(phrase, rgx, " && $1$2");
  rgx = "(d|dud|trid|kvard|kvind|sesd|sepd|okd|nauxd|D|Dud|Trid|Kvard|Kvind|Sesd|Sepd|Okd|Nauxd)ek (unu|du|tri|kvar|kvin|ses|sep|ok|naux)([ .,?!:;}])";
  phrase = regex_replace(phrase, rgx, "$1ek && $2$3");
  rgx = "(c|duc|tric|kvarc|kvinc|sesc|sepc|okc|nauxc|C|Duc|Tric|Kvarc|Kvinc|Sesc|Sepc|Okc|Nauxc)ent (unu|du|tri|kvar|kvin|ses|sep|ok|naux)([ .,?!:;}])";
  phrase = regex_replace(phrase, rgx, "$1ent && $2$3");
  rgx = "(m|dum|trim|kvarm|kvinm|sesm|sepm|okm|nauxm|M|Dum|Trim|Kvarm|Kvinm|Sesm|Sepm|Okm|Nauxm)il (unu|du|tri|kvar|kvin|ses|sep|ok|naux)([ .,?!:;}])";
  phrase = regex_replace(phrase, rgx, "$1il && $2$3");
  rgx = "(m|dum|trim|kvarm|kvinm|sesm|sepm|okm|nauxm|M|Dum|Trim|Kvarm|Kvinm|Sesm|Sepm|Okm|Nauxm)iliono (unu|du|tri|kvar|kvin|ses|sep|ok|naux)([ .,?!:;}])";
  phrase = regex_replace(phrase, rgx, "$1iliono && $2$3");
  rgx = "(m|dum|trim|kvarm|kvinm|sesm|sepm|okm|nauxm)ilionoj (unu|du|tri|kvar|kvin|ses|sep|ok|naux)([ .,?!:;}])";
  phrase = regex_replace(phrase, rgx, "$1ilionoj && $2$3");
  rgx = "(m|dum|trim|kvarm|kvinm|sesm|sepm|okm|nauxm|M|Dum|Trim|Kvarm|Kvinm|Sesm|Sepm|Okm|Nauxm)iliardo (unu|du|tri|kvar|kvin|ses|sep|ok|naux)([ .,?!:;}])";
  phrase = regex_replace(phrase, rgx, "$1iliardo && $2$3");
  rgx = "(m|dum|trim|kvarm|kvinm|sesm|sepm|okm|nauxm)iliardoj (unu|du|tri|kvar|kvin|ses|sep|ok|naux)([ .,?!:;}])";
  phrase = regex_replace(phrase, rgx, "$1iliardoj && $2$3");
  rgx = "(b|dub|trib|kvarb|kvinb|sesb|sepb|okb|nauxb|B|Dub|Trib|Kvarb|Kvinb|Sesb|Sepb|Okb|Nauxb)iliono (unu|du|tri|kvar|kvin|ses|sep|ok|naux)([ .,?!:;}])";
  phrase = regex_replace(phrase, rgx, "$1iliono && $2$3");
  rgx = "(b|dub|trib|kvarb|kvinb|sesb|sepb|okb|nauxb)iliono (unu|du|tri|kvar|kvin|ses|sep|ok|naux)([ .,?!:;}])";
  phrase = regex_replace(phrase, rgx, "$1ilionoj && $2$3");
  rgx = "(t|dut|trit|kvart|kvint|sest|sept|okt|nauxt|T|Dut|Trit|Kvart|Kvint|Sest|Sept|Okt|Nauxt)riliono (unu|du|tri|kvar|kvin|ses|sep|ok|naux)([ .,?!:;}])";
  phrase = regex_replace(phrase, rgx, "$1riliono && $2$3");
  rgx = "(t|dut|trit|kvart|kvint|sest|sept|okt|nauxt)riliono (unu|du|tri|kvar|kvin|ses|sep|ok|naux)([ .,?!:;}])";
  phrase = regex_replace(phrase, rgx, "$1rilionoj && $2$3");
  rgx = "iliono (unu|du|tri|kvar|kvin|ses|sep|ok|naux)([ .,?!:;}])";
  phrase = regex_replace(phrase, rgx, "iliono && $1$2");
  rgx = "ilionoj (unu|du|tri|kvar|kvin|ses|sep|ok|naux)([ .,?!:;}])";
  phrase = regex_replace(phrase, rgx, "ilionoj && $1$2");
  phrase = rplF(phrase, "cent-", "cent ");
  phrase = rplF(phrase, "mil-", "mil ");
  phrase = rplF(phrase, "miliono-", "miliono ");
  phrase = rplF(phrase, "miliardo-", "miliardo ");
  phrase = rep(phrase, " - ", " Qzxuq ");
  phrase = rep(phrase, " -- ", " Qzxuq ");
  rgx = "-(\\d)";
  phrase = regex_replace(phrase, rgx, "iqzxuqqe$1");
  phrase = rep(phrase, " -", " u8qpz");
  phrase = rep(phrase, "- ", "u8qpz ");
  phrase = rep(phrase, "u8qpz", "-");

  for (int s = 0; s < 26; s++) { // Letter prefixes: e-book, I-pad
	phrase = rep(phrase, " " + alphabetLower.substr(s, 1) + "-", " "
	  + alphabetLower.substr(s, 1) + "kzq-");
	phrase = rep(phrase, " " + alphabetLowerUpper.substr(s + 26, 1)
	  + "-", " " + alphabetLower.substr(s, 1) + "pzq-");
  }

  phrase = rep(phrase, " o-", "a ");
  phrase = rep(phrase, "-", "a ");
  return phrase.substr(1);
}

static string abbreviationAdjust(string txt) {
  string tx = txt;
  tx = rep(tx, " \"", " Wzxl "); // Adjust quotes
  tx = rep(tx, "\" ", " Wzxr ");
  tx = rplF(tx, "sa-", "s-");
  // Unabbreviate titles:
  rgx = "(S|s)-(roj?n?)";
  tx = regex_replace(tx, rgx, "$1injoro$2");
  rgx = "(S|s)-(inoj?n?)";
  tx = regex_replace(tx, rgx, "$1injorino$2");
  rgx = "(S|s)-(taj?n?)";
  tx = regex_replace(tx, rgx, "$1ank$2");
  // Change hyphens to symbols:
  tx = rep(tx, "aa-", "aaqrzy");
  tx = rep(tx, " -", " u8qpz");
  tx = rep(tx, "- ", "u8qpz ");
  tx = rep(tx, "-", "a-");
  tx = rep(tx, "u8qpz", "-");
  tx = rplUL(tx, " ea-", " e-");
  // Adjust ordinals:
  rgx = "a-(unu|du|tri|kvar|kvin|ses|sep|ok|naux|dek|cent|mil)";
  phrase = regex_replace(phrase, rgx, "-$1");
  tx = rep(tx, "aa-", "a-");
  tx = rep(tx, "oa-", "o-");
  tx = rep(tx, "aaqrzy", "aa-");
  return tx;
}

static string upper(string s, int p) {
  // Change character at index p to uppercase:
  if (s.length() <= p) return s;
  return s.substr(0, p) + upperall(s.substr(p, 1))
	+ s.substr(p + 1);
}

static string lower(string s, int p) {
  // Change character at index p to lowercase:
  if (s.length() <= p) return s;
  return s.substr(0, p) + lowerall(s.substr(p, 1)) + s.substr(p + 1);
}

static void preprocessing() {
  // Preprocessing:
  int p, lp;
  // Multi-word proper nouns:
  for (x = 0; x <= totalMultiterm; x++) {
	lp = 0;
	while ((p = indexof(ip, multitermOriginal[x], lp)) >= FOUND) {
	  //out << p;// multitermOriginal[x];
	  ip = ip.substr(0, p) + multitermApostrophe[x] + ip.substr(p
		+ multitermOriginal[x].length());
	  lp += multitermOriginal[x].length();
	}
  }

  rgx = "faritaj?n? de ";
  ip = regex_replace(ip, rgx, "fare de "); // Agent: by
  rgx = "Faritaj?n? de ";
  ip = regex_replace(ip, rgx, "fare de ");
  rgx = "konstruitaj?n? de ";
  ip = regex_replace(ip, rgx, "fare de ");
  rgx = "Konstruitaj?n? de ";
  ip = regex_replace(ip, rgx, "fare de ");

  if (indexof(ip, "?") == NOT_FOUND) {
	return;
  }

  // Adjust grammar of questions:
  // Look for question words:
  p = 0;
  int z, x, y;
  if ((z = indexof(ip, "Kion ", p)) == NOT_FOUND) {
	if ((z = indexof(ip, "Kiojn ", p)) == NOT_FOUND) {
	  if ((z = indexof(ip, "Kiun ", p)) == NOT_FOUND) {
		if ((z = indexof(ip, "Kiujn ", p)) == NOT_FOUND) {
		  if ((z = indexof(ip, "Kian ", p)) == NOT_FOUND) {
			if ((z = indexof(ip, "Kiajn ", p)) == NOT_FOUND) {
			  if ((z = indexof(ip, "Kie ", p)) == NOT_FOUND) {
				if ((z = indexof(ip, "Kien ", p)) == NOT_FOUND) {
				  if ((z = indexof(ip, "Kiam ", p)) == NOT_FOUND) {
					if ((z = indexof(ip, "Kial ", p)) == NOT_FOUND) {
					  if ((z = indexof(ip, "Je kioma horo ", p)) == NOT_FOUND) {
						if ((z = indexof(ip, "Kioma horo ", p)) == NOT_FOUND) {
						  if ((z = indexof(ip, "Kiel ", p)) == NOT_FOUND) {
							p = p + p;
						  }
						}
					  }
					}
				  }
				}
			  }
			}
		  }
		}
	  }
	}
  }
  // Find verb tense:
  while ((z >= FOUND) && (p + 8 < ip.length())) {
	if ((x = indexof(ip, "as?", p + 8)) == NOT_FOUND) {
	  if ((x = indexof(ip, "as ", p + 8)) == NOT_FOUND) {
		if ((x = indexof(ip, "as,", p + 8)) == NOT_FOUND) {
		  if ((x = indexof(ip, "os?", p + 8)) == NOT_FOUND) {
			if ((x = indexof(ip, "os ", p + 8)) == NOT_FOUND) {
			  if ((x = indexof(ip, "os,", p + 8)) == NOT_FOUND) {
				if ((x = indexof(ip, "us?", p + 8)) == NOT_FOUND) {
				  if ((x = indexof(ip, "us ", p + 8)) == NOT_FOUND) {
					if ((x = indexof(ip, "us,", p + 8)) == NOT_FOUND) {
					  if ((x = indexof(ip, "u?", p + 8)) == NOT_FOUND) {
						if ((x = indexof(ip, "u ", p + 8)) == NOT_FOUND) {
						  if ((x = indexof(ip, "u,", p + 8)) == NOT_FOUND) {
							p = p + p;
						  }
						}
					  }
					}
				  }
				}
			  }
			}
		  }
		}
	  }
	}
	y = indexof(ip, "is?", p + 8); // Look for preterite:
	if (y == NOT_FOUND) {
	  y = indexof(ip, "is ", p + 8);
	  if (y == NOT_FOUND) {
		y = indexof(ip, "is,", p + 8);
	  }
	}
	if ((y >= FOUND) && ((x == NOT_FOUND) || (x > y))) {
	  while (!ip.substr(y, 1).compare(" ") == 0) {
		y--;
	  }
	  if (y > 7) {
		if (indexof(ip.substr(y - 8), "i ") >= FOUND) {
		  y--;
		  while (!ip.substr(y, 1).compare(" ") == 0) {
			y--;
		  }
		}
	  }
	  ip = ip.substr(0, y + 1) + "zumexzite " + ip.substr(y + 1);  // Preterite marker
	}
	else {
	  if (x >= FOUND) {
		while (!ip.substr(x, x + 1 - (x - (x))).compare(" ") == 0) {
		  x--;
		}
		ip = ip.substr(0, x + 1) + "zumexzate " + ip.substr(x + 1); // Non-preterite marker
	  }
	}
	p = z + 12;
	if ((z = indexof(ip, "Kion ", p)) == NOT_FOUND) {
	  if ((z = indexof(ip, "Kiojn ", p)) == NOT_FOUND) {
		if ((z = indexof(ip, "Kiun ", p)) == NOT_FOUND) {
		  if ((z = indexof(ip, "Kiujn ", p)) == NOT_FOUND) {
			if ((z = indexof(ip, "Kian ", p)) == NOT_FOUND) {
			  if ((z = indexof(ip, "Kiajn ", p)) == NOT_FOUND) {
				if ((z = indexof(ip, "Kie ", p)) == NOT_FOUND) {
				  if ((z = indexof(ip, "Kien ", p)) == NOT_FOUND) {
					if ((z = indexof(ip, "Kiam ", p)) == NOT_FOUND) {
					  if ((z = indexof(ip, "Kial ", p)) == NOT_FOUND) {
						if ((z = indexof(ip, "Je kioma horo ", p)) == NOT_FOUND) {
						  if ((z = indexof(ip, "Kioma horo ", p)) == NOT_FOUND) {
							if ((z = indexof(ip, "Kiel ", p)) == NOT_FOUND) {
							  p = p + p;
							}
						  }
						}
					  }
					}
				  }
				}
			  }
			}
		  }
		}
	  }
	}
  }
  p = 1;
  if ((z = indexof(ip, "Kaj kion ", p)) == NOT_FOUND) {
	if ((z = indexof(ip, "Kaj kiojn ", p)) == NOT_FOUND) {
	  if ((z = indexof(ip, "Kaj kiun ", p)) == NOT_FOUND) {
		if ((z = indexof(ip, "Kaj kiujn ", p)) == NOT_FOUND) {
		  if ((z = indexof(ip, "Kaj kian ", p)) == NOT_FOUND) {
			if ((z = indexof(ip, "Kaj kiajn ", p)) == NOT_FOUND) {
			  if ((z = indexof(ip, "Kaj kie ", p)) == NOT_FOUND) {
				if ((z = indexof(ip, "Kaj kien ", p)) == NOT_FOUND) {
				  if ((z = indexof(ip, "Kaj kiam ", p)) == NOT_FOUND) {
					if ((z = indexof(ip, "Kaj kial ", p)) == NOT_FOUND) {
					  if ((z = indexof(ip, "Kaj je kioma horo ", p)) == NOT_FOUND) {
						if ((z = indexof(ip, "Kaj kioma horo ", p)) == NOT_FOUND) {
						  if ((z = indexof(ip, "Kaj kiel ", p)) == NOT_FOUND) {
							p = p + p;
						  }
						}
					  }
					}
				  }
				}
			  }
			}
		  }
		}
	  }
	}
  }
  while ((z >= FOUND) && (p + 8 < ip.length())) {
	if ((x = indexof(ip, "as?", p + 8)) == NOT_FOUND) {
	  if ((x = indexof(ip, "as ", p + 8)) == NOT_FOUND) {
		if ((x = indexof(ip, "as,", p + 8)) == NOT_FOUND) {
		  if ((x = indexof(ip, "os?", p + 8)) == NOT_FOUND) {
			if ((x = indexof(ip, "os ", p + 8)) == NOT_FOUND) {
			  if ((x = indexof(ip, "os,", p + 8)) == NOT_FOUND) {
				if ((x = indexof(ip, "us?", p + 8)) == NOT_FOUND) {
				  if ((x = indexof(ip, "us ", p + 8)) == NOT_FOUND) {
					if ((x = indexof(ip, "us,", p + 8)) == NOT_FOUND) {
					  if ((x = indexof(ip, "u?", p + 8)) == NOT_FOUND) {
						if ((x = indexof(ip, "u ", p + 8)) == NOT_FOUND) {
						  if ((x = indexof(ip, "u,", p + 8)) == NOT_FOUND) {
							p = p + p;
						  }
						}
					  }
					}
				  }
				}
			  }
			}
		  }
		}
	  }
	}
	if (p + 8 < ip.length()) { // Look for preterite
	  y = indexof(ip, "is?", p + 8);
	}
	if (p + 8 < ip.length()) {
	  y = indexof(ip, "is ", p + 8);
	  if (y == NOT_FOUND) {
		y = indexof(ip, "is,", p + 8);
	  }
	}
	if ((y >= FOUND) && ((x == NOT_FOUND) || (x > y))) {
	  while (!ip.substr(y, 1).compare(" ") == 0) {
		y--;
	  }
	}
	if (y > 7) {
	  if (indexof(ip.substr(y - 8), "i ") >= FOUND) {
		y--;
	  }
	  while (!ip.substr(y, 1).compare(" ") == 0) {
		y--;
	  }
	  ip = ip.substr(0, y + 1) + "zumexzite " + ip.substr(y + 1); // Preterite
	}
	else {
	  if (x >= FOUND) {
		while (!ip.substr(x, 1).compare(" ") == 0) {
		  x--;
		}
		ip = ip.substr(0, x + 1) + "zumexzate " + ip.substr(x + 1); // Non-preterite
	  }
	}
	// And befofe question words:
	p = z + 12;
	if ((z = indexof(ip, "Kaj kion ", p)) == NOT_FOUND) {
	  if ((z = indexof(ip, "Kaj kiojn ", p)) == NOT_FOUND) {
		if ((z = indexof(ip, "Kaj kiun ", p)) == NOT_FOUND) {
		  if ((z = indexof(ip, "Kaj kiujn ", p)) == NOT_FOUND) {
			if ((z = indexof(ip, "Kaj kian ", p)) == NOT_FOUND) {
			  if ((z = indexof(ip, "Kaj kiajn ", p)) == NOT_FOUND) {
				if ((z = indexof(ip, "Kaj kie ", p)) == NOT_FOUND) {
				  if ((z = indexof(ip, "Kaj kien ", p)) == NOT_FOUND) {
					if ((z = indexof(ip, "Kaj kiam ", p)) == NOT_FOUND) {
					  if ((z = indexof(ip, "Kaj kial ", p)) == NOT_FOUND) {
						if ((z = indexof(ip, "Kaj je kioma horo ", p)) == NOT_FOUND) {
						  if ((z = indexof(ip, "Kaj kioma horo ", p)) == NOT_FOUND) {
							if ((z = indexof(ip, "Kaj kiel ", p)) == NOT_FOUND) {
							  p = p + p;
							}
						  }
						}
					  }
					}
				  }
				}
			  }
			}
		  }
		}
	  }
	}
  }
  // But before question words:
  p = 1;
  if ((z = indexof(ip, "Sed kion ", p)) == NOT_FOUND) {
	if ((z = indexof(ip, "Sed kiojn ", p)) == NOT_FOUND) {
	  if ((z = indexof(ip, "Sed kiun ", p)) == NOT_FOUND) {
		if ((z = indexof(ip, "Sed kiujn ", p)) == NOT_FOUND) {
		  if ((z = indexof(ip, "Sed kian ", p)) == NOT_FOUND) {
			if ((z = indexof(ip, "Sed kiajn ", p)) == NOT_FOUND) {
			  if ((z = indexof(ip, "Sed kie ", p)) == NOT_FOUND) {
				if ((z = indexof(ip, "Sed kien ", p)) == NOT_FOUND) {
				  if ((z = indexof(ip, "Sed kiam ", p)) == NOT_FOUND) {
					if ((z = indexof(ip, "Sed kial ", p)) == NOT_FOUND) {
					  if ((z = indexof(ip, "Sed je kioma horo ", p)) == NOT_FOUND) {
						if ((z = indexof(ip, "Sed kioma horo ", p)) == NOT_FOUND) {
						  if ((z = indexof(ip, "Sed kiel ", p)) == NOT_FOUND) {
							p = p + p;
						  }
						}
					  }
					}
				  }
				}
			  }
			}
		  }
		}
	  }
	}
  }
  while (z >= FOUND) {
	if ((x = indexof(ip, "as?", p + 8)) == NOT_FOUND) {
	  if ((x = indexof(ip, "as ", p + 8)) == NOT_FOUND) {
		if ((x = indexof(ip, "as,", p + 8)) == NOT_FOUND) {
		  if ((x = indexof(ip, "os?", p + 8)) == NOT_FOUND) {
			if ((x = indexof(ip, "os ", p + 8)) == NOT_FOUND) {
			  if ((x = indexof(ip, "os,", p + 8)) == NOT_FOUND) {
				if ((x = indexof(ip, "us?", p + 8)) == NOT_FOUND) {
				  if ((x = indexof(ip, "us ", p + 8)) == NOT_FOUND) {
					if ((x = indexof(ip, "us,", p + 8)) == NOT_FOUND) {
					  if ((x = indexof(ip, "u?", p + 8)) == NOT_FOUND) {
						if ((x = indexof(ip, "u ", p + 8)) == NOT_FOUND) {
						  if ((x = indexof(ip, "u,", p + 8)) == NOT_FOUND) {
							p = p + p;
						  }
						}
					  }
					}
				  }
				}
			  }
			}
		  }
		}
	  }
	}
	y = indexof(ip, "is?", p + 8); // Look for preterite
	if (y == NOT_FOUND) {
	  y = indexof(ip, "is ", p + 8);
	  if (y == NOT_FOUND) {
		y = indexof(ip, "is,", p + 8);
	  }
	}
	if ((y >= FOUND) && ((x == NOT_FOUND) || (x > y))) {
	  while (!ip.substr(y, 1).compare(" ") == 0) {
		y--;
	  }
	  if (y > 7) {
		if (indexof(ip.substr(y - 8), "i ") >= FOUND) {
		  y--;
		  while (!ip.substr(y, 1).compare(" ") == 0) {
			y--;
		  }
		}
	  }
	  ip = ip.substr(0, y + 1) + "zumexzite " + ip.substr(y + 1); // Preterite
	}
	else {
	  if (x >= FOUND) {
		while (!ip.substr(x, 1).compare(" ") == 0) {
		  x--;
		}
		ip = ip.substr(0, x + 1) + "zumexzate " + ip.substr(x + 1); // Non-preterite
	  }
	}
	// But before question words:
	p = z + 12;
	if ((z = indexof(ip, "Sed kion ", p)) == NOT_FOUND) {
	  if ((z = indexof(ip, "Sed kiojn ", p)) == NOT_FOUND) {
		if ((z = indexof(ip, "Sed kiun ", p)) == NOT_FOUND) {
		  if ((z = indexof(ip, "Sed kiujn ", p)) == NOT_FOUND) {
			if ((z = indexof(ip, "Sed kian ", p)) == NOT_FOUND) {
			  if ((z = indexof(ip, "Sed kiajn ", p)) == NOT_FOUND) {
				if ((z = indexof(ip, "Sed kie ", p)) == NOT_FOUND) {
				  if ((z = indexof(ip, "Sed kien ", p)) == NOT_FOUND) {
					if ((z = indexof(ip, "Sed kiam ", p)) == NOT_FOUND) {
					  if ((z = indexof(ip, "Sed kial ", p)) == NOT_FOUND) {
						if ((z = indexof(ip, "Sed je kioma horo ", p)) == NOT_FOUND) {
						  if ((z = indexof(ip, "Sed kioma horo ", p)) == NOT_FOUND) {
							if ((z = indexof(ip, "Sed kiel ", p)) == NOT_FOUND) {
							  p = p + p;
							}
						  }
						}
					  }
					}
				  }
				}
			  }
			}
		  }
		}
	  }
	}
  }
}

static string asteriskSeparate(string EOWd) {
  // Separate noun and adj suffixes with asterisks:
  int p;
  // Skip non-nouns ending with -o and non-adjectives ending with -a:
  if (indexof((fs = " la¯ da¯ kaj¯ tra¯ ja¯ do¯ pro¯ tro¯ ajn¯ po¯ ho¯ ba¯ ha¯ "), " "
	+ EOWd + " ") >= FOUND) {
	return EOWd.substr(0, EOWd.length() - 1);
  }
  // Non-separables:
  if (endswith(EOWd, "miliono¯")) {
	return EOWd.substr(0, EOWd.length() - 1);
  }
  if (endswith(EOWd, "miliardo¯")) {
	return EOWd.substr(0, EOWd.length() - 1);
  }
  if (endswith(EOWd, "milionoj¯")) {
	return EOWd.substr(0, EOWd.length() - 1);
  }
  if (endswith(EOWd, "miliardoj¯")) {
	return EOWd.substr(0, EOWd.length() - 1);
  }
  p = indexof(EOWd, "o¯");
  if (p >= FOUND) {
	return EOWd.substr(0, p) + "*o";
  }
  p = indexof(EOWd, "oj¯");
  if ((p >= FOUND)) {
	return EOWd.substr(0, p) + "*o*j";
  }
  p = indexof(EOWd, "on¯");
  if (p >= FOUND) {
	return EOWd.substr(0, p) + "*o*n";
  }
  p = indexof(EOWd, "ojn¯");
  if (p >= FOUND) {
	return EOWd.substr(0, p) + "*o*j*n";
  }
  p = indexof(EOWd, ADJECTIVE_PLURAL_ORIG);
  if ((p >= FOUND)) {
	return EOWd.substr(0, p) + "*a";
  }
  p = indexof(EOWd, ADJECTIVE_PLURAL_ORIG);
  if ((p >= FOUND)) {
	return EOWd.substr(0, p) + "*a*j";
  }
  p = indexof(EOWd, "an¯");
  if ((p >= FOUND)) {
	return EOWd.substr(0, p) + "*a*n";
  }
  p = indexof(EOWd, "ajn¯");
  if ((p >= FOUND)) {
	return EOWd.substr(0, p) + "*a*j*n";
  }
  return EOWd.substr(0, EOWd.length() - 1);
}

static void addOneSuffix(string s) {
  // Add EO and English suffixes to list:
  esperanto = "*" + esperantoWords[x] + "*" + s + esperanto;
  english = "*" + englishTranslations[x] + english;
  entry = esperanto + DIV + english;
}

static bool addPrefix(string w, string f, string esperantoPrefix, string englishPrefix) {
  // Search for and add prefixes:    
  if (startswith(w, esperantoPrefix)) {
	if (wordPrefix(w.substr(esperantoPrefix.length()), f)) {
	  esperanto = "*" + esperantoPrefix + esperanto;
	  english = englishPrefix + english;
	  return true;
	}
  }
  return false;
}

static bool wordPrefix(string w, string f) {
  // Prefix search:
  for (int x = 0; x <= totalPrefixes; x++) {
	if (addPrefix(w, f, esperantoPrefixes[x], "*" + englishPrefixes[x])) { // f = parts of speech found
	  return true;
	}
  }
  return wordStem(w, f);
}

static string trim(string st) {
  string str = st;
  int p = 0;
  while ((str.substr(p, 1) == " ") && (p < str.length() - 1)) p++;
  str = str.substr(p);
  int e = str.length() - 1;
  while ((e > -1) && (str.substr(e, 1) == " ")) e--;
  return str.substr(0, e + 1);
}

static string leftTrim(string st) {
  int p = 0;
  while (st.substr(p, 1) == " ") {
	p++;
  }
  return st.substr(p);
}

static string rightTrim(string st) {
  int p = st.length();
  int n = 0;
  if (p >= 1) {
	while ((st.substr(p - 1, 1).compare("\n") == 0) && (p > 1)) {
	  n++;
	  p--;
	}
	while (st.substr(p - 1, 1).compare(" ") == 0) {
	  p--;
	}
	if ((n > 0) && (n < 37)) {
	  return st.substr(0, p) + (manynewlines).substr(0, n);
	}
  }
  return st.substr(0, p);
}

static string verbChange(string s, string oldVerb, string newVerb) {
  // Changes verb phrases such as idioms:
  string oldPhrase = "";
  int p = indexof(oldVerb, " ");
  if (p >= FOUND) {
	oldPhrase = oldVerb.substr(p);
	oldVerb = oldVerb.substr(0, p);
  }
  oldVerb = " " + oldVerb;
  string newPhrase = "";
  p = indexof(newVerb, " ");
  if (p >= FOUND) {
	newPhrase = newVerb.substr(p);
	newVerb = newVerb.substr(0, p);
  }
  newVerb = " " + newVerb;
  if ((endswith(oldVerb, "e")) && (endswith(newVerb, "e"))) { // Silent -e at end of both verbs
	oldVerb = oldVerb.substr(0, oldVerb.length() - 1);
	newVerb = newVerb.substr(0, newVerb.length() - 1);
	rgx = lowerall(oldVerb.substr(0, 2)) + oldVerb.substr(2) + "(e|es|ed|ing)(ly)?(erly)?" + oldPhrase + "([ .,?!:;)])";
  }
  else {
	rgx = lowerall(oldVerb.substr(0, 2)) + oldVerb.substr(2) + "(s|ed|ing)?(ly)?(erly)?" + oldPhrase + "([ .,?!:;)])";
  }
  return regex_replace(regex_replace(s, rgx, lowerall(newVerb.substr(0, 2)) +
	newVerb.substr(2) + "$1$2$3" + newPhrase + "$4"), rgx, upperall(newVerb.substr(0,
	2)) + newVerb.substr(2) + "$1$2$3" + newPhrase + "$4");
}

static string pluralize(string entry) {
  // Pluralize English noun if EO is plural:
  string b = entry + "              ";
  int leftOff;
  // the blind, the handicapped, the missing:
  if ((indexof(b, "*at*") >= FOUND) || (indexof(b, "*it*") >= FOUND) || (indexof(b, "*ot*") >= FOUND)
	|| (indexof(b, "*ut*") >= FOUND) || (indexof(b, "*ant*") >= FOUND) || (indexof(b, "*int*") >= FOUND)
	|| (indexof(b, "*ont*") >= FOUND) || (indexof(b, "*unt*") >= FOUND)) {
	return trim(b);
  }
  int p = indexof(b, "*o*j*");
  // Some irregular plural nounsS
  if (p >= FOUND) {
	p = indexof(b, "*}");
	b = b.substr(0, p) + "/" + b.substr(p);
	p = indexof(b, "/");
	//out << b;
	if (indexof(b, "continue_ing") >= FOUND) {
	  p = indexof(b, "continue_ing");
	  p = indexof(b, "/", p + 11);
	}
	while (p >= FOUND) {
	  leftOff = p;
	  if (indexof(b.substr(0, p), ")|") >= FOUND) {
		while (!b.substr(p, 2).compare(")|") == 0) p--;
	  }
	  do {
		b = b.substr(0, p) + "s" + b.substr(p);
		if (b.substr(p - 1, 1).compare("'") == 0) {
		  // plural possessive:
		  b = b.substr(0, p - 1) + "s'" + b.substr(p + 1);
		  p--;
		}
		if (p > 1) {
		  if (b.substr(p - 2, 3).compare("iss") == 0) { // crises
			b = b.substr(0, p - 2) + "e" + b.substr(p);
			break;
		  }
		}
		if (p > 0) {
		  if (b.substr(p - 1, 2).compare("os") == 0) {
			b = b.substr(0, p)
			  + "e" + b.substr(p); // tomatoes
		  }
		  if (b.substr(p - 1, 2).compare("ys") == 0) {
			b = b.substr(0, p - 1) + "ie" + b.substr(p); // y > ie
			p++;
		  }
		}
		// but not after vowels:
		if (p > 5) {
		  if (b.substr(p - 6, 7).compare("moneies") == 0) {
			b = b.substr(0, p - 3) + "ie" + b.substr(p);
			break;
		  }
		}
		if (p > 2) {
		  if (indexof((fs = " aies eies oies uies "), " " + b.substr(p - 3,
			4) + " ") >= FOUND) {
			b = b.substr(0, p - 2) + "y" + b.substr(p);
			break;
		  }
		}
		// insert -e- between sibilants
		if (p > 0) {
		  if (indexof((fs = " ss zs xs js "), " " + b.substr(p - 1, 2) +
			" ") >= FOUND) {
			b = b.substr(0, p) + "e" + b.substr(p);
			break;
		  }
		}
		if (p > 1) {
		  if (indexof((fs = " shs chs zhs "), " " + b.substr(p - 2, 3) + " ") >= FOUND) {
			b = b.substr(0, p) + "e" + b.substr(p);
			break;
		  }
		  if (b.substr(p - 2, 3).compare("rfs") == 0) {
			b = b.substr(0, p - 1) + "ve" + b.substr(p);
			break;
		  }
		}
		if (p > 2) {
		  if (b.substr(p - 3, 9).compare("mans/male") == 0) { // men
			b = b.substr(0, p - 2) + "en" + b.substr(p + 1);
			break;
		  }
		}
		if (p > 3) {
		  if (b.substr(p - 4, 6).compare("|mans/") == 0) {
			b = b.substr(0, p - 2) + "en" + b.substr(p + 1);
			break;
		  }
		  if (b.substr(p - 4, 6).compare("/mans/") == 0) {
			b = b.substr(0, p - 2) + "en" + b.substr(p + 1);
			break;
		  }
		  if (b.substr(p - 4, 6).compare("Omans/") == 0) {
			b = b.substr(0, p - 2) + "en" + b.substr(p + 1);
			break;
		  }
		  if (b.substr(p - 4, 5).compare("wifes") == 0) { // fe > ves
			b = b.substr(0, p - 2) + "ve" + b.substr(p);
			break;
		  }
		  if (b.substr(p - 4, 5).compare("lifes") == 0) {
			b = b.substr(0, p - 2) + "ve" + b.substr(p);
			break;
		  }
		  if (b.substr(p - 4, 5).compare("hoofs") == 0) { // f > ves
			b = b.substr(0, p - 1) + "ve" + b.substr(p);
			break;
		  }
		  if (b.substr(p - 4, 5).compare("loafs") == 0) {
			b = b.substr(0, p - 1) + "ve" + b.substr(p);
			break;
		  }
		  if (b.substr(p - 4, 5).compare("leafs") == 0) {
			b = b.substr(0, p - 1) + "ve" + b.substr(p);
			break;
		  }
		  if (!b.substr(p - 4, 5).compare("golfs") == 0) {
			if (b.substr(p - 2, 3).compare("lfs") == 0) {
			  b = b.substr(0, p - 1) + "ve" + b.substr(p);
			  break;
			}
		  }
		  if (b.substr(p - 4, 5).compare("fishs") == 0) {
			b = b.substr(0, p) + b.substr(p + 1);
			break;
		  }
		  if (b.substr(p - 4, 5).compare("deers") == 0) {
			b = b.substr(0, p) + b.substr(p + 1);
			break;
		  }
		}
		if (p > 4) {
		  if (b.substr(p - 5, 13).compare("womans/female") == 0) { //women
			b = b.substr(0, p - 2) + "en" + b.substr(p + 1);
			break;
		  }
		  if (b.substr(p - 5, 6).compare("childs") == 0) { // children
			b = b.substr(0, p) + "ren" + b.substr(p + 1);
			break;
		  }
		  if (b.substr(p - 5, 6).compare("tooths") == 0) {
			b = b.substr(0, p - 4) + "eeth" + b.substr(p + 1);
			break;
		  }
		  if (b.substr(p - 5, 6).compare("gooses") == 0) {
			b = b.substr(0, p - 4) + "eese" + b.substr(p + 1);
			break;
		  }
		  if (b.substr(p - 5, 6).compare("sheeps") == 0) {
			b = b.substr(0, p) + b.substr(p + 1);
			break;
		  }
		  if (b.substr(p - 5, 6).compare("bisons") == 0) {
			b = b.substr(0, p) + b.substr(p + 1);
			break;
		  }
		  if (b.substr(p - 5, 6).compare("mouses") == 0) {
			b = b.substr(0, p - 4) + "ice" + b.substr(p + 1);
			break;
		  }
		}
		if (p > 5) {
		  if (b.substr(p - 6, 7).compare("|womans") == 0) {
			b = b.substr(0, p - 2) + "en" + b.substr(p + 1);
			break;
		  }
		  if (b.substr(p - 6, 7).compare("/womans") == 0) {
			b = b.substr(0, p - 2) + "en" + b.substr(p + 1);
			break;
		  }
		  if (b.substr(p - 6, 7).compare("Owomans") == 0) {
			b = b.substr(0, p - 2) + "en" + b.substr(p + 1);
			break;
		  }
		  if (b.substr(p - 6, 7).compare("|childs") == 0) {
			b = b.substr(0, p) + "ren" + b.substr(p + 1);
			break;
		  }
		}
		if (p > 6) {
		  if (b.substr(p - 7, 8).compare("orsemans") == 0) {
			b = b.substr(0, p - 2) + "en" + b.substr(p + 1);
			break;
		  }
		  if (!b.substr(p - 7, 8).compare("bigfoots") == 0) {
			if (b.substr(p - 4, p + 1 - (p - 4)).compare("foots") == 0) {
			  b = b.substr(0, p - 3) + "eet" + b.substr(p + 1);
			  break;
			}
		  }
		}
		if (p > 7) {
		  if (b.substr(p - 8, 9).compare("antelopes") == 0) {
			b = b.substr(0, p) + b.substr(p + 1);
			break;
		  }
		}
		if (p > 8) {
		  if (b.substr(p - 9, 10).compare("orsewomans") == 0) {
			b = b.substr(0, p - 2) + "en" + b.substr(p + 1);
			break;
		  }
		}
		if (p > 9) {
		  if (b.substr(p - 10, 11).compare("phenomenons") == 0) {
			b = b.substr(0, p - 2) + "a" + b.substr(p + 1);
			break;
		  }
		}
		if (p > 10) {
		  if (b.substr(p - 11, 12).compare("infantrymans") == 0) {
			b = b.substr(0, p - 2) + "en" + b.substr(p + 1);
			break;
		  }
		}
	  } while (false);
	  p = indexof(b, "/", leftOff + 4);
	}
	p = indexof(b, "/*}");
	b = b.substr(0, p) + b.substr(p + 1);
  }
  b = rep(b, "'ss", "'s");
  b = rep(b, "tacoes", "tacos"); // Spanish plurals
  b = rep(b, "burritoes", "burritos");
  b = rep(b, "burroes", "burros");
  return trim(b);
}

static string addFreqSuf(string suffix, int x) {
  // Returns root and frequent suffix to add:
  return "*" + englishTranslations[x].substr(0, 1) + "("
	+ pluralize(englishTranslations[x].substr(1)) + suffix;
}

static void addFrequentSuffixes(int x, bool firstPass) {
  //out << english;
  // Add frequent suffixes:
  if (english.compare("-small*") == 0) {
	if ((FOUND <= indexof(esperanto, "*et*a")) || (FOUND
	  <= indexof(esperanto, "*et*e"))) {
	  english = addFreqSuf(")|slightly*", x);
	}
	else {
	  english = addFreqSuf(")|small*", x);
	}
  }
  else if (english.compare("-big*") == 0) {
	if ((FOUND <= indexof(esperanto, "*eg*a")) || (FOUND
	  <= indexof(esperanto, "*eg*e"))) {
	  english = addFreqSuf(")|very*", x);
	}
	else {
	  english = addFreqSuf(")|big*", x);
	}
  }
  else if (english.compare("-fem*") == 0) {
	english = addFreqSuf(")|female*", x);
  }
  else if (english.compare("-masc*") == 0) {
	english = addFreqSuf(")|male*", x);
  }
  else if (english.compare("-lousy*") == 0) {
	english = addFreqSuf(")|lousy*", x);
  }
  else if (english.compare("-fem-small*") == 0) {
	english = addFreqSuf(")|small|female*", x);
  }
 // else if (english.compare("-small-fem*") == 0) {
	//english = addFreqSuf(")|small|female*", x);
 // }
  else if (english.compare("-masc-small*") == 0) {
	english = addFreqSuf(")|small|male*", x);
  }
 // else if (english.compare("-small-masc*") == 0) {
	//english = addFreqSuf(")|small|male*", x);
 // }
  else if (english.compare("-fem-big*") == 0) {
	english = addFreqSuf(")|big|female*", x);
  }
  else if (english.compare("-masc-big*") == 0) {
	english = addFreqSuf(")|big|male*", x);
  }
  else if (english.compare("-fem-lousy*") == 0) {
	english = addFreqSuf(")|lousy|female*", x);
  }
  else if (english.compare("-masc-lousy*") == 0) {
	english = addFreqSuf(")|lousy|male*", x);
  }
  else if (english.compare("-small-lousy*") == 0) {
	english = addFreqSuf(")|lousy|little*", x);
  }
  else if (english.compare("-big-lousy*") == 0) {
	english = addFreqSuf(")|big|lousy*", x);
  }
  else if (english.compare("-offspring-fem*") == 0) {
	english = addFreqSuf("-offspring)|female*", x);
  }
  else if (english.compare("-offspring-masc*") == 0) {
	english = addFreqSuf("-offspring)|male*", x);
  }
  else if (english.compare("-offspring-small*") == 0) {
	english = addFreqSuf("-offspring)|little*", x);
  }
  else if (english.compare("-offspring-big*") == 0) {
	english = addFreqSuf("-offspring)|big*", x);
  }
  else if ((english.compare(")|become*") == 0) || (english.compare(")|be*") == 0) || (english.compare(")|make*") == 0) || (english.compare("|from)|make*") == 0) || (english.compare(")|continue*") == 0) || (english.compare("|to)|apply*") == 0)) {
	if (firstPass) {
	  if (english.compare("-big)|be*") == 0) {
		english = "*Ito|(very|" + englishTranslations[x].substr(1) + ")|be*";
	  }
	  else if (english.compare("-small)|be*") == 0) {
		english = "*Ito|(a|little|" + englishTranslations[x].substr(1)
		  + ")|be*";
	  }
	  else {
		english = "*Ito|(" + englishTranslations[x].substr(1) + english;
	  }
	}
	else {
	  english = "*Ito|(" + englishTranslations[x].substr(1) + english;
	}
  }
  else {
	english = "*" + englishTranslations[x] + english;
  }
  //out << english;
}

static bool wordSuffix(string w, string f) {
  // Suffix search
  string sf;
  if (indexof(f, "I") >= FOUND) {
	if (addSuffixes(w, f, "igx", ")|become")) {  // f = parts of speech found
	  return true;
	}
	if (addSuffixes(w, f, "ig", ")|make")) {
	  return true;
	}
	if (addEsperantoSuffix(w, f, "it")) {
	  return true;
	}
	if (addEsperantoSuffix(w, f, "at")) {
	  return true;
	}

	sf = "ad";
	if ((startswith(w, sf)) && (f.substr(0, 1).compare("I") == 0)) {
	  if (wordSuffix(w.substr(sf.length()), "O" + f)) {
		esperanto = "*" + sf + esperanto;
		return true;
	  }
	}
	sf = "ebl";
	if (startswith(w, sf)) {
	  if (wordSuffix(w.substr(sf.length()), f)) {
		esperanto = "*" + sf + esperanto;
		english = english.substr(0, english.length() - 1) + "_able*";
		return true;
	  }
	}

	if (addEsperantoSuffix(w, f, "ot")) {
	  return true;
	}
	if (addEsperantoSuffix(w, f, "int")) {
	  return true;
	}
	if (addEsperantoSuffix(w, f, "ant")) {
	  return true;
	}
	if (addSuffixesPartOfSpeech(w, f, "ajx", "-thing", "O")) {
	  return true;
	}
	if (addSuffixesPartOfSpeech(w, f, "il", "_ing-tool", "O")) {
	  return true;
	}
	if (addEsperantoSuffix(w, f, "end")) {
	  return true;
	}
	if (addEsperantoSuffix(w, f, "ont")) {
	  return true;
	}
	if (addEsperantoSuffix(w, f, "ind")) {
	  return true;
	}
	if (addSuffixes(w, f, "ar", "-group")) {
	  return true;
	}
	if (addEsperantoSuffix(w, f, "em")) {
	  return true;
	}
	if (addSuffixesPartOfSpeech(w, f, "ul", "_ing-person", "O")) {
	  return true;
	}
	if (addEsperantoSuffix(w, f, "vol")) {
	  return true;
	}
	if (addEsperantoSuffix(w, f, "iv")) {
	  return true;
	}
	if (addEsperantoSuffix(w, f, "pov")) {
	  return true;
	}
	if (addEsperantoSuffix(w, f, "kapabl")) {
	  return true;
	}
	if (addEsperantoSuffix(w, f, "ut")) {
	  return true;
	}
	if (addEsperantoSuffix(w, f, "unt")) {
	  return true;
	}
	if (addSuffixes(w, f, "ej", "_ing-place")) {
	  return true;
	}
	if (addSuffixesPartOfSpeech(w, f, "estr", "_ing-leader", "O")) {
	  return true;
	}
	if (addSuffixes(w, f, "acx", "|badly")) {
	  return true;
	}

	sf = "eg";
	if ((startswith(w, sf)) && (indexof(f, "O") == NOT_FOUND)) {
	  if (wordSuffix(w.substr(sf.length()), f)) {
		esperanto = "*" + sf + esperanto;
		english = english + "*Fa|lot";
		return true;
	  }
	}
	sf = "et";
	if ((startswith(w, sf)) && (indexof(f, "O") == NOT_FOUND)) {
	  if (wordSuffix(w.substr(sf.length()), f)) {
		esperanto = "*" + sf + esperanto;
		english = english + "*Fa|little";
		return true;
	  }
	}
  }
  else if (FOUND <= indexof(f, "A")) {

	if (addSuffixesPartOfSpeech(w, f, "igx", ")|become", "I")) {
	  return true;
	}
	if (addSuffixesPartOfSpeech(w, f, "ig", ")|make", "I")) {
	  return true;
	}
	if (addSuffixes(w, f, "int", ")|be")) {
	  return true;
	}
	if (addSuffixes(w, f, "ant", ")|be")) {
	  return true;
	}
	if (addSuffixes(w, f, "ad", ")|be")) {
	  return true;
	}
	if (addSuffixes(w, f, "ec", "ness")) {
	  return true; // eco=ness, eca=ish
	}
	if (addSuffixesPartOfSpeech(w, f, "ul", "|individual", "O")) {
	  return true;
	}
	if (addEsperantoSuffix(w, f, "sxajn")) {
	  return true;
	}
	if (addSuffixes(w, f, "iv", ")|be")) {
	  return true;
	}
	if (addSuffixes(w, f, "pov", ")|be")) {
	  return true;
	}
	if (addSuffixes(w, f, "vol", ")|be")) {
	  return true;
	}
	if (addSuffixes(w, f, "kapabl", ")|be")) {
	  return true;
	}
	if (addSuffixes(w, f, "ont", ")|be")) {
	  return true;
	}
	if (addSuffixes(w, f, "unt", ")|be")) {
	  return true;
	}
	if (addSuffixes(w, f, "em", ")|be")) {
	  return true;
	}
	if (addSuffixes(w, f, "al", "ness-type")) {
	  return true;
	}
	if (addSuffixes(w, f, "acx", "-lousy")) {
	  return true;
	}
  }

  if ((FOUND <= indexof(f, "O")) || (FOUND <= indexof(f, "N"))) {
	// I made it into soup. Interferes with verb root igi
	if (addSuffixesPartOfSpeech(w, f, "igx", ")|become", "I")) {
	  return true;
	}
	if (addEsperantoSuffix(w, f, "simil")) {
	  return true;
	}
	if (addEsperantoSuffix(w, f, "aspekt")) {
	  return true;
	}
	if (addEsperantoSuffix(w, f, "manier")) {
	  return true;
	}
	if (addEsperantoSuffix(w, f, "stil")) {
	  return true;
	}
	if (addEsperantoSuffix(w, f, "plen")) {
	  return true;
	}
	if (addSuffixes(w, f, "ar", "-group")) {
	  return true;
	}
	if (addSuffixes(w, f, "esk", "-esque")) {
	  return true;
	}
	if (addSuffixes(w, f, "oid", "-oid")) {
	  return true;
	}
	if (addSuffixes(w, f, "ed", "-type|lifeform")) {
	  return true;
	}
	if (addSuffixes(w, f, "oz", "-full")) {
	  return true;
	}
	if (addSuffixes(w, f, "ik", "-science")) {
	  return true;
	}
	if (addSuffixes(w, f, "an", "-member")) {
	  return true;
	}
	if (addSuffixes(w, f, "uj", "-container")) {
	  return true;
	}
	if (addSuffixes(w, f, "ing", "-holder")) {
	  return true;
	}
	if (addSuffixes(w, f, "id", "-offspring")) {
	  return true;
	}
	if (addSuffixes(w, f, "er", "-part")) {
	  return true;
	}
	if (addSuffixes(w, f, "op", "-group")) {
	  return true;
	}
	if (addSuffixes(w, f, "am", "-loving")) {
	  return true;
	}
	if (addSuffixes(w, f, "ej", "-place")) {
	  return true;
	}
	if (addSuffixes(w, f, "icid", "-killer")) {
	  return true;
	}
	if (addSuffixes(w, f, "estr", "-leader")) {
	  return true;
	}
	if (addSuffixes(w, f, "in", "-fem")) {
	  return true;
	}

	sf = "icx";
	if (startswith(w, sf)) {
	  if (wordSuffix(w.substr(sf.length()), f)) {
		if (indexof(english, ")|") == 0) {
		  esperanto = "*" + sf + esperanto;
		  english = "-masc" + english;
		  return true;
		}
	  }
	}

	if (addSuffixes(w, f, "acx", "-lousy")) {
	  return true;
	}
	if (addSuffixes(w, f, "ec", "ness")) {
	  return true;
	}
	if (addSuffixes(w, f, "ologi", "ology")) {
	  return true;
	}
	if (addSuffixes(w, f, "olog", "ologist")) {
	  return true;
	}
	if (addSuffixes(w, f, "et", "-small")) {
	  return true;
	}
	if (addSuffixes(w, f, "eg", "-big")) {
	  return true;
	}
  }

  if (FOUND <= indexof(f, "O")) {
	if (addSuffixesPartOfSpeech(w, f, "iz", "|to)|apply", "I")) {
	  return true;
	}
  }

  if (addSuffixes(w, f, "ul", "-individual")) {
	return true;
  }
  if (addSuffixes(w, f, "et", "-small")) {
	return true;
  }
  if (addSuffixes(w, f, "eg", "-big")) {
	return true;
  }
  if (addSuffixes(w, f, "ajx", "-thing")) {
	return true;
  }
  if (addSuffixes(w, f, "ism", "ism")) {
	return true;
  }
  if (addSuffixes(w, f, "ist", "ist")) {
	return true;
  }

  return wordEnding(w, f);
}

static bool wordStem(string w, string f) {
  // Word stem search
  int x, y;
  string st, st2, ps;
  //out << "wordstemstart:" + w;
  if (w.length() < 3) {
	return wordSuffix(w, f); // f = parts of speech found
  }
  x = indexof(indexAlphabet, w.substr(0, 1)) + 1;
  y = indexof(indexAlphabet, w.substr(1, 1)) + 1;
  if (x * y < 4) {
	return false;
  }
  x = (x - 2) * 25 + y - 1;
  x = std::stoi(dictionaryIndex.substr(x * 4, 4), nullptr, 16);
  if (x == 0xffff) {
	return wordSuffix(w, f);
  }
  x--;
  do {
	do {
	  ps = englishTranslations[x].substr(0, 1);
	  st = esperantoWords[x];
	  if (startswith(w, st)) {
		st2 = "|" + st + "|";
		if (w.length() >= st.length() + 1) {
		  if ((w.substr(st.length(), 1).compare("x") == 0)) {
			x--;
			if (x >= 0) {
			  break;
			}
			else {
			  return wordSuffix(w, f);
			}
		  }
		}

		if (wordStem(w.substr(st.length()), f + ps)) {
		  esperanto = "*" + st + esperanto;
		  addFrequentSuffixes(x, true);
		  return true;
		}
		if (w.length() >= st.length() + 1) {
		  if ((w.substr(st.length(), 1).compare("o") == 0)
			&& ((ps.compare("O") == 0) || (ps.compare("I") == 0))) {
			if (wordStem(w.substr(st.length() + 1), f + ps)) {
			  esperanto = "*" + st + esperanto;
			  addFrequentSuffixes(x, false);
			  return true;
			}
		  }
		}
		if (w.length() >= st.length() + 1) {
		  if ((w.substr(st.length(), 1).compare("i") == 0)
			&& (ps.compare("I") == 0)) {
			if (wordStem(w.substr(st.length() + 1), f + ps)) {
			  esperanto = "*" + st + esperanto;
			  addFrequentSuffixes(x, false);
			  return true;
			}
		  }
		}
		if (w.length() >= st.length() + 1) {
		  if ((w.substr(st.length(), 1).compare("a") == 0)
			&& ((ps.compare("A") == 0) || (ps.compare("O") == 0))) {
			if (wordStem(w.substr(st.length() + 1), f + ps)) {
			  esperanto = "*" + st + esperanto;
			  addFrequentSuffixes(x, false);
			  return true;
			}
		  }
		}
		if (w.length() >= st.length() + 1) {
		  if ((w.substr(st.length(), 1).compare("e") == 0)
			&& ((ps.compare("E") == 0) || (ps.compare("F") == 0))) {
			if (wordStem(w.substr(st.length() + 1), f + ps)) {
			  esperanto = "*" + st + esperanto;
			  addFrequentSuffixes(x, false);
			  return true;
			}
		  }
		}
	  }
	  x--;
	  if (x < 0) {
		if (wordSuffix(w, f)) {
		  return true;
		}
		return false;
	  }
	} while (false);
  } while ((esperantoWords[x].substr(0, 2).compare(w.substr(0, 2))
	>= 0) && (x >= 0));
  if (wordSuffix(w, f)) {
	return true;
  }
  return false;
}

static bool addSuffixes(string w, string f, string esperantoSuffix, string englishTranslation) {
  // Search for and add suffixes: 
  if (startswith(w, esperantoSuffix)) {
	if (wordSuffix(w.substr(esperantoSuffix.length()), f)) {
	  esperanto = "*" + esperantoSuffix + esperanto;
	  english = englishTranslation + english;
	  return true;
	}
  }
  return false;
}

static bool addSuffixesPartOfSpeech(string w, string f, string eoSuf, string enTran, string POS) {
  // Search for and add suffixes: 
  if (startswith(w, eoSuf)) {
	if (wordSuffix(w.substr(eoSuf.length()), f + POS)) {
	  esperanto = "*" + eoSuf + esperanto;
	  english = enTran + english;
	  return true;
	}
  }
  return false;
}

static bool addEsperantoSuffix(string w, string f, string esperantoSuffix) {
  // Search for and add suffixes: 
  esperantoSuffix = "igx";
  if (startswith(w, esperantoSuffix)) {
	if (wordSuffix(w.substr(esperantoSuffix.length()), f)) {
	  esperanto = "*" + esperantoSuffix + esperanto;
	  return true;
	}
  }
  return false;
}

static bool wordEnding(string w, string f) {
  // Word ending search
  if ((FOUND <= indexof(f, "S")) || (FOUND <= indexof(f, "V"))) { // f = parts of speech found
	return false;
  } // S=need stem; V=need verb
  if (FOUND <= indexof(f, "O")) {
	//out << "fd o!:" + esperanto;
	if (w.compare("o") == 0) {
	  if (!(esperanto + "   ").substr(0, 3).compare("*o*") == 0) {
		esperanto = "*o" + esperanto;
	  }
	  return true;
	}
  }
  if (w.compare("a") == 0) {
	if (!(esperanto + "   ").substr(0, 3).compare("*a*") == 0) {
	  esperanto = "*a"
		+ esperanto;
	}
	return true;
  }
  if (w.compare("e") == 0) {
	if (!(esperanto + "   ").substr(0, 3).compare("*e*") == 0) {
	  esperanto = "*e"
		+ esperanto;
	}
	return true;
  }
  if (indexof((fs = "'`´"), w) >= FOUND) {
	if (!(esperanto + "   ").substr(0, 3).compare("*o*") == 0) {
	  esperanto = "*o" + esperanto;
	}
  }
  if (((indexof(f, "I") == 0)) && ((indexof(f, "A") == 0))) {
	return false;
  }
  if (FOUND <= indexof(f, "I")) {
	if (w.compare("is") == 0) {
	  if (!(esperanto + "    ").substr(0, 4).compare("*is*") == 0) {
		esperanto = "*is" + esperanto;
	  }
	  return true;
	}
	if (w.compare("as") == 0) {
	  if (!(esperanto + "    ").substr(0, 4).compare("*as*") == 0) {
		esperanto = "*as" + esperanto;
	  }
	  return true;
	}
	if (w.compare("i") == 0) {
	  if (!(esperanto + "    ").substr(0, 3).compare("*i*") == 0) {
		esperanto = "*i" + esperanto;
	  }
	  return true;
	}
	if (w.compare("os") == 0) {
	  if (!(esperanto + "    ").substr(0, 4).compare("*os*") == 0) {
		esperanto = "*os" + esperanto;
	  }
	  return true;
	}
	if (w.compare("us") == 0) {
	  if (!(esperanto + "    ").substr(0, 4).compare("*us*") == 0) {
		esperanto = "*us" + esperanto;
	  }
	  return true;
	}
	if (w.compare("u") == 0) {
	  if (!(esperanto + "    ").substr(0, 3).compare("*u*") == 0) {
		esperanto = "*u" + esperanto;
	  }
	  return true;
	}
  }
  else if (indexof(f, "A") >= FOUND) {
	if (w.compare("is") == 0) {
	  if (!(esperanto + "    ").substr(0, 4).compare("*is*") == 0) {
		esperanto = "*is" + esperanto;
		english = ")|be" + english;
	  }
	  return true;
	}
	if (w.compare("as") == 0) {
	  if (!(esperanto + "    ").substr(0, 4).compare("*as*") == 0) {
		esperanto = "*as" + esperanto;
		english = ")|be" + english;
	  }
	  return true;
	}
	if (w.compare("i") == 0) {
	  if (!(esperanto + "   ").substr(0, 3).compare("*i*") == 0) {
		esperanto = "*i" + esperanto;
		english = ")|be" + english;
	  }
	  return true;
	}
	if (w.compare("os") == 0) {
	  if (!(esperanto + "    ").substr(0, 4).compare("*os*") == 0) {
		esperanto = "*os" + esperanto;
		english = ")|be" + english;
	  }
	  return true;
	}
	if (w.compare("us") == 0) {
	  if (!(esperanto + "    ").substr(0, 4).compare("*us*") == 0) {
		esperanto = "*us" + esperanto;
		english = ")|be" + english;
	  }
	  return true;
	}
	if (w.compare("u") == 0) {
	  if (!(esperanto + "   ").substr(0, 3).compare("*u*") == 0) {
		esperanto = "*u" + esperanto;
		english = ")|be" + english;
	  }
	  return true;
	}
  }
  return false;
}

static void main2() {
  int firstLetter, secondLetter;
  //static size_t x;
  int p;
  prefixedPart = "";
  string wd = vocable;
  english = "*";
  esperanto = "*";
  string f, stem;
  f = "";
  if (wd.length() == 0) {
	return;
  }
  if (wd.length() == 1) {
	entry = "{*" + wd + PROPER_NOUN_DIVIDER + wd + "*}";
	return;
  }
  //out << indexAlphabet + wd;
  x = indexof(indexAlphabet, wd.substr(0, 1));
  //out << x;
  if ((x < 1) || (x == NOT_FOUND)) {
	entry = "{*|undefined|*¯*|" + vocable + "*}";
	return;
  }

  x--;// *4 - 3; // 3 hex digits plus|per index item
  if (nonalterablesIndex[x] != 0xfff) {
	// Search nonalterable wordforms:
	for (i = nonalterablesIndex[x]; ((i <= totalNonalt) && (esperantoNonalterables[i].substr(0, 1) <= wd.substr(0, 1))); i++) {
	  if (wd.compare(esperantoNonalterables[i]) == 0) {
		esperanto = "*" + asteriskSeparate(esperantoNonalterables[i] + DIV)
		  + esperanto;
		if (startswith(esperanto, "*l'*")) { // l' > la
		  esperanto = "*la*"
			+ esperanto.substr(4);
		}
		if (startswith(esperanto, "*l`*")) {
		  esperanto = "*la*"
			+ esperanto.substr(4);
		}
		if (startswith(esperanto, "*l*")) {
		  esperanto = "*la*"
			+ esperanto.substr(4);
		}
		if (startswith(esperanto, "*l*")) {
		  esperanto = "*la*"
			+ esperanto.substr(4);
		}
		if (startswith(esperanto, "*l´*")) {
		  esperanto = "*la*"
			+ esperanto.substr(4);
		}
		english = "*" + englishNonalterables[i] + english;
		entry = esperanto + DIV + english;
		return;
	  }
	}
  }
  
  if (endswith(wd, "n")) {
	// Remove -n:
	wd = wd.substr(0, wd.length() - 1);
	esperanto = "*n" + esperanto; // Accusative
  }
  if (endswith(wd, "j")) {
	// Remove -j:
	wd = wd.substr(0, wd.length() - 1);
	esperanto = "*j" + esperanto; // Plural
  }
  /* Calculate index of last word in dictionary beginning with first 2 letters of
  given word: */
  firstLetter = indexof(indexAlphabet, wd.substr(0, 1)) + 1; // First letter
  secondLetter = indexof(indexAlphabet, wd.substr(1, 1)) + 1; // Second letter
  if (secondLetter < 1) secondLetter = 1;
  x = (firstLetter - 2) * 25 + secondLetter - 1; // 24 letters plus space
  //out << "--" + dictionaryIndex.substr(x * 4, 4);
  x = std::stoi(dictionaryIndex.substr(x * 4, 4), nullptr, 16);
  //out << x;
  if ((x != 0xffff) && (firstLetter * secondLetter >= 4)) {
	do {
	  stem = esperantoWords[x];
	  //out << "<" + stem + ">";
	  remainder1 = wd.substr(0, wd.length() - 1); // All but last character of word
	  remainder2 = "";
	  remainder3 = "";
	  remainder4 = "";
	  partOfSpeech = lowerall(englishTranslations[x].substr(0, 1));

	  // Check for stems of different lengths:

	  // All but last 2 characters of word:
	  if (wd.length() > 3) remainder2 = wd.substr(0, wd.length() - 2);
	  // All but last 3 characters of word
	  if (wd.length() > 4) remainder3 = wd.substr(0, wd.length() - 3);
	  // All but last 4 characters of word
	  if (wd.length() > 5) remainder4 = wd.substr(0, wd.length() - 4);

	  if (remainder1.compare(stem) == 0) {
		if (endswith(wd, partOfSpeech)) {
		  addOneSuffix(wd.substr(wd.length() - 1));
		  return;
		}
		if ((partOfSpeech.compare(ADJECTIVE_MARKER_LC) == 0)
		  && (endswith(wd, ADVERB_MARKER_LC))
		  && ((!remainder1.compare(esperantoWords[x + 1]) == 0)
		  || (!startswith(englishTranslations[x + 1], ADVERB_MARKER)))) {
		  addOneSuffix(wd.substr(wd.length() - 1));
		  return;
		}
		if ((partOfSpeech.compare(NOUN_MARKER_LC) == 0)
		  && (endswith(wd, ADJECTIVE_MARKER_LC))) {
		  addOneSuffix(wd.substr(wd.length() - 1));
		  return;
		}
		if ((partOfSpeech.compare(NOUN_MARKER_LC) == 0)
		  && (endswith(wd, ADVERB_MARKER_LC))) {
		  addOneSuffix(wd.substr(wd.length() - 1));
		  return;
		}
		if ((partOfSpeech.compare(INFINITIVE_MARKER_LC) == 0) && (endswith(wd, "u"))) {
		  addOneSuffix(wd.substr(wd.length() - 1));
		  return;
		}
		if ((partOfSpeech.compare(INFINITIVE_MARKER_LC) == 0)
		  && (endswith(wd, NOUN_MARKER_LC))
		  && ((!remainder1.compare(esperantoWords[x + 1]) == 0)
		  || (!startswith(englishTranslations[x + 1], NOUN_MARKER)))) {
		  addOneSuffix(wd.substr(wd.length() - 1));
		  return;
		}
		if ((partOfSpeech.compare(INFINITIVE_MARKER_LC) == 0)
		  && (endswith(wd, ADJECTIVE_MARKER_LC))
		  && ((!remainder1.compare(esperantoWords[x + 1]) == 0)
		  || (!startswith(englishTranslations[x + 1], ADJECTIVE_MARKER)))) {
		  addOneSuffix(wd.substr(wd.length() - 1));
		  return;
		}
	  }
	  else if (remainder2.compare(stem) == 0) {
		if ((partOfSpeech.compare(INFINITIVE_MARKER_LC) == 0)
		  && (endswith(wd, PRETERITE))) {
		  addOneSuffix(wd.substr(wd.length() - 2));
		  return;
		}
		if ((partOfSpeech.compare(INFINITIVE_MARKER_LC) == 0)
		  && (endswith(wd, PRESENT))) {
		  addOneSuffix(wd.substr(wd.length() - 2));
		  return;
		}
		if ((partOfSpeech.compare(INFINITIVE_MARKER_LC) == 0) && (endswith(wd, FUTURE))) {
		  addOneSuffix(wd.substr(wd.length() - 2));
		  return;
		}
		if ((partOfSpeech.compare(INFINITIVE_MARKER_LC) == 0)
		  && (endswith(wd, CONDITIONAL))) {
		  addOneSuffix(wd.substr(wd.length() - 2));
		  return;
		}
	  }
	  else if (remainder3.compare(stem) == 0) {
		if ((partOfSpeech.compare(INFINITIVE_MARKER_LC) == 0)
		  && (indexof((fs = " ita ata ota uta ito ato oto"), " " + wd.substr(wd.length() - 3)) >= FOUND)) {
		  addOneSuffix(wd.substr(wd.length() - 3, 2) + "*" + wd.substr(wd.length() - 1));
		  return;
		}
		if ((partOfSpeech.compare(INFINITIVE_MARKER_LC) == 0)
		  && (indexof((fs = " ite ate ote ute"), " "
		  + wd.substr(wd.length() - 3)) >= FOUND)) {
		  addOneSuffix(wd.substr(wd.length() - 3, 2) + "*a");
		  return;
		}
	  }
	  else if (remainder4.compare(stem) == 0) {
		if ((partOfSpeech.compare(INFINITIVE_MARKER_LC) == 0)
		  && (indexof((fs = " inta anta onta unta into anto onto unto inte ante onte unte"), 
		  " " + wd.substr(wd.length() - 4)) >= FOUND)) {
		  addOneSuffix(wd.substr(wd.length() - 4, 3) + "*" +
			wd.substr(wd.length() - 1));
		  return;
		}
	  }
	  x--;
	  if (x == NOT_FOUND) {
		break;
	  }
	} while ((esperantoWords[x].substr(0, 2).compare(wd.substr(0, 2))
	  >= 0) && (x >= FOUND));

  }
  //out << "wd:" + wd;
  /* Search for word starting at possible prefix; f will contain markers for
  * parts of speech found: */
  if (wordPrefix(wd, f)) {
	entry = esperanto + DIV + english;
	return;
  }
  // Word not found; mark as possible proper noun:
  entry = "{*|undefined|*¯*|" + vocable + "*}";
}

static string conjugatePreterite(string entry) { // Conjugate preterite verb:
  string insertK;
  int x, g;
  string b = entry;
  int p = indexof(b, "*}");
  b = b.substr(0, p) + "/" + b.substr(p); // Add end delimiter
  int h = indexof(b, DIV);
  bool gf = false;
  p = -5;
  while ((p = indexof((b + "          "), "/", p + 5)) >= FOUND) {
	// Look for irregular verb infinitives to change to preterites:
	for (x = 0; x <= totalIrregularVerbs; x++) {
	  gf = false;
	  insertK = englishRoots[x];
	  g = indexof(b, englishRoots[x] + "/", h);
	  if (p - insertK.length() >= FOUND) {
		if (b.substr(p - insertK.length(), insertK.length()).compare(insertK) == 0) {
		  b = b.substr(0, p - insertK.length()) + englishPreterites[x]
			+ b.substr(p);
		  p = p - englishRoots[x].length() + englishPreterites[x].length();
		  gf = true;
		  break;
		}
	  }
	}
	do { // Look for regular verb infinitives to change to preterites
	  if (gf) {
		gf = false;
		break;
	  }
	  insertK = "";
	  if ((indexof(esperantoConsonants, b.substr(p - 1, 1)) >= FOUND)
		&& (indexof(VOWELS, b.substr(p - 2, 1)) >= FOUND)
		&& (indexof(VOWELS, b.substr(p - 3, 1)) == NOT_FOUND)) {
		insertK = b.substr(p - 1, 1);
		if (insertK.compare("c") == 0) {
		  insertK = "k"; // panic > panicked
		}
	  }
	  b = b.substr(0, p) + insertK + "ed" + b.substr(p);
	  if (b.substr(p - 1, 1).compare(ADVERB_MARKER_LC) == 0) {
		b = b.substr(0, p - 1) + b.substr(p);
		p--;
	  }
	  if (b.substr(p - 1, p - (p - 1)).compare("y") == 0) {
		b = b.substr(0, p - 1) + "i"
		  + b.substr(p); // y -> ie
	  }
	  if (indexof((fs = " ai ei oi ui "), " " + b.substr(p - 2, 2) + " ") >= FOUND) {
		b = b.substr(0, p - 1) + "y" + b.substr(p);
		break;
	  }
	} while (false);
  }
  p = indexof(b, "/*}");
  b = b.substr(0, p) + b.substr(p + 1);
  b = rep(b, "relaid", "relayed"); // Corrections
  b = rep(b, "delaid", "delayed");
  return b;
}

static string cutDoDidFromHave(string entry) { // Remove Do & Did from Have: does have > has
  string b = entry;
  b = rep(b, "|haves*", "|have*");
  int p = indexof(b, "{*hav*is*¯*Idid|have*}");
  if (p >= FOUND) {
	b = b.substr(0, p + 12) + "had*}";
  }
  p = indexof(b, "{*Hav*is*¯*IDid|have*}");
  if (p >= FOUND) {
	b = b.substr(0, p + 12) + "Had*}";
  }
  p = indexof(b, "{*hav*as*¯*Idoes|have*}");
  if (p >= FOUND) {
	b = b.substr(0, p + 12) + "has*}";
  }
  p = indexof(b, "{*Hav*as*¯*IDoes|have*}");
  if (p >= FOUND) {
	b = b.substr(0, p + 12) + "Has*}";
  }
  p = indexof(b, "{*hav*as*¯*Ido|have*}");
  if (p >= FOUND) {
	b = b.substr(0, p + 12) + "have*}";
  }
  p = indexof(b, "{*Hav*as*¯*IDo|have*}");
  if (p >= FOUND) {
	b = b.substr(0, p + 12) + "Have*}";
  }
  return b;
}

static string addEkStart(string entry) { // Add ek- start before main verb
  string b = entry;
  int p = indexof(b, "*i*¯*Qto start*");
  if (p >= FOUND) {
	b = b.substr(0, p + 5) + "Ito|start|to|"
	  + b.substr(p + 19);
  }
  p = indexof(b, "*is*¯*Qdid|to start*");
  if (p >= FOUND) {
	b = b.substr(0, p + 6) + "Istarted|to|"
	  + b.substr(p + 21);
  }
  p = indexof(b, "*as*¯*Qdo|to start*");
  if (p >= FOUND) {
	b = b.substr(0, p + 6) + "Istart|to|"
	  + b.substr(p + 20);
  }
  p = indexof(b, "*as*¯*Qdoes|to start*");
  if (p >= FOUND) {
	b = b.substr(0, p + 6) + "Istarts|to|"
	  + b.substr(p + 22);
  }
  p = indexof(b, "*os*¯*Qwill|to start*");
  if (p >= FOUND) {
	b = b.substr(0, p + 6) + "Iwill|start|to|"
	  + b.substr(p + 22);
  }
  p = indexof(b, "*us*¯*Qwould|to start*");
  if (p >= FOUND) {
	b = b.substr(0, p + 6) + "Iwould|start|to|"
	  + b.substr(p + 23);
  }
  p = indexof(b, "*u*¯*Qshould|to start*");
  if (p >= FOUND) {
	b = b.substr(0, p + 5) + "Ishould|start|to|"
	  + b.substr(p + 23);
  }
  p = indexof(b, "*ant*a*¯*Istart|");
  if (p >= FOUND) {
	b = b.substr(0, p + 10) + "starting|to|" + b.substr(p
	  + 16, indexof(b, "ing", p) - 1) + "*}";
  }
  p = indexof(b, "*ant*a*n*¯*Istart|");
  if (p >= FOUND) {
	b = b.substr(0, p + 12) + "starting|to|" + b.substr(p
	  + 18, indexof(b, "ing", p) - 1) + "*}";
  }
  p = indexof(b, "*ant*a*j*¯*Istart|");
  if (p >= FOUND) {
	b = b.substr(0, p + 12) + "starting|to|" + b.substr(p
	  + 18, indexof(b, "ing", p) - 1) + "*}";
  }
  p = indexof(b, "*ant*a*j*n*¯*Istart|");
  if (p >= FOUND) {
	b = b.substr(0, p + 14) + "starting|to|" + b.substr(p
	  + 20, indexof(b, "ing", p) - 1) + "*}";
  }
  p = indexof(b, "*ant*a*¯*Qto start*");
  if (p >= FOUND) {
	b = b.substr(0, p + 9) + "Istarting|to|" + b.substr(p
	  + 20, indexof(b, "ing", p)) + "*}";
  }
  p = indexof(b, "*ant*a*n*¯*Qto start*");
  if (p >= FOUND) {
	b = b.substr(0, p + 11) + "Istarting|to|" + b.substr(p
	  + 22, indexof(b, "ing", p)) + "*}";
  }
  p = indexof(b, "*ant*a*j*¯*Qto start*");
  if (p >= FOUND) {
	b = b.substr(0, p + 11) + "Istarting|to|" + b.substr(p
	  + 22, indexof(b, "ing", p)) + "*}";
  }
  p = indexof(b, "*ant*a*j*n*¯*Qto start*");
  if (p >= FOUND) {
	b = b.substr(0, p + 13) + "Istarting|to|" + b.substr(p
	  + 24, indexof(b, "ing", p)) + "*}";
  }
  p = indexof(b, "*int*a*¯*Qto start*");
  if (p >= FOUND) {
	b = b.substr(0, p + 9) + "Istarted|" + b.substr(p
	  + 20, indexof(b, "_ed", p)) + "_ing*}";
  }
  p = indexof(b, "*int*a*n*¯*Qto start*");
  if (p >= FOUND) {
	b = b.substr(0, p + 11) + "Istarted|" + b.substr(p
	  + 22, indexof(b, "_ed", p)) + "_ing*}";
  }
  p = indexof(b, "*int*a*j*¯*Qto start*");
  if (p >= FOUND) {
	b = b.substr(0, p + 11) + "Istarted|" + b.substr(p
	  + 22, indexof(b, "_ed", p)) + "_ing*}";
  }
  p = indexof(b, "*int*a*j*n*¯*Qto start*");
  if (p >= FOUND) {
	b = b.substr(0, p + 13) + "Istarted|" + b.substr(p
	  + 24, indexof(b, "_ed", p)) + "_ing*}";
  }
  p = indexof(b, "*int*a*¯*Istart|");
  if (p >= FOUND) {
	b = b.substr(0, p + 9) + "Istarted|" + b.substr(p
	  + 16, indexof(b, "_ed", p)) + "*}";
  }
  p = indexof(b, "*int*a*n*¯*Istart|");
  if (p >= FOUND) {
	b = b.substr(0, p + 11) + "Istarted|" + b.substr(p
	  + 18, indexof(b, "_ed", p)) + "*}";
  }
  p = indexof(b, "*int*a*j*¯*Istart|");
  if (p >= FOUND) {
	b = b.substr(0, p + 11) + "Istarted|" + b.substr(p
	  + 18, indexof(b, "_ed", p)) + "*}";
  }
  p = indexof(b, "*int*a*j*n*¯*Istart|");
  if (p >= FOUND) {
	b = b.substr(0, p + 13) + "Istarted|" + b.substr(p
	  + 20, indexof(b, "_ed", p)) + "*}";
  }
  p = indexof(b, "*ont*a*¯*Qgoing-to-be-to start*");
  if (p >= FOUND) {
	b = b.substr(0, p + 9) + "Igoing|to|start|"
	  + b.substr(p + 32, indexof(b, "ing", p) + 10);
  }
  p = indexof(b, "*ont*a*n*¯*Qgoing-to-be-to start*");
  if (p >= FOUND) {
	b = b.substr(0, p + 11) + "Igoing|to|start|"
	  + b.substr(p + 34, indexof(b, "ing", p) + 10);
  }
  p = indexof(b, "*ont*a*j*¯*Qgoing-to-be-to start*");
  if (p >= FOUND) {
	b = b.substr(0, p + 11) + "Igoing|to|start|"
	  + b.substr(p + 34, indexof(b, "ing", p) + 10);
  }
  p = indexof(b, "*ont*a*j*n*¯*Qgoing-to-be-to start*");
  if (p >= FOUND) {
	b = b.substr(0, p + 13) + "Igoing|to|start|"
	  + b.substr(p + 36, indexof(b, "ing", p) + 10);
  }
  p = indexof(b, "*ont*a*¯*Igoing-to-be-start|");
  if (p >= FOUND) {
	b = b.substr(0, p + 9) + "Igoing|to|start|"
	  + b.substr(p + 28, indexof(b, "ing", p) + 10);
  }
  p = indexof(b, "*ont*a*n*¯*Igoing-to-be-start|");
  if (p >= FOUND) {
	b = b.substr(0, p + 11) + "Igoing|to|start|"
	  + b.substr(p + 30, indexof(b, "ing", p) + 10);
  }
  p = indexof(b, "*ont*a*j*¯*Igoing-to-be-start|");
  if (p >= FOUND) {
	b = b.substr(0, p + 11) + "Igoing|to|start|"
	  + b.substr(p + 30, indexof(b, "ing", p) + 10);
  }
  p = indexof(b, "*ont*a*j*n*¯*Igoing-to-be-start|");
  if (p >= FOUND) {
	b = b.substr(0, p + 13) + "Igoing|to|start|"
	  + b.substr(p + 32, indexof(b, "ing", p) + 10);
  }
  p = indexof(b, "*unt*a*¯*Qwould-be-to start*");
  if (p >= FOUND) {
	b = b.substr(0, p + 9) + "Isomeone|who|would|start|"
	  + b.substr(p + 29, indexof(b, "ing", p) + 10);
  }
  p = indexof(b, "*unt*a*n*¯*Qwould-be-to start*");
  if (p >= FOUND) {
	b = b.substr(0, p + 11) + "Isomeone|who|would|start|"
	  + b.substr(p + 31, indexof(b, "ing", p) + 10);
  }
  p = indexof(b, "*unt*a*j*¯*Qwould-be-to start*");
  if (p >= FOUND) {
	b = b.substr(0, p + 11) + "Isomeone|who|would|start|"
	  + b.substr(p + 31, indexof(b, "ing", p) + 10);
  }
  p = indexof(b, "*unt*a*j*n*¯*Qwould-be-to start*");
  if (p >= FOUND) {
	b = b.substr(0, p + 13) + "Isomeone|who|would|start|"
	  + b.substr(p + 33, indexof(b, "ing", p) + 10);
  }
  p = indexof(b, "*unt*a*¯*Iwould-be-start|");
  if (p >= FOUND) {
	b = b.substr(0, p + 9) + "Isomeone|who|would|start|"
	  + b.substr(p + 25, indexof(b, "ing", p) + 3);
  }
  p = indexof(b, "*unt*a*n*¯*Iwould-be-start|");
  if (p >= FOUND) {
	b = b.substr(0, p + 11) + "Isomeone|who|would|start|"
	  + b.substr(p + 27, indexof(b, "ing", p) + 3);
  }
  p = indexof(b, "*unt*a*j*¯*Iwould-be-start|");
  if (p >= FOUND) {
	b = b.substr(0, p + 11) + "Isomeone|who|would|start|"
	  + b.substr(p + 27, indexof(b, "ing", p) + 3);
  }
  p = indexof(b, "*unt*a*j*n*¯*Iwould-be-start|");
  if (p >= FOUND) {
	b = b.substr(0, p + 13) + "Isomeone|who|would|start|"
	  + b.substr(p + 29, indexof(b, "ing", p) + 3);
  }
  p = indexof(b, "did|start|");
  if (p >= FOUND) {
	b = b.substr(0, p) + "started|" + b.substr(p + 10);
  }
  p = indexof(b, "do|start|");
  if (p >= FOUND) {
	b = b.substr(0, p) + "start|" + b.substr(p + 9);
  }
  p = indexof(b, "does|start|");
  if (p >= FOUND) {
	b = b.substr(0, p) + "starts|" + b.substr(p + 11);
  }
  return b;
}

static string conjugatePastParticiple(string entry) {
  // Conjugate past participle:
  // For appending -k after const -c before suffix: panic > panicked:
  string insertK, EnglishRoot;
  int iz, g;
  string ent = entry;  // entry with Esperanto and English
  int endDelim = indexof(ent, "*}");
  // Insert const alternate translation delimiter:
  ent = ent.substr(0, endDelim) + "/" + ent.substr(endDelim);
  endDelim = indexof(ent, "/"); // Find first alternate translation delimiter
  int divider = indexof(ent, DIV); // Find divider between Esperanto and English
  bool gf = false;
  while (endDelim >= FOUND) {
	iz = 0;
	do { // Look for irregular verb infinitives to change to past participles
	  gf = false;
	  EnglishRoot = englishRoots[iz];
	  g = indexof(ent, englishRoots[iz] + "/", divider);
	  if (endDelim - EnglishRoot.length() >= 0) {
		if (ent.substr(endDelim - EnglishRoot.length(),
		  endDelim - (endDelim - EnglishRoot.length())).compare(EnglishRoot) == 0) {
		  ent = ent.substr(0, endDelim - EnglishRoot.length())
			+ englishPastParticiples[iz] + ent.substr(endDelim);
		  endDelim = endDelim - englishRoots[iz].length()
			+ englishPastParticiples[iz].length();
		  gf = true;
		  break;
		}
	  }
	  iz++;
	} while (iz <= totalIrregularVerbs);
	do { // Look for regular verb infinitives to change to past participles
	  if (gf) {
		gf = false;
		break;
	  }
	  insertK = "";
	  if ((indexof(esperantoConsonants, ent.substr(endDelim - 1, endDelim - (endDelim - 1))) >= FOUND)
		&& (indexof(VOWELS, ent.substr(endDelim - 2, endDelim
		- 1 - (endDelim - 2))) >= FOUND) && (indexof(VOWELS, ent.substr(endDelim - 3, endDelim
		- 2 - (endDelim - 3))) == NOT_FOUND)) {
		insertK = ent.substr(endDelim - 1, endDelim - (endDelim - 1));
		// panic > panicked; picnic > picnicked:
		if (insertK.compare("c") == 0) {
		  insertK = "k";
		}
	  }
	  ent = ent.substr(0, endDelim) + insertK + "ed" + ent.substr(endDelim);
	  if (ent.substr(endDelim - 1, endDelim - (endDelim - 1)).compare("e") == 0) {
		// Remove silent -e:
		ent = ent.substr(0, endDelim - 1) + ent.substr(endDelim);
		endDelim--;
	  }
	  if (ent.substr(endDelim - 1, endDelim - (endDelim - 1)).compare("y") == 0) {
		ent = ent.substr(0, endDelim - 1) + "i" + ent.substr(endDelim); // -y + ed > -ied
	  }
	  // but not after vowels:
	  if (indexof((fs = " ai ei oi ui "), " " + ent.substr(endDelim - 2, endDelim - (endDelim - 2)) + " ") >= FOUND) {
		ent = ent.substr(0, endDelim - 1) + "y" + ent.substr(endDelim);
		break;
	  }
	} while (false);
	if (endDelim + 5 < indexof(ent, "*}"))
	{
	  endDelim = indexof(ent, "/", endDelim + 5);
	}
	else
	{
	  endDelim = -1;
	}
  }
  endDelim = indexof(ent, "/*}");
  ent = ent.substr(0, endDelim) + ent.substr(endDelim + 1);
  ent = rep(ent, "relaid", "relayed"); // Corrections
  ent = rep(ent, "delaid", "delayed");
  return ent;
}

static string conjugateActivePassiveParticiples(string entry) {
  // Passive and active participles and other verbal suffixes
  string b = entry;
  int p = indexof(b, "*I", 2); // EO verb
  if ((p > EXISTS) && ((indexof(b, ADJECTIVE_ENDING) >= FOUND)
	|| (indexof(b, ADVERB_ENDING) >= FOUND))) {
	if ((indexof(b, "*it*a*") >= FOUND)) { // EO past passive participle
	  b = conjugatePastParticiple(cutTo(b));
	}
	else if ((indexof(b, "*at*a*") >= FOUND)) { // EO present passive participle
	  b = conjugatePastParticiple(cutTo(b));
	  p = indexof(b, DIV) + 3;
	  b = b.substr(0, p) + "cuxxently|" + b.substr(p);
	}
	else if ((indexof(b, "*ot*a*") >= FOUND)) { // EO future passive participle
	  b = conjugatePastParticiple(cutTo(b));
	  p = indexof(b, DIV) + 3;
	  b = b.substr(0, p) + "going-to-be-" + b.substr(p);
	  // EO conditional passive participle:
	}
	else if ((indexof(b, "*ut*a*") >= FOUND)) {
	  b = conjugatePastParticiple(cutTo(b));
	  p = indexof(b, DIV) + 3;
	  b = b.substr(0, p) + "would-be-" + b.substr(p);
	}
	else if ((indexof(b, "*ant*a*") >= FOUND) && (!(indexof(b, "_ing") >= FOUND))) {
	  // EO present active participle adjective:
	  b = affix(b, "", "_ing*}");
	  // EO present active participle adverb:
	}
	else if ((indexof(b, "*ant*e*") >= FOUND)) {
	  b = affix(b, "", "_ingly*}");
	  // EO future active participle adverb:
	}
	else if ((indexof(b, "*ont*e*") >= FOUND)) {
	  b = affix(b, "about|to|", "*}");
	}
	else if ((indexof(b, "*il*o*") >= FOUND)) { // EO tool verbal suffix
	  b = affix(b, "", "_ing-tool*}");
	}
	else if ((indexof(b, "*int*a*") >= FOUND)) { // EO past active particip adj
	  if (perfect) {
		b = conjugatePastParticiple(cutTo(b));
	  }
	  else {
		b = affix(b, "having|been|", "_ing*}");
	  }
	}
	else if ((indexof(b, "*int*e*") >= FOUND)) { // EO past active particip adv
	  b = affix(b, "having|", "_ed*}");
	}
	else if ((indexof(b, "*ont*a*") >= FOUND)) { // EO future active particip adj
	  b = affix(b, "going-to-be-", "_ing*}");
	  // EO conditional active participle adj:
	}
	else if ((indexof(b, "*unt*a*") >= FOUND)) {
	  b = affix(b, "that|would-be-", "_ing*}");
	}
	else if (indexof(b, "*ebl*a*") >= FOUND) { // EO -able/-ible
	  b = cutTo(b);
	  if (!indexof(b, "_able") >= FOUND) b = affix(b, "", "_able*}");
	}
	else if ((indexof(b, "*ebl*e*") >= FOUND)) { // EO -ably/-ibly
	  b = affix(b, "", "_ably*}");
	}
	else if ((indexof(b, "*end*a*") >= FOUND)) { // EO to be verbed
	  b = affix(b, "to-be-", "_ed*}");
	}
	else if ((indexof(b, "*ind*a*") >= FOUND)) { // EO worthy to be verbed
	  b = affix(b, "worthy-of-being-", "_ed*}");
	}
	else if ((indexof(b, "*em*a*") >= FOUND)) { // EO tending to
	  p = b.length() - 3;
	  while ((!b.substr(p, p + 1 - (p)).compare("*") == 0) && (p > 2)) {
		p--;
	  }
	  b = b.substr(0, p + 2) + b.substr(p + 5);
	  while ((!b.substr(p, p + 3 - (p)).compare(DIVIDER) == 0) && (p > 0)) {
		p--;
	  }
	  b = b.substr(0, p + 4) + "tending-to-" + lowerall(b.substr(p + 4, 3)) + b.substr(p + 7);
	}
	else if ((indexof(b, "*iv*a*") >= FOUND)) { // EO able to
	  p = b.length() - 3;
	  while ((!b.substr(p, p + 1 - (p)).compare("*") == 0) && (p > 2)) {
		p--;
	  }
	  b = b.substr(0, p + 2) + b.substr(p + 5);
	  while ((!b.substr(p, p + 3 - (p)).compare(DIVIDER) == 0) && (p > 0)) {
		p--;
	  }
	  b = b.substr(0, p + 4) + "able-to-" + b.substr(p + 4);
	}
	else if ((indexof(b, "*pov*a*") >= FOUND)) { // EO able to
	  p = b.length() - 3;
	  while ((!b.substr(p, p + 1 - (p)).compare("*") == 0) && (p > 2)) {
		p--;
	  }
	  b = b.substr(0, p + 2) + b.substr(p + 5);
	  while ((!b.substr(p, p + 3 - (p)).compare(DIVIDER) == 0) && (p > 0)) {
		p--;
	  }
	  b = b.substr(0, p + 4) + "able-to-" + b.substr(p + 4);
	}
	else if ((indexof(b, "*vol*a*") >= FOUND)) { // EO wanting to
	  p = b.length() - 3;
	  while ((!b.substr(p, p + 1 - (p)).compare("*") == 0) && (p > 2)) {
		p--;
	  }
	  b = b.substr(0, p + 2) + b.substr(p + 5);
	  while ((!b.substr(p, p + 3 - (p)).compare(DIVIDER) == 0) && (p > 0)) {
		p--;
	  }
	  b = b.substr(0, p + 4) + "wanting-to-" + b.substr(p + 4);
	}
	else if ((indexof(b, "*kapabl*a*") >= FOUND)) { // EO capable of
	  p = b.length() - 5;
	  while ((!b.substr(p, p + 1 - (p)).compare("*") == 0) && (p > 2)) {
		p--;
	  }
	  b = b.substr(0, p + 2) + b.substr(p + 5);
	  while ((!b.substr(p, p + 3 - (p)).compare(DIVIDER) == 0) && (p > 0)) {
		p--;
	  }
	  b = b.substr(0, p + 4) + "capable-of-" + b.substr(p + 4);
	  b = b.substr(0, b.length() - 2) + "_ing*}";
	}
	// EO like above but to be since derived from adj:
  }
  else if (indexof(b, "*A") > EXISTS) {
	if ((indexof(b, "*em*a*") >= FOUND)) {
	  b = verbalAdjective(b, "tending-to-be|");
	}
	else if ((indexof(b, "*iv*a*") >= FOUND)) {
	  b = verbalAdjective(b, "able-to-be|");
	}
	else if ((indexof(b, "*pov*a*") >= FOUND)) {
	  b = verbalAdjective(b, "able-to-be|");
	}
	else if ((indexof(b, "*vol*a*") >= FOUND)) {
	  b = verbalAdjective(b, "wanting-to-be|");
	}
	else if ((indexof(b, "*kapabl*a*") >= FOUND)) {
	  b = verbalAdjective(b, "capable-of-being|");
	}
  }
  // tool:
  if ((p >= 0) && ((indexof(b, NOUN_ENDING) >= FOUND)
	|| (indexof(b, ADJECTIVE_ENDING) >= FOUND))) {
	if ((indexof(b, "*il*o*") >= FOUND)) {
	  b = b.substr(0, b.length() - 2) + "_ing-tool*}"; // EO tool noun
	  p = b.length() - 8;
	  while ((!b.substr(p, p + 1 - (p)).compare("*") == 0) && (p > 2)) {
		p--;
	  }
	  b = b.substr(0, p + 1) + NOUN_MARKER + b.substr(p + 5);
	}
	else if ((indexof(b, "*il*a*") >= FOUND)) { // EO tool adj
	  b = b.substr(0, b.length() - 2) + "_ing-tool*}";
	  p = b.length() - 8;
	  while ((!b.substr(p, p + 1 - (p)).compare("*") == 0) && (p > 2)) {
		p--;
	  }
	  b = b.substr(0, p + 1) + ADJECTIVE_MARKER + b.substr(p + 5);
	}
  }
  return b;
}

static string verbalAdjective(string entry, string suffix) {
  // Add adjective suffixes to verb stems:
  p = entry.length() - 4;
  while ((!entry.substr(p - 1, p + 2 - (p - 1)).compare(DIVIDER) == 0) && (p > START)) {
	p--;
  }
  return entry.substr(0, p + 3) + suffix + entry.substr(p + 3);
}

static string conjugateBeWithoutDo(string entry) {
  // Conjugate To Be without Do: does be > is
  b = entry;
  b = rep(b, "{*est*as*¯*Idoes|be*}", "{*est*as*¯*Iis*}");
  b = rep(b, "{*Est*as*¯*IDoes|be*}", "{*Est*as*¯*IIs*}");
  if ((!person.compare("I") == 0)) {
	b = rep(b, "{*est*as*¯*Ido|be*}", "{*est*as*¯*Iare*}");
	b = rep(b, "{*Est*as*¯*IDo|be*}", "{*Est*as*¯*IAre*}");
	b = rep(b, "{*est*as*¯*Idon't|be*}", "{*est*as*¯*Iaren't*}");
	b = rep(b, "{*Est*as*¯*IDon't|be*}", "{*Est*as*¯*IAren't*}");
  }
  else {
	b = rep(b, "{*est*as*¯*Ido|be*}", "{*est*as*¯*Iam*}");
	b = rep(b, "{*Est*as*¯*IDo|be*}", "{*Est*as*¯*IAm*}");
	b = rep(b, "{*est*as*¯*Idon't|be*}", "{*est*as*¯*Iam|not*}");
	b = rep(b, "{*Est*as*¯*IDon't|be*}", "{*Est*as*¯*IAm|not*}");
  }
  b = rep(b, "{*est*as*¯*Idoesn't|be*}", "{*est*as*¯*Iisn't*}");
  b = rep(b, "{*Est*as*¯*IDoesn't|be*}", "{*Est*as*¯*IIsn't*}");
  if ((person.length() == 0) || (person.compare("I") == 0)) {
	b = rep(b, "{*est*is*¯*Idid|be*}", "{*est*is*¯*Iwas*}");
	b = rep(b, "{*Est*is*¯*IDid|be*}", "{*Est*is*¯*IWas*}");
	b = rep(b, "{*est*is*¯*Ididn't|be*}", "{*est*is*¯*Iwasn't*}");
	b = rep(b, "{*Est*is*¯*IDidn't|be*}", "{*Est*is*¯*IWasn't*}");
  }
  else {
	b = rep(b, "{*est*is*¯*Idid|be*}", "{*est*is*¯*Iwere*}");
	b = rep(b, "{*Est*is*¯*IDid|be*}", "{*Est*is*¯*IWere*}");
	b = rep(b, "{*est*is*¯*Ididn't|be*}", "{*est*is*¯*Iweren't*}");
	b = rep(b, "{*Est*is*¯*IDidn't|be*}", "{*Est*is*¯*IWeren't*}");
  }
  return b;
}

static string adjustActivePerfects(string entry) {
  // Adjust active perfect tenses: is having eaten > has eaten
  string b = entry;
  b = rep(b, "{*est*as*¯*Iam*}", "{*est*as*¯*Ihave*}");
  b = rep(b, "{*Est*as*¯*IAm*}", "{*Est*as*¯*IHave*}");
  b = rep(b, "{*est*as*¯*Iam|not*}", "{*est*as*¯*Ihaven't*}");
  b = rep(b, "{*Est*as*¯*IAm|not*}", "{*Est*as*¯*IHaven't*}");
  b = rep(b, "{*est*as*¯*Iare*}", "{*est*as*¯*Ihave*}");
  b = rep(b, "{*Est*as*¯*IAre*}", "{*Est*as*¯*IHave*}");
  b = rep(b, "{*est*as*¯*Iaren't*}", "{*est*as*¯*Ihaven't*}");
  b = rep(b, "{*Est*as*¯*IAren't*}", "{*Est*as*¯*IHaven't*}");
  b = rep(b, "{*est*as*¯*Iis*}", "{*est*as*¯*Ihas*}");
  b = rep(b, "{*Est*as*¯*IIs*}", "{*Est*as*¯*IHas*}");
  b = rep(b, "{*est*as*¯*Iisn't*}", "{*est*as*¯*Ihasn't*}");
  b = rep(b, "{*Est*as*¯*IIsn't*}", "{*Est*as*¯*IHasn't*}");
  b = rep(b, "{*est*i*¯*Ito|be*}", "{*est*i*¯*Ito|have*}");
  b = rep(b, "{*Est*i*¯*ITo|be*}", "{*Est*i*¯*ITo|have*}");
  b = rep(b, "{*est*is*¯*Iwas*}", "{*est*is*¯*Ihad*}");
  b = rep(b, "{*Est*is*¯*IWas*}", "{*Est*is*¯*IHad*}");
  b = rep(b, "{*est*is*¯*Iwere*}", "{*est*is*¯*Ihad*}");
  b = rep(b, "{*Est*is*¯*IWere*}", "{*Est*is*¯*IHad*}");
  b = rep(b, "{*est*is*¯*Iwasn't*}", "{*est*is*¯*Ihadn't*}");
  b = rep(b, "{*Est*is*¯*IWasn't*}", "{*Est*is*¯*IHadn't*}");
  b = rep(b, "{*est*is*¯*Iweren't*}", "{*est*is*¯*Ihadn't*}");
  b = rep(b, "{*Est*is*¯*IWeren't*}", "{*Est*is*¯*IHadn't*}");
  b = rep(b, "{*Est*os*¯*IWill|be*}", "{*Est*os*¯*IWill|have*}");
  rgx = "\\{\\*(e|E)st\\*(os|us|u)\\*¯\\*I(will|Will|would|Would|should|Should|won't|Won't|wouldn't|Wouldn't|shouldn't|Shouldn't)\\|be\\*\\}";
  b = regex_replace(b, rgx,
	"{*$1st*$2s*¯*I$3|have*}");
  if (!b.compare(entry) == 0) {
	perfect = true;
  }
  return b;
}

static string adjustPassivePerfects(string entry) {
  // Adjust passive perfect tenses: is having been seen > has been seen
  string b = entry;
  b = rep(b, "{*est*as*¯*Iam*}", "{*est*as*¯*Ihave|been*}");
  b = rep(b, "{*Est*as*¯*IAm*}", "{*Est*as*¯*IHave|been*}");
  b = rep(b, "{*est*as*¯*Iam|not*}", "{*est*as*¯*Ihaven't|been*}");
  b = rep(b, "{*Est*as*¯*IAm|not*}", "{*Est*as*¯*IHaven't|been*}");
  b = rep(b, "{*est*as*¯*Iare*}", "{*est*as*¯*Ihave|been*}");
  b = rep(b, "{*Est*as*¯*IAre*}", "{*Est*as*¯*IHave|been*}");
  b = rep(b, "{*est*as*¯*Iaren't*}", "{*est*as*¯*Ihaven't|been*}");
  b = rep(b, "{*Est*as*¯*IAren't*}", "{*Est*as*¯*IHaven't|been*}");
  b = rep(b, "{*est*as*¯*Iis*}", "{*est*as*¯*Ihas|been*}");
  b = rep(b, "{*Est*as*¯*IIs*}", "{*Est*as*¯*IHas|been*}");
  b = rep(b, "{*est*as*¯*Iisn't*}", "{*est*as*¯*Ihasn't|been*}");
  b = rep(b, "{*Est*as*¯*IIsn't*}", "{*Est*as*¯*IHasn't|been*}");
  b = rep(b, "{*est*i*¯*Ito|be*}", "{*est*i*¯*Ito|have|been*}");
  b = rep(b, "{*Est*i*¯*ITo|be*}", "{*Est*i*¯*ITo|have|been*}");
  b = rep(b, "{*est*is*¯*Iwas*}", "{*est*is*¯*Ihad|been*}");
  b = rep(b, "{*Est*is*¯*IWas*}", "{*Est*is*¯*IHad|been*}");
  b = rep(b, "{*est*is*¯*Iwere*}", "{*est*is*¯*Ihad|been*}");
  b = rep(b, "{*Est*is*¯*IWere*}", "{*Est*is*¯*IHad|been*}");
  b = rep(b, "{*est*is*¯*Iwasn't*}", "{*est*is*¯*Ihadn't|been*}");
  b = rep(b, "{*Est*is*¯*IWasn't*}", "{*Est*is*¯*IHadn't|been*}");
  b = rep(b, "{*est*is*¯*Iweren't*}", "{*est*is*¯*Ihadn't|been*}");
  b = rep(b, "{*Est*is*¯*IWeren't*}", "{*Est*is*¯*IHadn't|been*}");
  b = rep(b, "{*est*os*¯*Iwill|be*}", "{*est*os*¯*Iwill|have|been*}");
  b = rep(b, "{*Est*os*¯*IWill|be*}", "{*Est*os*¯*IWill|have|been*}");
  b = rep(b, "{*est*os*¯*Iwon't|be*}", "{*est*os*¯*Iwon't|have|been*}");
  b = rep(b, "{*Est*os*¯*IWon't|be*}", "{*Est*os*¯*IWon't|have|been*}");
  b = rep(b, "{*est*u*¯*Ishould|be*}", "{*est*u*¯*Ishould|have|been*}");
  b = rep(b, "{*Est*u*¯*IShould|be*}", "{*Est*u*¯*IShould|have|been*}");
  b = rep(b, "{*est*u*¯*Ishouldn't|be*}", "{*est*u*¯*Ishouldn't|have|been*}");
  b = rep(b, "{*Est*u*¯*IShouldn't|be*}", "{*Est*u*¯*IShouldn't|have|been*}");
  b = rep(b, "{*est*us*¯*Iwould|be*}", "{*est*us*¯*Iwould|have|been*}");
  b = rep(b, "{*Est*us*¯*IWould|be*}", "{*Est*us*¯*IWould|have|been*}");
  b = rep(b, "{*est*us*¯*Iwouldn't|be*}", "{*est*us*¯*Iwouldn't|have|been*}");
  b = rep(b, "{*Est*us*¯*IWouldn't|be*}", "{*Est*us*¯*IWouldn't|have|been*}");

  if (!b.compare(entry) == 0) {
	perfect = true;
  }
  return b;
}

static string adjustAgentAndReceiver(string entry) {
  // Adjust agent and receiver of action of verb
  string b = entry;
  if (indexof(b, "*ant*o*") >= FOUND) {
	b = addVerbEr(b, "");
  }
  if (indexof(b, "*int*o*") >= FOUND) {
	b = addVerbEr(b, "previous|");
  }
  if (indexof(b, "*ont*o*") >= FOUND) {
	b = addVerbEr(b, "going-to-be|");
  }
  if (indexof(b, "*unt*o*") >= FOUND) {
	b = addVerbEr(b, "would-be|");
  }
  if (indexof(b, "*at*o*") >= FOUND) {
	b = addPassiveOne(b, "cuxxently|");
  }
  if (indexof(b, "*it*o*") >= FOUND) {
	b = addPassiveOne(b, "");
  }
  if (indexof(b, "*ot*o*") >= FOUND) {
	b = addPassiveOne(b, "going-to-be|");
  }
  if (indexof(b, "*ut*o*") >= FOUND) {
	b = addPassiveOne(b, "would-be|");
  }
  return b;
}

static string addThereToBe(string entry) {
  // Add There to is/are/was/were etc. when no subject present
  string b = entry;
  if (startswith(b, "{*Est*")) {
	b = b.substr(0, indexof(b, "*¯") + 4) + "there|"
	  + lowerall(b.substr(indexof(b, "*¯") + 4, 1))
	  + b.substr(indexof(b, "*¯") + 5);
  }
  if (startswith(b, "{*est*")) {
	if (previousWord(1).compare("{*Ne*¯*FNot/no*}") == 0) {
	  b = b.substr(0, indexof(b, "*¯") + 4) + "there|"
		+ lowerall(b.substr(indexof(b, "*¯") + 4, 1))
		+ b.substr(indexof(b, "*¯") + 5);
	}
	if (previousWord(1).compare("{*Se*¯*CIf*}") == 0) {
	  b = b.substr(0, indexof(b, "*¯") + 4) + "there|"
		+ lowerall(b.substr(indexof(b, "*¯") + 4, indexof(b, "*¯") + 5))
		+ b.substr(indexof(b, "*¯") + 5);
	}
	if (previousWord(1).compare("{*se*¯*Cif*}") == 0) {
	  b = b.substr(0, indexof(b, "*¯") + 4) + "there|"
		+ lowerall(b.substr(indexof(b, "*¯") + 4, 1))
		+ b.substr(indexof(b, "*¯") + 5);
	}
	if (previousWord(1).compare("{*zumexzate*¯*Fzzix|it*}") == 0) {
	  b = b.substr(0, indexof(b, "*¯") + 4) + "there|"
		+ lowerall(b.substr(indexof(b, "*¯") + 4, 1))
		+ b.substr(indexof(b, "*¯") + 5);
	}
	if (previousWord(1).compare("{*zumexzite*¯*Fzzwx|it*}") == 0) {
	  b = b.substr(0, indexof(b, "*¯") + 4) + "there|"
		+ lowerall(b.substr(indexof(b, "*¯") + 4, 1))
		+ b.substr(indexof(b, "*¯") + 5);
	}
	if (previousWord(1).compare("{*ne*¯*Fnot/no*}") == 0) {
	  if (previousWord(2).compare("{*Se*¯*CIf*}") == 0) {
		b = b.substr(0, indexof(b, "*¯") + 4) + "there|"
		  + lowerall(b.substr(indexof(b, "*¯") + 4, 1))
		  + b.substr(indexof(b, "*¯") + 5);
	  }
	  if (previousWord(2).compare("{*se*¯*Cif*}") == 0) {
		b = b.substr(0, indexof(b, "*¯") + 4) + "there|"
		  + lowerall(b.substr(indexof(b, "*¯") + 4, 1))
		  + b.substr(indexof(b, "*¯") + 5);
	  }
	  if (previousWord(2).compare("{*zumexzate*¯*Fzzix|it*}") == 0) {
		b = b.substr(0, indexof(b, "*¯") + 4) + "there|"
		  + lowerall(b.substr(indexof(b, "*¯") + 4, 1))
		  + b.substr(indexof(b, "*¯") + 5);
	  }
	  if (previousWord(2).compare("{*zumexzite*¯*Fzzwx|it*}") == 0) {
		b = b.substr(0, indexof(b, "*¯") + 4) + "there|"
		  + lowerall(b.substr(indexof(b, "*¯") + 4, 1))
		  + b.substr(indexof(b, "*¯") + 5);
	  }
	}
  }
  return b;
};

static int verbPosition(int nn) { // Find verb position
  int wordPs;
  int n = nn;
  string ent = nextWord(n + 1);
  if (!t.substr(nearbyWordIndex - 1, 1).compare(" ") == 0) {
	return -1;
  }
  if ((!t.substr(nearbyWordIndex - 2, 1).compare(" ") == 0)
	&& (!t.substr(nearbyWordIndex - 2, 1).compare("}") == 0)
	&& (!t.substr(nearbyWordIndex - 2, 1).compare(",") == 0)) {
	return -1;
  }
  wordPs = nearbyWordIndex;
  if ((!(indexof(ent, "i*¯") >= FOUND)) || (indexof(ent, PRONOUN_ENDING) >= FOUND)
	|| (indexof(ent, "i*¯*N") >= FOUND)) {
	ent = nextWord(n);
	wordPs = nearbyWordIndex;
  }
  n--;
  if ((!(indexof(ent, "nt*a*¯") >= FOUND)) && (!(indexof(ent, "nt*a*j*¯") >= FOUND))
	&& (!(indexof(ent, "nta*¯") >= FOUND)) && (!(indexof(ent, "ntaj*¯") >= FOUND))
	&& ((!(indexof(ent, "i*¯") >= FOUND)) || (indexof(ent, PRONOUN_ENDING) >= FOUND)
	|| (indexof(ent, "i*¯*N") >= FOUND))) {
	wordPs = 0;
  }
  if (n == 0) {
	currentWordIndex = -1;
	nearbyWordIndex = -1;
	ent = nextWord(-1);
  }
  else {
	ent = nextWord(n);
  }
  if (!t.substr(nearbyWordIndex - 1, 1).compare(" ") == 0) {
	return -1;
  }
  if (nearbyWordIndex > 1) {
	if ((!t.substr(nearbyWordIndex - 2, 1).compare(" ") == 0) &&
	  (!t.substr(nearbyWordIndex - 2, 1).compare("}") == 0) &&
	  (!t.substr(nearbyWordIndex - 2, 1).compare(",") == 0)) {
	  return -1;
	}
  }
  if (wordPs >= 0) {
	wordPs -= nearbyWordIndex;
  }
  return wordPs;
}

static void copulaNominativePredicateNoun() {
  // Process articles and It is I, It was He (nominative after To Be)
  string art = nextWord(1);
  int p;
  int n = 2;
  do {
	if (indexof(art, "*kaj*¯*C") >= FOUND) {
	  break;
	}
	p = indexof(art, "u*¯*A");
	if (p >= FOUND) {
	  t = t.substr(0, nearbyWordIndex) + art.substr(0, p + 1) + "n"
		+ t.substr(nearbyWordIndex + p);
	  art = nextWord(n);
	  n++;
	}
	p = indexof(art, CORELATIVE_PLURAL);
	if (p >= FOUND) {
	  t = t.substr(0, nearbyWordIndex) + art.substr(0, p + 2) + "n"
		+ t.substr(nearbyWordIndex + p + 1);
	  art = nextWord(n);
	  n++;
	}
	p = indexof(art, ADJECTIVE_SINGULAR);
	if ((p >= FOUND) && (!(indexof(art, "nt*a*¯") >= FOUND))) {
	  t = t.substr(0, nearbyWordIndex) + art.substr(0, p + 2) + "*n"
		+ t.substr(nearbyWordIndex + p + 2);
	  art = nextWord(n);
	  n++;
	}
	p = indexof(art, ADJECTIVE_SUFFIX);
	if ((p >= FOUND) && (!(indexof(art, "nt*a*¯") >= FOUND))) {
	  t = t.substr(0, nearbyWordIndex) + art.substr(0, p + 1) + "n"
		+ t.substr(nearbyWordIndex + p);
	  art = nextWord(n);
	  n++;
	}
	p = indexof(art, ADJECTIVE_PLURAL);
	if ((p >= FOUND) && (!(indexof(art, "nt*a*j*¯") >= FOUND))) {
	  t = t.substr(0, nearbyWordIndex) + art.substr(0, p + 4) + "*n"
		+ t.substr(nearbyWordIndex + p + 3);
	  art = nextWord(n);
	  n++;
	}
	p = indexof(art, ADJECTIVE_PLURAL_ORIG + "*A");
	if (p >= FOUND) {
	  t = t.substr(0, nearbyWordIndex) + art.substr(0, p + 2) + "n"
		+ t.substr(nearbyWordIndex + p + 2);
	  art = nextWord(n);
	  n++;
	}
	if (indexof(art, "*kaj*¯*C") >= FOUND) {
	  break;
	}
	p = indexof(art, "u*¯*A");
	if (p >= FOUND) {
	  t = t.substr(0, nearbyWordIndex) + art.substr(0, p + 1) + "n"
		+ t.substr(nearbyWordIndex + p);
	  art = nextWord(n);
	  n++;
	}
	p = indexof(art, CORELATIVE_PLURAL);
	if (p >= FOUND) {
	  t = t.substr(0, nearbyWordIndex) + art.substr(0, p + 2) + "n"
		+ t.substr(nearbyWordIndex + p + 1);
	  art = nextWord(n);
	  n++;
	}
	p = indexof(art, ADJECTIVE_SINGULAR);
	if ((p >= FOUND) && (!(indexof(art, "nt*a*¯") >= FOUND))) {
	  t = t.substr(0, nearbyWordIndex) + art.substr(0, p + 2) + "*n"
		+ t.substr(nearbyWordIndex + p + 1);
	  art = nextWord(n);
	  n++;
	}
	p = indexof(art, ADJECTIVE_SUFFIX);
	if ((p >= FOUND) && (!(indexof(art, "nt*a*¯") >= FOUND))) {
	  t = t.substr(0, nearbyWordIndex) + art.substr(0, p + 1) + "n"
		+ t.substr(nearbyWordIndex + p);
	  art = nextWord(n);
	  n++;
	}
	p = indexof(art, ADJECTIVE_PLURAL);
	if ((p >= FOUND) && (!(indexof(art, "nt*a*j*¯") >= FOUND))) {
	  t = t.substr(0, nearbyWordIndex) + art.substr(0, p + 4) + "*n"
		+ t.substr(nearbyWordIndex + p + 3);
	  art = nextWord(n);
	  n++;
	}
	p = indexof(art, ADJECTIVE_PLURAL_ORIG);
	if (p >= FOUND) {
	  t = t.substr(0, nearbyWordIndex) + art.substr(0, p + 2) + "*n"
		+ t.substr(nearbyWordIndex + p + 1);
	  art = nextWord(n);
	  n++;
	}
  } while (p >= FOUND);
  p = indexof(art, NOUN_SINGULAR_ENDING);
  if (p >= FOUND) {
	t = t.substr(0, nearbyWordIndex) + art.substr(0, p + 2) + "*n"
	  + t.substr(nearbyWordIndex + p + 1);
	art = nextWord(n);
	if ((art.compare("{*unu*¯*Na*}") == 0) || (art.compare("{*unu*¯*Nan*}") == 0)
	  || (indexof(art, ADVERB) >= FOUND) || (indexof(art, ADVERB_OR_EXCLAMATION) >= FOUND)) {
	  art = nextWord(n + 1);
	  if ((indexof(art, ADVERB) >= FOUND) || (indexof(art, ADVERB_OR_EXCLAMATION) >= FOUND)) {
		art = nextWord(n + 2);
	  }
	}
	p = indexof(art, ADJECTIVE_SINGULAR);
	if (p >= FOUND) {
	  t = t.substr(0, nearbyWordIndex) + art.substr(0, p + 2)
		+ "*n" + t.substr(nearbyWordIndex + p + 1);
	}
	art = "";
  }
  p = indexof(art, NOUN_SINGULAR);
  if (p >= FOUND) {
	t = t.substr(0, nearbyWordIndex) + art.substr(0, p + 1) + "n"
	  + t.substr(nearbyWordIndex + p);
	art = nextWord(n);
	if ((art.compare("{*unu*¯*Na*}") == 0) || (art.compare("{*unu*¯*Nan*}") == 0)
	  || (indexof(art, ADVERB) >= FOUND) || (indexof(art, ADVERB_OR_EXCLAMATION) >= FOUND)) {
	  art = nextWord(n + 1);
	  if ((indexof(art, ADVERB) >= FOUND) || (indexof(art, ADVERB_OR_EXCLAMATION) >= FOUND)) {
		art = nextWord(n + 2);
	  }
	}
	p = indexof(art, ADJECTIVE_SINGULAR);
	if (p >= FOUND) {
	  t = t.substr(0, nearbyWordIndex) + art.substr(0, p + 2)
		+ "*n" + t.substr(nearbyWordIndex + p + 1);
	}
	art = "";
  }
  t = rep(t, "{*lan*¯", "{*la*¯"); // Remove accusative ending from la
  t = rep(t, "{*Lan*¯", "{*La*¯");
  p = indexof(art, NOUN_PLURAL_ENDING);
  if (p >= FOUND) {
	t = t.substr(0, nearbyWordIndex) + art.substr(0, p + 4) + "*n*"
	  + t.substr(nearbyWordIndex + p + 3);
	art = "";
  }
  p = indexof(art, NOUN_PLURAL_ENDING_ORIG);
  if (p >= FOUND) {
	t = t.substr(0, nearbyWordIndex) + art.substr(0, p + 2) + "*n"
	  + t.substr(nearbyWordIndex + p + 1);
	art = "";
  }
  p = indexof(art, PROPER_NOUN_SINGULAR_ENDING);
  if (p >= FOUND) {
	t = t.substr(0, nearbyWordIndex) + art.substr(0, p + 1) + "n|*"
	  + t.substr(nearbyWordIndex + p + 1);
	art = "";
  }
  p = indexof(art, PROPER_NOUN_PLURAL_ENDING);
  if (p >= FOUND) {
	t = t.substr(0, nearbyWordIndex) + art.substr(0, p + 1) + "n|*"
	  + t.substr(nearbyWordIndex + p + 1);
	art = "";
  }
}

static string adjustDoModal(string entry) { // Adjust To Do
  string b = entry;
  string da;
  int p;
  do {
	if (indexof(b, "*I") < 2) {
	  break;
	}
	da = "";
	if (indexof(b, "_ed") >= FOUND) {
	  da = "_ed";
	}
	if ((indexof(b, "_ing") >= FOUND) && (!(indexof(b, ")|continue_ing") >= FOUND))) {
	  da = "_ing";
	}
	if (indexof(b, "_ing-tool") >= FOUND) {
	  da = "_ing-tool";
	}
	if (indexof(b, "_ing-tools") >= FOUND) {
	  da = "_ing-tools";
	}
	if (indexof(b, "_ingly") >= FOUND) {
	  da = "_ingly";
	}
	if (indexof(b, "_ed") >= FOUND) {
	  da = "_ed";
	}
	if (indexof(b, "_ed|one") >= FOUND) {
	  da = "_ed|one";
	}
	if (indexof(b, "_ed|ones") >= FOUND) {
	  da = "_ed|ones";
	}
	if (indexof(b, "_er") >= FOUND) {
	  da = "_er";
	}
	if (indexof(b, "_ers") >= FOUND) {
	  da = "_ers";
	}
	if (indexof(b, "_able") >= FOUND) {
	  da = "_able";
	}
	if (indexof(b, "_ably") >= FOUND) {
	  da = "_ably";
	}
	p = indexof(b, "/");
	if (p >= FOUND) {
	  do {
		if (!b.substr(p - da.length(), p - (p - da.length())).compare(da) == 0) {
		  b = b.substr(0, p) + da + b.substr(p);
		  p += da.length() + 1;
		  p = indexof(b, "/", p);
		}
		else {
		  break;
		}
	  } while (p >= FOUND);
	}
	p = indexof(b, "/");
	if (p > EXISTS) {
	  if ((indexof(b, "did|") >= FOUND) && ((b.substr(p - 1, p - (p - 1)).compare("|") == 0)
		|| (b.substr(p - 1, p - (p - 1)).compare(INFINITIVE_MARKER) == 0) || (b.substr(p
		- 1, p - (p
		- 1)).compare("/") == 0))) {
		p = indexof(b, "did|");
		b = b.substr(0, p) + b.substr(p + 4);
		b = conjugatePreterite(b);
		break;
	  }
	  // 3ps -(e)s:
	  if ((indexof(b, "Did|") > EXISTS) && ((b.substr(p - 1, p - (p - 1)).compare("|") == 0)
		|| (b.substr(p - 1, p - (p - 1)).compare(INFINITIVE_MARKER) == 0))) {
		p = indexof(b, "Does|");
		b = b.substr(0, p) + upperall(b.substr(p + 4, 1))
		  + b.substr(p + 5);
		break;
	  }
	  if ((indexof(b, "do|") > EXISTS) && ((b.substr(p - 1, p - (p - 1)).compare("|") == 0)
		|| (b.substr(p - 1, p - (p - 1)).compare(INFINITIVE_MARKER) == 0) || (b.substr(p
		- 1, p - (p
		- 1)).compare("/") == 0))) {
		p = indexof(b, "do|");
		b = b.substr(0, p) + b.substr(p + 3);
		break;
	  }
	  // 3ps -(e)s:
	  if ((indexof(b, "Do|") > EXISTS) && ((b.substr(p - 1, p - (p - 1)).compare("|") == 0)
		|| (b.substr(p - 1, p - (p - 1)).compare(INFINITIVE_MARKER) == 0))) {
		p = indexof(b, "Does|");
		b = b.substr(0, p) + upperall(b.substr(p + 3, 1))
		  + b.substr(p + 4);
		break;
	  }
	  // 3ps -(e)s:
	  if ((indexof(b, "does|") > EXISTS) && ((b.substr(p - 1,
		p - (p - 1)).compare("|") == 0) || (b.substr(p - 1, p - (p - 1)).compare(INFINITIVE_MARKER) == 0)
		|| (b.substr(p - 1, p - (p - 1)).compare("/") == 0))) {
		p = indexof(b, "does|");
		b = b.substr(0, p) + b.substr(p + 5);
		break;
	  }
	  // 3ps -(e)s:
	  if ((indexof(b, "Does|") > EXISTS) && ((b.substr(p - 1,
		p - (p - 1)).compare("|") == 0) || (b.substr(p - 1, p - (p - 1)).compare(INFINITIVE_MARKER) == 0))) {
		p = indexof(b, "Does|");
		b = b.substr(0, p) + upperall(b.substr(p + 5, 1))
		  + b.substr(p + 6);
		break;
	  }
	}
  } while (false);
  p = indexof(b, "did|");
  if (p >= FOUND) {
	if ((indexof(b, "*I") >= FOUND) && (b.substr(p - 2, p - 1 - (p - 2)).compare("*") == 0)) {
	  b = b.substr(0, p) + b.substr(p + 4);
	  b = conjugatePreterite(b);
	}
  }
  p = indexof(b, "does|");
  if (p >= FOUND) {
	b = b.substr(0, p) + b.substr(p + 5);
  }
  p = indexof(b, "do|");
  if ((p >= FOUND)) {
	if ((indexof(b, "*I") >= FOUND) && (b.substr(p - 2, p - 1 - (p - 2)).compare("*") == 0)) {
	  x = indexof(b, "*}", p + 5);
	  b = b.substr(0, p) + b.substr(p + 3, x - (p + 3)) + "*}";
	}
  }
  p = indexof(b, "Did|");
  if (p >= FOUND) {
	if ((indexof(b, "*I") >= FOUND) && (b.substr(p - 2, p - 1 - (p - 2)).compare("*") == 0)) {
	  b = b.substr(0, p) + b.substr(p + 4);
	  b = conjugatePreterite(b);
	}
  }
  p = indexof(b, "Does|");
  if (p >= FOUND) {
	b = b.substr(0, p) + b.substr(p + 5);
  }
  p = indexof(b, "Do|");
  if ((p >= FOUND)) {
	if ((indexof(b, "*I") >= FOUND) && (b.substr(p - 2, p - 1 - (p - 2)).compare("*") == 0)) {
	  x = indexof(b, "*}", p + 5);
	  b = b.substr(0, p) + b.substr(p + 3, x - (p + 3)) + "*}";
	}
  }
  b = rep(b, "{*est*as*¯*Ibes*}", "{*est*as*¯*Iis*}");
  b = rep(b, "{*Est*as*¯*IBes*}", "{*Est*as*¯*IIs*}");
  return b;
}

static void addOneAfterAdjectives() { // La rugxa kaj blanka estas bona.
  // E.g. The blue _one_ or The new _ones_
  //out << t;
  int p;
  int verbLimit = t.length();
  // Change onedetermTokens' part-of-speech markers before looking for adjs needing One added:
  for (string wd : determTokens) t = rep(t, wd, wd.substr(0, 3) + "W" + wd.substr(4));
  if ((indexof(t, "*est*") >= FOUND) && (indexof(t, "*est*") < verbLimit)) verbLimit = indexof(t, "*est*");
  if ((indexof(t, "{*rest*") >= FOUND) && (indexof(t, "{*rest*") < verbLimit)) verbLimit = indexof(t, "{*rest*");
  if ((indexof(t, "*sxajn*") >= FOUND) && (indexof(t, "*sxajn*") < verbLimit)) verbLimit = indexof(t, "*sxajn*");
  if ((indexof(t, "*igx*") >= FOUND) && (indexof(t, "*igx*") < verbLimit)) verbLimit = indexof(t, "*igx*");
  string sentenceTail = "";
  if ((verbLimit < t.length()) && (!indexof(t.substr(verbLimit), "¯*W") >= FOUND)) {
	verbLimit = t.rfind("}", verbLimit) + 2;
	sentenceTail = t.substr(verbLimit);
	t = t.substr(0, verbLimit);
  }
  //out << "mod:" + t;
  currentWordIndex = nearbyWordIndex = -1;
  string partOfSpeech = "";
  string tag;
  int nounCount = 0;
  while ((tag = nextWord(-1)) != "") {
	//if (tag.length() + 2 <= t.length()) if (t.substr(t.length() - tag.length() - 2).compare(tag + "? ") == 0)
	//  t = " " + tag + t.substr(0, t.length() - tag.length() - 1) + "? ";
	tag = tag.substr(indexof(tag, "¯") + 2, 1);
	if (tag.compare("O") == 0) nounCount++;
	partOfSpeech += tag;
  }
  partOfSpeech += ". ";
  //out << "partOfSpeech1:" + partOfSpeech;
  rgx = "A([^OU]*)\\. ";
  partOfSpeech = regex_replace(partOfSpeech, rgx, "AU$1. ");
  rgx = "C(.*)A([^OU]*)\\. ";
  partOfSpeech = regex_replace(partOfSpeech, rgx, "C$1AU$2. ");
  rgx = "A([^OU]*)I";
  partOfSpeech = regex_replace(partOfSpeech, rgx, "AU$1I");
  rgx = "I(.*)A([^OU]*)\\. ";
  partOfSpeech = regex_replace(partOfSpeech, rgx, "I$1AU$2. ");
  //out << "partOfSpeech2:" + partOfSpeech;
  currentWordIndex = nearbyWordIndex = -1;
  for (p = 0; p < partOfSpeech.length() - 2; p++) {
	string oneType = "";
	tag = nextWord(-1);
	if (tag != "") {
	  if (partOfSpeech.substr(p, 2).compare("AU") == 0) {
		if (indexof(tag, "j*¯*A") >= FOUND) {
		  oneType = " {*un*o*j*¯*Oones*}";
		}
		else if (indexof(tag, "j*n*¯*A") >= FOUND) {
		  oneType = " {*un*o*j*n*¯*Oones*}";
		}
		else if (indexof(tag, "n*¯*A") >= FOUND) {
		  oneType = " {*un*o*n*¯*Oone*}";
		}
		else if (indexof(tag, "*¯*A") >= FOUND) {
		  oneType = " {*un*o*¯*Oone*}";
		}
		else {
		  oneType = "";
		}
		tag = tag.substr(indexof(tag, "¯") + 2, 1);
		p++;
	  }
	}
	else {
	  break;
	}
	if (tag == partOfSpeech.substr(p, 1)) continue;
	int insertPoint = indexof(t, "}", nearbyWordIndex) + 1;
	t = t.substr(0, insertPoint) + oneType + t.substr(insertPoint);
	nearbyWordIndex += oneType.length();
	currentWordIndex += oneType.length();
  }
  if (sentenceTail.length() > 0) t += sentenceTail;
  // Restore onedetermTokens' part-of-speech markers after looking for adjs needing One added:
  for (string wd : determTokens) t = rep(t, wd.substr(0, 3) + "A" + wd.substr(4), wd);
}

static void insertIndefiniteArticles() {
  // Insert indefinite articles where needed before singular count nouns:
  //out << t;
  currentWordIndex = -1;
  nearbyWordIndex = -1;
  foundAdjPhrase = false;
  nounPosition = 0;
  while ((wd = nextWord(-1)).compare("") != 0) {
	previousPosition = 1;
	if (countNounFound()) {
	  bool b = adjectivePhraseFound();
	  t = t.substr(0, insertPosition) + "{*unu*¯*Na*} " + t.substr(insertPosition);
	  currentWordIndex = nounPosition;
	  nearbyWordIndex = nounPosition;
	}
	wd = nextWord(-1);
  }
}

static bool countNounFound() {
  while ((wd.length() > 5)) {
	try {
	  //Console.WriteLine(justEO(wd));
	  if ((endswith(justEO(wd), "o ")) && (indexof(massNouns, justEO(wd))
		== NOT_FOUND) && (!endswith(justEO(wd), "ado "))
		&& (!endswith(justEO(wd), "ismo ")) && (!endswith(justEO(wd), "grafio "))
		&& (!endswith(justEO(wd), "igo ")) && (!endswith(justEO(wd), "igxo "))
		&& (!endswith(justEO(wd), "materialo "))
		&& (!endswith(justEO(wd), "logio ")) && (((!endswith(justEO(wd), "eco ")))
		|| (indexof(ecoAbstracts, justEO(wd)) >= FOUND))) {
		nounPosition = nearbyWordIndex;
		insertPosition = nearbyWordIndex;
		return true;
	  }
	  else {
		wd = nextWord(-1);
	  }
	}
	catch (exception& ee) {
	  exception ee2 = ee;
	  wd = nextWord(-1);
	}
  }
  return false;
}

static string justEO(string wd) { // Returns nominative Esperanto word 
  // with space before and after:
  return " " + rep(rep(wd.substr(2, indexof(wd, "*¯") - 2), "*", "") + " ", "n ", " ");
}

static bool adjectivePhraseFound() {
  if (adjectiveFound()) {
	lookForAdverb();
	lookForAdjectiveExtension();
	return true;
  }
  else {
	return false;
  }
}

static bool adjectiveFound() {
  string previousWd = previousWord(previousPosition);
  if ((indexof(previousWd, "{*la*¯") == NOT_FOUND)
	&& (indexof(previousWd, "{*La*¯") == NOT_FOUND)
	&& ((indexof(previousWd, "a*¯") >= FOUND) || (indexof(previousWd, "an*¯")
	>= FOUND) || (indexof(previousWd, "a*n*¯") >= FOUND))) {
	insertPosition = nearbyWordIndex;
	previousPosition++;
	return true;
  }
  else {
	return false;
  }
}

static void lookForAdverb() {
  string previousWd = previousWord(previousPosition);
  if ((indexof(previousWd, ADVERB) >= FOUND)
	|| (indexof(previousWd, ADVERB_OR_EXCLAMATION) >= FOUND)) {
	insertPosition = nearbyWordIndex;
	previousPosition++;
  }
}

static void lookForAdjectiveExtension() {
  string previousWd = previousWord(previousPosition);
  if ((indexof(previousWd, CONJUNCTION) >= FOUND)
	&& (indexof(previousWd, "{*kiel*¯") == NOT_FOUND)
	&& (indexof(previousWd, "{*Kiel*¯") == NOT_FOUND)) {
	previousPosition++;
  }
  bool b = adjectivePhraseFound();
}

static string previousWord(int i) {
  // Get previous word. Negative number changes current pointer (currentWordIndex):
  // Also uses currentWordIndex, nearbyWordIndex
  int p, endDelim;
  if (i == 0) {
	return "";
  }
  string wordAtPosition = "";
  int h = abs(i); // Countback
  if (currentWordIndex >= 0) {
	p = currentWordIndex;
	do {
	  endDelim = p - 1;
	  while ((endDelim > 10) && (!t.substr(endDelim, 1).compare("}") == 0)) {
		endDelim--; // Find end of previous word
	  }
	  if (endDelim < 11) {
		return ""; // No previous word exists
	  }
	  p = endDelim - 9;
	  // Find start of previous word:
	  while ((p > START) && (!t.substr(p, 1).compare("{") == 0)) {
		p--;
	  }
	  if (p < 1) {
		return "";
	  }
	  wordAtPosition = t.substr(p, endDelim + 1 - p);
	  if (i < 0) {
		currentWordIndex = p; // Change current pointer
	  }
	  nearbyWordIndex = p; // Set position
	  h--;
	} while (h > 0); // Look back farther
  }
  else { // Set to first word
	currentWordIndex = indexof(t, "{"); // Init current pointer
	p = currentWordIndex;
	if (p >= FOUND) {
	  nearbyWordIndex = p; // Set position
	  endDelim = indexof(t, "}", p + 9); // Find end of previous word
	  if (endDelim >= FOUND) {
		wordAtPosition = t.substr(p, endDelim + 1 - p);
	  }
	  else { // No previous word exists
		return "";
	  }
	}
	else { // No previous word exists
	  return "";
	}
  }
  return wordAtPosition;
}

static string nextWord(int i) {
  // Get next word. Negative number changes current pointer (currentWordIndex):
  // Also uses currentWordIndex, nearbyWordIndex
  int p, endDelim;
  string wordAtPosition;
  if (i == 0) {
	return "";
  }
  int h = abs(i); // Countback
  if (currentWordIndex >= 0) {
	p = currentWordIndex;
	p = indexof(t, "{", p + 10); // Find start of next word
  }
  else { // Set to first word
	currentWordIndex = indexof(t, "{"); // Init current pointer
	p = currentWordIndex;
  }
  do {
	if (p >= FOUND) {
	  endDelim = indexof(t, "}", p + 7); // Find end of next word
	  if (endDelim >= FOUND) {
		wordAtPosition = t.substr(p, endDelim + 1 - p);
	  }
	  else {  // No next word exists
		return "";
	  }
	}
	else { // No next word exists
	  return "";
	}
	if (i < 0) {
	  currentWordIndex = p; // Change current pointer
	}
	nearbyWordIndex = p; // Set position
	p = indexof(t, "{", p + 10);
	h--;
  } while (h > 0); // Look ahead farther
  return wordAtPosition;
}

static string getEsperantoNoun(string entry) { // Get EO noun:
  string b = lowerall(entry);
  int p = indexof(b, DIVIDER);
  if (p < 3) {
	return ""; // No Esperanto word found
  }
  b = b.substr(2, p - 2);
  // Remove accusative suffix:
  if (endswith(b, "*o*n")) {
	b = b.substr(0, b.length() - 2);
  }
  if (!endswith(b, "*o")) {
	return "";
  }
  return rep(b, "*", "");
}

static string addAuxiliaryVerb(string entry, int pp, bool negativeFound, string s1, string s2) {
  // Auxiliary verb added:
  string b = entry;
  string negativeWord = s1;
  string positiveWord = s2;
  int p;
  p = abs(int(b.length() - 3));
  while ((!b.substr(p, 1).compare("*") == 0) && (p > 0)) {
	p--;
  }
  if (startswith(b.substr(p + 2), "To|")) {
	b = b.substr(0, p + 2) + upperall(b.substr(p + 5, 1))
	  + b.substr(p + 6);
  }
  else if (startswith(b.substr(p + 2), "to|")) {
	b = b.substr(0, p + 2) + b.substr(p + 5);
  }
  p = indexof(b, DIVIDER);
  if (negativeFound) {
	if (((b.substr(p + 4, 1).compare(upperall(b.substr(p + 4,
	  1))) == 0)) && (!(b.substr(p + 4, 1).compare("-") == 0))
	  && (!(b.substr(p + 4, 1).compare("(") == 0))) {
	  negativeWord = upperall(negativeWord.substr(0, 1))
		+ negativeWord.substr(1);
	  b = b.substr(0, p + 4) + lowerall(b.substr(p + 4, 1))
		+ b.substr(p + 5);
	}
	return b.substr(0, p + 4) + negativeWord + b.substr(p + 4);
  }
  else {
	if (b.length() > p + 4) {
	  if ((!(islower(b[p + 4]))) && (!b.substr(p + 4,
		1).compare("-") == 0) && (!b.substr(p + 4, 1).compare("(") == 0)) {
		positiveWord = upperall(positiveWord.substr(0, 1)) +
		  positiveWord.substr(1);
		b = b.substr(0, p + 4) + lowerall(b.substr(p + 4, 1))
		  + b.substr(p + 5);
	  }
	}
	return b.substr(0, p + 4) + positiveWord + b.substr(p + 4);
  }
}

static void putAdjectivesFirst() {
  // Patterns of adjectives to put before nouns:
  putAdjectiveBeforeNoun("*Oo*¯", "*Aa*¯"); // Singular nominative
  putAdjectiveBeforeNoun("*Oo*n*¯", "*Aa*n*¯"); // Singular accusative
  putAdjectiveBeforeNoun("*Oo*j*¯", "*Aa*j*¯"); // Plural nominative
  putAdjectiveBeforeNoun("*Oo*j*n*¯", "*Aa*j*n*¯"); // Plural accusative
  putAdjectiveBeforeNoun("*Io*¯", "*Aa*¯"); // Sing nominative derived from verb
  putAdjectiveBeforeNoun("*Io*n*¯", "*Aa*n*¯"); // Sing accus derived from verb
  putAdjectiveBeforeNoun("*Io*j*¯", "*Aa*j*¯"); // Plural nom derived from verb
  // Plural accusative derived from verb:
  putAdjectiveBeforeNoun("*Io*j*n*¯", "*Aa*j*n*¯");
  // Singular nominative derived from number:
  putAdjectiveBeforeNoun("*No*¯*N", "*Aa*¯");
  // Singular accusative derived from number:
  putAdjectiveBeforeNoun("*Non*¯*N", "*Aa*n*¯");
  // Plural nominative derived from number:
  putAdjectiveBeforeNoun("*Noj*¯*N", "*Aa*j*¯");
  // Plural accusative derived from number:
  putAdjectiveBeforeNoun("*Nojn*¯*N", "*Aa*j*n*¯");
  // Proper noun with nominative singular adjective:
  putAdjectiveBeforeNoun("*||*¯", "*Aa*¯");
  // Proper noun with accusative singular adjective:
  putAdjectiveBeforeNoun("*||*¯", "*Aa*n*¯");
  // Proper noun with nominative plural adjective:
  putAdjectiveBeforeNoun("*||*¯", "*Aa*j*¯");
  // Proper noun with accusative plural adjective:
  putAdjectiveBeforeNoun("*||*¯", "*Aa*j*n*¯");
}

static void putAdjectiveBeforeNoun(string nn, string a) {
  // Move adjective following noun to before noun:
  int tt, n, sp, p2;
  int y, x;
  int cc = p2 = 0;
  string adjective, a2;
  // Set current pointer (currentWordIndex) to first word and get it:
  currentWordIndex = -1;
  nearbyWordIndex = -1;
  string b = nextWord(-1);
  bool av, gf;
  do {
	av = false;
	do {
	  y = nearbyWordIndex;
	  if ((indexof(b, nn.substr(0, 2)) == NOT_FOUND)
		|| (indexof(b, nn.substr(2)) == NOT_FOUND)) {
		cc++;
		b = nextWord(cc);
		if (nearbyWordIndex <= y) {
		  return;
		}
	  }
	} while (nearbyWordIndex > y);
	sp = cc + 1;
	x = nearbyWordIndex;
	do {
	  adjective = nextWord(sp);
	  a2 = lowerall(adjective);
	  if (nearbyWordIndex > 3) {
		if (t.substr(nearbyWordIndex - 4, nearbyWordIndex - (nearbyWordIndex - 4)).find(",")
		  >= FOUND) {
		  break;
		}
	  }
	  if (a2.compare("{*la*¯*athe*}") == 0) {
		break; // Skip non-adjectives ending in -a
	  }
	  if (a2.compare("{*da*¯*pof*}") == 0) {
		break;
	  }
	  if (a2.compare("{*tra*¯*pthrough*}") == 0) {
		break;
	  }
	  if (a2.compare("{*ja*¯*findeed*}") == 0) {
		break;
	  }
	  if (((indexof(adjective, ADVERB_OR_EXCLAMATION) >= FOUND)
		|| (indexof(adjective, ADVERB) >= FOUND))
		&& (indexof(adjective, "{*ne*¯*Fnot/no*}") == NOT_FOUND)
		&& (indexof(adjective, "{*jam*¯*Falready*}") == NOT_FOUND)) {
		av = true;
		n = 1;
		while (!t.substr(nearbyWordIndex - n, nearbyWordIndex - n + 1 - (nearbyWordIndex - n)).compare("}") == 0) {
		  if (!t.substr(nearbyWordIndex - n, nearbyWordIndex - n
			+ 1 - (nearbyWordIndex - n)).compare(" ") == 0) {
			break;
		  }
		  n++;
		}
		sp++;
		adjective = nextWord(sp);
	  }
	  if (indexof(adjective, a.substr(0, 2)) == NOT_FOUND) {
		break;
	  }
	  if ((indexof(adjective, a.substr(2)) == NOT_FOUND)
		|| (indexof(adjective, "aj*¯*Cand*}") >= FOUND)
		|| (indexof(adjective, "ajn*¯*F-ever") >= FOUND)) {
		break;
	  }
	  p2 = sp + 1;
	  if (av) {
		p2 = sp;
	  }
	  n = 1;
	  do {
		if (nearbyWordIndex - n > 0) {
		  while (!t.substr(nearbyWordIndex - n, nearbyWordIndex - n
			+ 1 - (nearbyWordIndex - n)).compare("}") == 0) {
			if (!t.substr(nearbyWordIndex - n, nearbyWordIndex - n
			  + 1 - (nearbyWordIndex - n)).compare(" ") == 0) {
			  break;
			}
			n++;
		  }
		  if (!t.substr(nearbyWordIndex - n, nearbyWordIndex - n
			+ 1 - (nearbyWordIndex - n)).compare("}") == 0) {
			return;
		  }
		}
		y = nearbyWordIndex - n;
		if (av) {
		  av = false;
		  n += 5;
		  while (!t.substr(nearbyWordIndex - n, nearbyWordIndex - n
			+ 1 - (nearbyWordIndex - n)).compare("{") == 0) {
			n++;
		  }
		  n++;
		}
	  } while (av);
	  do {
		do {
		  gf = false;
		  adjective = nextWord(p2);
		  if (((indexof(adjective, ADVERB_OR_EXCLAMATION) >= FOUND)
			|| (indexof(adjective, ADVERB) >= FOUND))
			&& (indexof(adjective, "{*ne*¯*Fnot/no*}") == NOT_FOUND)
			&& (indexof(adjective, "{*jam*¯*Falready*}") == NOT_FOUND)) {
			n = 1;
			while (!t.substr(nearbyWordIndex - n, nearbyWordIndex - n
			  + 1 - (nearbyWordIndex - n)).compare("}") == 0) {
			  if (!t.substr(nearbyWordIndex - n, nearbyWordIndex - n
				+ 1 - (nearbyWordIndex - n)).compare(" ") == 0) {
				break;
			  }
			  n++;
			}
			p2++;
			adjective = nextWord(p2);
		  }
		  if (indexof(adjective, a) >= FOUND) {
			p2++;
			n = 1;
			while (!t.substr(nearbyWordIndex - n, nearbyWordIndex - n
			  + 1 - (nearbyWordIndex - n)).compare("}") == 0) {
			  if ((!t.substr(nearbyWordIndex - n, nearbyWordIndex - n
				+ 1 - (nearbyWordIndex - n)).compare(" ") == 0) && (!t.substr(nearbyWordIndex - n,
				nearbyWordIndex - n + 1 - (nearbyWordIndex - n)).compare(",") == 0)) {
				p2--;
				break;
			  }
			  n++;
			}
			if ((!t.substr(nearbyWordIndex - n, nearbyWordIndex - n
			  + 1 - (nearbyWordIndex - n)).compare(" ") == 0) && (!t.substr(nearbyWordIndex - n, nearbyWordIndex
			  - n + 1 - (nearbyWordIndex - n)).compare(",") == 0)) {
			  break;
			}
			gf = true;
			break;
		  }
		  if (((adjective.compare("{*kaj*¯*Cand*}") == 0)
			|| (adjective.compare("{*aux*¯*Cor/either*}") == 0)
			|| (adjective.compare("{*sed*¯*Cbut*}") == 0)
			|| (adjective.compare("{*kajaux*¯*cand/or*}") == 0))) {
			n = 1;
			while (!t.substr(nearbyWordIndex - n, nearbyWordIndex - n
			  + 1 - (nearbyWordIndex - n)).compare("}") == 0) {
			  if ((!t.substr(nearbyWordIndex - n, nearbyWordIndex - n
				+ 1 - (nearbyWordIndex - n)).compare(" ") == 0) && (!t.substr(nearbyWordIndex - n,
				nearbyWordIndex - n + 1 - (nearbyWordIndex - n)).compare(",") == 0)) {
				break;
			  }
			  n++;
			}
			if ((!t.substr(nearbyWordIndex - n, nearbyWordIndex - n
			  + 1 - (nearbyWordIndex - n)).compare(" ") == 0) && (!t.substr(nearbyWordIndex - n, nearbyWordIndex
			  - n + 1 - (nearbyWordIndex - n)).compare(",") == 0)) {
			  break;
			}
			adjective = nextWord(p2 + 1);
			if (indexof(adjective, a) >= FOUND) {
			  p2 += 2;
			  n = 1;
			  while (!t.substr(nearbyWordIndex - n, nearbyWordIndex - n
				+ 1 - (nearbyWordIndex - n)).compare("}") == 0) {
				if ((!t.substr(nearbyWordIndex - n, nearbyWordIndex - n
				  + 1 - (nearbyWordIndex - n)).compare(" ") == 0) && (!t.substr(nearbyWordIndex - n,
				  nearbyWordIndex - n + 1 - (nearbyWordIndex - n)).compare(",") == 0)) {
				  p2--;
				  break;
				}
				n++;
			  }
			  gf = true;
			  break;
			}
		  }
		} while (false);
	  } while (gf == true);
	  p2--;
	  if (indexof(nextWord(p2 + 1), PREPOSITION) >= FOUND) {
		break;
	  }
	  b = nextWord(p2);
	  tt = nearbyWordIndex;
	  while (!t.substr(tt, tt + 2 - (tt)).compare("*}") == 0) {
		tt++;
	  }
	  tt += 2;
	  if (t.length() > x + 2) {
		if (!(islower(t[x + 2]))) {
		  t = lower(t, x + 2);
		  cc = indexof(t, "¯*", x + 2) + 3;
		  if (!lowerall(t.substr(cc, 1)).compare(upperall(t.substr(cc, 1))) == 0) {
			t = lower(t, cc);
		  }
		}
	  }
	  if (tt - y - 2 < 0) {
		t = t.substr(0, x) + t.substr(x, y + 1 - (x)) + t.substr(tt);
	  }
	  else {
		t = t.substr(0, x) + t.substr(y + 2, tt - (y + 2)) + " " + t.substr(x,
		  y + 1 - x) + t.substr(tt);
	  }
	} while (false);
	cc++;
	b = nextWord(cc);
  } while (true);
}

static bool isInPrepositionalPhrase(int pp) {
  // Look for prepositional phrase
  int p = pp - 3;
  if (p > 3) {
	if ((t.substr(p, p + 5 - (p)).compare("{*la*¯") == 0) || (t.substr(p, p
	  + 5 - (p)).compare("{*La*¯") == 0)) {
	  return true;
	}
  }
  if (p < 1) {
	return false;
  }
  while ((!t.substr(p, p + 1 - (p)).compare(DIV) == 0) && (p > 2)) {
	p--;
  }
  if (p < 3) {
	return false;
  }
  if (t.substr(p - 2, p - (p - 2)).compare("a*") == 0) {
	p--;
	while ((!t.substr(p, p + 1 - (p)).compare(DIV) == 0) && (p > 2)) {
	  p--;
	}
	if (p < 3) {
	  return false;
	}
	if (t.substr(p - 3, p - 1 - (p - 3)).compare("a*") == 0) {
	  p--;
	}
	while ((!t.substr(p - 1, p - (p - 1)).compare(DIV) == 0) && (p > 2)) {
	  p--;
	}
  }
  if (p < 3) {
	return false;
  }
  if (p > 3) {
	if (t.substr(p - 3, p - (p - 3)).compare("an*") == 0) {
	  p--;
	  while ((!t.substr(p - 1, p - (p - 1)).compare(DIV) == 0) && (p > 2)) {
		p--;
	  }
	  if (p < 3) {
		return false;
	  }
	}
	if (t.substr(p - 4, p - 1 - (p - 4)).compare("an*") == 0) {
	  p--;
	  while ((!t.substr(p, p + 1 - (p)).compare(DIV) == 0) && (p > 2)) {
		p--;
	  }
	  if (p < 3) {
		return false;
	  }
	}
  }
  if (p > 4) {
	if (t.substr(p - 4, p - (p - 4)).compare("a*n*") == 0) {
	  p--;
	  while ((!t.substr(p, p + 1 - (p)).compare(DIV) == 0) && (p > 2)) {
		p--;
	  }
	  if (p < 3) {
		return false;
	  }
	}
	if (t.substr(p - 4, p - (p - 4)).compare("a*j*") == 0) {
	  p--;
	  while ((!t.substr(p, p + 1 - (p)).compare(DIV) == 0) && (p > 2)) {
		p--;
	  }
	  if (p < 3) {
		return false;
	  }
	}
	if (t.substr(p - 4, p - (p - 4)).compare("ajn*") == 0) {
	  p--;
	  while ((!t.substr(p, p + 1 - (p)).compare(DIV) == 0) && (p > 2)) {
		p--;
	  }
	  if (p < 3) {
		return false;
	  }
	}
	if (t.substr(p - 4, p - (p - 4)).compare("a*n*") == 0) {
	  p--;
	  while ((!t.substr(p, p + 1 - (p)).compare(DIV) == 0) && (p > 2)) {
		p--;
	  }
	  if (p < 3) {
		return false;
	  }
	}
	if (t.substr(p - 4, p - (p - 4)).compare("a*j*") == 0) {
	  p--;
	  while ((!t.substr(p, p + 1 - (p)).compare(DIV) == 0) && (p > 2)) {
		p--;
	  }
	  if (p < 3) {
		return false;
	  }
	}
	if (t.substr(p - 4, p - (p - 4)).compare("ajn*") == 0) {
	  p--;
	  while ((!t.substr(p, p + 1 - (p)).compare(DIV) == 0) && (p > 2)) {
		p--;
	  }
	  if (p < 3) {
		return false;
	  }
	}
  }
  if (p > 6) {
	if ((t.substr(p - 3, p - (p - 3)).compare("aj*") == 0) && (!t.substr(p - 6, p
	  - 1 - (p - 6)).compare("*kaj*") == 0)) {
	  p--;
	  while ((!t.substr(p, p + 1 - (p)).compare(DIV) == 0) && (p > 2)) {
		p--;
	  }
	  if (p < 3) {
		return false;
	  }
	}
	if ((t.substr(p - 3, p - (p - 3)).compare("aj*") == 0) && (!t.substr(p - 6, p
	  - 1 - (p - 6)).compare("*kaj*") == 0)) {
	  p--;
	  while ((!t.substr(p, p + 1 - (p)).compare(DIV) == 0) && (p > 2)) {
		p--;
	  }
	  if (p < 3) {
		return false;
	  }
	}
	if (t.substr(p - 6, p - (p - 6)).compare("a*j*n*") == 0) {
	  p--;
	  while ((!t.substr(p, p + 1 - (p)).compare(DIV) == 0) && (p > 2)) {
		p--;
	  }
	  if (p < 3) {
		return false;
	  }
	}
	if (t.substr(p - 6, p - (p - 6)).compare("a*j*n*") == 0) {
	  p--;
	  while ((!t.substr(p, p + 1 - (p)).compare(DIV) == 0) && (p > 2)) {
		p--;
	  }
	  if (p < 3) {
		return false;
	  }
	}
  }
  if (p > 4) {
	if (t.substr(p - 4, p - (p - 4)).compare("unu*") == 0) {
	  p--;
	  while ((!t.substr(p, p + 1 - (p)).compare(DIV) == 0) && (p > 2)) {
		p--;
	  }
	  if (p < 3) {
		return false;
	  }
	}
	if (t.substr(p - 4, p - (p - 4)).compare("*la*") == 0) {
	  p--;
	  while ((!t.substr(p, p + 1 - (p)).compare(DIV) == 0) && (p > 2)) {
		p--;
	  }
	  if (p < 3) {
		return false;
	  }
	}
  }
  if (p > 2) {
	if (t.substr(p - 2, p + 3 - (p - 2)).compare("u*¯*A") == 0) {
	  p--;
	  while ((!t.substr(p, p + 1 - (p)).compare(DIV) == 0) && (p > 2)) {
		p--;
	  }
	  if (p < 3) {
		return false;
	  }
	}
  }
  if (p > 3) {
	if (t.substr(p - 3, p + 3 - (p - 3)).compare(CORELATIVE_ACCUSATIVE) == 0) {
	  p--;
	  while ((!t.substr(p, p + 1 - (p)).compare(DIV) == 0) && (p > 2)) {
		p--;
	  }
	  if (p < 3) {
		return false;
	  }
	}
	if (t.substr(p - 3, p + 3 - (p - 3)).compare(CORELATIVE_PLURAL) == 0) {
	  p--;
	  while ((!t.substr(p, p + 1 - (p)).compare(DIV) == 0) && (p > 2)) {
		p--;
		if (p < 3) {
		  return false;
		}
	  }
	}
  }
  if (p > 4) {
	if (t.substr(p - 4, p + 3 - (p - 4)).compare(CORELATIVE_PLURAL_ACCUSATIVE) == 0) {
	  p--;
	  while ((!t.substr(p, p + 1 - (p)).compare(DIV) == 0) && (p > 2)) {
		p--;
	  }
	  if (p < 3) {
		return false;
	  }
	}
  }
  if (t.substr(p, p + 3 - (p)).compare(PREPOSITION) == 0) {
	return true;
  }
  return false;
}

static string addVerbEr(string entry, string suffix) {
  // verbal -er(s) suffix:
  int tt;
  string b = entry;
  tt = b.length() - 9;
  while (!b.substr(tt, tt + 1 - (tt)).compare("*") == 0) {
	tt--;
  }
  if (b.substr(tt + 2, tt + 5 - (tt + 2)).compare("To|") == 0) {
	b = b.substr(0, tt + 1) + INFINITIVE_MARKER + upperall(b.substr(tt + 5, tt
	  + 6 - (tt + 5))) + b.substr(tt + 6);
  }
  else {
	b = b.substr(0, tt + 1) + INFINITIVE_MARKER + b.substr(tt + 5);
  }
  if (indexof(b, "nt*o*j*") >= FOUND) {
	b = b.substr(0, b.length() - 2) + "_ers*}";
  }
  else {
	b = b.substr(0, b.length() - 2) + "_er*}";
  }
  tt = indexof(b, DIVIDER);
  return b.substr(0, tt + 4) + suffix + b.substr(tt + 4);
}

static string addPassiveOne(string entry, string suffix) {
  // -ed ones(s) suffix:
  int tt;
  string b = entry;
  tt = b.length() - 9;
  while (!b.substr(tt, tt + 1 - (tt)).compare("*") == 0) {
	tt--;
  }
  if (b.substr(tt + 2, tt + 5 - (tt + 2)).compare("To|") == 0) {
	b = b.substr(0, tt + 1) + INFINITIVE_MARKER + upperall(b.substr(tt + 5, tt
	  + 6 - (tt + 5))) + b.substr(tt + 6);
  }
  else {
	b = b.substr(0, tt + 1) + INFINITIVE_MARKER + b.substr(tt + 5);
  }
  if (indexof(b, "t*o*j*") >= FOUND) {
	b = b.substr(0, b.length() - 2) + "_ed|ones*}";
  }
  else {
	b = b.substr(0, b.length() - 2) + "_ed|one*}";
  }
  tt = indexof(b, DIVIDER);
  return b.substr(0, tt + 4) + suffix + b.substr(tt + 4);
}

static int findPhraseStart(int phraseStart, string ending) {
  // Find start of phrase
  int p = indexof(t, ending);
  if ((!isInPrepositionalPhrase(p)) && ((phraseStart < 0) || ((p >= FOUND)
	&& (p < phraseStart)))) {
	return p;
  }
  return phraseStart;
}

static int findPhraseEnd(int phraseEnd, int nextPhrase, string ending) {
  // Find end of phrase
  int phEnd = phraseEnd;
  int p = indexof(t, ending, phEnd + 5);
  while ((p >= FOUND) && (p < nextPhrase) && (p > phEnd)) {
	phEnd = p;
	p = indexof(t, ending, phEnd + 5);
  }
  return phEnd;
}

static int findNonNounsEndingInO(int pp) {
  // Find non-nouns ending in -o:
  int p = pp;
  if (p > 1) {
	if (t.substr(p - 2, 2).compare("do") == 0) {
	  p = indexof(t, NOUN_SINGULAR, p + 5);
	  return p;
	}
	if (t.substr(p - 2, 2).compare("ho") == 0) {
	  p = indexof(t, NOUN_SINGULAR, p + 5);
	  return p;
	}
	if (t.substr(p - 2, 2).compare("po") == 0) {
	  p = indexof(t, NOUN_SINGULAR, p + 5);
	  return p;
	}
	if (t.substr(p - 3, 3).compare("pro") == 0) {
	  p = indexof(t, NOUN_SINGULAR, p + 5);
	  return p;
	}
  }
  if (p > 2) {
	if (t.substr(p - 3, 3).compare("tro") == 0) {
	  p = indexof(t, NOUN_SINGULAR, p + 5);
	  return p;
	}
  }
  return p;
}

static int findNonAdjectivesEndingInA(int pp) {
  // Find non-adjs ending in -a:
  int p = pp;
  if (p > 1) {
	if (t.substr(p - 2, 2).compare("da") == 0) {
	  do {
		p = indexof(t, ADJECTIVE_SUFFIX, p + 5);
	  } while (isInPrepositionalPhrase(p));
	  return p;
	}
	if (t.substr(p - 2, 2).compare("ja") == 0) {
	  do {
		p = indexof(t, ADJECTIVE_SUFFIX, p + 5);
	  } while (isInPrepositionalPhrase(p));
	  return p;
	}
	if (t.substr(p - 2, 2).compare("ba") == 0) {
	  do {
		p = indexof(t, ADJECTIVE_SUFFIX, p + 5);
	  } while (isInPrepositionalPhrase(p));
	  return p;
	}
	if (t.substr(p - 2, 2).compare("ha") == 0) {
	  do {
		p = indexof(t, ADJECTIVE_SUFFIX, p + 5);
	  } while (isInPrepositionalPhrase(p));
	  return p;
	}
  }
  if (p > 3) {
	if (t.substr(p - 4, 4).compare("hura") == 0) {
	  do {
		p = indexof(t, ADJECTIVE_SUFFIX, p + 5);
	  } while (isInPrepositionalPhrase(p));
	  return p;
	}
  }
  if (p > 2) {
	if (t.substr(p - 3, 3).compare("tra") == 0) {
	  do {
		p = indexof(t, ADJECTIVE_SUFFIX, p + 5);
	  } while (isInPrepositionalPhrase(p));
	  return p;
	}
  }
  if (p > 7) {
	if (t.substr(p - 8, 8).compare("haleluja") == 0) {
	  do {
		p = indexof(t, ADJECTIVE_SUFFIX, p + 5);
	  } while (isInPrepositionalPhrase(p));
	  return p;
	}
  }
  return p;
}

static bool possessive(string w1, string w2) {
  // Change nominative to possessive
  //int x = 0;
  if (p >= 0) {
	if (t.length() >= x + 50) {
	  if (indexof(t.substr(x, 50), " " + w1 + " ") >= FOUND) {
		t = t.substr(0, p) + w2 + t.substr(p + 17);
		return true;
	  }
	}
  }
  return false;
}

static string reduceOwn(string n, string t) {
  // Reduce possessive own:
  string tt = t;
  string nn = upperall(n.substr(0, 1)) + n.substr(1);
  p = indexof(tt, "{*si*a*n*¯*Ahis/her/its/their|own*}");
  do {
	if (p >= FOUND) {
	  tt = tt.substr(0, p - 1) + "{*si*a*n*¯*A" + n + "|own"
		+ tt.substr(p + 33);
	}
	p = indexof(tt, "{*si*a*j*n*¯*Ahis/her/its/their|own");
	if (p >= FOUND) {
	  tt = tt.substr(0, p - 1) + "{*si*a*n*¯*A" + n + "|own"
		+ tt.substr(p + 35);
	}
	p = indexof(tt, "{*si*a*¯*Ahis/her/its/their|own");
	if (p >= FOUND) {
	  tt = tt.substr(0, p - 1) + "{*si*a*n*¯*A" + n + "|own"
		+ tt.substr(p + 31);
	}
	p = indexof(tt, "{*si*a*j*¯*Ahis/her/its/their|own");
	if (p >= FOUND) {
	  tt = tt.substr(0, p - 1) + "{*si*a*n*¯*A" + n + "|own"
		+ tt.substr(p + 33);
	}
	p = indexof(tt, "{*Si*a*n*¯*AHis/her/its/their|own");
	if (p >= FOUND) {
	  tt = tt.substr(0, p - 1) + "{*Si*a*n*¯*A" + nn + "|own"
		+ tt.substr(p + 33);
	}
	p = indexof(tt, "{*Si*a*j*n*¯*AHis/her/its/their|own");
	if (p >= FOUND) {
	  tt = tt.substr(0, p - 1) + "{*Si*a*n*¯*A" + nn + "|own"
		+ tt.substr(p + 35);
	}
	p = indexof(tt, "{*Si*a*¯*AHis/her/its/their|own");
	if (p >= FOUND) {
	  tt = tt.substr(0, p - 1) + "{*Si*a*n*¯*A" + nn + "|own"
		+ tt.substr(p + 31);
	}
	p = indexof(tt, "{*Si*a*j*¯*AHis/her/its/their|own");
	if (p >= FOUND) {
	  tt = tt.substr(0, p - 1) + "{*Si*a*n*¯*A" + nn + "|own"
		+ tt.substr(p + 33);
	}
	p = indexof(tt, "{*si*a*n*¯*Ahis/her/its/their|own");
  } while (p >= FOUND);
  return tt;
}

static string reduceSelf(string n, string t) {
  // Adjust and reduce -self/-selves
  string tt = t;
  string nn = upperall(n.substr(0, 1)) + n.substr(1);
  p = indexof(tt, "{*sin*¯*Zhimself/herself/itself/themselves");
  do {
	if (p >= FOUND) {
	  tt = tt.substr(0, p - 1) + "{*sin*¯*Z" + n
		+ tt.substr(p + 42);
	}
	p = indexof(tt, "{*Sin*¯*ZHimself/herself/itself/themselves");
	if (p >= FOUND) {
	  tt = tt.substr(0, p - 1) + "{*Sin*¯*Z" + nn
		+ tt.substr(p + 42);
	}
	p = indexof(tt, "{*sin*¯*Zhimself/herself/itself/themselves");
  } while (p >= FOUND);
  return tt;
}

static string reduceSiaOwn(int subjekt, int subjektEnd, int sf) {
  // Find specific own:
  int s, e;
  string w;
  w = "";
  string tt = t;
  string sb = lowerall(tt.substr(subjekt, subjektEnd - subjekt));
  if (!endswith(sb, "}")) {
	sb += "}";
	if (!endswith(sb, "*}")) {
	  sb = sb.substr(0, sb.length() - 1) + "*}";
	}
  }
  if (sf == 0) {
	if ((indexof(tt, "{*si*a*") == NOT_FOUND) && (indexof(tt, "{*Si*a*")
	  == NOT_FOUND)) {
	  return tt;
	}
  }
  if (sf == 1) {
	if ((indexof(tt, "{*sin*") == NOT_FOUND) && (indexof(tt, "{*Sin*")
	  == NOT_FOUND)) {
	  return tt;
	}
  }
  if ((tt.substr(subjekt, subjekt + 13 - (subjekt)).compare("{*Ili*¯*ZThey") == 0)
	|| (tt.substr(subjekt, subjekt + 13 - (subjekt)).compare("{*ili*¯*Zthey") == 0)
	|| (indexof(sb, "o*j*¯") >= FOUND) || (indexof(sb, "ññ") >= FOUND)
	|| (indexof(sb, NOUN_PLURAL_ENDING_ORIG) >= FOUND) || (indexof(sb, ADJECTIVE_PLURAL_SUFFIX) >= FOUND) ||
	(indexof(sb, ADJECTIVE_PLURAL_ORIG) >= FOUND) || (indexof(sb, "*kaj*¯*C") >= FOUND)
	|| (indexof(sb, "*kajaux*¯*C") >= FOUND) || (endswith(sb, "oj*")) || (endswith(sb, "ojx*"))
	|| (endswith(sb, "aj*")) || (endswith(sb, "ajx*"))) {
	if (sf == 0) {
	  tt = reduceOwn("their", tt);
	}
	if (sf == 1) {
	  tt = reduceSelf("themselves", tt);
	}
  }
  else if ((indexof(sb, "*kaj*¯*C") == NOT_FOUND) && (indexof(sb, "*aux*¯*C")
	== NOT_FOUND) && (indexof(sb, "*kajaux*¯*C") == NOT_FOUND)
	&& ((tt.substr(subjekt, subjekt + 10 - (subjekt)).compare("{*Li*¯*ZHe") == 0)
	|| (tt.substr(subjekt, subjekt + 10 - (subjekt)).compare("{*li*¯*Zhe") == 0)
	|| (indexof(sb, "cxjo|*¯*|") >= FOUND) || ((indexof(sb, "cxjo*") >= FOUND)
	&& (indexof(sb, PROPER_NOUN_DIVIDER) >= FOUND)) || ((indexof(sb, "cxjxo*") >= FOUND)
	&& (indexof(sb, PROPER_NOUN_DIVIDER) >= FOUND)) || ((indexof(sb, "cjo*") >= FOUND)
	&& (indexof(sb, PROPER_NOUN_DIVIDER) >= FOUND)) || (indexof(sb, "*vir*o*¯") >= FOUND)
	|| (indexof(sb, "*patr*o*¯") >= FOUND) || (indexof(sb, "*fil*o*¯") >= FOUND)
	|| (indexof(sb, "*av*o*¯") >= FOUND) || (indexof(sb, "*nep*o*¯") >= FOUND)
	|| (indexof(sb, "*nevo*o*¯") >= FOUND) || (indexof(sb, "*kuz*o*¯") >= FOUND)
	|| (indexof(sb, "*regx*o*¯") >= FOUND) || (indexof(sb, "*princ*o*¯") >= FOUND)
	|| (indexof(sb, "*knab*o*¯") >= FOUND) || (indexof(sb, "*cxefprinc*o*¯") >= FOUND)
	|| (indexof(sb, "*regxid*o*¯") >= FOUND) || (indexof(sb, "*knab*et*o*¯") >= FOUND)
	|| (indexof(sb, "*fil*et*o*¯") >= FOUND) || (indexof(sb, "*nev*o*¯") >= FOUND)
	|| (indexof(sb, "*princ*et*o*¯") >= FOUND) || (indexof(sb, "*vir*et*o*¯") >= FOUND)
	|| (indexof(sb, "*regxid*et*o*¯") >= FOUND) || (indexof(sb, "*princid*o*¯") >= FOUND)
	|| (indexof(sb, "*adoleskant*o*¯") >= FOUND) || (indexof(sb, "icx*o*¯") >= FOUND))
	|| (tt.substr(subjekt - 1,
	subjekt + 11 - (subjekt - 1)).compare("{*Oni*¯*ZOne") == 0) || (tt.substr(subjekt - 1,
	subjekt + 11 - (subjekt - 1)).compare("{*oni*¯*Zone") == 0)) {
	if (indexof(sb, "icx*o*¯") >= FOUND) {
	  w = sb;
	  e = indexof(w, "icx*o*¯");
	  s = e - 2;
	  while (!w.substr(s, s + 2 - (s)).compare("{*") == 0) {
		s--;
	  }
	  s += 2;
	  w = w.substr(s, e + 5 - (s));
	  s = indexof(w, "*");
	  while (s >= FOUND) {
		w = w.substr(0, s) + w.substr(s + 1);
		s = indexof(w, "*");
	  }
	}
	if (indexof(notMale, "\"" + w + "\"") == NOT_FOUND) {
	  if (sf == 0) {
		tt = reduceOwn("his", tt);
	  }
	  if (sf == 1) {
		tt = reduceSelf("himself", tt);
	  }
	}
	else {
	  if ((indexof(massNouns, w) >= FOUND) || (endswith(w, ABSTRACT_ENDING))
		|| (endswith(w, "ismo")) || (endswith(w, "logio")) || (endswith(w, "igo"))
		|| (endswith(w, "igxo")) || (endswith(w, "ado"))
		|| (endswith(w, "grafio")) || (endswith(w, "materialo"))) {
		if (sf == 0) {
		  tt = reduceOwn("its", tt);
		}
		if (sf == 1) {
		  tt = reduceSelf("itself", tt);
		}
	  }
	  else {
		if (sf == 0) {
		  tt = reduceOwn("his/her/its", tt);
		}
		if (sf == 1) {
		  tt = reduceSelf("himself/herself/itself", tt);
		}
	  }
	}
  }
  else if ((indexof(sb, "*kaj*¯*C") == NOT_FOUND) && (indexof(sb, "*aux*¯*C")
	== NOT_FOUND) && (indexof(sb, "*kajaux*¯*C") == NOT_FOUND)
	&& ((tt.substr(subjekt, subjekt + 12 - (subjekt)).compare("{*Sxi*¯*ZShe") == 0)
	|| (tt.substr(subjekt, subjekt + 12 - (subjekt)).compare("{*sxi*¯*Zshe") == 0)
	|| (indexof(sb, FEMALE_ENDING) >= FOUND) || ((((indexof(sb, "njo*") >= FOUND)
	|| (indexof(sb, "njxo*") >= FOUND)) && (indexof(sb, PROPER_NOUN_DIVIDER) >= FOUND)
	&& (indexof(sb, "*kampanj*o*¯*") == NOT_FOUND) && (indexof(sb, "*cxampanj*o*¯*")
	== NOT_FOUND))))) {
	if (indexof(sb, FEMALE_ENDING) >= FOUND) {
	  w = sb;
	  e = indexof(w, FEMALE_ENDING);
	  s = e - 2;
	  while (!w.substr(s, s + 2 - (s)).compare("{*") == 0) {
		s--;
	  }
	  s += 2;
	  w = w.substr(s, e + 4 - (s));
	  s = indexof(w, "*");
	  while (s >= FOUND) {
		w = w.substr(0, s) + w.substr(s + 1);
		s = indexof(w, "*");
	  }
	}
	if (indexof(notFemale, "\"" + w + "\"") == NOT_FOUND) {
	  if (sf == 0) {
		tt = reduceOwn("her", tt);
	  }
	  if (sf == 1) {
		tt = reduceSelf("herself", tt);
	  }
	}
	else {
	  if ((indexof(massNouns, w) >= FOUND) || (endswith(w, ABSTRACT_ENDING))
		|| (endswith(w, "ismo")) || (endswith(w, "logio")) || (endswith(w, "igo"))
		|| (endswith(w, "igxo")) || (endswith(w, "ado"))
		|| (endswith(w, "grafio")) || (endswith(w, "materialo"))) {
		if (sf == 0) {
		  tt = reduceOwn("its", tt);
		}
		if (sf == 1) {
		  tt = reduceSelf("itself", tt);
		}
	  }
	  else {
		if (sf == 0) {
		  tt = reduceOwn("his/her/its", tt);
		}
		if (sf == 1) {
		  tt = reduceSelf("himself/herself/itself", tt);
		}
	  }
	}
  }
  else if ((indexof(sb, "*kaj*¯*C") == NOT_FOUND) && (indexof(sb, "*aux*¯*C")
	== NOT_FOUND) && (indexof(sb, "*kajaux*¯*C") == NOT_FOUND)
	&& ((tt.substr(subjekt - 1, subjekt + 10 - (subjekt - 1)).compare("{*Gxi*¯*ZIt") == 0)
	|| (tt.substr(subjekt - 1, subjekt + 10 - (subjekt - 1)).compare("{*gxi*¯*Zit") == 0))) {
	if (sf == 0) {
	  tt = reduceOwn("its", tt);
	}
	if (sf == 1) {
	  tt = reduceSelf("itself", tt);
	}
  }
  else {
	w = sb;
	e = indexof(w, NOUN_SINGULAR);
	if (e >= FOUND) {
	  s = e - 2;
	  while (!w.substr(s - 1, s + 1 - (s - 1)).compare("{*") == 0) {
		s--;
	  }
	  s += 2;
	  w = w.substr(s, e + 2 - (s));
	  s = indexof(w, "*");
	  while (s >= FOUND) {
		w = w.substr(0, s) + w.substr(s + 1);
		s = indexof(w, "*");
	  }
	  if ((indexof(massNouns, w) >= FOUND) || (endswith(w, ABSTRACT_ENDING))
		|| (endswith(w, "ismo")) || (endswith(w, "logio")) || (endswith(w, "igo"))
		|| (endswith(w, "igxo")) || (endswith(w, "ado"))
		|| (endswith(w, "grafio")) || (endswith(w, "materialo"))) {
		if (sf == 0) {
		  tt = reduceOwn("its", tt);
		}
		if (sf == 1) {
		  tt = reduceSelf("itself", tt);
		}
	  }
	  else {
		if (sf == 0) {
		  tt = reduceOwn("his/her/its", tt);
		}
		if (sf == 1) {
		  tt = reduceSelf("himself/herself/itself", tt);
		}
	  }
	}
	else {
	  if (sf == 0) {
		tt = reduceOwn("his/her/its", tt);
	  }
	  if (sf == 1) {
		tt = reduceSelf("himself/herself/itself", tt);
	  }
	}
  }
  return tt;
}

static int personTense(int subjekt, int subjektEnd) {
  // Find the person for verb conjugation
  string tt = t;
  string sb = tt.substr(subjekt, subjektEnd - (subjekt));
  if (indexof(sb, PREPOSITION) >= FOUND) {
	sb = sb.substr(0, indexof(sb, PREPOSITION) + 1);
  }
  if (!endswith(sb, "}")) {
	sb += "}";
	if (!endswith(sb, "*}")) {
	  sb = sb.substr(0, sb.length() - 1) + "*}";
	}
  }
  //out << "pt " + sb;
  if ((indexof(sb, "oj*}") >= FOUND) && (indexof(sb, PROPER_NOUN_DIVIDER)
	>= FOUND)) {
	return EITHER_PLURAL_OR_YOU_SINGULAR;
  }

  // first person singular:
  if ((indexof(sb, "*kaj*¯*C") == NOT_FOUND) && (indexof(sb, "*aux*¯*C")
	== NOT_FOUND) && (indexof(sb, "*kajaux*¯*C") == NOT_FOUND)
	&& (indexof(sb, "j*¯") == NOT_FOUND) && (indexof(sb, "ññ") == NOT_FOUND)
	&& (indexof(sb, "*aux*¯*C") == NOT_FOUND) && (indexof(sb, NOUN_SINGULAR)
	== NOT_FOUND) && (indexof(sb, "n*¯") == NOT_FOUND) && ((indexof(sb, "j*¯")
	== NOT_FOUND) || (indexof(sb, "ej*¯") >= FOUND)) && ((tt.substr(subjekt,
	subjekt + 9 - (subjekt)).compare("{*Mi*¯*ZI") == 0) || (tt.substr(subjekt, subjekt
	+ 9 - (subjekt)).compare("{*mi*¯*ZI") == 0))) {
	//out << 1;
	return FIRST_PERSON_SINGULAR;
	// third person singular:
  }
  else if ((indexof(sb, "*kaj*¯*C") == NOT_FOUND) && (indexof(sb, "*aux*¯*C")
	== NOT_FOUND) && (indexof(sb, "*kajaux*¯*C") == NOT_FOUND)
	&& ((indexof(sb, "j*¯") == NOT_FOUND) || (indexof(sb, "*Kaj*¯") >= FOUND)
	|| (indexof(sb, "ej*¯") >= FOUND)) && ((indexof(sb, NOUN_SINGULAR) >= FOUND)
	|| (indexof(sb, ADJECTIVE_SUFFIX) >= FOUND) || (indexof(sb, CORELATIVE)
	>= FOUND) || (tt.substr(subjekt, subjekt + 10 - (subjekt)).compare("{*Li*¯*ZHe") == 0)
	|| (tt.substr(subjekt, subjekt + 10 - (subjekt)).compare("{*li*¯*Zhe") == 0)
	|| (tt.substr(subjekt, subjekt + 12 - (subjekt)).compare("{*Sxi*¯*ZShe") == 0)
	|| (tt.substr(subjekt, subjekt + 12 - (subjekt)).compare("{*sxi*¯*Zshe") == 0)
	|| ((indexof(sb, "oj|*") == NOT_FOUND) && (indexof(sb, PROPER_NOUN_DIVIDER)
	>= FOUND) || (tt.substr(subjekt, subjekt + 11 - (subjekt)).compare("{*Gxi*¯*ZIt") == 0)
	|| (tt.substr(subjekt, subjekt + 11 - (subjekt)).compare("{*gxi*¯*Zit") == 0)
	|| (tt.substr(subjekt, subjekt + 12 - (subjekt)).compare("{*Oni*¯*ZOne") == 0)
	|| (tt.substr(subjekt, subjekt + 12 - (subjekt)).compare("{*oni*¯*Zone") == 0)))) {
	//out << 3;
	return THIRD_PERSON_SINGULAR;
  }
  else if ((indexof(sb, "*kaj*¯*C") == NOT_FOUND) && ((indexof(sb, "*kelk*a*¯") >= FOUND)
	|| (indexof(sb, "*Kelk*a*¯") >= FOUND) || (indexof(sb, "*cxiu*¯") >= FOUND)
	|| (indexof(sb, "*Cxiu*¯") >= FOUND) || (indexof(sb, "*iu*¯") >= FOUND)
	|| (indexof(sb, "*Iu*¯") >= FOUND) || (indexof(sb, "*neniu*¯") >= FOUND)
	|| (indexof(sb, "*Neniu*¯") >= FOUND))) {
	return THIRD_PERSON_SINGULAR;
  }
  else {
	//out << 6;
	return EITHER_PLURAL_OR_YOU_SINGULAR;
  }
}

static void subjectVerbObject() {
  // Attempt to rearrange sentence into subject-verb-object order:
  int subjekt, verb, objekt, subjektEnd, verbEnd, objektEnd, prepPhraseIndex, p, x;
  int c, d, e, y, fp, nst, pp, prepposition, s, tempWordPosition;
  string b, prefixedPhrase, adjective;
  string initialPrepPhrases[20];
  adjSubjectFound = false;
  subjektEnd = -1;
  objektEnd = -1;
  verb = -1;
  verbEnd = -1;

  // Adjust this and these:
  t = rep(t, "{|*¯*|", "{*|undefined|*¯*|");
  t = rep(t, "{|*", "{*|*");
  t = rep(t, "{*Cxi*¯*FNear|me*} {*ti*o*¯*Zthat*}",
	"{*|undefinedo|*¯*|Buxdqio*}");
  t = rep(t, "{*cxi*¯*Fnear|me*} {*ti*o*¯*Zthat*}",
	"{*|undefinedo|*¯*|Blxdqio*}");
  t = rep(t, "{*Cxi*¯*FNear|me*} {*ti*o*j*¯*Zthose*}", "{*Ti*o*j*¯*ZThese*}");
  t = rep(t, "{*cxi*¯*Fnear|me*} {*ti*o*j*¯*Zthose*}", "{*ti*o*j*¯*Zthese*}");
  x = 0;
  p = indexof(t, "{*|undefined|*¯*|", x);
  while (p >= FOUND) {
	p = indexof(t, "*}", p);
	//out << p;
	if (t.substr(p - 1, 1).compare("n") == 0) {
	  p = indexof(t, "{*|undefined|*¯*|", x);
	  if (p >= FOUND) {
		t = t.substr(0, p + 12) + "on" + t.substr(p + 12);
	  }
	}
	x = p + 2;
	p = indexof(t, "{*|undefined|*¯*|", x);
  }
  x = -1;
  p = indexof(t, "{*Cxi*¯*FNear|me*} {*tiu*¯*Athat*}");
  if (t.length() >= p + 52) {
	if (indexof(t.substr(p + 36, 16), "o*¯")
	  == NOT_FOUND) {
	  t = rep(t, "{*Cxi*¯*FNear|me*} {*tiu*¯*Athat*}",
		"{*|undefinedo|*¯*|Buxdqio*}");
	}
  }
  p = indexof(t, "{*cxi*¯*Fnear|me*} {*tiu*¯*Athat*}");
  if (t.length() >= p + 52) {
	if (indexof(t.substr(p + 36, 16), "o*¯")
	  == NOT_FOUND) {
	  t = rep(t, "{*cxi*¯*Fnear|me*} {*tiu*¯*Athat*}",
		"{*|undefinedo|*¯*|Blxdqio*}");
	}
  }
  p = indexof(t, "{*Cxi*¯*FNear|me*} {*tiuj*¯*Athose*}");
  if (t.length() >= p + 54) {
	if (indexof(t.substr(p + 38, 16), "j*¯")
	  == NOT_FOUND) {
	  t = rep(t, "{*Cxi*¯*FNear|me*} {*tiuj*¯*Athose*}",
		"{*Ti*o*j*¯*ZThese*");
	}
  }
  p = indexof(t, "{*cxi*¯*Fnear|me*} {*tiuj*¯*Athose*}");
  if (t.length() >= p + 54) {
	if (indexof(t.substr(p + 38, 16), "j*¯")
	  == NOT_FOUND) {
	  t = rep(t, "{*cxi*¯*Fnear|me*} {*tiuj*¯*Athose*}",
		"{*ti*o*j*¯*Zthese*");
	}
  }
  p = indexof(t, "*Tiu*¯*AThat*}");
  if (t.length() >= p + 33) {
	if (indexof(t.substr(p + 17, 16), "o*¯")
	  == NOT_FOUND) {
	  t = rep(t, "{*Tiu*¯*AThat*}", "{*|undefinedo|*¯*|Puxdqio*}");
	}
  }
  p = indexof(t, "{*tiu*¯*Athat*}");
  if (t.length() >= p + 33) {
	if (indexof(t.substr(p + 17, 16), "o*¯")
	  == NOT_FOUND) {
	  t = rep(t, "{*tiu*¯*Athat*}", "{*|undefinedo|*¯*|Plxdqio*}");
	}
  }
  p = indexof(t, "{*Tiuj*¯*AThose*}");
  if (t.length() >= p + 35) {
	if (indexof(t.substr(p + 19, 16), "j*¯")
	  == NOT_FOUND) {
	  t = rep(t, "{*Tiuj*¯*AThose*}", "{*Ti*o*j*¯*ZThose*");
	}
  }
  p = indexof(t, "{*tiuj*¯*Athose*}");
  if (t.length() >= p + 35) {
	if (indexof(t.substr(p + 19, 16), "j*¯")
	  == NOT_FOUND) {
	  t = rep(t, "{*tiuj*¯*Athose*}", "{*ti*o*j*¯*Zthose*");
	}
  }
  t = rep(t, "{*unu*¯*Na*} {*kaj*¯*Cand*}", "{*kaj*¯*Cand*} {*unu*¯*Na*}"); // Adjust a/an
  t = rep(t, "{*unu*¯*Nan*} {*kaj*¯*Cand*}", "{*kaj*¯*Cand*} {*unu*¯*Nan*}");
  t = rep(t, "{*Unu*¯*NA*} {*kaj*¯*Cand*}", "{*Kaj*¯*CAnd*} {*unu*¯*Na*}");
  t = rep(t, "{*Unu*¯*NAn*} {*kaj*¯*Cand*}", "{*Kaj*¯*CAnd*} {*unu*¯*Nan*}");

  p = indexof(t, "{*|undefined|*¯*"); // Mark undefined words which may be nouns:
  while (p >= FOUND) {
	if (t.length() > p + 16) {
	  if (((t.substr(indexof(t, "*}", p)).compare(NOUN_MARKER_LC) == 0)) &&
		(!(islower(t[p + 16])))) {
		t = t.substr(0, p) + "{*|undefinedo|*¯*" + t.substr(p + 16);
	  }
	}
	p = indexof(t, "{*|undefined|*¯*", p + 18);
  }
  //out << "tt:" + t;
  // Look for prefixed phrase:
  prefixedPhrase = "";
  prepPhraseIndex = 0;
  p = indexof(t, ADVERB);
  if ((p == NOT_FOUND) || ((indexof(t, ADVERB_OR_EXCLAMATION) < p)
	&& (indexof(t, ADVERB_OR_EXCLAMATION) >= FOUND))) {
	p = indexof(t, ADVERB_OR_EXCLAMATION);
  }
  if (p >= FOUND) {
	adjective = t.substr(0, indexof(t, "*}", p) + 2);
	if ((indexof(adjective, NOUN) == NOT_FOUND) && (indexof(adjective, PLURAL)
	  == NOT_FOUND) && (indexof(adjective, PRONOUN_ENDING) == NOT_FOUND)
	  && (indexof(adjective, PROPER_NOUN_DIVIDER) == NOT_FOUND)
	  && ((indexof(adjective, "n*¯*O") == NOT_FOUND)
	  || (indexof(adjective, "{*Ki*o*n*¯*O") >= FOUND)
	  || (indexof(adjective, "{*ki*o*n*¯*O") >= FOUND)
	  || (indexof(adjective, "{*Ki*o*j*n*¯*O") >= FOUND)
	  || (indexof(adjective, "{*ki*o*j*n*¯*O") >= FOUND))
	  && (indexof(adjective, "a*¯*A") == NOT_FOUND) && (indexof(adjective, "j*¯*A")
	  == NOT_FOUND) && (indexof(adjective, VERB_S_ENDING) == NOT_FOUND)
	  && (indexof(adjective, IMPERATIVE) == NOT_FOUND)) {
	  if (indexof(MARKERS, t.substr(p + 2, 1)) >= FOUND) {
		p = adjective.rfind("{*");
		fp = t.substr(0, p + 1).rfind("{*");
		if (p >= FOUND) {
		  adjective = adjective.substr(p);
		  pp = indexof(adjective, ADVERB);
		  if (pp == NOT_FOUND) {
			pp = indexof(adjective, ADVERB_OR_EXCLAMATION);
		  }
		  if (((adjective.compare("{*kaj*¯*Cand*}") == 0)
			|| (adjective.compare("{*aux*¯*Cor/either*}") == 0)
			|| (adjective.compare("{*sed*¯*Cbut*}") == 0)
			|| (adjective.compare("{*kajaux*¯*Cand/or*}") == 0)
			|| (adjective.compare("{*se*¯*Cif*}") == 0)
			|| (adjective.compare("{*Se*¯*CIf*}") == 0))) {
			p = indexof(t, ADVERB, p + 14);
			if ((p == NOT_FOUND) || ((indexof(t, ADVERB_OR_EXCLAMATION, p
			  + 16) < p) && (indexof(t, ADVERB_OR_EXCLAMATION, p + 16) >= FOUND))) {
			  p = indexof(t, ADVERB_OR_EXCLAMATION, p + 16) - 2;
			}
			if (indexof(MARKERS, t.substr(p + 2, 1)) >= FOUND) {
			  p = indexof(t, "*}", p) + 1;
			}
			else {
			  p = fp;
			  while (!t.substr(p, 2).compare("*}") == 0) {
				p--;
			  }
			  p++;
			}
		  }
		  else if ((pp >= FOUND) && (indexof(MARKERS, adjective.substr(pp
			+ 2, 1)) >= FOUND)) {
			p = indexof(t, "*}", p) + 1;
		  }
		  else {
			p = fp;
			while (!t.substr(p, 2).compare("*}") == 0) {
			  p--;
			}
			p++;
		  }
		}
		if (t.length() >= p + 2) {
		  if (t.substr(p + 1, 1).compare(",") == 0) {
			p++;
		  }
		}
		if (indexof(t.substr(p + 1), "{*") >= FOUND) {
		  prefixedPhrase = t.substr(0, p + 1);
		  t = t.substr(p + 1);
		}
	  }
	}
  }
  if ((startswith(t, " {*kaj*¯*Cand*}")) || (startswith(t, " {*Kaj*¯*CAnd*}"))
	|| (startswith(t, " {*sed*¯*Cbut*}")) || (startswith(t, " {*Sed*¯*CBut*}"))) {
	prefixedPhrase = prefixedPhrase + t.substr(0, 15);
	t = t.substr(15);
  }
  //out << "tt2:" + t;
  if ((startswith(t, " {*aux*¯*Cor/either*}"))
	|| (startswith(t, " {*Aux*¯*COr/either*}"))
	|| (startswith(t, " {*kajaux*¯*Cand/or*}"))
	|| (startswith(t, " {*Kajaux*¯*CAnd/or*}"))) {
	prefixedPhrase = prefixedPhrase + t.substr(0, 21);
	t = t.substr(21);
  }
  if ((startswith(t, " {*se*¯*Cif*}")) || (startswith(t, " {*Se*¯*CIf*}"))) {
	prefixedPhrase = prefixedPhrase + t.substr(0, 13);
	t = t.substr(13);
  }

  do {
	currentWordIndex = -1;
	nearbyWordIndex = -1;
	b = nextWord(-1);
	if (indexof(b, PREPOSITION_MARKER) >= FOUND) {
	  tempWordPosition = -1;
	  n = 1;
	  do {
		b = nextWord(n);
		if ((b.compare("{*la*¯*Athe*}") == 0) || (b.compare("{*unu*¯*Na*}") == 0)
		  || (b.compare("{*unu*¯*Nan*}") == 0) || (b.compare("{*cxi*¯*Fnear|me*}") == 0)) {
		  n++;
		  b = nextWord(n);
		}
		if (((indexof(b, ADJECTIVE_SUFFIX) >= FOUND)
		  || (indexof(b, ADJECTIVE_ACCUSATIVE_SUFFIX) >= FOUND)
		  || (indexof(b, ADJECTIVE_PLURAL_SUFFIX) >= FOUND)
		  || (indexof(b, ADJECTIVE_PLURAL_ACCUSATIVE_SUFFIX) >= FOUND)
		  || (indexof(b, ADJECTIVE_ACCUSATIVE_ORIG) >= FOUND)
		  || (indexof(b, ADJECTIVE_PLURAL_ORIG) >= FOUND)
		  || (indexof(b, ADJECTIVE_PLURAL_ACCUSATIVE_ORIG) >= FOUND)
		  || (indexof(b, ADJECTIVE_TAG) >= FOUND)) && (indexof(b, "{*kaj*¯") == NOT_FOUND)
		  || (indexof(b, NUMBER) >= FOUND) || (indexof(b, NUMBER) >= FOUND)) {
		  n++;
		  b = nextWord(n);
		}
		if (((indexof(b, ADJECTIVE_SUFFIX) >= FOUND)
		  || (indexof(b, ADJECTIVE_ACCUSATIVE_SUFFIX) >= FOUND)
		  || (indexof(b, ADJECTIVE_PLURAL_SUFFIX) >= FOUND)
		  || (indexof(b, ADJECTIVE_PLURAL_ACCUSATIVE_SUFFIX) >= FOUND)
		  || (indexof(b, ADJECTIVE_ACCUSATIVE_ORIG) >= FOUND)
		  || (indexof(b, ADJECTIVE_PLURAL_ORIG) >= FOUND)
		  || (indexof(b, ADJECTIVE_PLURAL_ACCUSATIVE_ORIG) >= FOUND)
		  || (indexof(b, ADJECTIVE_TAG) >= FOUND)) && (indexof(b, "{*kaj*¯") == NOT_FOUND)
		  || (indexof(b, NUMBER) >= FOUND) || (indexof(b, NUMBER) >= FOUND)) {
		  n++;
		  b = nextWord(n);
		}
		if ((indexof(b, NOUN_SINGULAR) >= FOUND) || (indexof(b, "o*n*¯") >= FOUND)
		  || (indexof(b, "o*j*¯") >= FOUND) || (indexof(b, "o*j*n*¯") >= FOUND)
		  || (indexof(b, NOUN_ACCUSATIVE_ENDING_ORIG) >= FOUND)
		  || (indexof(b, NOUN_PLURAL_ENDING_ORIG) >= FOUND)
		  || (indexof(b, NOUN_PLURAL_ACCUSATIVE_ENDING_ORIG) >= FOUND)
		  || ((indexof(b, PROPER_NOUN_DIVIDER) >= FOUND) && (indexof(b, PAREN)
		  == NOT_FOUND))) {
		  n++;
		  b = nextWord(n);
		  tempWordPosition = nearbyWordIndex;
		}
		n++;
	  } while ((b.compare("{*kaj*¯*Cand*}") == 0)
		|| (b.compare("{*aux*¯*Cor/either*}") == 0) || (b.compare("{*sed*¯*Cbut*}") == 0)
		|| (b.compare("{*kajaux*¯*Cand/or*}") == 0));
	  if (tempWordPosition >= 0) {
		prefixedPhrase = prefixedPhrase + t.substr(0, tempWordPosition);
		t = t.substr(tempWordPosition - 1);
	  }
	}
	//out << "pp:" + prefixedPhrase;
	//out << "tt3:" + t;
	subjekt = -1;
	// Try to change to SVO order:
	// Look for start of subject phrase:
	do {
	  subjekt = indexof(t, NOUN_SINGULAR, subjekt + 4);
	} while (isInPrepositionalPhrase(subjekt));
	if (subjekt > EXISTS) {
	  subjekt = findNonNounsEndingInO(subjekt);
	}
	p = indexof(t, NOUN_PLURAL_ENDING);
	if ((!isInPrepositionalPhrase(p)) && ((subjekt == NOT_FOUND) || ((p
	  >= FOUND) && (p < subjekt)))) {
	  subjekt = p;
	}
	p = indexof(t, NOUN_PLURAL_ENDING_ORIG);
	if ((!isInPrepositionalPhrase(p)) && ((subjekt == NOT_FOUND) || ((p
	  >= FOUND) && (p < subjekt)))) {
	  subjekt = p;
	}
	p = indexof(t, PRONOUN_ENDING);
	if ((!isInPrepositionalPhrase(p)) && ((subjekt == NOT_FOUND) || ((p
	  >= FOUND) && (p < subjekt)))) {
	  subjekt = p;
	}
	p = indexof(t, PROPER_NOUN_SINGULAR_ENDING);
	if ((!isInPrepositionalPhrase(p)) && ((subjekt == NOT_FOUND) || ((p
	  >= FOUND) && (p < subjekt)))) {
	  subjekt = p;
	}
	p = indexof(t, PROPER_NOUN_PLURAL_ENDING);
	if ((!isInPrepositionalPhrase(p)) && ((subjekt == NOT_FOUND) || ((p
	  >= FOUND) && (p < subjekt)))) {
	  subjekt = p;
	}
	c = -1;
	if (subjekt >= FOUND) {
	  c = subjekt - 4;
	  if (t.length() >= subjekt + 10) {
		if (t.substr(subjekt, 10).compare("o*¯*Oone*}") == 0) {
		  c = subjekt - 13;
		}
	  }
	  if (t.length() >= subjekt + 14) {
		if (t.substr(subjekt, 14).compare("*o*j*¯*Oones*}") == 0) {
		  c = subjekt - 13;
		}
	  }
	  if (c > 0) {
		while ((!t.substr(c, 1).compare("}") == 0) && (c > START)) {
		  c--;
		}
	  }
	  if ((c > START) && (t.substr(c + 1, 1).compare(",") == 0)) {
		d = indexof(t, "}", subjekt + 8) + 1;
		if (t.length() > d) {
		  if (indexof(SENTENCE_END_PUNCTUATION, t.substr(d, 1)) >= FOUND) {
			subjekt = -1;
		  }
		}
	  }
	  if (c > 13) {
		if ((c > 14) && (t.substr(c - 13, 14).compare(", {*unu*¯*Na*}") == 0)) {
		  d = indexof(t, "}", subjekt + 8) + 1;
		  if (t.length() > d) {
			if (indexof(SENTENCE_END_PUNCTUATION, t.substr(d, 1)) >= FOUND) {
			  subjekt = -1;
			  t = t.substr(0, c - 12) + t.substr(c + 1);
			}
		  }
		}
		else if ((c > 14) && (t.substr(c - 14, 15).compare(", {*unu*¯*Nan*}") == 0)) {
		  d = indexof(t, "}", subjekt + 8) + 1;
		  if (t.length() > d) {
			if (indexof(SENTENCE_END_PUNCTUATION, t.substr(d, 1)) >= FOUND) {
			  subjekt = -1;
			  t = t.substr(0, c - 13) + t.substr(c + 1);
			}
		  }
		}
	  }
	}
	//out << "tt4:" + t;
	if (subjekt == NOT_FOUND) { // Impersonal subject:
	  do {
		subjekt = indexof(t, ADJECTIVE_SUFFIX, subjekt + 4);
		if ((subjekt == NOT_FOUND) && (indexof(t, IMPERATIVE) == NOT_FOUND)
		  && (indexof(t, INFINITIVE) == NOT_FOUND) && (indexof(t, VERB_S_ENDING) >= FOUND)
		  && (indexof(t, PROPER_NOUN_DIVIDER) >= FOUND)) {
		  subjekt = indexof(t, PROPER_NOUN_DIVIDER);
		}
		else if ((subjekt >= c) && (indexof(t, PROPER_NOUN_DIVIDER)
		  == NOT_FOUND)) {
		  subjekt = -1;
		  break;
		}
		if (subjekt > EXISTS) {
		  if ((t.substr(subjekt - 2, 12).compare("*la*¯*Athe*}") == 0)
			|| (t.substr(subjekt - 2, 12).compare("*La*¯*AThe*}") == 0)) {
			subjekt = indexof(t, ADJECTIVE_SUFFIX,
			  subjekt + 4);
		  }
		}
	  } while (isInPrepositionalPhrase(subjekt));
	  if (subjekt > EXISTS) {
		subjekt = findNonAdjectivesEndingInA(subjekt);
	  }
	  p = indexof(t, ADJECTIVE_PLURAL);
	  if ((!isInPrepositionalPhrase(p)) && ((subjekt == NOT_FOUND) || ((p
		>= FOUND) && (p < subjekt)))) {
		subjekt = p;
		adjSubjectFound = true;
	  }
	  if ((subjekt == NOT_FOUND) && (indexof(t, IMPERATIVE) == NOT_FOUND)
		&& (indexof(t, INFINITIVE) == NOT_FOUND) && (indexof(t, VERB_S_ENDING)
		>= FOUND) && (indexof(t, PROPER_NOUN_DIVIDER) >= FOUND)) {
		subjekt = indexof(t, PROPER_NOUN_DIVIDER);
	  }
	  else if ((subjekt >= c) && (indexof(t, PROPER_NOUN_DIVIDER)
		== NOT_FOUND)) {
		subjekt = -1;
		break;
	  }
	  p = indexof(t, ADJECTIVE_PLURAL_ORIG);
	  if (p == indexof(t, "aj*¯*C")) {
		p = indexof(t, ADJECTIVE_PLURAL_ORIG, p + 5);
	  }
	  if ((!isInPrepositionalPhrase(p)) && ((subjekt == NOT_FOUND) || ((p
		>= FOUND) && (p < subjekt)))) {
		subjekt = p;
		adjSubjectFound = true;
	  }
	  p = indexof(t, CORELATIVE);
	  if ((!isInPrepositionalPhrase(p)) && ((subjekt == NOT_FOUND) || ((p
		>= FOUND) && (p < subjekt)))) {
		subjekt = p;
	  }
	  p = indexof(t, CORELATIVE_PLURAL);
	  if ((!isInPrepositionalPhrase(p)) && ((subjekt == NOT_FOUND) || ((p
		>= FOUND) && (p < subjekt)))) {
		subjekt = p;
	  }
	  p = indexof(t, NUMBER);
	  if ((!isInPrepositionalPhrase(p)) && ((subjekt == NOT_FOUND) || ((p
		>= FOUND) && (p < subjekt)))) {
		subjekt = p;
	  }
	  if (subjekt == NOT_FOUND) {
		p = indexof(t, PROPER_NOUN_DIVIDER);
		if ((indexof(t, PAREN) != p) && (!isInPrepositionalPhrase(p))
		  && ((subjekt == NOT_FOUND) || ((p >= FOUND) && (p < subjekt)))) {
		  subjekt = p;
		}
	  }
	  if ((subjekt == NOT_FOUND) && (indexof(t, IMPERATIVE) == NOT_FOUND)
		&& (indexof(t, INFINITIVE) == NOT_FOUND) && (indexof(t, VERB_S_ENDING)
		>= FOUND)) {
		// impersonal subject "it" added:
		if (!lowerall(t.substr(3, 1)).compare(t.substr(3, 1)) == 0) {
		  t = " {*Gxi*¯*ZIt*}" + t;
		  t = lower(t, 17);
		  p = indexof(t, DIVIDER, 14) + 4;
		  t = lower(t, p);
		  subjekt = 5;
		}
		else {
		  t = " {*gxi*¯*Zit*}" + t;
		  subjekt = 5;
		}
	  }
	}
	//out << "tt5:" + t;
	p = indexof(t, PROPER_NOUN_DIVIDER);
	if (indexof(t, PROPER_NOUN_ACCUSATIVE_ENDING) != p - 1) {
	  if ((indexof(t, PAREN) != p) && (!isInPrepositionalPhrase(p))
		&& ((subjekt == NOT_FOUND) || ((p >= FOUND) && (p < subjekt)))) {
		subjekt = p;
	  }
	}
	if (subjekt >= 4) {
	  c = subjekt - 4;
	  while ((!t.substr(c, 1).compare("}") == 0) && (c > START)) {
		c--;
	  }
	  if ((c > START) && (t.substr(c + 1, 1).compare(",") == 0)) {
		c = indexof(t, "}", subjekt + 8) + 1;
		if (t.length() > c) {
		  if (indexof(SENTENCE_END_PUNCTUATION, t.substr(c, 1)) >= FOUND) {
			subjekt = -1;
		  }
		}
	  }
	}

	// Look for first verb suffix:
	verb = indexof(t, PRETERITE_SUFFIX);
	if (verb == NOT_FOUND) {
	  verb = indexof(t, PRESENT_SUFFIX);
	  if (verb == NOT_FOUND) {
		verb = indexof(t, FUTURE_SUFFIX);
		if (verb == NOT_FOUND) {
		  verb = indexof(t, CONDITIONAL_SUFFIX);
		  if (verb == NOT_FOUND) {
			verb = indexof(t, VERB_S_ENDING);
			if (verb == NOT_FOUND) {
			  verb = indexof(t, IMPERATIVE);
			}
		  }
		}
	  }
	}
	//out << "tt:6" + t;
	// Look for start of direct object phrase:
	objekt = -1;
	do {
	  objekt = indexof(t, NOUN_ACCUSATIVE_ENDING, objekt + 4);
	} while (isInPrepositionalPhrase(objekt));
	p = indexof(t, NOUN_ACCUSATIVE_ENDING);
	if ((!isInPrepositionalPhrase(p)) && ((objekt == NOT_FOUND) || ((p
	  >= FOUND) && (p < objekt)))) {
	  objekt = p;
	}
	p = indexof(t, NOUN_ACCUSATIVE_ENDING_ORIG);
	if ((!isInPrepositionalPhrase(p)) && ((objekt == NOT_FOUND) || ((p
	  >= FOUND) && (p < objekt)))) {
	  objekt = p;
	}
	p = indexof(t, NOUN_PLURAL_ACCUSATIVE_ENDING);
	if ((!isInPrepositionalPhrase(p)) && ((objekt == NOT_FOUND) || ((p
	  >= FOUND) && (p < objekt)))) {
	  objekt = p;
	}
	p = indexof(t, NOUN_PLURAL_ACCUSATIVE_ENDING_ORIG);
	if ((!isInPrepositionalPhrase(p)) && ((objekt == NOT_FOUND) || ((p
	  >= FOUND) && (p < objekt)))) {
	  objekt = p;
	}
	p = indexof(t, PRONOUN_ACCUSATIVE_ENDING);
	if ((!isInPrepositionalPhrase(p)) && ((objekt == NOT_FOUND) || ((p
	  >= FOUND) && (p < objekt)))) {
	  objekt = p;
	}
	p = indexof(t, PROPER_NOUN_ACCUSATIVE_ENDING);
	if ((!isInPrepositionalPhrase(p)) && ((objekt == NOT_FOUND) || ((p
	  >= FOUND) && (p < objekt)))) {
	  objekt = p;
	}
	if (objekt == NOT_FOUND) {
	  do {
		objekt = indexof(t, ADJECTIVE_ACCUSATIVE, objekt + 4);
	  } while (isInPrepositionalPhrase(objekt));
	  p = indexof(t, ADJECTIVE_ACCUSATIVE);
	  if ((!isInPrepositionalPhrase(p)) && ((objekt == NOT_FOUND) || ((p
		>= FOUND) && (p < objekt)))) {
		objekt = p;
	  }
	  p = indexof(t, ADJECTIVE_ACCUSATIVE_ORIG);
	  if ((!isInPrepositionalPhrase(p)) && ((objekt == NOT_FOUND) || ((p
		>= FOUND) && (p < objekt)))) {
		objekt = p;
	  }
	  p = indexof(t, ADJECTIVE_PLURAL_ACCUSATIVE);
	  if ((!isInPrepositionalPhrase(p)) && ((objekt == NOT_FOUND) || ((p
		>= FOUND) && (p < objekt)))) {
		objekt = p;
	  }
	  p = indexof(t, ADJECTIVE_PLURAL_ACCUSATIVE_ORIG);
	  if ((!isInPrepositionalPhrase(p)) && ((objekt == NOT_FOUND) || ((p
		>= FOUND) && (p < objekt)))) {
		objekt = p;
	  }
	  p = indexof(t, CORELATIVE_ACCUSATIVE);
	  if ((!isInPrepositionalPhrase(p)) && ((objekt == NOT_FOUND) || ((p
		>= FOUND) && (p < objekt)))) {
		objekt = p;
	  }
	  p = indexof(t, CORELATIVE_PLURAL_ACCUSATIVE);
	  if ((!isInPrepositionalPhrase(p)) && ((objekt == NOT_FOUND) || ((p
		>= FOUND) && (p < objekt)))) {
		objekt = p;
	  }
	}
	if ((subjekt >= FOUND) && (verb >= FOUND)) {
	  p = indexof(t, PREPOSITION_MARKER);

	  do {
		if ((p >= FOUND) && (prepPhraseIndex < 15)) {
		  x = p - 2;
		  while ((!t.substr(x, 2).compare("*¯") == 0) && (x > 2)) {
			x--;
		  }
		  if (x > 2) { // Remove prepositional phrases:
			x = indexof(t, "*}", x);
			prepPhraseIndex = prepPhraseIndex + 1;
			t = t.substr(0, x) + "z#q" + hexDigits.substr(prepPhraseIndex,
			  1) + t.substr(x);
			x = indexof(t, "{*", x);
			p = indexof(t, "*}", p + 4);
			p = indexof(t, "*¯", p + 4);
			if (p >= FOUND) {
			  while (!((t.substr(p - 1, 5).compare(PRONOUN_ENDING) == 0)
				|| (t.substr(p - 2, 6).compare(PRONOUN_ACCUSATIVE_ENDING) == 0)
				|| (t.substr(p - 1, 1).compare(NOUN_MARKER_LC) == 0)
				|| (t.substr(p - 1, 3).compare("|*¯") == 0) || (t.substr(p
				- 2, 2).compare("on") == 0) || (t.substr(p - 3, 3).compare("o*n") == 0)
				|| (t.substr(p - 3, 3).compare("o*j") == 0) || (t.substr(p
				- 2, 2).compare("oj") == 0) || (t.substr(p - 5, 5).compare("o*j*n") == 0)
				|| (t.substr(p - 3, 3).compare("ojn") == 0) || (t.substr(p
				- 2, 2).compare("*i") == 0) || (t.substr(p - 2, 6).compare(CORELATIVE) == 0))) {
				p = indexof(t, "*¯", p + 9);
				if (p == NOT_FOUND) {
				  break;
				}
			  }
			  if (p >= FOUND) {
				p = indexof(t, "*}", p + 4);
				initialPrepPhrases[prepPhraseIndex] = t.substr(x - 1, p + 2 - (x - 1));
				if (t.substr(x - 7, 7).compare(" ¬¬¯¯¬ ") == 0) {
				  initialPrepPhrases[prepPhraseIndex] = " ¬¬¯¯¬ "
					+ initialPrepPhrases[prepPhraseIndex];
				  t = t.substr(0, x - 7) + t.substr(p + 2);
				}
				else {
				  t = t.substr(0, x - 1) + t.substr(p + 2);
				}
				if (t.substr(x - 2, 1).compare(",") == 0) {
				  initialPrepPhrases[prepPhraseIndex] = ","
					+ initialPrepPhrases[prepPhraseIndex];
				  t = t.substr(0, x - 2) + t.substr(x - 1);
				}
				if (subjekt > x) {
				  subjekt = subjekt - p + x + 1;
				}
				if (objekt > x) {
				  objekt = objekt - p + x + 1;
				}
				if ((verb > x) && (verb - p + x + 1 >= 0)) {
				  verb = verb - p
					+ x + 1;
				}
				p = NOT_FOUND;
				if ((x >= FOUND) && (t.length() > x + 4)) {
				  p = indexof(t, PREPOSITION_MARKER, x + 4);
			    }
			  }
			}
		  }
		}
	  } while ((p >= FOUND) && (prepPhraseIndex < 15) && (x > 2));

	  if (objekt > 4) {
		if ((indexof(t.substr(objekt - 5, 10), "{*ki*") >= FOUND)
		  || (indexof(t.substr(objekt - 5, 10), "{*Ki*") >= FOUND)) {
		  objekt = indexof(t, "{", objekt) - 2;
		  prefixedPhrase = prefixedPhrase + t.substr(0, objekt + 1);
		  t = t.substr(objekt + 1);
		  if (indexof(t, "akeobj*") == NOT_FOUND) {
			t = " {*qpxikon*¯*Ofakeobj*}" + t; // Add fake direct object
		  }
		  if (t.length() > 26) {
			if (!(islower(t[26]))) {
			  t = lower(t, 26);
			  t = lower(t, p);
			  if (indexof(t, "akeobj*") == NOT_FOUND) {
				t = " {*Qpxikon*¯*OFakeobj*}" + t.substr(23);
			  }
			}
		  }
		  subjekt += 23 - objekt;
		  if (verb >= 0) {
			verb += 23 - objekt;
		  }
		  objekt = 8;
		}
	  }

	  if (objekt == NOT_FOUND) {
		if (indexof(t, "akeobj*") == NOT_FOUND) {
		  t = " {*qpxikon*¯*Ofakeobj*}" + t;
		}
		if (t.length() > 26) {
		  if (!(islower(t[26]))) {
			//t = lower(t, 26);
			p = indexof(t, "¯*", 28) + 3;
			//t = lower(t, p);
			if (indexof(t, "akeobj*") == NOT_FOUND) {
			  t = " {*Qpxikon*¯*OFakeobj*}" + t.substr(23);
			}
		  }
		}
		objekt = 8;
		subjekt += 23;
		if (verb >= 0) {
		  verb += 23;
		}
	  }
	  p = indexof(t, PREPOSITION_MARKER);
	  if ((p >= FOUND) && (p < subjekt)) {
		break;
	  }
	  if ((p >= FOUND) && (p < objekt)) {
		break;
	  }
	  if ((p >= FOUND) && (p < verb)) {
		break;
	  }
	  currentWordIndex = -1;
	  nearbyWordIndex = -1;
	  b = nextWord(-1);
	  do {
		if (verb == NOT_FOUND) {
		  t = " {*kun*¯*Pwqqw*} " + prefixedPhrase + t;
		  //out << "nv:" + t;
		  // SVO order:
		}
		else if ((subjekt < verb) && (verb < objekt)) {
		  //out << "svo" + subjekt;
		  nst = 1;
		  prepposition = indexof(t, PREPOSITION_MARKER);
		  if ((prepposition >= FOUND) && (prepposition < objekt)) {
			break;
		  }
		  if (prepposition == NOT_FOUND) {
			prepposition = t.length();
		  }
		  else {
			while (!t.substr(prepposition, 2).compare("{*") == 0) {
			  prepposition--;
			}
		  }
		  subjektEnd = subjekt;
		  objektEnd = objekt;
		  verbEnd = verb;
		  p = indexof(t, NOUN_SINGULAR, subjektEnd + 5);
		  if (p > EXISTS) {
			p = findNonNounsEndingInO(p);
		  }
		  while ((p >= FOUND) && (p < verb) && (p > subjektEnd)) {
			subjektEnd = p;
			p = indexof(t, NOUN_SINGULAR, subjektEnd + 5);
			if (p > EXISTS) {
			  p = findNonNounsEndingInO(p);
			}
		  }
		  // Look for end of subject phrase:
		  subjektEnd = findPhraseEnd(subjektEnd, verb, NOUN_PLURAL_ENDING);
		  subjektEnd = findPhraseEnd(subjektEnd, verb, NOUN_PLURAL_ENDING_ORIG);
		  subjektEnd = findPhraseEnd(subjektEnd, verb, PRONOUN_ENDING);
		  subjektEnd = findPhraseEnd(subjektEnd, verb,
			PROPER_NOUN_SINGULAR_ENDING);
		  subjektEnd = findPhraseEnd(subjektEnd, verb, PROPER_NOUN_PLURAL_ENDING);
		  subjektEnd = findPhraseEnd(subjektEnd, verb, PROPER_NOUN_DIVIDER_AMBIG);
		  subjektEnd = findPhraseEnd(subjektEnd, verb, NUMBER);
		  while (!t.substr(subjekt, 2).compare("{*") == 0) {
			subjekt--;
		  }
		  while (!t.substr(subjektEnd, 2).compare("*}") == 0) {
			subjektEnd++;
		  }
		  subjektEnd++;
		  if (objekt == verb) {
			objekt = verbEnd + 2;
			objektEnd = indexof(t, "*}", objekt) + 1;
			t = t.substr(0, subjektEnd + 2) + t.substr(verb, verbEnd + 1 - verb) +
			  " {*qpxikon*¯*Ofakeobj*}" + t.substr(verbEnd + 1);
		  }
		  //out << "subjekt" + subjekt;
		  //out << "subjektEnd" + subjektEnd;
		  //out << "verb" + verb;
		  //out << "verbEnd" + verbEnd;
		  //out << "objekt" + objekt;
		  //out << "objektEnd" + objektEnd;
		  //out << "svo" + t;
		  // SOV order:
		}
		else if ((subjekt < objekt) && (objekt < verb)) {
		  //out << "sov" + subjekt;
		  nst = 1;
		  subjektEnd = subjekt;
		  objektEnd = objekt;
		  verbEnd = verb;
		  p = indexof(t, NOUN_SINGULAR, subjektEnd + 5);
		  if (p > EXISTS) {
			p = findNonNounsEndingInO(p);
		  }
		  while ((p >= FOUND) && (p < objekt) && (p > subjektEnd)) {
			subjektEnd = p;
			p = indexof(t, NOUN_SINGULAR, subjektEnd + 5);
			if (p > EXISTS) {
			  p = findNonNounsEndingInO(p);
			}
		  }
		  subjektEnd = findPhraseEnd(subjektEnd, objekt, NOUN_PLURAL_ENDING);
		  subjektEnd = findPhraseEnd(subjektEnd, objekt, NOUN_PLURAL_ENDING_ORIG);
		  subjektEnd = findPhraseEnd(subjektEnd, objekt, PRONOUN_ENDING);
		  subjektEnd = findPhraseEnd(subjektEnd, objekt,
			PROPER_NOUN_SINGULAR_ENDING);
		  subjektEnd = findPhraseEnd(subjektEnd, objekt,
			PROPER_NOUN_PLURAL_ENDING);
		  subjektEnd = findPhraseEnd(subjektEnd, objekt, PROPER_NOUN_DIVIDER_AMBIG);
		  subjektEnd = findPhraseEnd(subjektEnd, objekt, NUMBER);
		  objektEnd = findPhraseEnd(objektEnd, verb, NOUN_ACCUSATIVE_ENDING);
		  objektEnd = findPhraseEnd(objektEnd, verb, NOUN_ACCUSATIVE_ENDING_ORIG);
		  objektEnd = findPhraseEnd(objektEnd, verb,
			NOUN_PLURAL_ACCUSATIVE_ENDING);
		  objektEnd = findPhraseEnd(objektEnd, verb,
			NOUN_PLURAL_ACCUSATIVE_ENDING_ORIG);
		  objektEnd = findPhraseEnd(objektEnd, verb,
			PRONOUN_ACCUSATIVE_ENDING);
		  objektEnd = findPhraseEnd(objektEnd, verb,
			PROPER_NOUN_ACCUSATIVE_ENDING);
		  prepposition = indexof(t, PREPOSITION_MARKER);
		  if ((prepposition >= FOUND) && (prepposition < objekt)) {
			break;
		  }
		  if (prepposition == NOT_FOUND) {
			prepposition = t.length();
		  }
		  else {
			while (!t.substr(prepposition, 2).compare("{*") == 0) {
			  prepposition--;
			}
		  }
		  while (!t.substr(subjekt, 2).compare("{*") == 0) {
			subjekt--;
		  }
		  while (!t.substr(objekt, 2).compare("{*") == 0) {
			objekt--;
		  }
		  while (!t.substr(verb, 2).compare("{*") == 0) {
			verb--;
		  }
		  while (!t.substr(subjektEnd, 2).compare("*}") == 0) {
			subjektEnd++;
		  }
		  subjektEnd++;
		  while (!t.substr(objektEnd, 2).compare("*}") == 0) {
			objektEnd++;
		  }
		  objektEnd++;
		  while (!t.substr(verbEnd, 2).compare("*}") == 0) {
			verbEnd++;
		  }
		  verbEnd++;
		  n = nst;
		  while ((nearbyWordIndex < verbEnd) && (b.length() != 0)) {
			n++;
			b = nextWord(n);
		  }
		  x = verbPosition(n);
		  if (x == NOT_FOUND) {
			break;
		  }
		  while ((!t.substr(nearbyWordIndex + x, 2).compare("*}") == 0) && (nearbyWordIndex + x < t.length() - 1)) {
			x++;
		  }
		  verbEnd = nearbyWordIndex + x + 1;
		  string adverbPhrase = "{*jam*¯*Falready*} {*ne*¯*Fnot/no*} ";
		  do {
			if (nearbyWordIndex >= adverbPhrase.length()) {
			  if (t.substr(nearbyWordIndex - adverbPhrase.length(),
				adverbPhrase.length()).compare(adverbPhrase) == 0) {
				nearbyWordIndex -= adverbPhrase.length();
				x += adverbPhrase.length();
				break;
			  }
			}
			adverbPhrase += " ";
			if (nearbyWordIndex >= adverbPhrase.length()) {
			  if (t.substr(nearbyWordIndex - adverbPhrase.length(),
				adverbPhrase.length()).compare(adverbPhrase) == 0) {
				nearbyWordIndex -= adverbPhrase.length();
				x += adverbPhrase.length();
				break;
			  }
			}

			adverbPhrase = "{*ne*¯*Fnot/no*} ";
			if (nearbyWordIndex >= adverbPhrase.length()) {
			  if (t.substr(nearbyWordIndex - adverbPhrase.length(),
				adverbPhrase.length()).compare(adverbPhrase) == 0) {
				nearbyWordIndex -= adverbPhrase.length();
				x += adverbPhrase.length();
				break;
			  }
			}
			adverbPhrase += " ";
			if (nearbyWordIndex >= adverbPhrase.length()) {
			  if (t.substr(nearbyWordIndex - adverbPhrase.length(),
				adverbPhrase.length()).compare(adverbPhrase) == 0) {
				nearbyWordIndex -= adverbPhrase.length();
				x += adverbPhrase.length();
				break;
			  }
			}
		  } while (false);
		  x += 2;
		  if (x < 0) {
			x = 0;
		  }
		  if (objektEnd + 1 < subjektEnd + 2) {
			objektEnd = subjektEnd + 1;
		  }
		  if (verb > 16) {
			if (lowerall(t.substr(verb - 17, 16)).compare("{*ne*¯*fnot/no*}") == 0) {
			  verb -= 17;
			}
		  }
		  if (verbEnd < verb) {
			verbEnd = t.rfind("*}") + 2;
		  }

		  //out << "subjekt" + subjekt;
		  //out << "subjektEnd" + subjektEnd;
		  //out << "verb" + verb;
		  //out << "verbEnd" + verbEnd;
		  //out << "objekt" + objekt;
		  //out << "objektEnd" + objektEnd;
		  //out << "sov" + t;
		  if (objekt == verb) {
			objekt = verbEnd + 2;
			objektEnd = indexof(t, "*}", objekt) + 1;
			t = t.substr(0, subjektEnd + 2) + t.substr(verb, verbEnd + 1 - verb) +
			  " {*qpxikon*¯*Ofakeobj*}" + t.substr(verbEnd + 1);
		  }
		  else {
			t = prefixedPhrase + t.substr(0, subjektEnd + 1) + t.substr(verb, verbEnd - verb) +
			  " " + t.substr(objekt, objektEnd + 1 - objekt) + t.substr(verbEnd);
		  }
		  //           t = prefixedPhrase + t.substr(0, subjektEnd + 1) + 
		  //             t.substr(nearbyWordIndex - 1, x + 1) + " " + 
		  //             t.substr(subjektEnd + 2, objektEnd + 1 - (subjektEnd + 2)) + t.substing(verbEnd + 1);
		  // VOS order:
		}
		else if ((verb < objekt) && (objekt < subjekt) && (verb >= 0)) {
		  //out << "vos" + subjekt;
		  nst = 0;
		  prepposition = indexof(t, PREPOSITION_MARKER);
		  if ((prepposition >= FOUND) && (prepposition < subjekt)) {
			break;
		  }
		  if (prepposition == NOT_FOUND) {
			prepposition = t.length();
		  }
		  else {
			while (!t.substr(prepposition, 2).compare("{*") == 0) {
			  prepposition--;
			}
		  }
		  subjektEnd = subjekt;
		  objektEnd = objekt;
		  verbEnd = verb;
		  p = indexof(t, NOUN_SINGULAR, subjektEnd + 5);
		  if (p > EXISTS) {
			p = findNonNounsEndingInO(p);
		  }
		  while ((p >= FOUND) && (p < prepposition) && (p > subjektEnd)) {
			subjektEnd = p;
			p = indexof(t, NOUN_SINGULAR, subjektEnd + 5);
			if (p > EXISTS) {
			  p = findNonNounsEndingInO(p);
			}
		  }
		  subjektEnd = findPhraseEnd(subjektEnd, prepposition,
			NOUN_PLURAL_ENDING);
		  subjektEnd = findPhraseEnd(subjektEnd, prepposition,
			NOUN_PLURAL_ENDING_ORIG);
		  subjektEnd = findPhraseEnd(subjektEnd, prepposition,
			PRONOUN_ENDING);
		  subjektEnd = findPhraseEnd(subjektEnd, prepposition,
			PROPER_NOUN_SINGULAR_ENDING);
		  subjektEnd = findPhraseEnd(subjektEnd, prepposition,
			PROPER_NOUN_PLURAL_ENDING);
		  subjektEnd = findPhraseEnd(subjektEnd, prepposition, PROPER_NOUN_DIVIDER_AMBIG);
		  subjektEnd = findPhraseEnd(subjektEnd, prepposition, NUMBER);
		  if ((prepposition >= FOUND) && (prepposition < subjekt)) {
			break;
		  }
		  objektEnd = findPhraseEnd(objektEnd, subjekt, NOUN_ACCUSATIVE_ENDING);
		  objektEnd = findPhraseEnd(objektEnd, subjekt,
			NOUN_ACCUSATIVE_ENDING_ORIG);
		  objektEnd = findPhraseEnd(objektEnd, subjekt,
			NOUN_PLURAL_ACCUSATIVE_ENDING);
		  objektEnd = findPhraseEnd(objektEnd, subjekt,
			NOUN_PLURAL_ACCUSATIVE_ENDING_ORIG);
		  objektEnd = findPhraseEnd(objektEnd, subjekt,
			PRONOUN_ACCUSATIVE_ENDING);
		  objektEnd = findPhraseEnd(objektEnd, subjekt,
			PROPER_NOUN_ACCUSATIVE_ENDING);
		  while (!t.substr(subjekt, 2).compare("{*") == 0) {
			subjekt--;
		  }
		  while (!t.substr(objekt, 2).compare("{*") == 0) {
			objekt--;
		  }
		  while (!t.substr(verb, 2).compare("{*") == 0) {
			verb--;
		  }
		  while (!t.substr(subjektEnd, 2).compare("*}") == 0) {
			subjektEnd++;
		  }
		  subjektEnd++;
		  while (!t.substr(objektEnd, 2).compare("*}") == 0) {
			objektEnd++;
		  }
		  objektEnd++;
		  while (!t.substr(verbEnd, 2).compare("*}") == 0) {
			verbEnd++;
		  }
		  verbEnd++;
		  n = nst;
		  while ((nearbyWordIndex < verbEnd) && (b.length() != 0)) {
			n++;
			b = nextWord(n);
		  }
		  x = verbPosition(n);
		  if (x == NOT_FOUND) {
			break;
		  }
		  while ((!t.substr(nearbyWordIndex + x, 2).compare("*}") == 0) && (nearbyWordIndex + x < t.length() - 1)) {
			x++;
		  }
		  verbEnd = nearbyWordIndex + x + 1;
		  do {
			if (nearbyWordIndex >= 36) {
			  if ((t.substr(nearbyWordIndex - 36,
				36).compare("{*Jam*¯*FAlready*} {*ne*¯*Fnot/no*} ") == 0)
				|| (t.substr(nearbyWordIndex - 36,
				36).compare("{*jam*¯*Falready*} {*ne*¯*Fnot/no*} ") == 0)) {
				nearbyWordIndex -= 36;
				x += 36;
				break;
			  }
			}
			if (nearbyWordIndex >= 37) {
			  if ((t.substr(nearbyWordIndex - 37,
				37).compare("{*Jam*¯*FAlready*} {*ne*¯*Fnot/no*}  ") == 0)
				|| (t.substr(nearbyWordIndex - 37, 37)
				.compare("{*jam*¯*Falready*} {*ne*¯*Fnot/no*}  ") == 0)) {
				nearbyWordIndex -= 37;
				x += 37;
				break;
			  }
			}
			if (nearbyWordIndex >= 17) {
			  if ((t.substr(nearbyWordIndex - 17,
				17).compare("{*Ne*¯*FNot/no*} ") == 0)
				|| (t.substr(nearbyWordIndex - 17,
				17).compare("{*ne*¯*Fnot/no*} ") == 0)) {
				nearbyWordIndex -= 17;
				x += 17;
				break;
			  }
			}
			if (nearbyWordIndex >= 18) {
			  if ((t.substr(nearbyWordIndex - 18,
				18).compare("{*Ne*¯*FNot/no*}  ") == 0)
				|| (t.substr(nearbyWordIndex - 18,
				18).compare("{*ne*¯*Fnot/no*}  ") == 0)) {
				nearbyWordIndex -= 18;
				x += 18;
				break;
			  }
			}
		  } while (false);
		  x += 2;
		  if (t.length() > 3) {
			if (!(islower(t[3]))) {
			  t = lower(t, 3);
			  y = indexof(t, "*¯") + 4;
			  t = lower(t, y);
			  t = upper(t, objektEnd + 4);
			  y = indexof(t, "*¯", objektEnd + 5) + 4;
			  if (!t.substr(y - 1, 1).compare("|") == 0) {
				t = upper(t, y);
			  }
			}
		  }
		  if (verb > 16) {
			if (lowerall(t.substr(verb - 17, 16)).compare("{*ne*¯*fnot/no*}") == 0) {
			  verb -= 17;
			}
		  }
		  //out << "subjekt" + subjekt;
		  //out << "subjektEnd" + subjektEnd;
		  //out << "verb" + verb;
		  //out << "verbEnd" + verbEnd;
		  //out << "objekt" + objekt;
		  //out << "objektEnd" + objektEnd;
		  //out << "vos" + t;
		  t = prefixedPhrase + t.substr(objektEnd + 1, subjektEnd + 1 - (objektEnd + 1))
			+ t.substr(nearbyWordIndex - 1, x + 1) + " "
			+ t.substr(verbEnd + 2, objektEnd + 1 - (verbEnd + 2)) + t.substr(subjektEnd + 1);
		  // OVS order:
		}
		else if ((objekt < verb) && (verb < subjekt)) {
		  //out << "ovs" + subjekt;
		  nst = 1;
		  prepposition = indexof(t, PREPOSITION_MARKER);
		  if ((prepposition >= FOUND) && (prepposition < subjekt)) {
			break;
		  }
		  if (prepposition == NOT_FOUND) {
			prepposition = t.length();
		  }
		  else {
			while (!t.substr(prepposition, 2).compare("{*") == 0) {
			  prepposition--;
			}
		  }
		  subjektEnd = subjekt;
		  objektEnd = objekt;
		  verbEnd = verb;
		  p = indexof(t, NOUN_SINGULAR, subjektEnd + 5);
		  if (p > EXISTS) {
			p = findNonNounsEndingInO(p);
		  }
		  while ((p >= FOUND) && (p < prepposition) && (p > subjektEnd)) {
			subjektEnd = p;
			p = indexof(t, NOUN_SINGULAR, subjektEnd + 5);
			if (p > EXISTS) {
			  p = findNonNounsEndingInO(p);
			}
		  }
		  subjektEnd = findPhraseEnd(subjektEnd, prepposition, NOUN_PLURAL_ENDING);
		  subjektEnd = findPhraseEnd(subjektEnd, prepposition,
			NOUN_PLURAL_ENDING_ORIG);
		  subjektEnd = findPhraseEnd(subjektEnd, prepposition, PRONOUN_ENDING);
		  subjektEnd = findPhraseEnd(subjektEnd, prepposition,
			PROPER_NOUN_SINGULAR_ENDING);
		  subjektEnd = findPhraseEnd(subjektEnd, prepposition,
			PROPER_NOUN_PLURAL_ENDING);
		  subjektEnd = findPhraseEnd(subjektEnd, prepposition, PROPER_NOUN_DIVIDER_AMBIG);
		  subjektEnd = findPhraseEnd(subjektEnd, prepposition, NUMBER);
		  if ((prepposition >= FOUND) && (prepposition < subjekt)) {
			break;
		  }
		  objektEnd = findPhraseEnd(objektEnd, verb, NOUN_ACCUSATIVE_ENDING);
		  objektEnd = findPhraseEnd(objektEnd, verb, NOUN_ACCUSATIVE_ENDING_ORIG);
		  objektEnd = findPhraseEnd(objektEnd, verb,
			NOUN_PLURAL_ACCUSATIVE_ENDING);
		  objektEnd = findPhraseEnd(objektEnd, verb,
			NOUN_PLURAL_ACCUSATIVE_ENDING_ORIG);
		  objektEnd = findPhraseEnd(objektEnd, verb,
			PRONOUN_ACCUSATIVE_ENDING);
		  objektEnd = findPhraseEnd(objektEnd, verb,
			PROPER_NOUN_ACCUSATIVE_ENDING);
		  while (!t.substr(subjekt, 2).compare("{*") == 0) {
			subjekt--;
		  }
		  while (!t.substr(objekt, 2).compare("{*") == 0) {
			objekt--;
		  }
		  while (!t.substr(verb, 2).compare("{*") == 0) {
			verb--;
		  }
		  while (!t.substr(subjektEnd, 2).compare("*}") == 0) {
			subjektEnd++;
		  }
		  subjektEnd++;
		  while (!t.substr(objektEnd, 2).compare("*}") == 0) {
			objektEnd++;
		  }
		  objektEnd++;
		  while (!t.substr(verbEnd, 2).compare("*}") == 0) {
			verbEnd++;
		  }
		  verbEnd++;
		  n = nst;
		  while ((nearbyWordIndex < verbEnd) && (b.length() != 0)) {
			n++;
			b = nextWord(n);
		  }
		  x = verbPosition(n);
		  if (x == NOT_FOUND) {
			break;
		  }
		  while ((!t.substr(nearbyWordIndex + x, 2).compare("*}") == 0) && (nearbyWordIndex + x < t.length() - 1)) {
			x++;
		  }
		  verbEnd = nearbyWordIndex + x + 1;
		  do {
			if (nearbyWordIndex >= 36) {
			  if (t.substr(nearbyWordIndex - 36,
				36).compare("{*jam*¯*Falready*} {*ne*¯*Fnot/no*} ") == 0) {
				nearbyWordIndex -= 36;
				x += 36;
				break;
			  }
			}
			if (nearbyWordIndex >= 37) {
			  if (t.substr(nearbyWordIndex - 37,
				37).compare("{*jam*¯*Falready*} {*ne*¯*Fnot/no*}  ") == 0) {
				nearbyWordIndex -= 37;
				x += 37;
				break;
			  }
			}
			if (nearbyWordIndex >= 17) {
			  if (t.substr(nearbyWordIndex - 17,
				17).compare("{*ne*¯*Fnot/no*} ") == 0) {
				nearbyWordIndex -= 17;
				x += 17;
				break;
			  }
			}
			if (nearbyWordIndex >= 18) {
			  if (t.substr(nearbyWordIndex - 18,
				18).compare("{*ne*¯*Fnot/no*}  ") == 0) {
				nearbyWordIndex -= 18;
				x += 18;
				break;
			  }
			}
		  } while (false);
		  x += 2;
		  if (t.length() > 3) {
			if (!(islower(t[3]))) {
			  t = lower(t, 3);
			  y = indexof(t, "*¯", 1) + 4;
			  t = lower(t, y);
			  t = upper(t, verbEnd + 4);
			  y = indexof(t, "*¯", verbEnd + 5) + 4;
			  if (!t.substr(y - 1, 1).compare("|") == 0) {
				t = upper(t, y);
			  }
			}
		  }
		  if (verb > 16) {
			if (lowerall(t.substr(verb - 17, 16)).compare("{*ne*¯*fnot/no*}") == 0) {
			  verb -= 17;
			}
		  }
		  if (verbEnd < verb) {
			verbEnd = subjekt - 1;
		  }
		  //out << "subjekt" + subjekt;
		  //out << "subjektEnd" + subjektEnd;
		  //out << "verb" + verb;
		  //out << "verbEnd" + verbEnd;
		  //out << "objekt" + objekt;
		  //out << "objektEnd" + objektEnd;
		  //out << "ovs" + t;
		  if (indexof(t.substr(1, objektEnd), "|*¯*|") >= FOUND) {
			t = prefixedPhrase + t.substr(subjekt, subjektEnd + 1 - (subjekt))
			  + lower(t.substr(verb - 1, subjekt - (verb - 1)), t.substr(verb - 1,
			  subjekt - (verb - 1)).rfind(DIV) + 3) + upper(t.substr(1, objektEnd),
			  t.substr(1, objektEnd).rfind(DIV) + 3)
			  + t.substr(subjektEnd + 1);
		  }
		  else {
			t = prefixedPhrase + t.substr(subjekt, subjektEnd + 1 - subjekt)
			  + lower(t.substr(verb - 1, subjekt - (verb - 1)), t.substr(verb - 1,
			  subjekt - (verb - 1)).rfind(DIV) + 3) + lower(t.substr(1, objektEnd),
			  t.substr(1, objektEnd).rfind(DIV) + 3)
			  + t.substr(subjektEnd + 1);
		  }
		  /*t = prefixedPhrase + t.substr(verbEnd + 1, subjektEnd - verbEn)) +
		  t.substr(nearbyWordIndex - 1, x + 1) + " " +
		  t.substr(1, objektEnd) + t.substr(subjektEnd + 1); */

		  // OSV order:
		}
		else if ((objekt < subjekt) && (subjekt < verb)) {
		  //out << "osv" + t;
		  nst = 1;
		  subjektEnd = subjekt;
		  objektEnd = objekt;
		  verbEnd = verb;
		  p = indexof(t, NOUN_SINGULAR, subjektEnd + 5);
		  if (p > EXISTS) {
			p = findNonNounsEndingInO(p);
		  }
		  while ((p >= FOUND) && (p < verb) && (p > subjektEnd)) {
			subjektEnd = p;
			p = indexof(t, NOUN_SINGULAR, subjektEnd + 5);
			if (p > EXISTS) {
			  p = findNonNounsEndingInO(p);
			}
		  }
		  subjektEnd = findPhraseEnd(subjektEnd, verb, NOUN_PLURAL_ENDING);
		  subjektEnd = findPhraseEnd(subjektEnd, verb, NOUN_PLURAL_ENDING_ORIG);
		  subjektEnd = findPhraseEnd(subjektEnd, verb, PRONOUN_ENDING);
		  subjektEnd = findPhraseEnd(subjektEnd, verb,
			PROPER_NOUN_SINGULAR_ENDING);
		  subjektEnd = findPhraseEnd(subjektEnd, verb, PROPER_NOUN_PLURAL_ENDING);
		  subjektEnd = findPhraseEnd(subjektEnd, verb, PROPER_NOUN_DIVIDER_AMBIG);
		  subjektEnd = findPhraseEnd(subjektEnd, verb, NUMBER);
		  objektEnd = findPhraseEnd(objektEnd, subjekt, NOUN_ACCUSATIVE_ENDING);
		  objektEnd = findPhraseEnd(objektEnd, subjekt,
			NOUN_ACCUSATIVE_ENDING_ORIG);
		  objektEnd = findPhraseEnd(objektEnd, subjekt,
			NOUN_PLURAL_ACCUSATIVE_ENDING);
		  objektEnd = findPhraseEnd(objektEnd, subjekt,
			NOUN_PLURAL_ACCUSATIVE_ENDING_ORIG);
		  objektEnd = findPhraseEnd(objektEnd, subjekt, PRONOUN_ACCUSATIVE_ENDING);
		  objektEnd = findPhraseEnd(objektEnd, subjekt,
			PROPER_NOUN_ACCUSATIVE_ENDING);
		  prepposition = indexof(t, PREPOSITION_MARKER);
		  if ((prepposition >= FOUND) && (prepposition < subjekt)) {
			break;
		  }
		  if (prepposition == NOT_FOUND) {
			prepposition = t.length();
		  }
		  else {
			while (!t.substr(prepposition, 2).compare("{*") == 0) {
			  prepposition--;
			}
		  }
		  while ((subjekt > 0) && (!t.substr(subjekt, 2).compare("{*") == 0)) {
			subjekt--;
		  }
		  while ((objekt > 0) && (!t.substr(objekt, 2).compare("{*") == 0)) {
			objekt--;
		  }
		  if (!(t.length() < verb + 2)) {
			while (!t.substr(verb, 2).compare("{*") == 0) {
			  verb--;
			}
		  }
		  while (!t.substr(subjektEnd, 2).compare("*}") == 0) {
			subjektEnd++;
		  }
		  subjektEnd++;
		  if (objektEnd > 0) {
			while (!t.substr(objektEnd, 2).compare("*}") == 0) {
			  objektEnd++;
			}
		  }
		  objektEnd++;
		  subjekt = objektEnd + 2;
		  if (!(t.length() < verbEnd + 2)) {
			while ((!t.substr(verbEnd,
			  2).compare("*}") == 0) && (!(t.length() < verbEnd + 2))) {
			  verbEnd++;
			}
		  }
		  verbEnd++;
		  n = nst;
		  while ((nearbyWordIndex < verbEnd) && (b.length() != 0)) {
			n++;
			b = nextWord(n);
		  }
		  x = verbPosition(n);
		  if (x == NOT_FOUND) {
			break;
		  }
		  while ((!t.substr(nearbyWordIndex + x, 2).compare("*}") == 0) && (nearbyWordIndex + x < t.length() - 1)) {
			x++;
		  }
		  verbEnd = nearbyWordIndex + x + 1;
		  if (verbEnd < verb) {
			verbEnd = findPhraseEnd(verb, t.length(), "*¯*I");
			verbEnd = indexof(t, "*}", verbEnd) + 2;
		  }
		  do {
			if (nearbyWordIndex >= 36) {
			  if (t.substr(nearbyWordIndex - 36,
				36).compare("{*jam*¯*Falready*} {*ne*¯*Fnot/no*} ") == 0) {
				nearbyWordIndex -= 36;
				x += 36;
				break;
			  }
			}
			if (nearbyWordIndex >= 37) {
			  if (t.substr(nearbyWordIndex - 37,
				37).compare("{*jam*¯*Falready*} {*ne*¯*Fnot/no*}  ") == 0) {
				nearbyWordIndex -= 37;
				x += 37;
				break;
			  }
			}
			if (nearbyWordIndex >= 17) {
			  if (t.substr(nearbyWordIndex - 17,
				17).compare("{*ne*¯*Fnot/no*} ") == 0) {
				nearbyWordIndex -= 17;
				x += 17;
				break;
			  }
			}
			if (nearbyWordIndex >= 18) {
			  if (t.substr(nearbyWordIndex - 18,
				18).compare("{*ne*¯*Fnot/no*}  ") == 0) {
				nearbyWordIndex -= 18;
				x += 18;
				break;
			  }
			}
		  } while (false);
		  x += nearbyWordIndex - subjektEnd - 2;
		  nearbyWordIndex = subjektEnd + 2;
		  x += 2;
		  if (t.length() > 3) {
			if (!(islower(t[3]))) {
			  t = lower(t, 3);
			  y = indexof(t, "*¯", 1) + 4;
			  t = lower(t, y);
			  if (objektEnd + 3 >= 0) {
				t = upper(t, objektEnd + 4);
			  }
			  y = indexof(t, "*¯", objektEnd + 5) + 4;
			  if (!t.substr(y - 1, 1).compare("|") == 0) {
				t = upper(t, y);
			  }
			}
		  }

		  if (x < 0) {
			x = -1;
		  }
		  if (verb > 16) {
			if (lowerall(t.substr(verb - 17, 16)).compare("{*ne*¯*fnot/no*}") == 0) {
			  verb -= 17;
			}
		  }
		  //out << "subjekt" + subjekt;
		  //out << "subjektEnd" + subjektEnd;
		  //out << "verb" + verb;
		  //out << "verbEnd" + verbEnd;
		  //out << "objekt" + objekt;
		  //out << "objektEnd" + objektEnd;
		  //out << "osv" + t;
		  t = prefixedPhrase + t.substr(objektEnd + 1, verb - 1 - (objektEnd + 1))
			+ " " + t.substr(verb, verbEnd - verb) + " " + t.substr(1, objektEnd)
			+ " " + t.substr(verbEnd);
		  //out << "5284:" + t;
		  /* t = prefixedPhrase + t.substr(objektEnd + 1, subjektEnd - (objektEnd)) +
		  t.substr(nearbyWordIndex - 1, x + 1) + " " +
		  t.substr(verb, verbEnd - verb) + " " + t.substr(1, objektEnd)  + " " +
		  t.substr(verbEnd + 1); */

		  // VSO order:
		}
		else if ((verb < subjekt) && (subjekt < objekt)) {

		  //out << "vso" + subjekt;
		  nst = 0;
		  prepposition = indexof(t, PREPOSITION_MARKER);
		  if ((prepposition >= FOUND) && (prepposition < objekt)) {
			break;
		  }
		  if (prepposition == NOT_FOUND) {
			prepposition = t.length();
		  }
		  else {
			while (!t.substr(prepposition, 2).compare("{*") == 0) {
			  prepposition--;
			}
		  }
		  subjektEnd = subjekt;
		  objektEnd = objekt;
		  verbEnd = verb;
		  p = indexof(t, NOUN_SINGULAR, subjektEnd + 5);
		  if (p > EXISTS) {
			p = findNonNounsEndingInO(p);
		  }
		  while ((p >= FOUND) && (p < objekt) && (p > subjektEnd)) {
			subjektEnd = p;
			p = indexof(t, NOUN_SINGULAR, subjektEnd + 5);
			if (p > EXISTS) {
			  p = findNonNounsEndingInO(p);
			}
		  }
		  subjektEnd = findPhraseEnd(subjektEnd, objekt, NOUN_PLURAL_ENDING);
		  subjektEnd = findPhraseEnd(subjektEnd, objekt, NOUN_PLURAL_ENDING_ORIG);
		  subjektEnd = findPhraseEnd(subjektEnd, objekt, PRONOUN_ENDING);
		  subjektEnd = findPhraseEnd(subjektEnd, objekt,
			PROPER_NOUN_SINGULAR_ENDING);
		  subjektEnd = findPhraseEnd(subjektEnd, objekt,
			PROPER_NOUN_PLURAL_ENDING);
		  subjektEnd = findPhraseEnd(subjektEnd, objekt, PROPER_NOUN_DIVIDER_AMBIG);
		  subjektEnd = findPhraseEnd(subjektEnd, objekt, NUMBER);
		  objektEnd = findPhraseEnd(objektEnd, prepposition,
			NOUN_ACCUSATIVE_ENDING);
		  objektEnd = findPhraseEnd(objektEnd, prepposition,
			NOUN_ACCUSATIVE_ENDING_ORIG);
		  objektEnd = findPhraseEnd(objektEnd, prepposition,
			NOUN_PLURAL_ACCUSATIVE_ENDING);
		  objektEnd = findPhraseEnd(objektEnd, prepposition,
			NOUN_PLURAL_ACCUSATIVE_ENDING_ORIG);
		  objektEnd = findPhraseEnd(objektEnd, prepposition,
			PRONOUN_ACCUSATIVE_ENDING);
		  objektEnd = findPhraseEnd(objektEnd, prepposition,
			PROPER_NOUN_ACCUSATIVE_ENDING);
		  while (!t.substr(subjekt, 2).compare("{*") == 0) {
			subjekt--;
		  }
		  while (!t.substr(objekt, 2).compare("{*") == 0) {
			objekt--;
		  }
		  while (!t.substr(verb, 2).compare("{*") == 0) {
			verb--;
		  }
		  while (!t.substr(subjektEnd, 2).compare("*}") == 0) {
			subjektEnd++;
		  }
		  subjektEnd++;
		  while (!t.substr(objektEnd, 2).compare("*}") == 0) {
			objektEnd++;
		  }
		  objektEnd++;
		  while (!t.substr(verbEnd, 2).compare("*}") == 0) {
			verbEnd++;
		  }
		  verbEnd++;
		  n = nst;
		  while ((nearbyWordIndex < verbEnd) && (b.length() != 0)) {
			n++;
			b = nextWord(n);
		  }
		  x = verbPosition(n);
		  if (x == NOT_FOUND) {
			break;
		  }
		  while ((!t.substr(nearbyWordIndex + x, 2).compare("*}") == 0) && (nearbyWordIndex + x < t.length() - 1)) {
			x++;
		  }
		  verbEnd = nearbyWordIndex + x + 1;
		  do {
			if (nearbyWordIndex >= 36) {
			  if ((t.substr(nearbyWordIndex - 36,
				36).compare("{*Jam*¯*FAlready*} {*ne*¯*Fnot/no*} ") == 0)
				|| (t.substr(nearbyWordIndex - 36,
				36).compare("{*jam*¯*Falready*} {*ne*¯*Fnot/no*} ") == 0)) {
				nearbyWordIndex -= 36;
				x += 36;
				break;
			  }
			}
			if (nearbyWordIndex >= 37) {
			  if ((t.substr(nearbyWordIndex - 37,
				37).compare("{*Jam*¯*FAlready*} {*ne*¯*Fnot/no*}  ") == 0)
				|| (t.substr(nearbyWordIndex - 37,
				37).compare("{*jam*¯*Falready*} {*ne*¯*Fnot/no*}  ") == 0)) {
				nearbyWordIndex -= 37;
				x += 37;
				break;
			  }
			}
			if (nearbyWordIndex >= 17) {
			  if ((t.substr(nearbyWordIndex - 17,
				17).compare("{*Ne*¯*FNot/no*} ") == 0)
				|| (t.substr(nearbyWordIndex - 17,
				17).compare("{*ne*¯*Fnot/no*} ") == 0)) {
				nearbyWordIndex -= 17;
				x += 17;
				break;
			  }
			}
			if (nearbyWordIndex >= 18) {
			  if ((t.substr(nearbyWordIndex - 18,
				18).compare("{*Ne*¯*FNot/no*}  ") == 0)
				|| (t.substr(nearbyWordIndex - 18,
				18).compare("{*ne*¯*Fnot/no*}  ") == 0)) {
				nearbyWordIndex -= 18;
				x += 18;
				break;
			  }
			}
		  } while (false);
		  x += 2;
		  if (t.length() > 3) {
			if (!(islower(t[3]))) {
			  t = lower(t, 3);
			  y = indexof(t, "*¯") + 4;
			  t = lower(t, y);
			  t = upper(t, verbEnd + 4);
			  y = indexof(t, "*¯", verbEnd + 5) + 4;
			  if (!t.substr(y - 1, 1).compare("|") == 0) {
				t = upper(t, y - 1);
			  }
			}
		  }
		  if (verb > 16) {
			if (lowerall(t.substr(verb - 17, 16)).compare("{*ne*¯*fnot/no*}") == 0) {
			  verb -= 17;
			}
		  }
		  //out << "subjekt" + subjekt;
		  //out << "subjektEnd" + subjektEnd;
		  //out << "verb" + verb;
		  //out << "verbEnd" + verbEnd;
		  //out << "objekt" + objekt;
		  //out << "objektEnd" + objektEnd;
		  //out << "vso" + t;
		  t = prefixedPhrase + t.substr(verbEnd + 1, subjektEnd - verbEnd)
			+ t.substr(nearbyWordIndex - 1, x + 1) + " "
			+ t.substr(subjektEnd + 2, objektEnd + 1 - (subjektEnd + 2))
			+ t.substr(objektEnd + 1);
		}
		else {
		  //out << "5440:" + t;
		  t = prefixedPhrase + t;

		}
	  } while (false);
	}
  } while (false);
  //out << "tt7:" + t;
  if ((subjekt >= FOUND) && (verb >= FOUND)) {
	currentWordIndex = -1;
	nearbyWordIndex = -1;
	b = nextWord(-1);
	if (indexof(b, PREPOSITION_MARKER) >= FOUND) {
	  tempWordPosition = -1;
	  n = 1;
	  do {
		b = nextWord(n);
		if ((b.compare("{*la*¯*Athe*}") == 0) || (b.compare("{*unu*¯*Na*}") == 0)
		  || (b.compare("{*unu*¯*Nan*}") == 0) || (b.compare("{*cxi*¯*Fnear|me*}") == 0)) {
		  n++;
		  b = nextWord(n);
		}
		if (((indexof(b, ADJECTIVE_SUFFIX) >= FOUND)
		  || (indexof(b, ADJECTIVE_ACCUSATIVE_SUFFIX) >= FOUND)
		  || (indexof(b, ADJECTIVE_PLURAL_SUFFIX) >= FOUND)
		  || (indexof(b, ADJECTIVE_PLURAL_ACCUSATIVE_SUFFIX) >= FOUND)
		  || (indexof(b, ADJECTIVE_ACCUSATIVE_ORIG) >= FOUND)
		  || (indexof(b, ADJECTIVE_PLURAL_ORIG) >= FOUND)
		  || (indexof(b, ADJECTIVE_PLURAL_ACCUSATIVE_ORIG) >= FOUND)
		  || (indexof(b, ADJECTIVE_TAG) >= FOUND)) && (indexof(b, "{*kaj*¯") == NOT_FOUND)) {
		  n++;
		  b = nextWord(n);
		}
		if (((indexof(b, ADJECTIVE_SUFFIX) >= FOUND)
		  || (indexof(b, ADJECTIVE_ACCUSATIVE_SUFFIX) >= FOUND)
		  || (indexof(b, ADJECTIVE_PLURAL_SUFFIX) >= FOUND)
		  || (indexof(b, ADJECTIVE_PLURAL_ACCUSATIVE_SUFFIX) >= FOUND)
		  || (indexof(b, ADJECTIVE_ACCUSATIVE_ORIG) >= FOUND)
		  || (indexof(b, ADJECTIVE_PLURAL_ORIG) >= FOUND)
		  || (indexof(b, ADJECTIVE_PLURAL_ACCUSATIVE_ORIG) >= FOUND)
		  || (indexof(b, ADJECTIVE_TAG) >= FOUND)) && (indexof(b, "{*kaj*¯") == NOT_FOUND)) {
		  n++;
		  b = nextWord(n);
		}
		if ((indexof(b, NOUN_SINGULAR) >= FOUND) || (indexof(b, "o*n*¯") >= FOUND)
		  || (indexof(b, "o*j*¯") >= FOUND) || (indexof(b, "o*j*n*¯") >= FOUND)
		  || (indexof(b, NOUN_ACCUSATIVE_ENDING_ORIG) >= FOUND)
		  || (indexof(b, NOUN_PLURAL_ENDING_ORIG) >= FOUND)
		  || (indexof(b, NOUN_PLURAL_ACCUSATIVE_ENDING_ORIG) >= FOUND)
		  || ((indexof(b, PROPER_NOUN_DIVIDER) >= FOUND) && (indexof(b, PAREN) == NOT_FOUND))) {
		  n++;
		  b = nextWord(n);
		  tempWordPosition = nearbyWordIndex;
		}
		n++;
	  } while ((b.compare("{*kaj*¯*Cand*}") == 0)
		|| (b.compare("{*aux*¯*Cor/either*}") == 0) || (b.compare("{*sed*¯*Cbut*}") == 0)
		|| (b.compare("{*kajaux*¯*Cand/or*}") == 0));
	  if (tempWordPosition >= 0) {
		prefixedPhrase = prefixedPhrase + t.substr(0, tempWordPosition - 2);
		t = t.substr(tempWordPosition - 1);
	  }
	}
	//out << "tt8:" + t;
	subjekt = -1;
	do {
	  subjekt = indexof(t, NOUN_SINGULAR, subjekt + 4);
	} while (isInPrepositionalPhrase(subjekt));
	if (subjekt > EXISTS) {
	  subjekt = findNonNounsEndingInO(subjekt);
	}
	subjekt = findPhraseStart(subjekt, NOUN_PLURAL_ENDING);
	subjekt = findPhraseStart(subjekt, NOUN_PLURAL_ENDING_ORIG);
	subjekt = findPhraseStart(subjekt, PRONOUN_ENDING);
	subjekt = findPhraseStart(subjekt, PROPER_NOUN_DIVIDER);
	subjekt = findPhraseStart(subjekt, PROPER_NOUN_PLURAL_ENDING);
	if (subjekt == NOT_FOUND) {
	  p = indexof(t, PROPER_NOUN_DIVIDER);
	  if ((indexof(t, PAREN) != p) && (!isInPrepositionalPhrase(p))
		&& ((subjekt == NOT_FOUND) || ((p >= FOUND) && (p < subjekt)))) {
		subjekt = p;
	  }
	}
	if (subjekt == NOT_FOUND) {
	  do {
		subjekt = indexof(t, ADJECTIVE_SUFFIX, subjekt + 4);
		if (subjekt > EXISTS) {
		  if ((t.substr(subjekt - 2, 12).compare("*la*¯*Athe*}") == 0)
			|| (t.substr(subjekt - 2, 12).compare("*La*¯*AThe*}") == 0)) {
			subjekt = indexof(t, ADJECTIVE_SUFFIX, subjekt + 4);
		  }
		}
	  } while (isInPrepositionalPhrase(subjekt));
	  if (subjekt > EXISTS) {
		subjekt = findNonAdjectivesEndingInA(subjekt);
	  }
	  subjekt = findPhraseStart(subjekt, ADJECTIVE_PLURAL);
	  p = indexof(t, ADJECTIVE_PLURAL_ORIG);
	  if (p == indexof(t, "aj*¯*C")) {
		p = indexof(t, ADJECTIVE_PLURAL_ORIG, p + 5);
	  }
	  subjekt = findPhraseStart(subjekt, ADJECTIVE_PLURAL_ORIG);
	  subjekt = findPhraseStart(subjekt, CORELATIVE);
	  subjekt = findPhraseStart(subjekt, "Iu*¯*A");
	  subjekt = findPhraseStart(subjekt, "iuj*¯*A");
	}
	/* verb = (-1 != (verb = indexof(t, PRETERITE_SUFFIX)) ? verb :
	(-1 != (verb = indexof(t, PRESENT_SUFFIX)) ? verb : (-1 !=
	(verb = indexof(t, FUTURE_SUFFIX)) ? verb : (-1 != (verb =
	indexof(t, CONDITIONAL_SUFFIX)) ? verb : (-1 != (verb =
	indexof(t, VERB_S_ENDING)) ? verb:indexof(t, IMPERATIVE))))));
	// This one line above is the equivalent of this paragraph: */
	verb = indexof(t, PRETERITE_SUFFIX); // Equivalent above
	if (verb == NOT_FOUND) {
	  verb = indexof(t, PRESENT_SUFFIX);
	  if (verb == NOT_FOUND) {
		verb = indexof(t, FUTURE_SUFFIX);
		if (verb == NOT_FOUND) {
		  verb = indexof(t, CONDITIONAL_SUFFIX);
		  if (verb == NOT_FOUND) {
			verb = indexof(t, VERB_S_ENDING);
			if (verb == NOT_FOUND) {
			  verb = indexof(t, IMPERATIVE);
			}
		  }
		}
	  }
	}

	objekt = -1;
	do {
	  objekt = indexof(t, NOUN_ACCUSATIVE_ENDING, objekt + 4);
	} while (isInPrepositionalPhrase(objekt));
	objekt = findPhraseStart(objekt, NOUN_ACCUSATIVE_ENDING);
	objekt = findPhraseStart(objekt, NOUN_ACCUSATIVE_ENDING_ORIG);
	objekt = findPhraseStart(objekt, NOUN_PLURAL_ACCUSATIVE_ENDING);
	objekt = findPhraseStart(objekt, NOUN_PLURAL_ACCUSATIVE_ENDING_ORIG);
	objekt = findPhraseStart(objekt, PRONOUN_ACCUSATIVE_ENDING);
	objekt = findPhraseStart(objekt, PROPER_NOUN_ACCUSATIVE_ENDING);
	if (objekt == NOT_FOUND) {
	  do {
		objekt = indexof(t, ADJECTIVE_ACCUSATIVE, objekt + 4);
	  } while (isInPrepositionalPhrase(objekt));
	  objekt = findPhraseStart(objekt, ADJECTIVE_ACCUSATIVE);
	  objekt = findPhraseStart(objekt, ADJECTIVE_ACCUSATIVE_ORIG);
	  objekt = findPhraseStart(objekt, ADJECTIVE_PLURAL_ACCUSATIVE);
	  objekt = findPhraseStart(objekt, ADJECTIVE_PLURAL_ACCUSATIVE_ORIG);
	  objekt = findPhraseStart(objekt, CORELATIVE_ACCUSATIVE);
	  objekt = findPhraseStart(objekt, CORELATIVE_PLURAL_ACCUSATIVE);
	}
	nst = 1;
	prepposition = indexof(t, PREPOSITION_MARKER);
	if (prepposition == NOT_FOUND) {
	  prepposition = t.length();
	}
	else {
	  while (!t.substr(prepposition, 2).compare("{*") == 0) {
		prepposition--;
	  }
	}
	subjektEnd = subjekt;
	objektEnd = objekt;
	verbEnd = verb;
	p = indexof(t, NOUN_SINGULAR, subjektEnd + 5);
	if (p > EXISTS) {
	  p = findNonNounsEndingInO(p);
	}
	while ((p >= FOUND) && (p < verb) && (p > subjektEnd)) {
	  subjektEnd = p;
	  p = indexof(t, NOUN_SINGULAR, subjektEnd + 5);
	  if (p > EXISTS) {
		p = findNonNounsEndingInO(p);
	  }
	}
	subjektEnd = findPhraseEnd(subjektEnd, verb, NOUN_PLURAL_ENDING);
	subjektEnd = findPhraseEnd(subjektEnd, verb, NOUN_PLURAL_ENDING_ORIG);
	subjektEnd = findPhraseEnd(subjektEnd, verb, PRONOUN_ENDING);
	subjektEnd = findPhraseEnd(subjektEnd, verb, PROPER_NOUN_DIVIDER);
	subjektEnd = findPhraseEnd(subjektEnd, verb, PROPER_NOUN_PLURAL_ENDING);
	subjektEnd = findPhraseEnd(subjektEnd, verb, NUMBER);
	if ((subjekt >= FOUND) && (subjektEnd >= FOUND)) {
	  while (!t.substr(subjekt, subjekt + 2 - subjekt).compare("{*") == 0) {
		subjekt--;
	  }
	  while (!t.substr(subjektEnd, subjektEnd + 2 - subjektEnd).compare("*}") == 0) {
		subjektEnd++;
	  }
	  subjektEnd++;
	  t = reduceSiaOwn(subjekt, subjektEnd, 0);
	  t = reduceSiaOwn(subjekt, subjektEnd, 1);
	  verb = personTense(subjekt, subjektEnd);
	  //out << "pt:" + verb;
	  verbPerson = verb;
	  /* if ((verb == 4) && (subjektEnd < 20) && (t.substr(0,
	  subjektEnd).find("j*¯") == NOT_FOUND)) verb = THIRD_PERSON_SINGULAR; */
	  if ((prefixedPhrase.length() > 0) && (prefixedPhrase.substr(0,
		(int)(prefixedPhrase.length()/2)).compare(prefixedPhrase.substr(
		(int)(prefixedPhrase.length()/2) + 1)) == 0)) {
		prefixedPhrase = prefixedPhrase.substr(0, (int)(prefixedPhrase.length()/2));
	  }
	  //out << "k" + t;
	  //out << "m" + prefixedPhrase;
	  t = prefixedPhrase + t;
	  p = indexof(t, "{*qpxikon*¯*Ofakeobj*}");
	  if (p >= FOUND) {
		t = t.substr(0, p - 1) + t.substr(p + 22);
	  }
	  p = indexof(t, "{*Qpxikon*¯*OFakeobj*}");
	  if (p >= FOUND) {
		t = t.substr(0, p - 1) + t.substr(p + 22);
	  }
	  if (prepPhraseIndex > 0) { // Restore prepositional phrases:
		for (x = prepPhraseIndex; x >= 1; x--) {
		  p = indexof(t, "z#q" + hexDigits.substr(x, 1));
		  e = 2;
		  if (t.substr(p + 4, 1).compare("s") == 0) {
			e = 3;
		  }
		  if (t.substr(p + 4, 2).compare("es") == 0) {
			e = 4;
		  }
		  if (t.substr(p + 4, 2).compare("z#") == 0) {
			e = 6;
		  }
		  if (p >= FOUND) {
			t = t.substr(0, p) + t.substr(p + 4, e) + initialPrepPhrases[x] + t.substr(p + 4 + e);
		  }
		}
		prepPhraseIndex = 0;
	  }
	  //out << "tt9:" + t;

	  // Fix personal verb forms of can, to be, do and have
	  if (verb == EITHER_PLURAL_OR_YOU_SINGULAR) {
		t = rep(t, "doesn't", "don't");
		t = rep(t, "hasn't", "haven't");
		t = rep(t, "isn't", "aren't");
		t = rep(t, "¯*Iis*}", "¯*Iare*}");
		t = rep(t, "¯*IIs*}", "¯*IAre*}");
		t = rep(t, "¯*Iwas*}", "¯*Iwere*}");
		t = rep(t, "¯*IWas*}", "¯*IWere*}");
		t = rep(t, "¯*Ihas*}", "¯*Ihave*}");
		t = rep(t, "¯*IHas*}", "¯*IHave*}");
		t = rep(t, "¯*Icans*}", "¯*Ican*}");
		t = rep(t, "¯*ICans*}", "¯*ICan*}");
	  }
	  else if (verb == FIRST_PERSON_SINGULAR) {
		t = rep(t, "¯*Iises*}", "¯*Iis*}");
		t = rep(t, "¯*IIses*}", "¯*IIs*}");
		t = rep(t, "¯*Iare*}", "¯*Iam*}");
		t = rep(t, "¯*IAre*}", "¯*IAm*}");
		t = rep(t, "¯*Iis*}", "¯*Iam*}");
		t = rep(t, "¯*IIs*}", "¯*IAm*}");
		t = rep(t, "¯*Iwere*}", "¯*Iwas*}");
		t = rep(t, "¯*IWere*}", "¯*IWas*}");
		t = rep(t, "¯*Ihas*}", "¯*Ihave*}");
		t = rep(t, "¯*IHas*}", "¯*IHave*}");
		t = rep(t, "¯*Icans*}", "¯*Ican*}");
		t = rep(t, "¯*ICans*}", "¯*ICan*}");
		t = rep(t, "doesn't", "don't");
		t = rep(t, "hasn't", "haven't");
		t = rep(t, "isn't", "am|not");
		t = rep(t, "aren't", "am|not");
	  }
	  else if ((verb == THIRD_PERSON_SINGULAR) || (verb == 0)) {
		t = rep(t, "¯*Iises*}", "¯*Iis*}");
		t = rep(t, "¯*IIses*}", "¯*IIs*}");
		t = rep(t, "¯*Iare*}", "¯*Iis*}");
		t = rep(t, "¯*IAre*}", "¯*IIs*}");
		t = rep(t, "¯*Iwere*}", "¯*Iwas*}");
		t = rep(t, "¯*IWere*}", "¯*IWas*}");
		t = rep(t, "¯*Icans*}", "¯*Ican*}");
		t = rep(t, "¯*ICans*}", "¯*ICan*}");
		t = rep(t, "¯*Iaren't*}", "¯*Iisn't*}");
		t = rep(t, "¯*IHave*}", "¯*IHas*}");
		t = rep(t, "¯*Ihave*}", "¯*Ihas*}");
		t = rep(t, "¯*IDo*}", "¯*IDoes*}");
		t = rep(t, "¯*Ido*}", "¯*Idoes*}");
		t = rep(t, "¯*Idon't*}", "¯*Idoesn't*}");
		t = rep(t, "¯*Ihaven't*}", "¯*Ihasn't*}");
		if (verb == THIRD_PERSON_SINGULAR) { // Adjust -self
		  if ((indexof(t, "{*li*¯") >= FOUND) || (indexof(t, "{*Li*¯") >= FOUND)) {
			t = rep(t, "himself/herself", "himself");
			t = rep(t, "his/her|own", "his|own");
		  }
		  else if ((indexof(t, "{*sxi*¯") >= FOUND) || (indexof(t, "{*Sxi*¯") >= FOUND)) {
			t = rep(t, "himself/herself", "herself");
			t = rep(t, "his/her|own", "her|own");
		  }
		}
		e = indexof(t, PRESENT_SUFFIX);
		if (e == NOT_FOUND) {
		  e = indexof(t, VERB_AS_ENDING);
		}
		while (e >= FOUND) {
		  s = e - 2;
		  while (!t.substr(s, 2).compare("{*") == 0) {
			s--;
		  }
		  e = indexof(t, "*}", e) + 1;
		  b = t.substr(s, e + 1 - s);
		  e = b.length() - 1;
		  p = indexof(b, "*}");
		  b = b.substr(0, p) + "/" + b.substr(p);
		  p = indexof(b, "/");
		  if (s > 7) {
			if (!t.substr(s - 8, 8).compare("ot/no*} ") == 0) {
			  if (indexof(b, NEGATIVE_ENGLISH_CONTRACTION) == NOT_FOUND) {
				while (p >= FOUND) { // Adjust verb endings
				  do {
					b = b.substr(0, p) + "s" + b.substr(p);
					if (p > 0) {
					  if (b.substr(p - 1, 2).compare(FUTURE) == 0) {
						b = b.substr(0, p) + "e" + b.substr(p);
					  }
					  if (b.substr(p - 1, 2).compare("ys") == 0) {
						b = b.substr(0, p - 1) + "ie" + b.substr(p); // ys > ies
						p++;
					  }
					}
					// But not after vowels:
					if (p > 2) {
					  if (indexof((fs = " aies eies oies uies "), " " + b.substr(p - 3, 4) + " ") >= FOUND) {
						b = b.substr(0, p - 2) + "y" + b.substr(p);
						break;
					  }
					}
					if (p > 0) {
					  if (indexof((fs = " ss zs xs js "), " " + b.substr(p - 1, 2)
						+ " ") >= FOUND) {
						b = b.substr(0, p) + "e" + b.substr(p);
						break;
					  }
					}
					if (p > 1) {
					  if (indexof((fs = " shs chs zhs "), " " + b.substr(p - 2, 3)
						+ " ") >= FOUND) {
						b = b.substr(0, p) + "e" + b.substr(p);
						break;
					  }
					  if (b.substr(p - 2, 3).compare("dgs") == 0) {
						b = b.substr(0, p) + "e" + b.substr(p);
						break;
					  }
					}
				  } while (false);
				  p = indexof(b, "/", p + 4);
				}
			  }
			}
		  }
		  p = indexof(b, "/*}");
		  b = b.substr(0, p) + b.substr(p + 1);
		  t = t.substr(0, s) + b + t.substr(s + e);
		  e = indexof(t, PRESENT_SUFFIX, s + e);
		  if ((indexof(t.substr(0, e + 1), "{*kaj*¯*Cand*}") == NOT_FOUND)
			&& (indexof(t.substr(0, e + 1), "{*aqq*¯*Cor/either*}") == NOT_FOUND)
			&& (indexof(t.substr(0, e + 1), "{*kajaqq*¯*Cand/or*}") == NOT_FOUND) &&
			(indexof(t.substr(0, e + 1), "{*sed*¯*Cbut*}") == NOT_FOUND) &&
			(indexof(t.substr(0, e + 1), ", ") == NOT_FOUND)) {
			break;
		  }
		  if (indexof(t.substr(0, e + 1), "{*ki*") > verbEnd) {
			break;
		  }
		}
		// Fix verb forms:
		rgx = "¯\\*I(is|Is|has|Has)es\\*\\}";
		t = regex_replace(t, rgx, "¯*I$1*}");
		rgx = "¯\\*I(were|Were|have|Have|are|Are)s\\*\\}";
		t = regex_replace(t, rgx, "¯*I$1*}");
		rgx = "¯\\*I(can|Can|am|Am)s\\*\\}";
		t = regex_replace(t, rgx, "¯*I$1*}");
		t = rep(t, "don't", "doesn't");
		t = rep(t, "haven't", "hasn't");
		t = rep(t, "aren't", "isn't");
	  }
	}
  }
  //out << "tt10:" + t;
  if (!indexof(t, prefixedPhrase) >= FOUND) {
	t = prefixedPhrase + t; // Restore prefixed phrase
  }
  if (t.length() > 20) {
	int hp = 0;
	while (t.substr(hp, 1).compare(" ") == 0) {
	  hp++;
	}
	//out << "tt10.5:" + t;
	// Correct duplicated prefixed phrase:
	string toRemove = "";
	int len = 20;
	if (len > t.length()) len = t.length();
	if (t.rfind(t.substr(hp, len)) != hp) {
	  while (t.rfind(t.substr(hp, len)) != hp) {
		toRemove = t.substr(hp, len);
		len++;
		if (hp + len > t.length()) break;
	  }
	  //out << "tt11:" + t;
	  if (!indexof(t.substr(hp, len - 1), "akexsub") >= FOUND) t = t.substr(0, hp) + t.substr(hp + len - 1);
	}
	while (indexof(t.substr(0, 2), "  ") >= FOUND) {
	  t = t.substr(1);
	}
  }
  //out << "tt11:" + t;
  if (prepPhraseIndex > 0) { // Restore prepositional phrases:
	for (x = prepPhraseIndex; x >= 1; x--) {
	  p = indexof(t, "z#q" + hexDigits.substr(x, 1));
	  e = 2;
	  if (t.substr(p + 4, 1).compare("s") == 0) {
		e = 3;
	  }
	  if (t.substr(p + 4, 2).compare("es") == 0) {
		e = 4;
	  }
	  if (t.substr(p + 4, 2).compare("z#") == 0) {
		e = 6;
	  }
	  if (p >= FOUND) {
		t = t.substr(0, p) + t.substr(p + 4, e)
		  + initialPrepPhrases[x] + t.substr(p + 4 + e);
	  }
	}
  }
}

static string adjustHaveDo(string c) {
  // Put make verb after obj pronoun: I had him RUN. Unreliable as meanings vary:
  string tt = t;
  p = indexof(tt, "oqk)|make*} " + c);
  y = 0;
  if (p == NOT_FOUND) {
	p = indexof(tt, "oqk)|made*} " + c);
	if (p == NOT_FOUND) {
	  p = indexof(tt, "oqk)|makes*} " + c);
	  y = 1;
	  if (p == NOT_FOUND) {
		p = indexof(tt, "oqk)|maked*} " + c);
		if (p == NOT_FOUND) {
		  p = indexof(tt, "oqk)|making*} " + c);
		  y = 2;
		}
	  }
	}
  }
  if (p >= FOUND) {
	do {
	  x = p - 1;
	  while (!tt.substr(x, 1).compare("(") == 0) {
		x--;
	  }
	  if (tt.substr(x - 4, 2).compare("kx") == 0) {
		tt = tt.substr(0, x) + tt.substr(x + 1);
		x -= 5;
		while (!tt.substr(x, 2).compare("Q-") == 0) {
		  x--;
		}
		tt = tt.substr(0, x) + "Ihav" + tt.substr(p + 7, y + 4
		  + c.length()) + " {*xx*¯*" + tt.substr(x, p - 1 - x) + "*}"
		  + tt.substr(p + y + 11 + c.length());
		if (indexof(tt, PRETERITE_SUFFIX) >= FOUND) {
		  p = indexof(tt, "Ihav");
		  tt = tt.substr(0) + "had" + tt.substr(p + 5);
		}
	  }
	  else {
		tt = tt.substr(0, x) + "hav" + tt.substr(p + 8, y + 4 +
		  c.length()) + " {*xx*¯*" + tt.substr(x, p - x) + "*}" + tt.substr(p + y +
		  11 + c.length());
		if (indexof(tt, PRETERITE_SUFFIX) >= FOUND) {
		  p = indexof(tt, "hav");
		  tt = tt.substr(0) + "had" + tt.substr(p + 4);
		}
	  }
	  p = indexof(tt, "oqk)|make*} " + c);
	  y = 0;
	  if (p == NOT_FOUND) {
		p = indexof(tt, "oqk)|made*} " + c);
		if (p == NOT_FOUND) {
		  p = indexof(tt, "oqk)|makes*} " + c);
		  y = 1;
		  if (p == NOT_FOUND) {
			p = indexof(tt, "oqk)|maked*} " + c);
			if (p == NOT_FOUND) {
			  p = indexof(tt, "oqk)|making*} " + c);
			  y = 2;
			}
		  }
		}
	  }
	} while (p >= FOUND);
  }
  return tt;
}

static void addSuffix(int p) {
  // Add -er(s) suffix
  string c = "";
  if ((indexof(esperantoConsonants, t.substr(p - 1, 1)) >= FOUND)
	&& (indexof(VOWELS, t.substr(p - 2, 1)) >= FOUND)
	&& (indexof(VOWELS, t.substr(p - 3, 1)) == NOT_FOUND)) {
	c = t.substr(p - 1, 1);
	if (c.compare("c") == 0) {
	  c = "k";
	}
	t = t.substr(0, p) + c + t.substr(p + 1);
  }
  else if (t.substr(p - 1, 1).compare("e") == 0) {
	t = t.substr(0, p - 1) + t.substr(p + 1);
  }
  else {
	if ((t.substr(p - 1, 1).compare("y") == 0) && (indexof(consonants, t.substr(p - 2, 1)) >= FOUND)) {
	  t = t.substr(0, p - 1) + "i" + t.substr(p);
	}
	t = t.substr(0, p) + t.substr(p + 1);
  }
}

static void addMake(string s) {
  //  Arrange to have done
  int p = indexof(t, ")|mak" + s);
  if (p >= FOUND) {
	do {
	  x = p - 1;
	  while (!t.substr(x, 1).compare(DIV) == 0) {
		x--;
	  }
	  if (indexof(t.substr(x + 5, p - x), "oqk") == NOT_FOUND) {
		break;
	  }
	  t = t.substr(0, p + 2) + "arrang" + s + "|to|have" + t.substr(p
		+ s.length() + 5);
	  p = indexof(t, ")|mak" + s);
	} while (p >= FOUND);
  }
}

static void deBy(string s) {
  // _de_ indicating agent > _by_
  int p = indexof(t, s);
  if (p >= FOUND) {
	int y;
	do {
	  y = indexof(t, "{*de*¯*Pof/from*}");
	  if (y == NOT_FOUND) {
		break;
	  }
	  if (y - p > 91) {
		break;
	  }
	  if (indexof(t.substr(p, y - p), ".") >= FOUND) {
		break;
	  }
	  if (indexof(t.substr(p, y - p), "?") >= FOUND) {
		break;
	  }
	  if (indexof(t.substr(p, y - p), "!") >= FOUND) {
		break;
	  }
	  if (indexof(t.substr(p, y - p), ",") >= FOUND) {
		break;
	  }
	  if (indexof(t.substr(p, y - p), ";") >= FOUND) {
		break;
	  }
	  if (t.substr(p, y - (p)).find(":") >= FOUND) {
		break;
	  }
	  t = t.substr(0, y) + "{*de*¯*Pby*}" + t.substr(y + 17);
	  p = indexof(t, s, y + 10);
	} while (p >= FOUND);
  }
}

static string removeEsperanto(string tx) {
  // Remove Esperanto, leaving English:
  //out << "bfrmv" + t;
  int p, n;
  string eg, txtx;
  eg = tx;
  if (phrase.length() > 0)
  {
	if ((startswith(eg, " {*|undefined|*¯*|"))
	  && (!(islower(phrase[0]))))
	{
	  n = indexof(eg, "*");
	  if (n >= FOUND)
	  {
		eg = eg.substr(0, n) + eg.substr(n + 2);
	  }
	  eg = upperall(eg.substr(0, 1)) + eg.substr(1);
	}
	else if ((startswith(eg, " {*|undefinedo|*¯*|")) && (!(islower(phrase[0]))))
	{
	  eg = " " + eg.substr(19);
	  n = indexof(eg, "*");
	  if (n >= FOUND)
	  {
		eg = eg.substr(0, n) + eg.substr(n + 2);
	  }
	  eg = upperall(eg.substr(0, 1)) + eg.substr(1);
	}
	else if ((startswith(eg, " {*|undefinedon|*¯*|")) && (!(islower(phrase[0]))))
	{
	  eg = " " + eg.substr(20);
	  n = indexof(eg, "*");
	  if (n >= FOUND)
	  {
		eg = eg.substr(0, n) + eg.substr(n + 2);
	  }
	  eg = upperall(eg.substr(0, 1)) + eg.substr(1);
	}
	else if (startswith(eg, " {*|undefined"))
	{
	  eg = " [UNKNOWN|WORD:|" + eg.substr(18);
	  p = indexof(eg, "*", 18);
	  eg = eg.substr(0, p) + "]" + eg.substr(p + 2);
	}
  }
  p = indexof(eg, "{*|undefined|");
  if (p >= FOUND) {
	do {
	  if (eg.length() > p + 17)
	  {
		if (islower(eg[p + 17]))
		{
		  txtx = " " + phrase;
		  if (indexof(txtx, " " + upperall(eg.substr(p + 17, 1))
			+ eg.substr(p + 18, 1)) == NOT_FOUND)
		  {
			eg = eg.substr(0, p) + "[UNKNOWN|WORD:|" + eg.substr(p + 17);
			p = indexof(eg, "*", p + 17);
			if (p >= FOUND)
			{
			  eg = eg.substr(0, p) + "]" + eg.substr(p + 2);
			}
		  }
		  else
		  {
			eg = eg.substr(0, p + 17) +
			  upperall(eg.substr(p + 17, 1)) + eg.substr(p + 18);
		  }
		}
	  }
	  p = indexof(eg, "{*|undefined|", p + 3);
	  if (p == NOT_FOUND) {
		break;
	  }
	} while (p >= FOUND);
  }
  p = indexof(eg, "{*|undefinedo|");
  if (p >= FOUND) {
	do {
	  if (eg.substr(p + 18, 1).compare(lowerall(eg.substr(p + 18, 1))) == 0) {
		txtx = " " + phrase;
		if (indexof(txtx, " " + upperall(eg.substr(p + 18, 1))
		  + eg.substr(p + 19, 1)) == NOT_FOUND) {
		  eg = eg.substr(0, p) + "[UNKNOWN|WORD:|" + eg.substr(p + 18);
		  p = indexof(eg, "*", p + 18);
		  if (p >= FOUND) {
			eg = eg.substr(0, p) + "]" + eg.substr(p + 2);
		  }
		}
		else {
		  eg = eg.substr(0, p + 18) + upperall(eg.substr(p + 18, 1)) +
			eg.substr(p + 19);
		}
	  }
	  p = indexof(eg, "{*|undefinedo|", p + 18);
	} while (p >= FOUND);
  }
  p = indexof(eg, "{*|undefinedon|");
  if (p >= FOUND) {
	do {
	  if (eg.substr(p + 19, 1).compare(lowerall(eg.substr(p + 19, 1))) == 0) {
		txtx = " " + phrase;
		if (indexof(txtx, " " + upperall(eg.substr(p + 19, 1))
		  + eg.substr(p + 20, 1)) == NOT_FOUND) {
		  eg = eg.substr(0, p) + "[UNKNOWN|WORD:|" + eg.substr(p + 19);
		  p = indexof(eg, "*", p + 19);
		  if (p >= FOUND) {
			eg = eg.substr(0, p) + "]" + eg.substr(p + 2);
		  }
		}
		else {
		  eg = eg.substr(0, p + 19) + upperall(eg.substr(p + 19, 1)) +
			eg.substr(p + 20);
		}
	  }
	  p = indexof(eg, "{*|undefinedon|", p + 19);
	} while (p >= FOUND);
  }
  eg = rep(eg, "{{", "{");
  eg = rep(eg, "}}", "}");
  n = indexof(eg, "{") - 1;
  if (n < 0) {
	n = 0;
  }
  p = indexof(eg, "*¯", n) + 4;
  if (p > 3) {
	do {
	  do {
		eg = eg.substr(0, n + 1) + eg.substr(p);
		n = indexof(eg, "}", n + 1);
		if (n == NOT_FOUND) {
		  n = eg.length() - 2;
		  p = indexof(eg, "*¯", n) + 4;
		  break;
		}
		eg = eg.substr(0, n - 1) + eg.substr(n + 1);
		if (n > eg.length() - 1) n = eg.length() - 1;
		n = indexof(eg, "{", n) - 1;
		if (n < 0) {
		  n = eg.length() - 2;
		}
		p = indexof(eg, "*¯", n) + 4;
	  } while (false);
	} while (p > 3);
  }
  return eg;
}

static string cutTo(string ee) {
  // Remove infinitive To:
  if ((indexof(ee, "to|") == NOT_FOUND) && (indexof(ee, "To|") == NOT_FOUND)) {
	return ee;
  }
  string e = ee;
  int p = e.length() - 7;
  while ((!e.substr(p, 3).compare("to|") == 0) && (!e.substr(p,
	3).compare("To|") == 0)) {
	p--;
  }
  return e.substr(0, p) + e.substr(p + 3);
}

static string affix(string entry, string prefix, string suffix) {
  // Add English verb suffixes and prefixes:
  string b = entry.substr(0, entry.length() - 2) + suffix + "*}";
  p = b.length() - 8;
  while ((!b.substr(p, p + 1 - (p)).compare("*") == 0) && (p > 2)) {
	p--;
  }
  if (b.substr(p + 2, p + 5 - (p + 2)).compare("To|") == 0) {
	if (prefix.length() == 0) {
	  b = b.substr(0, p + 2) + b.substr(p + 5, 1) + b.substr(p + 6);
	}
	else {
	  b = b.substr(0, p + 2) + b.substr(p + 5);
	  prefix = upperall(prefix.substr(0, 1)) + prefix.substr(1);
	}
  }
  else {
	b = b.substr(0, p + 2) + b.substr(p + 5);
  }
  if (prefix.length() != 0) {
	while ((!b.substr(p, p + 3 - (p)).compare(DIVIDER) == 0) && (p > START)) {
	  p--;
	}
	b = b.substr(0, p + 4) + prefix + b.substr(p + 4);
  }
  return b;
}

static string changePOS(string term, int position, string newPartOfSpeech) {
  // Change part-of-speech marker
  return term.substr(0, position) + "*" + newPartOfSpeech
	+ term.substr(p + 2);
}

static void englishInflection() {
  // English inflection:
  //out << "inflectstart-" + t + "-";
  int n, sp, personSearchOffset;
  string b, dc, da, it, fb;
  bool negativeFound;
  sp = 0;
  // Try to disambiguate god/God:
  if ((indexof(textIn2, "Dio") >= FOUND) && (indexof(textIn2, "Dio") > 3)) t =
	rep(t, "*} {*Dio|*¯*|God/a|god*}", "*} {*Dio|*¯*|God*}");
  if ((indexof(textIn2, "Dio") >= FOUND) && (indexof(textIn2, "Dio") > 3)) t =
	rep(t, "*} {*Dion|*¯*|God/a|god*}", "*} {*Dion|*¯*|God*}");
  if (indexof(textIn2, "dio") >= FOUND) t = rep(t, "{*Dio|*¯*|God/a|god*}", "{*Dio|*¯*|a|god*}");
  if (indexof(textIn2, "dio") >= FOUND) t = rep(t, "{*Dion|*¯*|God/a|god*}", "{*Dion|*¯*|a|god*}");
  t = rep(t, "*} {*Dion|*¯*|God/a|god*}", "*} {*Dion|*¯*|God*}");
  if (startswith(t, " {*Dio|*¯*|God*}")) t = " {*Dio|*¯*|God/a|god*}" + t.substr(16);
  if (startswith(t, " {*Dion|*¯*|God*}")) t = " {*Dion|*¯*|God/a|god*}" + t.substr(17);
  // Try to disambiguate much/many:
  rgx = "\\|much/many\\*\\} \\{\\*da\\*¯\\*Pof\\*\\} \\{\\*la\\*¯\\*Athe\\*\\} \\{\\*"
	"(l|sx|s|il|gx|v|m|n|on|c)ia\\*(n)?¯";
  t = regex_replace(t, rgx, "|much*} {*da*¯*Pof*} {*la*¯*Athe*} {*$1ia*$2¯");
  rgx = "\\|much/many\\*\\} \\{\\*da\\*¯\\*Pof\\*\\} \\{\\*la\\*¯\\*Athe\\*\\} \\{\\*"
	"(l|sx|s|il|gx|v|m|n|on|c)ia\\*(j)¯";
  t = regex_replace(t, rgx, "|many*} {*da*¯*Pof*} {*la*¯*Athe*} {*$1ia*$2¯");
  rgx = "([0-9/]+) [{][*]de[*]¯[*]Pof/from[*][}]";
  t = regex_replace(t, rgx, "{*de*¯*P$1|of*}");
  rgx = "([0-9/]+) [{][*]da[*]¯[*]Pof[*][}]";
  t = regex_replace(t, rgx, "{*da*¯*P$1|of*}");
  t = rep(t, "{*kelk*a*j*n*¯*Esome*} {*hor*o*j*n*¯*Ohour/time*}",
	"{*kelkhor*o*j*n*¯*Osome|hour*}");
  t = rep(t, "{*kelk*a*j*n*¯*Esome*} {*minut*o*j*n*¯*Ominute*}",
	"{*kelkminut*o*j*n*¯*Osome|minute*}");
  t = rep(t, "{*kelk*a*j*n*¯*Esome*} {*tag*o*j*n*¯*Oday*}",
	"{*kelktag*o*j*n*¯*Osome|day*}");
  t = rep(t, "{*kelk*a*j*n*¯*Esome*} {*semajn*o*j*n*¯*Oweek*}",
	"{*kelksemajn*o*j*n*¯*Osome|week*}");
  t = rep(t, "{*kelk*a*j*n*¯*Esome*} {*monat*o*j*n*¯*Omonth*}",
	"{*kelkmonat*o*j*n*¯*Osome|month*}");
  t = rep(t, "{*kelk*a*j*n*¯*Esome*} {*jar*o*j*n*¯*Oyear*}",
	"{*kelkjar*o*j*n*¯*Osome|year*}");
  t = rep(t, "{*kelk*a*j*n*¯*Esome*} {*sekund*o*j*n*¯*Osecond*}",
	"{*kelksekund*o*j*n*¯*Osome|second*}");
  t = rep(t, "{*kelk*a*j*n*¯*Esome*} {*jardek*o*j*n*¯*Odecade*}",
	"{*jardek*o*j*n*¯*Osome|decade*}");
  t = rep(t, "{*kelk*a*j*n*¯*Esome*} {*jarcent*o*j*n*¯*Ocentury*}",
	"{*jarcent*o*j*n*¯*Osome|century*}");
  t = rep(t, "{|*¯*|Ha*} {*metod*o*¯*Omethod*}",
	"{*H-metod*o*¯*OH-method*}");
  t = rep(t, "{|*¯*|Ha*}-{*metod*o*n*¯*Omethod*}",
	"{*H-metod*o*n*¯*OH-method*}");
  t = rep(t, "{|*¯*|Xa*} {*metod*o*¯*Omethod*}",
	"{*X-metod*o*¯*OX-method*}");
  t = rep(t, "{|*¯*|Xa*}-{*metod*o*n*¯*Omethod*}",
	"{*X-metod*o*n*¯*OX-method*}");
  t = rep(t, "{*pli*¯*Fmore*} {*long*a*j*¯*Along*}",
	"{*long*a*j*¯*Alonger*}");
  t = rep(t, "{*pli*¯*Fmore*} {*mallong*a*j*¯*Ashort*}",
	"{*mallong*a*j*¯*Ashorter*}");
  t = rep(t, "{*pro*¯*Pbecause|of*} {*ki*o*¯*Owhat*}",
	"{*pro|ki*o*¯*Pbecause|of|which*}");
  t = rep(t, "{*Pro*¯*PBecause|of*} {*ki*o*¯*Owhat*}",
	"{*Pro|ki*o*¯*PBecause|of|which*}");
  t = rep(t, "{*antaux*¯*Pbefore/ago*} {*nelong*e*¯*Ebriefly*}",
	"{*antauxnelong*e*¯*Enot|long|ago*}");
  t = rep(t, "{*Antaux*¯*PBefore/ago*} {*nelong*e*¯*Ebriefly*}",
	"{*Antauxnelong*e*¯*ENot|long|ago*}");
  t = rep(t, "{*Jam*¯*FAlready*} {*de*¯*Pof/from*}",
	"{*Jam*¯*FSo|far*} {*de*¯*Pfor*}");
  t = rep(t, "{*jam*¯*Falready*} {*de*¯*Pof/from*}",
	"{*jam*¯*Fso|far*} {*de*¯*Pfor*}");
  t = rep(t, "¯*Qnon*Q-away-kx*Qabout*Ito|think}_able*}",
	"¯*Aindispensable*}");
  t = rep(t, "¯*QNon*Q-away-kx*Qabout*Ito|think}_able*}",
	"¯*AIndispensable*}");
  t = rep(t, "¯*Q-away-kx*Qabout*Ito|think}_able*}",
	"¯*Adispensable*}");
  t = rep(t, "¯*Q-Away-kx*Qabout*Ito|think}_able*}",
	"¯*ADispensable*}");
  t = rep(t, "¯*Qnon*Q-away-kx*Qabout*Othought*Opossibility*}",
	"¯*Aindispensability*}");
  t = rep(t, "¯*QNon*Q-away-kx*Qabout*Othought*Opossibility*}",
	"¯*AIndispensability*}");
  t = rep(t, "¯*Q-away-kx*Qabout*Othought*Opossibility*}",
	"¯*Adispensability*}");
  t = rep(t, "¯*Q-Away-kx*Qabout*Othought*Opossibility*}",
	"¯*ADispensability*}");
  t = rep(t, "{*pli*rapid*is*¯*Eas|well*Ito|(fast/quick)|be*}",
	"{*pli*rapid*is*¯*Eas|well*Ito|(faster)|be*}");
  t = rep(t, "{*Pli*rapid*is*¯*Eas|well*ITo|(fast/quick)|be*}",
	"{*Pli*rapid*is*¯*Eas|well*ITo|(faster)|be*}");
  t = rep(t, "¯*Qone*Orail*}", "¯*Omonorail*}");
  t = rep(t, "¯*QOne*Orail*}", "¯*OMonorail*}");
  t = rep(t, "¯*Qone*Orails*}", "¯*Omonorails*}");
  t = rep(t, "¯*QOne*Orails*}", "¯*OMonorails*}");
  t = rep(t, "{*Est*as*¯*ITo|be*} {*ankaux*¯*Falso*}", "{*Ankaux*¯*FAlso*} {*est*as*¯*Ito|be*}");
  t = rep(t, "{*Pado|*¯*|Po*} {*inter*¯*Pbetween/among*}", "{*pado*¯*Opath*} {*inter*¯*Pbetween*}");
  t = rep(t, "¯*Qopposite-of*Obottom/foundation/background*}", "¯*Ashallow*}");
  t = rep(t, "{*fund*a*¯*Obottom/foundation/background*}", "{*fund*a*¯*Adeep*}");
  t = rep(t, "{*fund*a*j*¯*Obottom/foundation/background*}", "{*fund*a*j*¯*Adeep*}");
  t = rep(t, "{*fund*a*n*¯*Obottom/foundation/background*}", "{*fund*a*n*¯*Adeep*}");
  t = rep(t, "{*fund*a*j*n*¯*Obottom/foundation/background*}", "{*fund*a*j*n*¯*Adeep*}");
  t = rep(t, "{*Fund*a*¯*OBottom/foundation/background*}", "{*Fund*a*¯*ADeep*}");
  t = rep(t, "{*Fund*a*j*¯*OBottom/foundation/background*}", "{*Fund*a*j*¯*ADeep*}");
  t = rep(t, "{*Fund*a*n*¯*OBottom/foundation/background*}", "{*Fund*a*n*¯*ADeep*}");
  t = rep(t, "{*Fund*a*j*n*¯*OBottom/foundation/background*}", "{*Fund*a*j*n*¯*ADeep*}");
  t = rep(t, "{*geedzigx*o*¯*Ito|(married)|get*}", "{*geedzigx*o*¯*Owedding*}");
  t = rep(t, "{*geedzigx*o*j*¯*Ito|(married)|get*}", "{*geedzigx*o*j*¯*Owedding*}");
  t = rep(t, "{*geedzigx*o*n*¯*Ito|(married)|get*}", "{*geedzigx*o*n*¯*Owedding*}");
  t = rep(t, "{*geedzigx*o*j*n*¯*Ito|(married)|get*}", "{*geedzigx*o*j*n*¯*Owedding*}");
  t = rep(t, "{*Geedzigx*o*j*¯*ITo|(married)|get*}", "{*Geedzigx*o*j*¯*OWedding*}");
  t = rep(t, "{*Geedzigx*o*j*n*¯*ITo|(married)|get*}", "{*Geedzigx*o*j*n*¯*OWedding*}");
  t = rep(t, "{*Iom*¯*FSome*} {*post*¯*Pafter/behind*} {*iom*¯*Fsome*}",
	"{*Iompostiom*¯*ELittle|by|little*}");
  t = rep(t, "{*iom*¯*Fsome*} {*post*¯*Pafter/behind*} {*iom*¯*Fsome*}",
	"{*iompostiom*¯*Elittle|by|little*}");

  if ((indexof(t, "ia*¯") >= FOUND) || (indexof(t, "iaj*¯") >= FOUND)) { // Mark plural possessives:
	rgx = "A(t|T)he\\*\\} \\{\\*mia\\*¯\\*Amy\\*\\}([ .,?!;:])";
	t = regex_replace(t, rgx, "A$1he*} {*mia*¯*Amy*} {*un*o*¯*Oone*}$2");
	rgx = "A(t|T)he\\*\\} \\{\\*miaj\\*¯\\*Amy\\*\\}([ .,?!;:])";
	t = regex_replace(t, rgx, "A$1he*} {*miaj*¯*Amy*} {*un*o*j*¯*Oone*}$2");
	rgx = "A(t|T)he\\*\\} \\{\\*via\\*¯\\*Ayour\\*\\}([ .,?!;:])";
	t = regex_replace(t, rgx, "A$1he*} {*via*¯*Ayour*} {*un*o*¯*Oone*}$2");
	rgx = "A(t|T)he\\*\\} \\{\\*viaj\\*¯\\*Ayour\\*\\}([ .,?!;:])";
	t = regex_replace(t, rgx, "A$1he*} {*viaj*¯*Ayour*} {*un*o*j*¯*Oone*}$2");
	rgx = "A(t|T)he\\*\\} \\{\\*lia\\*¯\\*Ahis\\*\\}([ .,?!;:])";
	t = regex_replace(t, rgx, "A$1he*} {*lia*¯*Ahis*} {*un*o*¯*Oone*}$2");
	rgx = "A(t|T)he\\*\\} \\{\\*liaj\\*¯\\*Ahis\\*\\}([ .,?!;:])";
	t = regex_replace(t, rgx, "A$1he*} {*liaj*¯*Ahis*} {*un*o*j*¯*Oone*}$2");
	rgx = "A(t|T)he\\*\\} \\{\\*sxia\\*¯\\*Aher\\*\\}([ .,?!;:])";
	t = regex_replace(t, rgx, "A$1he*} {*sxia*¯*Aher*} {*un*o*¯*Oone*}$2");
	rgx = "A(t|T)he\\*\\} \\{\\*sxiaj\\*¯\\*Aher\\*\\}([ .,?!;:])";
	t = regex_replace(t, rgx, "A$1he*} {*sxiaj*¯*Aher*} {*un*o*j*¯*Oone*}$2");
	rgx = "A(t|T)he\\*\\} \\{\\*gxia\\*¯\\*Aits\\*\\}([ .,?!;:])";
	t = regex_replace(t, rgx, "A$1he*} {*gxia*¯*Aits*} {*un*o*¯*Oone*}$2");
	rgx = "A(t|T)he\\*\\} \\{\\*gxiaj\\*¯\\*Aits\\*\\}([ .,?!;:])";
	t = regex_replace(t, rgx, "A$1he*} {*gxiaj*¯*Aits*} {*un*o*j*¯*Oone*}$2");
	rgx = "A(t|T)he\\*\\} \\{\\*nia\\*¯\\*Aour\\*\\}([ .,?!;:])";
	t = regex_replace(t, rgx, "A$1he*} {*nia*¯*Aour*} {*un*o*¯*Oone*}$2");
	rgx = "A(t|T)he\\*\\} \\{\\*niaj\\*¯\\*Aour\\*\\}([ .,?!;:])";
	t = regex_replace(t, rgx, "A$1he*} {*niaj*¯*Aour*} {*un*o*j*¯*Oone*}$2");
	rgx = "A(t|T)he\\*\\} \\{\\*ilia\\*¯\\*Atheir\\*\\}([ .,?!;:])";
	t = regex_replace(t, rgx, "A$1he*} {*ilia*¯*Atheir*} {*un*o*¯*Oone*}$2");
	rgx = "A(t|T)he\\*\\} \\{\\*iliaj\\*¯\\*Atheir\\*\\}([ .,?!;:])";
	t = regex_replace(t, rgx, "A$1he*} {*iliaj*¯*Atheir*} {*un*o*j*¯*Oone*}$2");
	rgx = "A(t|T)he\\*\\} \\{\\*sia\\*¯\\*Ahis/her/its/their\\|own\\*\\}([ .,?!;:])";
	t = regex_replace(t, rgx, "A$1he*} {*sia*¯*Ahis/her/its/their|own*} {*un*o*¯*Oone*}$2");
	rgx = "A(t|T)he\\*\\} \\{\\*siaj\\*¯\\*Ahis/her/its/their\\|own\\*\\}([ .,?!;:])";
	t = regex_replace(t, rgx, "A$1he*} {*siaj*¯*Ahis/her/its/their|own*} {*un*o*j*¯*Oone*}$2");
	rgx = "A(t|T)he\\*\\} \\{\\*sia\\*¯\\*Ahis/her\\|own\\*\\}([ .,?!;:])";
	t = regex_replace(t, rgx, "A$1he*} {*sia*¯*Ahis/her|own*} {*un*o*¯*Oone*}$2");
	rgx = "A(t|T)he\\*\\} \\{\\*siaj\\*¯\\*Ahis/her\\|own\\*\\}([ .,?!;:])";
	t = regex_replace(t, rgx, "A$1he*} {*siaj*¯*Ahis/her|own*} {*un*o*j*¯*Oone*}$2");
	rgx = "A(t|T)he\\*\\} \\{\\*onia\\*¯\\*Aone's\\*\\}([ .,?!;:])";
	t = regex_replace(t, rgx, "A$1he*} {*onia*¯*Aone's*} {*un*o*¯*Oone*}$2");
	rgx = "A(t|T)he\\*\\} \\{\\*oniaj\\*¯\\*Aone's\\*\\}([ .,?!;:])";
	t = regex_replace(t, rgx, "A$1he*} {*oniaj*¯*Aone's*} {*un*o*j*¯*Oone*}$2");
	rgx = "A(t|T)he\\*\\} \\{\\*cia\\*¯\\*Ayour\\*\\}([ .,?!;:])";
	t = regex_replace(t, rgx, "A$1he*} {*cia*¯*Ayour*} {*un*o*¯*Oone*}$2");
	rgx = "A(t|T)he\\*\\} \\{\\*ciaj\\*¯\\*Ayour\\*\\}([ .,?!;:])";
	t = regex_replace(t, rgx, "A$1he*} {*ciaj*¯*Ayour*} {*un*o*j*¯*Oone*}$2");
  }

  // Reduce own
  p = indexof(t, "his/her/its/their|own");
  while (p >= FOUND) {
	if (indexof(t.substr(0, p), "his/her|own") >= FOUND) {
	  t = rep(t, "his/her/its/their|own", "his/her|own");
	}
	else if (lowerall(t.substr(0, p)).find("{*gxi*¯*zit*}") >= FOUND) {
	  t = rep(t, "his/her/its/their|own", "its|own");
	}
	else if (indexof(t.substr(0, p), "animal") >= FOUND) {
	  t = rep(t, "his/her/its/their|own", "its|own");
	}
	else if (indexof(t.substr(0, p), "bird") >= FOUND) {
	  t = rep(t, "his/her/its/their|own", "its|own");
	}
	else if (indexof(t.substr(0, p), "fish") >= FOUND) {
	  t = rep(t, "his/her/its/their|own", "its|own");
	}
	else if (indexof(t.substr(0, p), "insect") >= FOUND) {
	  t = rep(t, "his/her/its/their|own", "its|own");
	}
	else if (indexof(t.substr(0, p), "its own") >= FOUND) {
	  t = rep(t, "his/her/its/their|own", "its|own");
	}
	else if (indexof(t.substr(0, p), "*Atheir|own") >= FOUND) {
	  t = rep(t, "his/her/its/their|own", "their|own");
	}
	else if (textOut.length() >= 20) {
	  if (textOut.substr(textOut.length()
		- 20, 20).find(" his/her own") >= FOUND) {
		t = rep(t, "his/her/its/their|own", "his/her|own");
	  }
	  else if (textOut.length() >= 20) {
		if (textOut.substr(textOut.length()
		  - 20, 20).find(" its own") >= FOUND) {
		  t = rep(t, "his/her/its/their|own", "its|own");
		}
		else if (textOut.length() >= 20) {
		  if (textOut.substr(textOut.length()
			- 20, 20).find(" their own") >= FOUND) {
			t = rep(t, "his/her/its/their|own", "their|own");
		  }
		  else if ((indexof(t.substr(0, p), "o*¯") >= FOUND) || (t.substr(0,
			p).find("o|*¯") >= FOUND) || (indexof(t.substr(0, p), "his/her|own") >= FOUND)) {
			t = rep(t, "his/her/its/their|own", "his/her|own");
		  }
		  else if (indexof(t.substr(0, p), "o*j*¯") >= FOUND) {
			t = rep(t, "his/her/its/their|own", "their|own");
		  }
		  else if (indexof(t.substr(0, p), "oj*¯") >= FOUND) {
			t = rep(t, "his/her/its/their|own", "their|own");
		  }
		  else if (indexof(t.substr(0, p), "j|*¯") >= FOUND) {
			t = rep(t, "his/her/its/their|own", "their|own");
		  }
		}
	  }
	}
	p = indexof(t, "his/her/its/their|own", p + 10);
  }

  p = indexof(t, "himself/herself/itself/themselves");
  while (p >= FOUND) {
	if ((indexof(t.substr(0, p), "j*¯") == NOT_FOUND) && (indexof(t, "{*ili*¯")
	  == NOT_FOUND) && (indexof(t, "{*Ili*¯") == NOT_FOUND)) {
	  t = rep(t, "himself/herself/itself/themselves", "himself/herself");
	}
	p = indexof(t, "himself/herself/itself/themselves", p + 10);
  }

  putAdjectivesFirst(); // Move adjectives after nouns to before nouns.
  putAdjectivesFirst();
  putAdjectivesFirst();
  putAdjectivesFirst();

  // Set current pointer (currentWordIndex) to first word and get it:
  currentWordIndex = -1;
  nearbyWordIndex = -1;
  b = nextWord(-1);
  //out << "7070 b:" + b;
  do {
	if (indexof(b, "'*}") >= FOUND) {
	  b = upper(b, b.rfind(DIV) + 3);
	  b = b.substr(0, b.length() - 3) + b.substr(b.length() - 2);
	  t = t.substr(0, nearbyWordIndex) + b + t.substr(nearbyWordIndex +
		b.length() + 1);
	}
	fb = b;
	do {
	  do {
		do {
		  if (indexof(b, DIVIDER) < 7) {
			break; // Not inflectable
		  }
		  do {
			//out << "7139" + t;
			p = indexof(b, "*O"); // EO noun root

			// Adjectival form of noun:
			if ((p > EXISTS) && (indexof(b, ADJECTIVE_ENDING) >= FOUND)) {
			  b = changePOS(b, p,
				ADJECTIVE_MARKER); // EO adj form of noun
			}              // Adverbial form of noun:
			if ((p > EXISTS) && (indexof(b, ADVERB_ENDING) >= FOUND)) {
			  b = changePOS(b, p,
				ADJECTIVE_MARKER); // EO adv form of noun
			}
			p = indexof(b, "*A", 2); // EO adj
			// Adverb from adjective:
			if ((p > EXISTS) && (indexof(b, ADVERB_ENDING) >= FOUND)) {
			  b = changePOS(b, p, ADVERB_MARKER); // EO adv form of adj
			  b = b.substr(0, b.length() - 2) + "ly*}"; // adverb from adj
			  b = rep(b, "blely*}", "bly*}");
			  b = rep(b, "icly*}", "ically*}");
			  b = rep(b, "acly*}", "acally*}");
			  b = rep(b, "yly*}", "ily*}");
			  rgx = "([aeou])ily\\*\\}";
			  b = regex_replace(b, rgx, "$1yly*}");
			  b = rep(b, "dailily*}", "daily*}");
			  b = rep(b, "gayly*}", "gaily*}");
			  b = rep(b, "gluyly*}", "gluily*}");
			  break;
			}

			p = indexof(b, "*I", 2); // EO verb
			if ((p >= FOUND) && ((indexof(b, NOUN_ENDING) >= FOUND)
			  || (indexof(b, ADJECTIVE_ENDING) >= FOUND) || (indexof(b, PRETERITE_ENDING) >= FOUND)
			  || (indexof(b, PRESENT_ENDING) >= FOUND) || (indexof(b, FUTURE_ENDING) >= FOUND)
			  || (indexof(b, CONDITIONAL_ENDING) >= FOUND) || (indexof(b, INFINITIVE_ENDING) >= FOUND)
			  || (indexof(b, IMPERATIVE_ENDING) >= FOUND) || (indexof(b, ADVERB_ENDING) >= FOUND))) {
			  // gerund noun or adj with -ing, including gerund noun prefixes:
			  if (!((indexof(b, PRETERITE_ENDING) >= FOUND) || (indexof(b, PRESENT_ENDING) >= FOUND)
				|| (indexof(b, FUTURE_ENDING) >= FOUND) || (indexof(b, CONDITIONAL_ENDING) >= FOUND)
				|| (indexof(b, INFINITIVE_ENDING) >= FOUND) || (indexof(b, IMPERATIVE_ENDING) >= FOUND)
				|| (indexof(b, "*it*") >= FOUND) || (indexof(b, "*at*") >= FOUND) || (indexof(b, "*ot*") >= FOUND)
				|| (indexof(b, "*ut*") >= FOUND) || (indexof(b, "*int*") >= FOUND) || (indexof(b, "*ant*") >= FOUND)
				|| (indexof(b, "*ont*") >= FOUND) || (indexof(b, "*unt*") >= FOUND) || (indexof(b, "*ebl*") >= FOUND)
				|| (indexof(b, "*il*") >= FOUND) || (indexof(b, "*end*") >= FOUND) || (indexof(b, "*ind*") >= FOUND)
				|| (indexof(b, "*em*") >= FOUND) || (indexof(b, "*iv*") >= FOUND) || (indexof(b, "*pov*") >= FOUND)
				|| (indexof(b, "*vol*") >= FOUND) || indexof(b, "*kapabl*") >= FOUND)) {
				while (p >= FOUND) {
				  b = b.substr(0, p + 2) + b.substr(p + 5);
				  n = indexof(b, "*", p + 1);
				  b = b.substr(0, n) + "_ing" + b.substr(n);
				  p = indexof(b, "*I", p + 5);
				}
				break;
			  }
			  else {
				// gerund noun prefix with root which is not gerund noun nor adj:
				while ((p >= FOUND) && (indexof(b, "*", p + 1) != indexof(b, "*}",
				  p + 1))) {
				  b = b.substr(0, p + 2) + b.substr(p + 5);
				  n = indexof(b, "*", p + 1);
				  b = b.substr(0, n) + "_ing" + b.substr(n);
				  p = indexof(b, "*I", p + 5);
				}
			  }

			}
			// passive and active participles:
			b = conjugateActivePassiveParticiples(b);
			sp = 0;
			person = "";
			negativeFound = false;
			personSearchOffset = 0;
			p = indexof(b, "*I", 2);
			// Adjust negatives:
			do {
			  if ((lowerall(previousWord(2)).compare("{*jam*¯*falready*}") == 0)
				&& (lowerall(previousWord(1)).compare("{*ne*¯*fnot/no*}") == 0)) {
				personSearchOffset = 2;
				break;
			  }
			  if ((lowerall(previousWord(1)).compare("{*plu*¯*fmorewqz*}") == 0)
				&& (lowerall(previousWord(2)).compare("{*ne*¯*fnot/no*}") == 0)) {
				personSearchOffset = 2;
				break;
			  }
			  if ((lowerall(previousWord(1)).compare("{*ne*¯*fnot/no*}") == 0)
				&& (t.substr(nearbyWordIndex + 16,
				nearbyWordIndex + 17 - (nearbyWordIndex + 16)).compare(" ") == 0)) {
				negativeFound = true;
			  }
			} while (false);
			if ((p > EXISTS) && ((indexof(b, PRETERITE_ENDING) >= FOUND)
			  || (indexof(b, PRESENT_ENDING) >= FOUND) || (indexof(b, FUTURE_ENDING) >= FOUND)
			  || (indexof(b, CONDITIONAL_ENDING) >= FOUND) || (indexof(b, IMPERATIVE_ENDING) >= FOUND))) {
			  if (negativeFound) {
				dc = lowerall(previousWord(2 + personSearchOffset));
				if (dc.compare("{*mem*¯*f-self*}") == 0) {
				  personSearchOffset++;
				  dc = lowerall(previousWord(2 + personSearchOffset));
				}
				// // Try to disambiguate person of subject:
				if ((t.substr(nearbyWordIndex, currentWordIndex - (nearbyWordIndex)).find(". ")
				  == NOT_FOUND) && (t.substr(nearbyWordIndex, currentWordIndex - (nearbyWordIndex)).find("? ")
				  == NOT_FOUND) && (t.substr(nearbyWordIndex,
				  currentWordIndex - (nearbyWordIndex)).find("! ") == NOT_FOUND)
				  && (t.substr(nearbyWordIndex, currentWordIndex - (nearbyWordIndex)).find("; ") == NOT_FOUND)
				  && (indexof(dc, "*n*") == NOT_FOUND) && ((indexof(dc, "*j*") >= FOUND)
				  || (dc.compare("{*mi*¯*zi*}") == 0) || (dc.compare("{*vi*¯*zyou*}") == 0)
				  || (dc.compare("{*ili*¯*zthey*}") == 0) || (dc.compare("{*ni*¯*zwe*}") == 0)
				  || (dc.compare("{*ci*¯*zyou*}") == 0) || (indexof(dc, "iaj*") >= FOUND)
				  || (indexof(dc, "ioj*") >= FOUND) || (indexof(dc, "iuj*") >= FOUND)
				  || ((indexof(dc, PROPER_NOUN_DIVIDER) >= FOUND) && (indexof(dc, "{*unu*¯*n")
				  == NOT_FOUND) && (indexof(dc, PAREN) == NOT_FOUND)))) {
				  person = NOT_THIRD_PERSON_SINGULAR;
				  if (dc.compare("{*mi*¯*zi*}") == 0) {
					person = "I";
				  }
				}
				if (person.compare("") == 0) {
				  dc = lowerall(previousWord(3 + personSearchOffset));
				  if ((t.substr(nearbyWordIndex, currentWordIndex - (nearbyWordIndex)).find(". ")
					== NOT_FOUND) && (t.substr(nearbyWordIndex,
					currentWordIndex - (nearbyWordIndex)).find("? ") == NOT_FOUND)
					&& (t.substr(nearbyWordIndex, currentWordIndex - (nearbyWordIndex)).find("! ")
					== NOT_FOUND) && (t.substr(nearbyWordIndex,
					currentWordIndex - (nearbyWordIndex)).find("; ") == NOT_FOUND) && (indexof(dc, "*n*")
					== NOT_FOUND) && ((indexof(dc, "*j*") >= FOUND)
					|| (dc.compare("{*mi*¯*zi*}") == 0) || (dc.compare("{*vi*¯*zyou*}") == 0)
					|| (dc.compare("{*ili*¯*zthey*}") == 0) || (dc.compare("{*ni*¯*zwe*}") == 0)
					|| (dc.compare("{*ci*¯*zyou*}") == 0) || (indexof(dc, "iaj*") >= FOUND)
					|| (indexof(dc, "ioj*") >= FOUND) || (indexof(dc, "iuj*") >= FOUND)
					|| ((indexof(dc, PROPER_NOUN_DIVIDER) >= FOUND) && (dc.find
					("{*unu*¯*n") == NOT_FOUND) && (indexof(dc, PAREN) == NOT_FOUND)))) {
					person = NOT_THIRD_PERSON_SINGULAR;
					if (dc.compare("{*mi*¯*zi*}") == 0) {
					  person = "I";
					}
				  }
				  if (person.compare("") == 0) {
					da = lowerall(nextWord(1));
					if ((indexof(da, ADJECTIVE_ENDING) >= FOUND)
					  && ((indexof(nextWord(2), NOUN_ENDING) >= FOUND))) {
					  da = lowerall(nextWord(2));
					}
					it = "";
					if (nearbyWordIndex > 4) {
					  it = t.substr(nearbyWordIndex - 5, nearbyWordIndex + 1 - (nearbyWordIndex - 5));
					  if (indexof(it, "}") >= FOUND) {
						it = it.substr(indexof(it, "}") + 1, 1);
					  }
					  else {
						it = "Xqh"; // Not end of sentence
					  }
					}
					if (indexof((fs = ".?!;:¬¯"), it) == NOT_FOUND) {
					  if ((indexof(da, "*n*") == NOT_FOUND)
						&& (indexof(da, "*a*j*") >= FOUND)) {
						person = NOT_THIRD_PERSON_SINGULAR;
					  }
					  if ((indexof(da, "*at*a*") >= FOUND) || (indexof(da, "*it*a*") >= FOUND)
						|| (indexof(da, "*ot*a*") >= FOUND) || (indexof(da, "*ut*a*") >= FOUND)
						|| (indexof(da, "*ant*a*") >= FOUND) || (indexof(da, "*int*a*") >= FOUND)
						|| (indexof(da, "*ont*a*") >= FOUND) || (indexof(da, "*unt*a*") >= FOUND)
						|| (indexof(da, "*i*¯") >= FOUND)) {
						da = lowerall(nextWord(2));
						sp = 4;
						it = "";
						if (nearbyWordIndex > 4) {
						  it = t.substr(nearbyWordIndex - 5, nearbyWordIndex + 1 - (nearbyWordIndex - 5));
						  if (indexof(it, "}") >= FOUND) {
							it = it.substr(indexof(it, "}") + 1, 1);
						  }
						  else {
							it = "Xqh";
						  }
						}
					  }
					  if ((indexof(da, "*n*") == NOT_FOUND)
						&& ((indexof(da, "*o*j*") >= FOUND) || da.compare("{*mi*¯*zi*}") == 0)
						|| (da.compare("{*vi*¯*zyou*}") == 0)
						|| (da.compare("{*ili*¯*zthey*}") == 0)
						|| (da.compare("{*ni*¯*zwe*}") == 0)
						|| (da.compare("{*ci*¯*zyou*}") == 0)) {
						person = NOT_THIRD_PERSON_SINGULAR;
						sp++;
						if (da.compare("{*mi*¯*zi*}") == 0) {
						  person = "I";
						}
					  }
					}
					if ((!(da.compare("") == 0)) && (indexof(da, "*it*o*") == NOT_FOUND)
					  && (indexof(da, "*at*o*") == NOT_FOUND)
					  && (indexof(da, "*ot*o*") == NOT_FOUND)
					  && (indexof(da, "*ut*o*") == NOT_FOUND)
					  && (indexof(da, "*int*o*") == NOT_FOUND)
					  && (indexof(da, "*ant*o*") == NOT_FOUND)
					  && (indexof(da, "*ont*o*") == NOT_FOUND)
					  && (indexof(da, "*unt*o*") == NOT_FOUND)
					  && ((indexof((fs = "{*li*¯*zhe*}{*sxi*¯*zshe*}{*gxi*¯*zit*}"), da) >= FOUND)
					  || (indexof(da, NOUN_SINGULAR_ENDING) >= FOUND))) {
					  sp++;
					}
					if (sp == 4) {
					  sp = 0;
					}
					if (sp == 5) {
					  sp = 2;
					}
					if ((indexof(da, "*at*a*j*") >= FOUND) || (indexof(da, "*it*a*j*") >= FOUND)
					  || (indexof(da, "*ot*a*j*") >= FOUND) || (indexof(da, "*ut*a*j*") >= FOUND)
					  || (indexof(da, "*ant*a*j*") >= FOUND) || (indexof(da, "*int*a*j*") >= FOUND)
					  || (indexof(da, "*ont*a*j*") >= FOUND) || (indexof(da, "*unt*a*j*") >= FOUND)) {
					  person = NOT_THIRD_PERSON_SINGULAR;
					}
				  }
				}
			  } else {
				dc = lowerall(previousWord(1 + personSearchOffset));
				if (dc.compare("{*mem*¯*f-self*}") == 0) {
				  personSearchOffset++;
				  dc = lowerall(previousWord(1 + personSearchOffset));
				}
				if (nearbyWordIndex > t.length() - 2) {
				  nearbyWordIndex = t.length() - 2;
				}

				//if (nearbyWordIndex > currentWordIndex - 2) currentWordIndex = nearbyWordIndex + 2;
				if ((t.substr(nearbyWordIndex, currentWordIndex - (nearbyWordIndex)).find(". ")
				  == NOT_FOUND) && (t.substr(nearbyWordIndex, currentWordIndex - (nearbyWordIndex)).find("? ")
				  == NOT_FOUND) && (t.substr(nearbyWordIndex,
				  currentWordIndex - (nearbyWordIndex)).find("! ") == NOT_FOUND)
				  && (t.substr(nearbyWordIndex, currentWordIndex - (nearbyWordIndex)).find("; ") == NOT_FOUND)
				  && (indexof(dc, "*n*") == NOT_FOUND) && ((indexof(dc, "*j*") >= FOUND)
				  || (dc.compare("{*mi*¯*zi*}") == 0) || (dc.compare("{*vi*¯*zyou*}") == 0)
				  || (dc.compare("{*ili*¯*zthey*}") == 0) || (dc.compare("{*ni*¯*zwe*}") == 0)
				  || (dc.compare("{*ci*¯*zyou*}") == 0) || (indexof(dc, "iaj*") >= FOUND)
				  || (indexof(dc, "ioj*") >= FOUND) || (indexof(dc, "iuj*") >= FOUND)
				  || ((indexof(dc, PROPER_NOUN_DIVIDER) >= FOUND) && (indexof(dc, "{*unu*¯*n")
				  == NOT_FOUND) && (indexof(dc, PAREN) == NOT_FOUND)))) {
				  person = NOT_THIRD_PERSON_SINGULAR;
				  if (dc.compare("{*mi*¯*zi*}") == 0) {
					person = "I";
				  }
				}
				if (person.compare("") == 0) {
				  dc = lowerall(previousWord(2 + personSearchOffset));
				  if ((t.substr(nearbyWordIndex, currentWordIndex - (nearbyWordIndex)).find(". ")
					== NOT_FOUND) && (t.substr(nearbyWordIndex,
					currentWordIndex - (nearbyWordIndex)).find("? ") == NOT_FOUND)
					&& (t.substr(nearbyWordIndex, currentWordIndex - (nearbyWordIndex)).find("! ")
					== NOT_FOUND) && (t.substr(nearbyWordIndex,
					currentWordIndex - (nearbyWordIndex)).find("; ") ==
					-1) && (indexof(dc, "*n*") == NOT_FOUND)
					&& ((indexof(dc, "*j*") >= FOUND)
					|| (dc.compare("{*mi*¯*zi*}") == 0) || (dc.compare("{*vi*¯*zyou*}") == 0)
					|| (dc.compare("{*ili*¯*zthey*}") == 0) || (dc.compare("{*ni*¯*zwe*}") == 0)
					|| (dc.compare("{*ci*¯*zyou*}") == 0) || (indexof(dc, "iaj*") >= FOUND)
					|| (indexof(dc, "ioj*") >= FOUND) || (indexof(dc, "iuj*") >= FOUND)
					|| ((indexof(dc, PROPER_NOUN_DIVIDER) >= FOUND) && (indexof(dc, "{*unu*¯*n")
					== NOT_FOUND) && (indexof(dc, PAREN) == NOT_FOUND)))) {
					person = NOT_THIRD_PERSON_SINGULAR;
					if (dc.compare("{*mi*¯*zi*}") == 0) {
					  person = "I";
					}
				  }
				  if (person.compare("") == 0) {
					da = lowerall(nextWord(1));
					if ((indexof(da, ADJECTIVE_ENDING) >= FOUND)
					  && ((indexof(nextWord(2), NOUN_ENDING) >= FOUND))) {
					  da = lowerall(nextWord(2));
					}
					it = "";
					if (nearbyWordIndex > 4) {
					  it = t.substr(nearbyWordIndex - 5, nearbyWordIndex + 1 - (nearbyWordIndex - 5));
					  if (indexof(it, "}") >= FOUND) {
						it = it.substr(indexof(it, "}") + 1, 1);
					  }
					  else {
						it = "Xqh";
					  }
					}
					if (indexof((fs = ".?!;:¬¯"), it) == NOT_FOUND) {
					  if ((indexof(da, "*n*") == NOT_FOUND)
						&& (indexof(da, "*a*j*") >= FOUND)) {
						person = NOT_THIRD_PERSON_SINGULAR;
					  }
					  if ((indexof(da, "*at*a*") >= FOUND) || (indexof(da, "*it*a*") >= FOUND)
						|| (indexof(da, "*ot*a*") >= FOUND) || (indexof(da, "*ut*a*") >= FOUND)
						|| (indexof(da, "*ant*a*") >= FOUND) || (indexof(da, "*int*a*") >= FOUND)
						|| (indexof(da, "*ont*a*") >= FOUND) || (indexof(da, "*unt*a*") >= FOUND)
						|| (indexof(da, "*i*¯") >= FOUND)) {
						da = lowerall(nextWord(2));
						sp = 4;
						it = "";
						if (nearbyWordIndex > 4) {
						  it = t.substr(nearbyWordIndex - 5, nearbyWordIndex + 1 - (nearbyWordIndex - 5));
						  if (indexof(it, "}") >= FOUND) {
							it = it.substr(indexof(it, "}") + 1, 1);
						  }
						  else {
							it = "Xqh";
						  }
						}
					  }
					  fs = "{*mi*¯*zi*}{*vi*¯*zyou*}{*ili*¯*zthey*}{*ni*¯*zwe*}{*ci*¯*zyou*}";
					  if ((indexof(da, "*n*") == NOT_FOUND)
						&& ((indexof(da, "*o*j*") >= FOUND) || (indexof(fs, da) >= FOUND))) {
						// 
						person = NOT_THIRD_PERSON_SINGULAR;
						sp++;
						if (da.compare("{*mi*¯*zi*}") == 0) {
						  person = "I";
						}
					  }
					}
					if ((!(da.compare("") == 0)) && (indexof(da, "*it*o*")
					  == NOT_FOUND) && (indexof(da, "*at*o*") == NOT_FOUND)
					  && (indexof(da, "*ot*o*") == NOT_FOUND)
					  && (indexof(da, "*ut*o*") == NOT_FOUND)
					  && (indexof(da, "*int*o*") == NOT_FOUND)
					  && (indexof(da, "*ant*o*") == NOT_FOUND)
					  && (indexof(da, "*ont*o*") == NOT_FOUND)
					  && (indexof(da, "*unt*o*") == NOT_FOUND)
					  && ((indexof((fs = "{*li*¯*zhe*}{*sxi*¯*zshe*}{*gxi*¯*zit*}"), da) >= FOUND)
					  || (indexof(da, NOUN_SINGULAR_ENDING) >= FOUND))) {
					  sp++;
					}
					if (sp == 4) {
					  sp = 0;
					}
					if (sp == 5) {
					  sp = 2;
					}
					if ((indexof(da, "*at*a*j*") >= FOUND) || (indexof(da, "*it*a*j*") >= FOUND)
					  || (indexof(da, "*ot*a*j*") >= FOUND) || (indexof(da, "*ut*a*j*") >= FOUND)
					  || (indexof(da, "*ant*a*j*") >= FOUND) || (indexof(da, "*int*a*j*") >= FOUND)
					  || (indexof(da, "*ont*a*j*") >= FOUND) || (indexof(da, "*unt*a*j*") >= FOUND)) {
					  person = NOT_THIRD_PERSON_SINGULAR;
					}
				  }
				}
			  }
			}
			//out << "7430 b:" + b;
			if ((person.compare(NOT_THIRD_PERSON_SINGULAR) == 0)
			  && (previousPerson.length() == 0) && (!t.substr(3,
			  4 - 3).compare(upperall(t.substr(3, 4 - 3))) == 0)) {
			  person = "";
			}
			previousPerson = person;
			// Make auxiliary verbs negative:
			if ((p > EXISTS) && (indexof(b, FUTURE_ENDING) >= FOUND)) {
			  b = addAuxiliaryVerb(b, p, negativeFound, "won't|", "will|");
			  break;
			}
			if ((p > EXISTS) && (indexof(b, CONDITIONAL_ENDING) >= FOUND)) {
			  b = addAuxiliaryVerb(b, p, negativeFound, "wouldn't|", "would|");
			  break;
			}
			if ((p > EXISTS) && (indexof(b, IMPERATIVE_ENDING) >= FOUND)) {
			  b = addAuxiliaryVerb(b, p, negativeFound, "shouldn't|", "should|");
			  break;
			}
			if ((p > EXISTS) && (indexof(b, PRETERITE_ENDING) >= FOUND)) {
			  b = addAuxiliaryVerb(b, p, negativeFound, "didn't|", "did|");
			  break;
			}
			if ((person.compare("") == 0) && (indexof(t, "Zmi*") == NOT_FOUND)
			  && (indexof(t, "ZMi*") == NOT_FOUND) && (indexof(t, "Zvi*") == NOT_FOUND)
			  && (indexof(t, "ZVi*") == NOT_FOUND) && (indexof(t, "Zni*")
			  == NOT_FOUND) && (indexof(t, "ZNi*") == NOT_FOUND) && (indexof(t, "Zili*")
			  == NOT_FOUND) && (indexof(t, "ZIli*") == NOT_FOUND)
			  && ((indexof(t, "Zli*") >= FOUND) || (indexof(t, "ZLi*") >= FOUND) || (indexof(t, "Zsxi*") >= FOUND)
			  || (indexof(t, "ZSxi*") >= FOUND) || (indexof(t, "Zgxi*") >= FOUND)
			  || (indexof(t, "ZGxi*") >= FOUND) || (indexof(t, "Zoni*") >= FOUND)
			  || (indexof(t, "ZOni*") >= FOUND) || (indexof(t, "|*¯*|") >= FOUND))) {
			  if ((p > EXISTS) && (indexof(b, PRESENT_ENDING) >= FOUND)) {
				b = addAuxiliaryVerb(b, p, negativeFound, "doesn't|", "does|");
				break;
			  }
			}
			else if ((p > EXISTS) && (indexof(b, PRESENT_ENDING) >= FOUND)) {
			  b = addAuxiliaryVerb(b, p, negativeFound, "don't|", "do|");
			  break;
			}
		  } while (false);

		  b = conjugateBeWithoutDo(b); // Remove Do and conjugate To Be
		  //out << "7475 b:" + b;
		  do {
			//out << "7527" + t;
			if (!(indexof(nextWord(1), "*it*a*") >= FOUND)) {
			  if ((lowerall(nextWord(1)).compare("{*ne*¯*fnot/no*}") == 0)) {
				if (!((indexof(nextWord(2), "*it*a*") >= FOUND)
				  || ((lowerall(nextWord(2)).compare("{*nur*¯*fonly*}") == 0)
				  && (indexof(nextWord(3), "*it*a*") >= FOUND)))) {
				  break;
				}
			  } else {
				break;
			  }
			}
			b = adjustPassivePerfects(b);
			//out << "7490 b:" + b;
		  } while (false);

		  b = adjustAgentAndReceiver(b); // Adjust doer & receiver of verb action
		  //out << "7494 b:" + b;
		  b = pluralize(b); // Pluralize noun if needed
		  //out << "7496 b:" + b;
		  string saveB;
		  do { // Add There to There is/are/was/were
			//out << "7548" + t;
			if (sp != 0) {
			  if ((((indexof(nextWord(sp), NOUN_ENDING) >= FOUND) && (nextWord(sp
				+ 1).find(ADJECTIVE_ENDING) == NOT_FOUND))
				|| ((indexof(nextWord(sp), ADJECTIVE_ENDING) >= FOUND) && (nextWord(sp
				+ 1).find(NOUN_ENDING) >= FOUND) && (nextWord(sp
				+ 2).find(ADJECTIVE_ENDING) == NOT_FOUND)))) {
				saveB = b;
				b = addThereToBe(b);
				if (saveB.compare(b) == 0) {
				  break;
				}
			  }
			}
		  } while (false);
		  //out << "7514 b:" + b;
		  // Process articles and nominatives after to be, become, seem, remain:
		  if ((startswith(b, "{*est*")) || (startswith(b, "{*rest*"))
			|| (startswith(b, "{*igx*")) || (startswith(b, "{*sxajn*"))
			|| (startswith(b, "{*Est*")) || (startswith(b, "{*Rest*"))
			|| (startswith(b, "{*Igx*")) || (startswith(b, "{*Sxajn*"))) {
			copulaNominativePredicateNoun();
		  }
		  b = cutDoDidFromHave(b);
		  //out << "7523 b:" + b;
		  if (indexof(b, "*I") < 2) {
			break;
		  }

		  b = addEkStart(b);

		  b = adjustDoModal(b);
		  //out << "7531 b:" + b;
		} while (false);

		cleanup();

		do {
		  if (!((indexof(nextWord(1), "*int*a*¯") >= FOUND)
			|| (indexof(nextWord(1), "*int*a*j*¯") >= FOUND))) {
			//out << "7587" + b;
			if ((lowerall(nextWord(1)).compare("{*ne*¯*fnot/no*}") == 0)) {
			  //out << "7589" + t;
			  if (!((indexof(nextWord(2), "*int*a*") >= FOUND)
				|| ((lowerall(nextWord(2)).compare("{*nur*¯*fonly*}") == 0)
				&& (indexof(nextWord(3), "*int*a*") >= FOUND)))) {
				//out << "7593" + t;
				break;
			  }
			} else {
			  break;
			}
		  }

		  // Adjust active perfect tenses:
		  //out << "7600" + t;
		  b = adjustActivePerfects(b);
		  //out << "7556 b:" + b;
		} while (false);

		t = rep(t, fb, b);
		//out << "7606" + t;
		if (startswith(t, "*")) {
		  t = " {" + t;
		}
	  } while (1 == 0);
	} while (1 == 0);
	//out << "7612" + t;
	b = nextWord(-1);
	//out << "7568 t:" + t;
  } while (b != "");
}

static bool selfType(string w1, string w2) {
  // Select -self
  if (p >= 0) {
	if (t.length() >= x + 50) {
	  if (t.substr(x, x + 50 - (x)).find(" " + w1 + " ") >= FOUND) {
		t = t.substr(0, p) + w2 + t.substr(p + 33);
		return true;
	  }
	}
  }
  return false;
}

static void cleanup() {
  // Fix spacing and delimiters and _ing
  rgx = "\\{([^*])";
  t = regex_replace(t, rgx, "{*$1");
  rgx = "([^*])\\}";
  t = regex_replace(t, rgx, "$1*}");
  if (!(t.substr(0, 1).compare(" ") == 0)) {
	t = " " + t.substr(1);
  }
  if ((!(t.substr(0, 2).compare(" {") == 0) && (indexof((fs = "1234567890.,-+$#%@¬¯"), t.substr(1, 2 - 1)) == NOT_FOUND))) {
	t = " {" + t.substr(2);
  }
  if ((!(t.substr(0, 3).compare(" {*") == 0) && (indexof((fs = "1234567890.,-+$#%@¬¯"), t.substr(1, 2 - 1)) == NOT_FOUND) &&
	(indexof((fs = "1234567890"), t.substr(2, 3 - 2)) == NOT_FOUND))) {
	t = " {*" + t.substr(3);
  }
  t = rep(t, "{*{*", "{*");
  t = rep(t, "*}*}", "*}");
  t = rep(t, " } ", " ");
  t = rep(t, " {*} ", " ");
  t = rep(t, " {*}", " ");
  t = rep(t, "{*} ", " ");
  t = rep(t, "{*}", "");
  t = rep(t, "o*no*¯", "o*¯");
  t = rep(t, "*,{", "*}, {");
  t = rep(t, "null{", "{");
  t = rep(t, "}null", "}");
  t = rep(t, "}{", "} {");
  rgx = "\\} ([.,?!:;])";
  t = regex_replace(t, rgx, "}$1");
  t = rep(t, " *", " {*");
  t = rep(t, "* ", "*} ");
  t = rep(t, "{*{*", "{*");
  t = rep(t, "*}*}", "*}");
  t = rep(t, "{{", "{");
  t = rep(t, "}}", "}");
  t = rep(t, "   ", " ");
  t = rep(t, "  ", " ");
  t = rep(t, "} .", "}.");
  t = rep(t, "} ?", "}?");
  t = rep(t, "} ,", "},");
  t = rep(t, "} ;", "};");
  t = rep(t, "} :", "}:");
  t = rep(t, "} -", "}-");
  t = rep(t, "_inged", "_ing");
  t = rep(t, " } ", " ");
  t = rep(t, "{*} ", "");
  t = rep(t, "{**", "{*");
  //out << "new t:" + t;
}

static void postProcessing() {
  // Perfect tense corrections:
  // Also uses tx2 and local t
  int x, y, ic;
  string c, v;
  bool gf, gf2, gf3, gf4, gf5, gf6;
  // full text with spaces before and after:
  int p = 0;
  t = " " + tx2;
  //out << "7656" + t;
  cleanup();

  p = indexof(t, "*", p + 2);

  if (p >= FOUND) {
	do {
	  if (indexof(wordDivisionAlphabet, t.substr(p - 1, p - (p - 1))) == NOT_FOUND) {
		t = t.substr(0, p) + "{" + t.substr(p);
	  }
	  else if (indexof(wordDivisionAlphabet, t.substr(p + 1, p + 2 - (p + 1)))
		== NOT_FOUND) {
		t = t.substr(0, p) + "}" + t.substr(p + 1);
	  }
	  p = indexof(t, "*", p + 2);
	} while (p >= FOUND);
  }

  // Change pronoun after preposition to object form:
  p = indexof(t, PREPOSITION_MARKER);
  if (p >= FOUND) {
	do {
	  if ((t + "                              ").substr(p, p
		+ 30 - (p)).find("*ol*") >= FOUND) {
		break;
	  }
	  x = indexof(t, "{*mi*¯*ZI*}", p + 8);
	  if ((x - p < 22) && (x - p > 6)) {
		t = t.substr(0, x) + "{*min*¯*Zme*}"
		  + t.substr(x + 11);
	  }
	  x = indexof(t, "{*mi mem*¯*ZI|myself*}", p + 8);
	  if ((x - p < 22) && (x - p > 6)) {
		t = t.substr(0, x)
		  + "{*min*¯*Zme|myself*}" + t.substr(x + 22);
	  }
	  x = indexof(t, "{*ni*¯*Zwe*}", p + 8);
	  if ((x - p < 22) && (x - p > 6)) {
		t = t.substr(0, x)
		  + "{*nin*¯*Zus*}" + t.substr(x + 12);
	  }
	  x = indexof(t, "{*ni mem*¯*Zwe|ourselves*}", p + 8);
	  if ((x - p < 22) && (x - p > 6)) {
		t = t.substr(0, x)
		  + "{*nin*¯*Zus|ourselves*}" + t.substr(x + 26);
	  }
	  x = indexof(t, "{*li*¯*Zhe*}", p + 8);
	  if ((x - p < 22) && (x - p > 6)) {
		t = t.substr(0, x) + "{*lin*¯*Zhim*}"
		  + t.substr(x + 12);
	  }
	  x = indexof(t, "{*li mem*¯*Zhe|himself*}", p + 8);
	  if ((x - p < 22) && (x - p > 6)) {
		t = t.substr(0, x)
		  + "{*lin*¯*Zhim|himself*}" + t.substr(x + 24);
	  }
	  x = indexof(t, "{*sxi*¯*Zshe*}", p + 8);
	  if ((x - p < 22) && (x - p > 6)) {
		t = t.substr(0, x)
		  + "{*sxin*¯*Zher*}" + t.substr(x + 14);
	  }
	  x = indexof(t, "{*sxi mem*¯*Zshe|herself*}", p + 8);
	  if ((x - p < 22) && (x - p > 6)) {
		t = t.substr(0, x)
		  + "{*sxin*¯*Zher|herself*}" + t.substr(x + 26);
	  }
	  x = indexof(t, "{*ili*¯*Zthey*}", p + 8);
	  if ((x - p < 22) && (x - p > 6)) {
		t = t.substr(0, x)
		  + "{*ilin*¯*Zthem*}" + t.substr(x + 15);
	  }
	  x = indexof(t, "{*ili mem*¯*Zthey|themselves*}", p + 8);
	  if ((x - p < 22) && (x - p > 6)) {
		t = t.substr(0, x)
		  + "{*ilin*¯*Zthem|themselves*}" + t.substr(x + 30);
	  }
	  x = indexof(t, "{*kiu*¯*Awho/which*}", p + 8);
	  if ((x - p < 22) && (x - p > 6)) {
		t = t.substr(0, x)
		  + "{*kiun*¯*Awhom/which*}" + t.substr(x + 20);
	  }
	  x = indexof(t, "{*kiuj*¯*Awho/which*}", p + 8);
	  if ((x - p < 22) && (x - p > 6)) {
		t = t.substr(0, x)
		  + "{*kiujn*¯*Awhom/which*}" + t.substr(x + 21);
	  }
	  p = NOT_FOUND;
	  if ((x >= FOUND) && (t.length() > x + 7)) {
		p = indexof(t, PREPOSITION_MARKER, x + 7);
	  }
	} while (p >= FOUND);
  }

  p = indexof(t, "{*iom*¯*Fsome*}");
  if (p >= FOUND) {
	p = indexof(t, "¯*A", p + 20);
	if (p >= FOUND) {
	  p = indexof(t, "¯*O", p + 5);
	  if (p == NOT_FOUND) {
		t = t.substr(0, indexof(t, "{*iom*¯*Fsome*}")) + "{*iom*¯*Fsomewhat*}" +
		  t.substr(indexof(t, "{*iom*¯*Fsome*}") + 15);
	  }
	}
  }

  p = indexof(t, "{*Iom*¯*FSome*}");
  if (p >= FOUND) {
	p = indexof(t, "¯*A");
	if (p >= FOUND) {
	  p = indexof(t, "¯*O", p + 5);
	  if (p == NOT_FOUND) {
		t = t.substr(0, indexof(t, "{*Iom*¯*FSome*}")) + "{*Iom*¯*FSomewhat*}" +
		  t.substr(indexof(t, "{*Iom*¯*FSome*}") + 15);
	  }
	}
  }

  rgx = "nt\\*a\\*j\\*¯\\*I(.{6,70})\\*n\\*¯\\*A";

  t = regex_replace(t, rgx, "nt*a*j*¯*I$1*¯*A");
  rgx = "nt\\*a\\*j\\*¯\\*I(.{6,100})[^*]n\\*¯\\*O";
  t = regex_replace(t, rgx, "nt*a*j*¯*I$1*¯*O");
  rgx = "nt\\*a\\*j\\*¯\\*I(.{6,70})\\*n\\*¯\\*A";
  t = regex_replace(t, rgx, "nt*a*j*¯*I$1*¯*A");
  rgx = "nt\\*a\\*j\\*¯\\*I(.{6,100})[^*]n\\*¯\\*O";
  t = regex_replace(t, rgx, "nt*a*j*¯*I$1*¯*O");
  rgx = "nt\\*a\\*j\\*¯\\*I(.{6,100})n\\|\\*¯\\*\\|";
  t = regex_replace(t, rgx, "nt*a*j*¯*I$1|*¯*|");
  t = rep(t, " |*¯*|", " {*|undefined|*¯*|");
  cleanup();
  //out << "b4 inflec:" + t + "\n";
  //out << "inf:" + t;
  englishInflection(); // English inflexion
  //out << "after inflec:" + t + "\n";
  //out << "infl" + t;
  cleanup();
  //out << t;
  addOneAfterAdjectives();
  //out << "after addoneadjs:" + t + "\n";

  cleanup();

  subjectVerbObject(); // Adjust word order
  //out << "after svo" + t + "\n";
  cleanup();
  //out << "inf:" + t;
  if (adjSubjectFound) {
	t = rep(t, "{*ali*a*j*¯*Aother*}", "{*ali*a*j*¯*Aothers*}");
	t = rep(t, "{*Ali*a*j*¯*AOther*}", "{*Ali*a*j*¯*AOthers*}");
	adjSubjectFound = false;
  }
  cleanup();

  insertIndefiniteArticles();
  //out << "after indefart" + t + "\n";
  cleanup();

  t = rep(t, "¯*Aauxiliary)|be)|be*}", "¯*Ito|(helpful)|be*}");
  t = rep(t, "{*Cxiu*¯*AEach*} {*unu*¯*Na*}", "{*Cxiu*¯*AEach*}");
  t = rep(t, "{*cxiu*¯*Aeach*} {*unu*¯*Na*}", "{*cxiu*¯*Aeach*}");
  t = rep(t, "|own*} {*un*o*¯*Oone*}", "|own*}");
  t = rep(t, "|own*} {*un*o*n*¯*Oone*}", "|own*}");
  p = indexof(t, "_ing*Ae_able");
  if (p >= FOUND) {
	t = t.substr(0, p) + "_able" + t.substr(p + 12);
  }
  p = indexof(t, "{*de*¯*Pof/from*} {");
  if (p >= FOUND) {
	p += 18;
	x = indexof(t, "}", p);
	if (t.substr(p, x - (p)).find(INFINITIVE) >= FOUND) {
	  t = t.substr(0, x - 1) + "_ing*}" + t.substr(x + 1);
	}
  }

  p = indexof(t, "_ing"); // Adjust _ing, _ed, _er(s), _able, _ably & make & become
  if (p >= FOUND) {
	do {
	  c = "";
	  if ((indexof(esperantoConsonants, t.substr(p - 1, p - (p - 1))) >= FOUND)
		&& (indexof(VOWELS, t.substr(p - 2, p - 1 - (p - 2))) >= FOUND)
		&& (indexof(VOWELS, t.substr(p - 3, p - 2 - (p - 3))) == NOT_FOUND)) {
		c = t.substr(p - 1, p - (p - 1));
		if (c.compare("c") == 0) {
		  c = "k"; // panicking
		}
		t = t.substr(0, p) + c + t.substr(p + 1);
	  }
	  else if (t.substr(p - 1, p - (p - 1)).compare("e") == 0) {
		t = t.substr(0, p - 1) + t.substr(p + 1);
	  }
	  else {
		t = t.substr(0, p) + t.substr(p + 1);
	  }
	  p = indexof(t, "_ing", p + 2);
	} while (p >= FOUND);
  }
  p = indexof(t, "_ers");
  if (p >= FOUND) {
	do {
	  addSuffix(p);
	  p = indexof(t, "_ers", p + 2);
	} while (p >= FOUND);
  }
  p = indexof(t, "_er");
  if (p >= FOUND) {
	do {
	  addSuffix(p);
	  p = indexof(t, "_er", p + 2);
	} while (p >= FOUND);
  }
  p = indexof(t, ")|ma");
  if (!((p == NOT_FOUND) || (indexof(t, "(to|") + indexof(t, "(To|")
	== NOT_FOUND) || (indexof(t, "*¯*O") >= FOUND))) {
	if (((t.substr(p, p + 6 - (p)).compare(")|make") == 0) || (t.substr(p, p
	  + 8 - (p)).compare(")|made*}") == 0) || (t.substr(p, p + 10 - (p)).compare(")|making*}") == 0))) {
	  do {
		t = t.substr(0, p) + t.substr(p);
		y = p - 1;
		while ((!t.substr(y, y + 4 - (y)).compare("(to|") == 0) && (!t.substr(y, y
		  + 4 - (y)).compare("(To|") == 0) && (y > START)) {
		  y--;
		}
		t = t.substr(0, y + 1) + t.substr(y + 4, p - (y + 4)) + "_edoqk" + t.substr(p);
		p = indexof(t, ")|ma", p + 7);
		if (p < 1) {
		  break;
		}
	  } while (((indexof(t, "(to|") >= FOUND) || (indexof(t, "(To|") >= FOUND))
		&& ((t.substr(p, p + 6 - (p)).compare(")|make") == 0)) || (t.substr(p, p
		+ 8 - (p)).compare(")|made*}") == 0) || (t.substr(p, p + 10 - (p)).compare(")|making*}") == 0));
	}
  }

  p = indexof(t, "_ed");
  if (p >= FOUND) {
	do {
	  y = p - 1;
	  while ((!t.substr(y, y + 1 - (y)).compare("*") == 0) && (!t.substr(y, y
		+ 1 - (y)).compare("|") == 0) && (!t.substr(y, y + 1 - (y)).compare("-") == 0)
		&& (!t.substr(y, y + 1 - (y)).compare("(") == 0) && (y > START)) {
		y--;
	  }
	  if (t.substr(y, y + 1 - (y)).compare("*") == 0) {
		y += 2;
	  }
	  else {
		y++;
	  }
	  v = t.substr(y, p - (y));
	  x = 0;
	  while (x <= totalIrregularVerbs) { // Change to past participle
		if (v.compare(englishRoots[x]) == 0) {
		  v = englishPastParticiples[x];
		  break;
		}
		x++;
	  }
	  if (x <= totalIrregularVerbs) {
		t = t.substr(0, y) + v + t.substr(p + 3);
	  }
	  else {
		v += "_ed";
		c = "";
		if ((indexof(esperantoConsonants, t.substr(p - 1, p - (p - 1))) >= FOUND)
		  && (indexof(VOWELS, t.substr(p - 2, p - 1 - (p - 2))) >= FOUND)
		  && (indexof(VOWELS, t.substr(p - 3, p - 2 - (p - 3))) == NOT_FOUND)) {
		  c = t.substr(p - 1, p - (p - 1));
		  if (c.compare("c") == 0) {
			c = "k";
		  }
		  t = t.substr(0, p) + c + t.substr(p + 1);
		}
		else if (t.substr(p - 1, p - (p - 1)).compare("e") == 0) {
		  t = t.substr(0, p - 1) + t.substr(p + 1);
		}
		else {
		  if ((t.substr(p - 1, p - (p - 1)).compare("y") == 0)
			&& (indexof(consonants, t.substr(p - 2, p - 1 - (p - 2))) >= FOUND)) {
			t = t.substr(0, p - 1) + "i" + t.substr(p);
		  }
		  t = t.substr(0, p) + t.substr(p + 1);
		}
	  }
	  p = indexof(t, "_ed", p + 2);
	} while (p >= FOUND);
  }
  p = indexof(t, ")|bec");
  if (!((p == NOT_FOUND) || ((indexof(t, "(to|") == NOT_FOUND)
	&& (indexof(t, "(To|") == NOT_FOUND)) || (indexof(t, "*¯*O") >= FOUND))) {
	if (((t.substr(p, p + 7 - (p)).compare(")|becom") == 0) || (t.substr(p, p
	  + 7 - (p)).compare(")|becam") == 0))) {
	  do {
		t = t.substr(0, p) + "_ed" + t.substr(p);
		y = p - 1;
		while ((!t.substr(y, y + 4 - (y)).compare("(to|") == 0) && (y > START)) {
		  y--;
		}
		v = t.substr(y + 4, p - (y + 4));
		x = 0;
		while (x <= totalIrregularVerbs) { // Change to past participle
		  if (v.compare(englishRoots[x]) == 0) {
			v = englishPastParticiples[x];
			break;
		  }
		  x++;
		}
		if (x <= totalIrregularVerbs) {
		  t = t.substr(0, y + 1) + v + t.substr(p + 3);
		}
		else {
		  c = "";
		  if ((indexof(esperantoConsonants, t.substr(p - 1, p - (p - 1))) >= FOUND)
			&& (indexof(VOWELS, t.substr(p - 2, p - 1 - (p - 2))) >= FOUND)
			&& (indexof(VOWELS, t.substr(p - 3, p - 2 - (p - 3))) == NOT_FOUND)) {
			c = t.substr(p - 1, p - (p - 1));
			if (c.compare("c") == 0) {
			  c = "k";
			}
			t = t.substr(0, y + 1) + v + c + "ed" + t.substr(p + 3);
		  }
		  else if (t.substr(p - 1, p - (p - 1)).compare("e") == 0) {
			t = t.substr(0, y + 1) + v + "d" + t.substr(p + 3);
		  }
		  else {
			if ((t.substr(p - 1, p - (p - 1)).compare("y") == 0)
			  && (indexof(consonants, t.substr(p - 2, p - 1 - (p - 2))) >= FOUND)) {
			  v = v.substr(0, v.length() - 1) + "i";
			}
			t = t.substr(0, y + 1) + v + "ed" + t.substr(p + 3);
		  }
		}
		p = indexof(t, ")|bec", p + 7);
		if (p == NOT_FOUND) {
		  break;
		}
	  } while ((indexof(t, "(to|") + indexof(t, "(To|") >= NOT_FOUND)
		&& ((t.substr(p, p + 7 - (p)).compare(")|becom") == 0) || (t.substr(p, p
		+ 7 - (p)).compare(")|becam") == 0)));
	}
  }
  p = indexof(t, "_ed|ones");
  if (p >= FOUND) {
	do {
	  addSuffix(p);
	  p = indexof(t, "_ed|ones", p + 2);
	} while (p >= FOUND);
  }
  p = indexof(t, "_ed|one");
  if (p >= FOUND) {
	do {
	  addSuffix(p);
	  p = indexof(t, "_ed|one", p + 2);
	} while (p >= FOUND);
  }
  p = indexof(t, "_able");
  //out << "7221:" + t;
  if (p >= FOUND) {
	do {
	  c = "";
	  if ((indexof(esperantoConsonants, t.substr(p - 1, p - (p - 1))) >= FOUND)
		&& (indexof(VOWELS, t.substr(p - 2, p - 1 - (p - 2))) >= FOUND)
		&& (indexof(VOWELS, t.substr(p - 3, p - 2 - (p - 3))) == NOT_FOUND)) {
		c = t.substr(p - 1, p - (p - 1));
		if (c.compare("c") == 0) {
		  c = "k";
		}
		t = t.substr(0, p) + c + t.substr(p + 1);
	  }
	  else if ((t.substr(p - 2, p - (p - 2)).compare("ce") == 0) || (t.substr(p - 2,
		p - (p - 2)).compare("ge") == 0)) {
		t = t.substr(0, p) + t.substr(p + 1);
	  }
	  else if (t.substr(p - 1, p - (p - 1)).compare("e") == 0) {
		t = t.substr(0, p - 1) + t.substr(p + 1);
	  }
	  else {
		t = t.substr(0, p) + t.substr(p + 1);
	  }
	  p = indexof(t, "_able", p + 2);
	} while (p >= FOUND);
  }
  p = indexof(t, "_ably");
  if (p >= FOUND) {
	do {
	  c = "";
	  if ((indexof(esperantoConsonants, t.substr(p - 1, p - (p - 1))) >= FOUND)
		&& (indexof(VOWELS, t.substr(p - 2, p - 1 - (p - 2))) >= FOUND)
		&& (indexof(VOWELS, t.substr(p - 3, p - 2 - (p - 3))) == NOT_FOUND)) {
		c = t.substr(p - 1, p - (p - 1));
		if (c.compare("c") == 0) {
		  c = "k";
		}
		t = t.substr(0, p) + c + t.substr(p + 1);
	  }
	  else if ((t.substr(p - 2, p - (p - 2)).compare("ce") == 0) || (t.substr(p - 2,
		p - (p - 2)).compare("ge") == 0)) {
		t = t.substr(0, p) + t.substr(p + 1);
	  }
	  else if (t.substr(p - 1, p - (p - 1)).compare("e") == 0) {
		t = t.substr(0, p - 1) + t.substr(p + 1);
	  }
	  else {
		t = t.substr(0, p) + t.substr(p + 1);
	  }
	  p = indexof(t, "_ably", p + 2);
	} while (p >= FOUND);
  }

  // (to|(out|for|bids)|put)|make:
  p = indexof(t, "(to|(");
  if (p == NOT_FOUND) {
	p = indexof(t, "(To|(", p + 1);
  }
  if (p >= FOUND) {
	do {
	  x = indexof(t, ")", p + 5);
	  if (x == NOT_FOUND) {
		break;
	  }
	  y = indexof(t, ")", x + 2);
	  t = t.substr(0, p + 1) + t.substr(x + 2, y - (x + 2)) + "|" + t.substr(p
		+ 5, x + 1 - (p
		+ 5)) + t.substr(y + 1);
	  p = indexof(t, "(to|(", y);
	  if (p == NOT_FOUND) {
		p = indexof(t, "(To|(", p + 1);
	  }
	} while (p >= FOUND);
  }
  // )|put)|make:
  p = indexof(t, "((");
  if (p >= FOUND) {
	do {
	  x = indexof(t, ")", p + 2);
	  if (x == NOT_FOUND) {
		break;
	  }
	  y = indexof(t, ")", x + 2);
	  t = t.substr(0, p + 1) + t.substr(x + 2, y - (x + 2)) + "|" + t.substr(p
		+ 2, x + 1 - (p
		+ 2)) + t.substr(y + 1);
	  p = indexof(t, "((", y);
	} while (p >= FOUND);
  }

  if (startswith(t, " {*Ne*¯*FNot/no*} ")) {
	if ((indexof(t.substr(15), "u*¯*I") >= FOUND)
	  && (indexof(t.substr(15), "u*¯*I") < 40)) {
	  t = " {*Ne*¯*FDon't*} " + t.substr(18);
	  t = rep(t, "u*¯*Ishould|", "u*¯*I");
	  noItq = true;
	}
  }
  if (startswith(t, " {*Sed*¯*CBut*} {*ne*¯*Fnot/no*} ")) {
	if ((indexof(t.substr(30), "u*¯*I") >= FOUND)
	  && (indexof(t.substr(30), "u*¯*I") < 55)) {
	  t = " {*Sed*¯*CBut*} {*ne*¯*Fdon't*} " + t.substr(33);
	  t = rep(t, "u*¯*Ishould|", "u*¯*I");
	  noItq = true;
	}
  }
  if (startswith(t, " {*Sed*¯*CBut*}, {*ne*¯*Fnot/no*} ")) {
	if ((indexof(t.substr(31), "u*¯*I") >= FOUND)
	  && (indexof(t.substr(31), "u*¯*I") < 56)) {
	  t = " {*Sed*¯*CBut*}, {*ne*¯*Fdon't*} " + t.substr(34);
	  t = rep(t, "u*¯*Ishould|", "u*¯*I");
	  noItq = true;
	}
  }
  if (startswith(t, " {*Kaj*¯*CAnd*} {*ne*¯*Fnot/no*} ")) {
	if ((indexof(t.substr(30), "u*¯*I") >= FOUND)
	  && (indexof(t.substr(30), "u*¯*I") < 55)) {
	  t = " {*Kaj*¯*CAnd*} {*ne*¯*Fdon't*} " + t.substr(33);
	  t = rep(t, "u*¯*Ishould|", "u*¯*I");
	  noItq = true;
	}
  }
  if (startswith(t, " {*Kaj*¯*CAnd*}, {*ne*¯*Fnot/no*} ")) {
	if ((indexof(t.substr(31), "u*¯*I") >= FOUND)
	  && (indexof(t.substr(31), "u*¯*I") < 56)) {
	  t = " {*Kaj*¯*CAnd*}, {*ne*¯*Fdon't*} " + t.substr(34);
	  t = rep(t, "u*¯*Ishould|", "u*¯*I");
	  noItq = true;
	}
  }
  if (startswith(t, " {*Aux*¯*COr/either*} {*ne*¯*Fnot/no*} ")) {
	if ((indexof(t.substr(36), "u*¯*I") >= FOUND)
	  && (indexof(t.substr(36), "u*¯*I") < 54)) {
	  t = " {*Aux*¯*COr*} {*ne*¯*Fdon't*} " + t.substr(39);
	  t = rep(t, "u*¯*Ishould|", "u*¯*I");
	  noItq = true;
	}
  }
  if (startswith(t, " {*Aux*¯*COr/either*}, {*ne*¯*Fnot/no*} ")) {
	if ((indexof(t.substr(37), "u*¯*I") >= FOUND)
	  && (indexof(t.substr(37), "u*¯*I") < 55)) {
	  t = " {*Aux*¯*COr*}, {*ne*¯*Fdon't*} " + t.substr(40);
	  t = rep(t, "u*¯*Ishould|", "u*¯*I");
	  noItq = true;
	}
  }
  // I made run him > I made him run:
  t = adjustHaveDo("{*lin*¯*Zhim*}");
  t = adjustHaveDo("{*sxin*¯*Zher*}");
  t = adjustHaveDo("{*ilin*¯*Zthem*}");
  t = adjustHaveDo("{*gxin*¯*Zit*}");
  t = adjustHaveDo("{*vin*¯*Zyou*}");
  t = adjustHaveDo("{*cin*¯*Zyou*}");
  t = adjustHaveDo("{*min*¯*Zme*}");
  t = adjustHaveDo("{*nin*¯*Zus*}");
  t = adjustHaveDo("{*sin*¯*Zhimself/herself/itself/themselves*}");
  t = adjustHaveDo("{*onin*¯*Zone*}");
  addMake("es");
  addMake("ed");
  addMake("e");
  addMake("ing");
  // Use single consonants before -ed, -ing after unstressed vowel:
  t = rep(t, "happenn", "happen");
  t = rep(t, "openn", "open");
  t = rep(t, "putt", "put");
  t = rep(t, "orderr", "order");
  t = rep(t, "coverr", "cover");
  t = rep(t, "listenn", "listen");
  t = rep(t, "frightenn", "frighten");
  t = rep(t, "visitt", "visit");
  t = rep(t, "numberr", "number");
  t = rep(t, "differr", "differ");
  t = rep(t, "editt", "edit");
  t = rep(t, "togetherr", "together");
  t = rep(t, "prohibitt", "prohibit");
  t = rep(t, "registerr", "register");
  t = rep(t, "considerr", "consider");
  t = rep(t, "hardenn", "harden");
  t = rep(t, "abandonn", "abandon");
  t = rep(t, "depositt", "deposit");
  t = rep(t, "travell", "travel");
  t = rep(t, "totall", "total");
  t = rep(t, "inheritt", "inherit");
  t = rep(t, "colorr", "color");
  t = rep(t, "seasonn", "season");
  t = rep(t, "answerr", "answer");
  t = rep(t, "flavorr", "flavor");
  t = rep(t, "enterr", "enter");
  t = rep(t, "favorr", "favor");
  t = rep(t, "lowerr", "lower");
  t = rep(t, "wanderr", "wander");
  t = rep(t, "softenn", "soften");
  t = rep(t, "whitenn", "whiten");
  t = rep(t, "blackenn", "blacken");
  t = rep(t, "developp", "develop");
  t = rep(t, "controll", "control");
  t = rep(t, "inhibitt", "inhibit");
  t = rep(t, "ransomm", "ransom");
  t = rep(t, "sufferr", "suffer");
  t = rep(t, "fastenn", "fasten");
  t = rep(t, "utterr", "utter");
  t = rep(t, "burdenn", "burden");
  t = rep(t, "rememberr", "remember");
  t = rep(t, "christenn", "christen");
  t = rep(t, "encounterr", "encounter");
  t = rep(t, "counterr", "counter");
  t = rep(t, "solderr", "solder");
  t = rep(t, "soldierr", "soldier");
  t = rep(t, "shelterr", "shelter");
  t = rep(t, "loosenn", "loosen");
  t = rep(t, "tightenn", "tighten");

  // See if impersonal "it" is needed;
  x = 1;
  do {
	p = indexof(t, PRETERITE_SUFFIX, x);
	if (p == NOT_FOUND) {
	  p = indexof(t, PRESENT_SUFFIX, x);
	}
	if (p == NOT_FOUND) {
	  p = indexof(t, FUTURE_SUFFIX, x);
	}
	if (p == NOT_FOUND) {
	  p = indexof(t, CONDITIONAL_SUFFIX, x);
	}
	//if (p == NOT_FOUND) p = indexof(t, "*u*¯", x);
	if (p == NOT_FOUND) {
	  break;
	}
	p = indexof(t, DIV, p);
	y = p + 4;
	while ((y <= t.length() - 1) && (indexof((fs = ".?!¬¯"), t.substr(y, y + 1 - (y)))
	  == NOT_FOUND)) {
	  y++;
	}
	if ((t.substr(x, y - (x)).find(PRONOUN_ENDING) == NOT_FOUND)
	  && (t.substr(x, y - (x)).find(PROPER_NOUN_DIVIDER) == NOT_FOUND)
	  && (t.substr(x, y - (x)).find("*|undefined|*") == NOT_FOUND)
	  && (t.substr(x, y - (x)).find(NOUN_SINGULAR) == NOT_FOUND)
	  && (t.substr(x, y - (x)).find("o*j*¯") == NOT_FOUND)
	  && (t.substr(x, y - (x)).find(NOUN_PLURAL_ENDING_ORIG) == NOT_FOUND)
	  && (t.substr(x, y - (x)).find(ADJECTIVE_SUFFIX) == NOT_FOUND)
	  && (t.substr(x, y - (x)).find(ADJECTIVE_PLURAL_SUFFIX) == NOT_FOUND)
	  && (t.substr(x, y - (x)).find(ADJECTIVE_PLURAL_ORIG) == NOT_FOUND)
	  && (t.substr(x, y - (x)).find("iu*") == NOT_FOUND)
	  && (t.substr(x, y - (x)).find("iuj*") == NOT_FOUND)
	  && (t.substr(x, y - (x)).find("i*a") == NOT_FOUND)
	  && (t.substr(x, y - (x)).find("i*a*j") == NOT_FOUND)
	  && (t.substr(x, y - (x)).find("iom*") == NOT_FOUND)
	  && (t.substr(x, y - (x)).find("ioma*") == NOT_FOUND)) {
	  ic = p - 3;
	  while ((ic > 0) && (!t.substr(ic, ic + 1 - (ic)).compare("{") == 0)) {
		ic--;
	  }
	  if (t.length() > ic + 2)
	  {
		if (!(islower(t[ic + 2])))
		{
		  t = lower(t, ic + 2);
		  if (!t.substr(p + 3, p + 4 - (p + 3)).compare("(") == 0)
		  {
			t = lower(t, p + 3);
		  }
		  else
		  {
			p = indexof(t, ")", p + 2) + 2;
			t = lower(t, p);
		  }
		  if (!noItq)
		  {
			t = t.substr(0, ic) + "{*Gxi*¯*ZItq*} " + t.substr(ic);
		  }
		}
		else
		{
		  if (!noItq)
		  {
			t = t.substr(0, ic) + "{*gxi*¯*Zitq*} " + t.substr(ic);
		  }
		}
	  }
	  x = y + 15;
	}
	else {
	  break;
	}
  } while (true);
  p = indexof(t, "*Qwrongly*O");
  if (p >= FOUND) {
	do {
	  t = t.substr(0, p + 7) + t.substr(p + 9);
	  p = indexof(t, "*Qwrongly*O");
	} while (p >= FOUND);
  }

  do {
	gf = false;
	do {
	  p = indexof(t, " {*un*o*¯*Oone*} {*kiel*¯*Clike/how*} {*unu*¯*Na*} ");
	  if (p >= FOUND) {
		t = t.substr(0, p + 1) + "{*kiel*¯*Cas*} " + t.substr(p + 51);
		while ((p > 0) && (!t.substr(p, p + 1 - (p)).compare("{") == 0)) {
		  p--;
		}
		if (p == 0) {
		  gf = true;
		  break;
		}
		p--;
		while ((p > 0) && (!t.substr(p, p + 1 - (p)).compare("{") == 0)) {
		  p--;
		}
		if (p == 0) {
		  gf = true;
		  break;
		}
		if (lowerall(t.substr(p, 13)).compare("{*unu*¯*na*} ") == 0) {
		  t = t.substr(0, p) + t.substr(p + 13);
		}
		gf = true;
		break;
	  }
	} while (false);
  } while (gf);
  p = indexof(t, " {*un*o*j*¯*Oones*} {*kiel*¯*Clike/how*} {*unu*¯*Na*} ");
  if (p >= FOUND) {
	do {
	  t = t.substr(0, p + 1) + "{*kiel*¯*Cas*} " + t.substr(p + 54);
	  p = indexof(t, " {*un*o*j*¯*Oones*} {*kiel*¯*Clike/how*} {*unu*¯*Na*} ");
	} while (p >= FOUND);
  }

  p = indexof(t, "{*kiel*¯*Clike/how*}");
  if ((p >= FOUND) && (indexof(t, "¯*I", p + 20) == NOT_FOUND)) {
	do {
	  t = t.substr(0, p) + "{*kiel*¯*Clike/as*} " + t.substr(p + 20);
	  p = indexof(t, "{*kiel*¯*Clike/how*}");
	} while ((p >= FOUND) && (indexof(t, "¯*I", p + 20) == NOT_FOUND));
  }

  // de = by:
  deBy("*at*a*");
  deBy("*it*a*");
  deBy("*ot*a*");
  deBy("*ut*a*");

  p = indexof(t, "*");
  if (p > 0) {
	if (!t.substr(p - 1, p - (p - 1)).compare("{") == 0) {
	  if (indexof(PART_OF_SPEECH_TAGS, t.substr(p + 1, p + 2 - (p + 1))) >= FOUND) {
		do {
		  t = t.substr(0, p) + "-" + t.substr(p + 2);
		  p = indexof(t, "*");
		  if (p < 1) {
			break;
		  }
		} while ((!t.substr(p - 1, p - (p - 1)).compare("{") == 0)
		  && (indexof(PART_OF_SPEECH_TAGS, t.substr(p + 1, p + 2 - (p + 1))) >= FOUND));
	  }
	}
  }

  do {
	p = indexof(t, "*Ibecom");
	if (p == NOT_FOUND) {
	  p = indexof(t, "*Ibecam");
	}
	if (p == NOT_FOUND) {
	  break;
	}
	if (t.substr(p - 1, p - (p - 1)).compare(DIV) == 0) {
	  break;
	}
	if (t.substr(p - 1, p - (p - 1)).compare(")") == 0) {
	  break;
	}
	t = t.substr(0, p) + ")|" + t.substr(p + 2);
	while ((!t.substr(p, p + 1 - (p)).compare("*") == 0) && (!t.substr(p, p
	  + 1 - (p)).compare("|") == 0)) {
	  p--;
	}
	if ((t.substr(p, p + 1 - (p)).compare("*") == 0)) {
	  t = t.substr(0, p + 1) + "I(" + t.substr(p + 2);
	}
	else {
	  t = t.substr(0, p + 1) + "*I(" + t.substr(p + 1);
	}
  } while (false);
  // Move dicty parenthetically prefixed info to end in English:
  p = indexof(t, "(");
  if (p >= FOUND) {
	do {
	  x = indexof(t, ")", p + 2);
	  if (x == NOT_FOUND) {
		break;
	  }
	  c = t.substr(p + 1, x - (p + 1));
	  t = t.substr(0, p) + t.substr(x + 2);
	  y = p;
	  p++;
	  while ((indexof(hyphenatedDataAlphabet, t.substr(p, p + 1 - (p))) >= FOUND)
		&& (p < t.length())) {
		p++;
	  }
	  t = t.substr(0, p) + " " + c + t.substr(p);
	  p = y;
	  p = indexof(t, "(", p);
	} while (p >= FOUND);
  }
  // Move prefix hyphenated info to end in English:
  p = indexof(t, "-kx");
  if (p >= FOUND) {
	do {
	  x = p + 4;
	  p--;
	  while ((indexof(hyphenatedDataAlphabet, t.substr(p, p + 1 - (p))) >= FOUND)
		&& (p > 0)) {
		p--;
	  }
	  c = t.substr(p + 1, x - 4 - (p + 1));
	  t = t.substr(0, p) + t.substr(x + 1);
	  y = p;
	  p += 2;
	  while ((indexof(hyphenatedDataAlphabet2, t.substr(p, p + 1 - (p))) >= FOUND)
		&& (p > 0)) {
		p++;
	  }
	  t = t.substr(0, p) + " " + c + t.substr(p);
	  p = y;
	  p = indexof(t, "-kx", p);
	} while (p >= FOUND);
  }

  p = -16;
  while (FOUND <= (p = indexof(t, "{*Kiu*¯*AWho/which*}", p + 16)))
  {
	if (((t.substr((t.length() >= p + 20) ? p + 20 : t.length() - 4, (t.length()
	  >= p + 40) ? 20 : 4).find("o*¯*") >= FOUND)
	  && (t.substr((t.length() >= p + 16) ? p + 16 : t.length() - 8, (t.length()
	  >= p + 40) ? 24 : t.length()).find("{*tro*¯*") == NOT_FOUND))
	  || (t.substr((t.length() >= p + 20) ? p + 20 : t.length() - 4, (t.length()
	  >= p + 40) ? 20 : t.length()).find("a*¯*") >= FOUND))
	{
	  t = t.substr(0, p)
		+ "{*Kiu*¯*AWhich*}" + t.substr(p + 20);
	}
  }
  p = indexof(t, "{*Kiun*¯*AWhom/which*}");
  while (p >= FOUND)
  {
	if ((t.substr((t.length() >= p + 20) ? p + 20 : t.length() - 6, (t.length()
	  >= p + 40) ? 20 : t.length()).find("o*n*¯*") >= FOUND)
	  || (t.substr((t.length() >= p + 20) ? p + 20 : t.length() - 6, (t.length()
	  >= p + 40) ? 20 : t.length()).find("a*n*¯*") >= FOUND))
	{
	  t = t.substr(0, p) + "{*Kiun*¯*AWhich*}" + t.substr(p + 22);
	}
	p = indexof(t, "{*Kiun*¯*AWhom/which*}", p + 16);
  }
  p = indexof(t, "{*Kiuj*¯*AWho/which*}");
  while (p >= FOUND)
  {
	if ((t.substr((t.length() >= p + 20) ? p + 20 : t.length() - 6, (t.length()
	  >= p + 40) ? 20 : t.length()).find("o*j*¯*") >= FOUND)
	  || (t.substr((t.length() >= p + 20) ? p + 20 : t.length() - 6, (t.length()
	  >= p + 40) ? 20 : t.length()).find("a*j*¯*") >= FOUND))
	{
	  t = t.substr(0, p) + "{*Kiuj*¯*AWhich*}" + t.substr(p + 21);
	}
	p = indexof(t, "{*Kiuj*¯*AWho/which*}", p + 16);
  }
  p = indexof(t, "{*Kiujn*¯*AWhom/which*}");
  while (p >= FOUND)
  {
	if ((t.substr((t.length() >= p + 20) ? p + 20 : t.length() - 8, (t.length()
	  >= p + 40) ? 20 : t.length()).find("o*j*n*¯*") >= FOUND)
	  || (t.substr((t.length() >= p + 20) ? p + 20 : t.length() - 8, (t.length()
	  >= p + 40) ? 20 : t.length()).find("a*j*n*¯*") >= FOUND))
	{
	  t = t.substr(0, p) + "{*Kiujn*¯*AWhich*}" + t.substr(p + 23);
	}
	p = indexof(t, "{*Kiujn*¯*AWhom/which*}", p + 16);
  }
  // /\{\*[K\k]i\*a(\*j)?(\*n)?\*¯\*A|aW|what\|kinds?\|zqx\*\}/
  p = indexof(t, "{*Ki*a*¯*AWhat|kind|zqx*}");
  while (p >= FOUND)
  {
	if ((t.substr((t.length() >= p + 25) ? p + 25 : t.length() - 4, (t.length()
	  >= p + 45) ? 20 : t.length()).find("o*¯*") >= FOUND)
	  || (t.substr((t.length() >= p + 20) ? p + 20 : t.length() - 4, (t.length()
	  >= p + 40) ? 20 : t.length()).find("a*¯*") >= FOUND))
	{
	  t = t.substr(0, p) + "{*Ki*a*¯*AWhat|kind|of*}" + t.substr(p + 25);
	}
	p = indexof(t, "{*Ki*a*¯*AWhat|kind|zqx*}", p + 16);
  }
  p = indexof(t, "{*Ki*a*n*¯*AWhat|kind|zqx*}");
  while (p >= FOUND)
  {
	if ((t.substr((t.length() >= p + 25) ? p + 25 : t.length() - 6, (t.length()
	  >= p + 45) ? 20 : t.length()).find("o*n*¯*") >= FOUND)
	  || (t.substr((t.length() >= p + 20) ? p + 20 : t.length() - 6, (t.length()
	  >= p + 40) ? 20 : t.length()).find("a*n*¯*") >= FOUND))
	{
	  t = t.substr(0, p) + "{*Ki*a*n*¯*AWhat|kind|of*}" + t.substr(p + 27);
	}
	p = indexof(t, "{*Ki*a*n*¯*AWhat|kind|zqx*}", p + 16);
  }
  p = indexof(t, "{*Ki*a*j*¯*AWhat|kinds|zqx*}");
  while (p >= FOUND)
  {
	if ((t.substr((t.length() >= p + 25) ? p + 25 : t.length() - 6, (t.length()
	  >= p + 45) ? 20 : t.length()).find("o*j*¯*") >= FOUND)
	  || (t.substr((t.length() >= p + 20) ? p + 20 : t.length() - 6, (t.length()
	  >= 20) ? p + 40 : t.length()).find("a*j*¯*") >= FOUND))
	{
	  t = t.substr(0, p) + "{*Ki*a*j*¯*AWhat|kinds|of*}" + t.substr(p + 28);
	}
	p = indexof(t, "{*Ki*a*j*¯*AWhat|kinds|zqx*}", p + 16);
  }
  p = indexof(t, "{*Ki*a*j*n*¯*AWhat|kinds|zqx*}");
  while (p >= FOUND)
  {
	if ((t.substr((t.length() >= p + 25) ? p + 25 : t.length() - 8, (t.length()
	  >= p + 45) ? 20 : t.length()).find("o*j*n*¯*") >= FOUND)
	  || (t.substr((t.length() >= p + 20) ? p + 20 : t.length() - 8, (t.length()
	  >= 20) ? p + 40 : t.length()).find("a*j*n*¯*") >= FOUND))
	{
	  t = t.substr(0, p) + "{*Ki*a*j*n*¯*AWhat|kinds|of*}" + t.substr(p + 30);
	}
	p = indexof(t, "{*Ki*a*j*n*¯*AWhat|kinds|zqx*}", p + 16);
  }
  p = indexof(t, "{*kiu*¯*Awho/which*}");
  while (p >= FOUND)
  {
	if ((t.substr((t.length() >= p + 20) ? p + 20 : t.length() - 4, (t.length()
	  >= p + 40) ? 20 : t.length()).find("o*¯*") >= FOUND)
	  || (t.substr((t.length() >= p + 20) ? p + 20 : t.length() - 4, (t.length()
	  >= p + 40) ? 20 : t.length()).find("a*¯*") >= FOUND))
	{
	  t = t.substr(0, p) + "{*kiu*¯*Awhich*}" + t.substr(p + 20);
	}
	p = indexof(t, "{*kiu*¯*Awho/which*}", p + 16);
  }
  p = indexof(t, "{*kiun*¯*Awhom/which*}");
  while (p >= FOUND)
  {
	if ((t.substr((t.length() >= p + 20) ? p + 20 : t.length() - 6, (t.length()
	  >= p + 40) ? 20 : t.length()).find("o*n*¯*") >= FOUND)
	  || (t.substr((t.length() >= p + 20) ? p + 20 : t.length() - 6, (t.length()
	  >= p + 40) ? 20 : t.length()).find("a*n*¯*") >= FOUND))
	{
	  t = t.substr(0, p) + "{*kiun*¯*Awhich*}" + t.substr(p + 22);
	}
	p = indexof(t, "{*kiun*¯*Awhom/which*}", p + 16);
  }
  p = indexof(t, "{*kiuj*¯*Awho/which*}");
  while (p >= FOUND)
  {
	if ((t.substr((t.length() >= p + 20) ? p + 20 : t.length() - 6, (t.length()
	  >= p + 40) ? 20 : t.length()).find("o*j*¯*") >= FOUND)
	  || (t.substr((t.length() >= p + 20) ? p + 20 : t.length() - 6, (t.length()
	  >= p + 40) ? 20 : t.length()).find("a*j*¯*") >= FOUND))
	{
	  t = t.substr(0, p) + "{*kiuj*¯*Awhich*}" + t.substr(p + 21);
	}
	p = indexof(t, "{*kiuj*¯*Awho/which*}", p + 16);
  }
  p = indexof(t, "{*kiujn*¯*Awhom/which*}");
  while (p >= FOUND)
  {
	if ((t.substr((t.length() >= p + 20) ? p + 20 : t.length() - 8, (t.length()
	  >= p + 40) ? 20 : t.length()).find("o*j*n*¯*") >= FOUND)
	  || (t.substr((t.length() >= p + 20) ? p + 20 : t.length() - 8, (t.length()
	  >= p + 40) ? 20 : t.length()).find("a*j*n*¯*") >= FOUND))
	{
	  t = t.substr(0, p - 1) + "{*kiujn*¯*Awhich*}" + t.substr(p + 23);
	}
	p = indexof(t, "{*kiujn*¯*Awhom/which*}", p + 16);
  }
  p = indexof(t, "{*ki*a*¯*Awhat|kind|zqx*}");
  while (p >= FOUND)
  {
	if ((t.substr((t.length() >= p + 25) ? p + 25 : t.length() - 4, (t.length()
	  >= p + 45) ? 20 : t.length()).find("o*¯*") >= FOUND)
	  || (t.substr((t.length() >= p + 20) ? p + 20 : t.length() - 4, (t.length()
	  >= p + 40) ? 20 : t.length()).find("a*¯*") >= FOUND))
	{
	  t = t.substr(0, p) + "{*ki*a*¯*Awhat|kind|of*}" + t.substr(p + 25);
	}
	p = indexof(t, "{*ki*a*¯*Awhat|kind|zqx*}", p + 16);
  }
  p = indexof(t, "{*ki*a*n*¯*Awhat|kind|zqx*}");
  while (p >= FOUND)
  {
	if ((t.substr((t.length() >= p + 25) ? p + 25 : t.length() - 6, (t.length()
	  >= p + 45) ? 20 : t.length()).find("o*n*¯*") >= FOUND)
	  || (t.substr((t.length() >= p + 20) ? p + 20 : t.length() - 6, (t.length()
	  >= p + 40) ? 20 : t.length()).find("a*n*¯*") >= FOUND))
	{
	  t = t.substr(0, p) + "{*ki*a*n*¯*Awhat|kind|of*}" + t.substr(p + 27);
	}
	p = indexof(t, "{*ki*a*n*¯*Awhat|kind|zqx*}", p + 16);
  }
  p = indexof(t, "{*ki*a*j*¯*Awhat|kinds|zqx*}");
  while (p >= FOUND)
  {
	if ((t.substr((t.length() >= p + 25) ? p + 25 : t.length() - 6, (t.length()
	  >= p + 45) ? 20 : t.length()).find("o*j*¯*") >= FOUND)
	  || (t.substr((t.length() >= p + 20) ? p + 20 : t.length() - 6, (t.length()
	  >= p + 40) ? 20 : t.length()).find("a*j*¯*") >= FOUND))
	{
	  t = t.substr(0, p) + "{*ki*a*j*¯*Awhat|kinds|of*}" + t.substr(p + 28);
	}
	p = indexof(t, "{*ki*a*j*¯*Awhat|kinds|zqx*}", p + 16);
  }
  p = indexof(t, "{*ki*a*j*n*¯*Awhat|kinds|zqx*}");
  while (p >= FOUND)
  {
	if ((t.substr((t.length() >= p + 25) ? p + 25 : t.length() - 8, (t.length()
	  >= p + 45) ? 20 : t.length()).find("o*j*n*¯*") >= FOUND)
	  || (t.substr((t.length() >= p + 20) ? p + 20 : t.length() - 8, (t.length()
	  >= p + 40) ? 20 : t.length()).find("a*j*n*¯*") >= FOUND))
	{
	  t = t.substr(0, p) + "{*ki*a*j*n*¯*Awhat|kinds|of*}" + t.substr(p + 30);
	}
	p = indexof(t, "{*ki*a*j*n*¯*Awhat|kinds|zqx*}", p + 16);
  }
  p = indexof(t, "{*kiu*¯*Awho/which*}");
  while ((p >= FOUND) && (t.length() > p + 37))
  {
	if (indexof(t.substr(p + 23, 12), "o*¯") >= FOUND)
	{
	  t = t.substr(0, p) + "{*kiu*¯*Awhich*}" + t.substr(p + 20);
	}
	p = indexof(t, "{*kiu*¯*Awho/which*}", p + 25);
  }
  p = indexof(t, "{*Kiu*¯*AWho/which*}");
  while ((p >= FOUND) && (t.length() > p + 37))
  {
	if (indexof(t.substr(p + 23, 12), "o*¯") >= FOUND)
	{
	  t = t.substr(0, p) + "{*Kiu*¯*AWhich*}" + t.substr(p + 20);
	}
	p = indexof(t, "{*Kiu*¯*AWho/which*}", p + 25);
  }
  p = indexof(t, "{*kiu*¯*Awho/which*}");
  while ((p >= FOUND) && (t.length() > p + 37))
  {
	if (indexof(t.substr(p + 23, 12), "u*¯*Na") >= FOUND)
	{
	  t = t.substr(0, p) + "{*kiu*¯*Awhich*}" + t.substr(p + 33);
	}
	p = indexof(t, "{*kiu*¯*Awho/which*}", p + 25);
  }
  p = indexof(t, "{*Kiu*¯*AWho/which*}");
  while ((p >= FOUND) && (t.length() > p + 37))
  {
	if (indexof(t.substr(p + 23, 12), "u*¯*Na") >= FOUND)
	{
	  t = t.substr(0, p) + "{*Kiu*¯*AWhich*}" + t.substr(p + 33);
	}
	p = indexof(t, "{*Kiu*¯*AWho/which*}", p + 25);
  }
  p = indexof(t, "{*kiun*¯*Awhom/which*}");
  while ((p >= FOUND) && (t.length() > p + 37))
  {
	if (indexof(t.substr(p + 25, 12), "n*¯") >= FOUND)
	{
	  t = t.substr(0, p) + "{*kiun*¯*Awhich*}" + t.substr(p + 22);
	}
	p = indexof(t, "{*kiun*¯*Awhom/which*}", p + 27);
  }
  p = indexof(t, "{*Kiun*¯*AWhom/which*}");
  while ((p >= FOUND) && (t.length() > p + 37))
  {
	if (indexof(t.substr(p + 25, 12), "n*¯") >= FOUND)
	{
	  t = t.substr(0, p) + "{*Kiun*¯*AWhich*}" + t.substr(p + 22);
	}
	p = indexof(t, "{*Kiun*¯*AWhom/which*}", p + 27);
  }
  p = indexof(t, "{*kiun*¯*Awhom/which*}");
  while ((p >= FOUND) && (t.length() > p + 37))
  {
	if (indexof(t.substr(p + 25, 12), "u*¯*Na") >= FOUND)
	{
	  t = t.substr(0, p) + "{*kiun*¯*Awhich*}" + t.substr(p + 35);
	}
	p = indexof(t, "{*kiun*¯*Awhom/which*}", p + 27);
  }
  p = indexof(t, "{*Kiun*¯*AWhom/which*}");
  while ((p >= FOUND) && (t.length() > p + 37))
  {
	if (indexof(t.substr(p + 25, 12), "u*¯*Na") >= FOUND)
	{
	  t = t.substr(0, p) + "{*Kiun*¯*AWhich*}" + t.substr(p + 35);
	}
	p = indexof(t, "{*Kiun*¯*AWhom/which*}", p + 27);
  }
  p = indexof(t, "{*kiuj*¯*Awho/which*}");
  while ((p >= FOUND) && (t.length() > p + 37))
  {
	if (indexof(t.substr(p + 24, 12), "j*¯") >= FOUND)
	{
	  t = t.substr(0, p) + "{*kiuj*¯*Awhich*}" + t.substr(p + 21);
	}
	p = indexof(t, "{*kiuj*¯*Awho/which*}", p + 26);
  }
  p = indexof(t, "{*Kiuj*¯*AWho/which*}");
  while ((p >= FOUND) && (t.length() > p + 37))
  {
	if (indexof(t.substr(p + 24, 12), "j*¯") >= FOUND)
	{
	  t = t.substr(0, p) + "{*Kiuj*¯*AWhich*}" + t.substr(p + 21);
	}
	p = indexof(t, "{*Kiuj*¯*AWho/which*}", p + 26);
  }
  p = indexof(t, "{*kiujn*¯*Awho/which*}");
  while ((p >= FOUND) && (t.length() > p + 37))
  {
	if (indexof(t.substr(p + 25, 12), "n*¯") >= FOUND)
	{
	  t = t.substr(0, p) + "{*kiujn*¯*Awhich*}" + t.substr(p + 22);
	}
	p = indexof(t, "{*kiujn*¯*Awhom/which*}", p + 27);
  }
  p = indexof(t, "{*Kiujn*¯*AWho/which*}");
  while ((p >= FOUND) && (t.length() > p + 37))
  {
	if (indexof(t.substr(p + 25, 12), "n*¯") >= FOUND)
	{
	  t = t.substr(0, p) + "{*Kiujn*¯*AWhich*}" + t.substr(p + 22);
	}
	p = indexof(t, "{*Kiujn*¯*AWhom/which*}", p + 27);
  }

  t = rep(t, "{*unu*¯*Na*} {*lin*¯*Zhim*}", "{*lin*¯*Zhim*}");
  t = rep(t, "{*unu*¯*Na*} {*sxin*¯*Zher*}", "{*sxin*¯*Zher*}");
  t = rep(t, "{*unu*¯*Na*} {*gxin*¯*Zit*}", "{*gxin*¯*Zit*}");
  t = rep(t, "{*unu*¯*Na*} {*ilin*¯*Zthem*}", "{*ilin*¯*Zthem*}");
  t = rep(t, "{*unu*¯*Na*} {*onin*¯*Zone*}", "{*onin*¯*Zone*}");
  t = rep(t, "{*unu*¯*Na*} {*min*¯*Zme*}", "{*min*¯*Zme*}");
  t = rep(t, "{*unu*¯*Na*} {*nin*¯*Zus*}", "{*nin*¯*Zus*}");
  t = rep(t, "{*unu*¯*Na*} {*vin*¯*Zyou*}", "{*vin*¯*Zyou*}");
  t = rep(t, "{*unu*¯*Na*} {*cin*¯*Zyou*}", "{*cin*¯*Zyou*}");
  t = rep(t, "{*Tiu*¯*AThat*} {*unu*¯*Na*}", "{*Tiu*¯*AThat*}");
  t = rep(t, "{*Kiun*¯*AWhom/which*} {*unu*¯*Na*}", "{*Kiun*¯*AWhom/which*}");
  t = rep(t, "{*Kiu*¯*AWho/which*} {*unu*¯*Na*}", "{*Kiu*¯*AWho/which*}");
  t = rep(t, "{*tiu*¯*Athat*} {*unu*¯*Na*}", "{*tiu*¯*Athat*}");
  t = rep(t, "{*kiun*¯*Awhom/which*} {*unu*¯*Na*}", "{*kiun*¯*Awhom/which*}");
  t = rep(t, "{*kiu*¯*Awho/which*} {*unu*¯*Na*}", "{*kiu*¯*Awho/which*}");

  cleanup();
  //out << "1:" + t;

  t = removeEsperanto(t); // Remove Esperanto, leaving English

  //out << "removed:" + t;
  // Remove any garbage { } ¯ *O *A *E *I *F *P *C *Z *Q *X *W:
  t = t + "  ";
  t = rep(t, "{", "");
  t = rep(t, "}", "");
  y = 0;
  p = indexof(t, "*", y);
  if (p >= FOUND) {
	do {
	  t = t.substr(0, p) + "-" + t.substr(p);
	  y = p + 4;
	  p = indexof(t, "*", y);
	} while (p >= FOUND);
  }
  rgx = "[*][OAEIFPCZQXEIW]";
  t = regex_replace(t, rgx, ""); // Remove delimiters and Part-of-Speech tags
  t = rep(t, "*", "");

  // Character reconversions: |=space. _ deleted. ( + ) + _ restored. * restored.
  t = rep(t, "¬¯¯¬¬ ", "( ");
  t = rep(t, " ¬¬¯¯¬", ")");
  t = rep(t, " ¯¯¯ ", "/");
  t = rep(t, "_", "");
  t = rep(t, "¬¯¬¬ ", "{ ");
  t = rep(t, " ¬¬¯¬", "}");
  t = rep(t, " ¬¯¯¬ ", "_");
  t = rep(t, " ¬¯¬¯¬ ", "*");
  t = rep(t, DIV, "");
  t = rep(t, "|", " ");
  //out << 8190 + t;
  // Corrections:
  p = indexof(t, "-to ");
  if (p >= FOUND) {
	do {
	  while (!t.substr(p, p + 1 - (p)).compare(" ") == 0) {
		p--;
	  }
	  t = t.substr(0, p + 1) + "to " + t.substr(p + 1, indexof(t, "-to",
		p) + 1) + t.substr(indexof(t, "-to", p - (indexof(t, "-to")) + 4));
	  p = indexof(t, "-to ");
	} while (p >= FOUND);
  }
  // as adj/adv as;
  do {
	do {
	  gf6 = false;
	  p = indexof(t, " like/how a ");
	  if (p >= FOUND) {
		x = indexof(t, " one like/how", p + 13);
		if ((x >= FOUND) && (x < 39)) {
		  t = t.substr(0, x) + " as" + t.substr(x + 13);
		  t = t.substr(0, p) + " as " + t.substr(p + 12);
		  gf6 = true;
		  break;
		}
	  }
	  p = indexof(t, " like/how an ");
	  if (p >= FOUND) {
		x = indexof(t, " one like/how", p + 13);
		if ((x >= FOUND) && (x < 39)) {
		  t = t.substr(0, x) + " as" + t.substr(x + 13);
		  t = t.substr(0, p) + " as " + t.substr(p + 13);
		  gf6 = true;
		  break;
		}
	  }
	  p = indexof(t, " like/how ");
	  if (p >= FOUND) {
		x = indexof(t, " ones like/how", p + 13);
		if ((x >= FOUND) && (x < 39)) {
		  t = t.substr(0, x) + " as" + t.substr(x + 14);
		  t = t.substr(0, p) + " as " + t.substr(p + 10);
		  gf6 = true;
		  break;
		}
	  }
	  if (p >= FOUND) {
		x = indexof(t, "ly like/how", p + 13);
		if ((x >= FOUND) && (x < 34)) {
		  t = t.substr(0, x) + "ly as" + t.substr(x + 11);
		  t = t.substr(0, p) + " as " + t.substr(p + 10);
		  gf6 = true;
		  break;
		}
	  }
	  if (p >= FOUND) {
		x = indexof(t, "like/how", p + 13);
		if ((x >= FOUND) && (x < 34)) {
		  t = t.substr(0, x) + PRESENT + t.substr(x + 8);
		  t = t.substr(0, p) + " as " + t.substr(p + 10);
		  gf6 = true;
		  break;
		}
	  }
	  p = indexof(t, " Like/how a ");
	  if (p >= FOUND) {
		x = indexof(t, " one ", p + 13);
		if ((x >= FOUND) && (x < 39)) {
		  t = t.substr(0, x) + t.substr(x + 4);
		  t = t.substr(0, p) + " How " + t.substr(p + 12);
		  gf6 = true;
		  break;
		}
	  }
	  p = indexof(t, " Like/how an ");
	  if (p >= FOUND) {
		x = indexof(t, " one ", p + 13);
		if ((x >= FOUND) && (x < 39)) {
		  t = t.substr(0, x) + t.substr(x + 4);
		  t = t.substr(0, p) + " How " + t.substr(p + 13);
		  gf6 = true;
		  break;
		}
	  }
	  p = indexof(t, " Like/how ");
	  if (p >= FOUND) {
		x = indexof(t, " ones ", p + 13);
		if ((x >= FOUND) && (x < 39)) {
		  t = t.substr(0, x) + t.substr(x + 5);
		  t = t.substr(0, p) + " How " + t.substr(p + 10);
		  gf6 = true;
		  break;
		}
	  }
	  if (p >= FOUND) {
		x = indexof(t, "ly ", p + 13);
		if ((x >= FOUND) && (x < 39)) {
		  t = t.substr(0, x) + t.substr(x + 2);
		  t = t.substr(0, p) + " How " + t.substr(p + 10);
		  gf6 = true;
		  break;
		}
	  }
	} while (false);
  } while (gf6);
  do {
	do {
	  gf2 = false;
	  p = indexof(t, " Or/either");
	  c = "E";
	  if (p == NOT_FOUND) {
		p = indexof(t, " or/either");
		c = "e";
	  }
	  if ((p >= FOUND)) {
		do {
		  gf3 = false;
		  x = indexof(t, " or/either", p + 12);
		  if (x == NOT_FOUND) {
			t = t.substr(0, p + 3) + t.substr(p + 10);
			gf2 = true;
			break;
		  }
		  if ((t.substr(p + 8, x - (p + 8)).find(".") >= FOUND) || (t.substr(p
			+ 8, x - (p
			+ 8)).find("?") >= FOUND) || (t.substr(p + 8, x - (p + 8)).find("!") >= FOUND)) {
			t = t.substr(0, p + 3) + t.substr(p + 10);
			gf2 = true;
			break;
		  }
		  if (x - p < 39) {
			t = t.substr(0, p + 1) + c + t.substr(p + 5);
			t = t.substr(0, x) + t.substr(x + 7);
			gf2 = true;
			break;
		  }
		  else {
			p = x;
			gf3 = true;
		  }
		} while (gf3);
		if (gf2) {
		  break;
		}
	  }
	} while (false);
  } while (gf2);
  do {
	do {
	  gf2 = false;
	  p = indexof(t, " Neither/nor");
	  if (p == NOT_FOUND) {
		p = indexof(t, " neither/nor");
	  }
	  if ((p >= FOUND)) {
		do {
		  gf3 = false;
		  x = indexof(t, " neither/nor", p + 14);
		  if (x == NOT_FOUND) {
			t = t.substr(0, p + 1) + t.substr(p + 9);
			gf2 = true;
			break;
		  }
		  if ((t.substr(p + 10, x - (p + 10)).find(".") >= FOUND) || (t.substr(p
			+ 10, x - (p
			+ 10)).find("?") >= FOUND) || (t.substr(p + 10, x - (p + 10)).find("!") >= FOUND)) {
			t = t.substr(0, p + 1) + t.substr(p + 9);
			gf2 = true;
			break;
		  }
		  if (x - p < 41) {
			t = t.substr(0, p + 8) + t.substr(p + 12);
			t = t.substr(0, x - 3) + t.substr(x + 5);
			gf2 = true;
			break;
		  }
		  else {
			p = x;
			gf3 = true;
		  }
		} while (gf3);
		if (gf2) {
		  break;
		}
	  }
	} while (false);
  } while (gf2);
  x = -1;
  do {
	do {
	  p = indexof(t, " as/that way", x + 1);
	  if (p == NOT_FOUND) {
		p = indexof(t, " As/that way", x + 1);
	  }
	  if (p == NOT_FOUND) {
		x = -1;
		break;
	  }
	  x = indexof(t, " like/how a ", p + 13);
	  if (x >= FOUND) {
		if (t.substr(p + 12, x + 2 - (p + 12)).find(".") >= FOUND) {
		  break;
		}
		if (t.substr(p + 12, x + 2 - (p + 12)).find("?") >= FOUND) {
		  break;
		}
		if (t.substr(p + 12, x + 2 - (p + 12)).find("!") >= FOUND) {
		  break;
		}
		if (x - p < 41) {
		  t = t.substr(0, p + 1) + PRESENT + t.substr(p + 12);
		  t = t.substr(0, x - 9) + " as" + t.substr(x);
		  break;
		}
	  }
	  x = indexof(t, " like/how an ", p + 13);
	  if (x >= FOUND) {
		if (t.substr(p + 12, x + 2 - (p + 12)).find(".") >= FOUND) {
		  break;
		}
		if (t.substr(p + 12, x + 2 - (p + 12)).find("?") >= FOUND) {
		  break;
		}
		if (t.substr(p + 12, x + 2 - (p + 12)).find("!") >= FOUND) {
		  break;
		}
		if (x - p < 41) {
		  t = t.substr(0, p + 1) + PRESENT + t.substr(p + 12);
		  t = t.substr(0, x - 9) + " as" + t.substr(x);
		  break;
		}
	  }
	  x = indexof(t, " like/how ", p + 13);
	  if (x >= FOUND) {
		if (t.substr(p + 12, x + 2 - (p + 12)).find(".") >= FOUND) {
		  break;
		}
		if (t.substr(p + 12, x + 2 - (p + 12)).find("?") >= FOUND) {
		  break;
		}
		if (t.substr(p + 12, x + 2 - (p + 12)).find("!") >= FOUND) {
		  break;
		}
		if (x - p < 41) {
		  t = t.substr(0, p + 1) + PRESENT + t.substr(p + 12);
		  t = t.substr(0, x - 9) + " as" + t.substr(x);
		  break;
		}
	  }
	} while (false);
  } while (x >= FOUND);
  p = indexof(t, " Like/how ");
  if (p == NOT_FOUND) {
	p = indexof(t, " like/how ");
  }
  if (p >= FOUND) {
	if (t.length() >= p + 12) {
	  if ((t.substr(p + 10, p + 12 - (p + 10)).compare("a ") == 0) || (t.substr(p + 10, p
		+ 13 - (p + 10)).compare("an ") == 0)) {
		x = p + 13;
	  }
	  else {
		x = p + 11;
	  }
	  while ((!t.substr(x, x + 1 - (x)).compare(" ") == 0) && (x < t.length() - 1)) {
		x++;
	  }
	  if (indexof((fs = ".?!;"), t.substr(x - 1, x - (x - 1))) >= FOUND) {
		t = t.substr(0, p
		  + 5) + t.substr(p + 9);
	  }
	}
  }
  //out << t;

  t = korrections(t, phrase);

  //out << "w/korr:" + t;
  p = 3;
  do {
	do { // Adjust -self
	  gf4 = false;
	  p = indexof(t, "himself/herself/itself/themselves", p);
	  x = p - 50;
	  if (x < 0) {
		x = 0;
	  }
	  if (selfType("They", "themselves")) {
		gf4 = true;
		break;
	  }
	  if (selfType("they", "themselves")) {
		gf4 = true;
		break;
	  }
	  if (selfType("He", "himself")) {
		gf4 = true;
		break;
	  }
	  if (selfType("he", "himself")) {
		gf4 = true;
		break;
	  }
	  if (selfType("She", "herself")) {
		gf4 = true;
		break;
	  }
	  if (selfType("she", "herself")) {
		gf4 = true;
		break;
	  }
	  if (selfType("One", "oneself")) {
		gf4 = true;
		break;
	  }
	  if (selfType("It", "itself")) {
		gf4 = true;
		break;
	  }
	} while (false);
  } while (gf4);
  p = 3;
  do {
	do { // Adjust possessives
	  gf4 = false;
	  p = indexof(t, "his/her/its/their", p);
	  x = p - 50;
	  if (x < 0) {
		x = 0;
	  }
	  if (possessive("They", "their")) {
		gf4 = true;
		break;
	  }
	  if (possessive("they", "their")) {
		gf4 = true;
		break;
	  }
	  if (possessive("She", "her")) {
		gf4 = true;
		break;
	  }
	  if (possessive("she", "her")) {
		gf4 = true;
		break;
	  }
	  if (possessive("He", "his")) {
		gf4 = true;
		break;
	  }
	  if (possessive("he", "his")) {
		gf4 = true;
		break;
	  }
	  if (possessive("One", "one's")) {
		gf4 = true;
		break;
	  }
	  if (possessive("It", "its")) {
		gf4 = true;
		break;
	  }
	} while (false);
  } while (gf4);
  do {
	gf4 = false;
	p = indexof(t, "-becomes");
	y = 8;
	if (p == NOT_FOUND) {
	  p = indexof(t, "-becomely");
	  y = 11;
	  if (p == NOT_FOUND) {
		p = indexof(t, "-became");
		y = 7;
		if (p == NOT_FOUND) {
		  p = indexof(t, "-become");
		  if (p == NOT_FOUND) {
			p = indexof(t, "-becoming");
			y = 9;
		  }
		}
	  }
	}
	if (p == NOT_FOUND) {
	  break;
	}
	x = p - 1;
	if (t.substr(x, x + 1 - (x)).compare("-") == 0) {
	  break;
	}
	while (!t.substr(x, x + 1 - (x)).compare(" ") == 0) {
	  x--;
	}
	if (y < 11) {
	  t = t.substr(0, x + 1) + t.substr(p + 1, p + y - (p + 1)) + t.substr(x,
		p - (x)) + t.substr(p + y);
	  gf4 = true;
	}
	else {
	  t = t.substr(0, x - 2) + "becoming" + t.substr(x, p - (x))
		+ t.substr(p + 9);
	  gf4 = true;
	}
  } while (gf4);
  x = -1;
  do {
	do {
	  gf5 = false;
	  x = indexof(t, "much/many", x + 4);
	  if (x >= FOUND) {
		p = indexof(t, " ", x + 13);
		if (p >= FOUND) {
		  if ((p == t.length() - 1) && (indexof(englishAlphabet, t.substr(p
			- 1, p - (p
			- 1))) == NOT_FOUND)) {
			p--;
		  }
		  rgx = "(s[ .,?!;:)])";
		  if ((regex_replace(t.substr(p - 1), rgx, "$1")).length() > 0) {
			t = t.substr(0, x) + t.substr(x + 5);
			gf5 = true;
			break;
		  }
		  else {
			t = t.substr(0, x + 4) + t.substr(x + 9);
			gf5 = true;
			break;
		  }
		}
	  }
	} while (false);
  } while (gf5);
  //out << 8612 + t;
  t = rep(t, " A how ", " How ");
  t = rep(t, " a how ", " how ");
  t = rep(t, " so much like ", " as much as ");
  t = rep(t, " so many like ", " as many as ");
  //out << "<" + phrase + ">";
  if (phrase.length() > 1) {
	if ((!(islower(phrase[1])))
	  && (!indexof(phrase, "akexsubo") >= FOUND)) {
	  if (!(t.substr(0, 1).compare(" ") == 0)) {
		t = " " + t;
	  }
	  if (t.length() > 2) tx2 = upperall(t.substr(1, 2 - 1)) + t.substr(2, t.length() - 3);
	  if (endswith(tx2, " ")) {
		tx2 = tx2.substr(0, tx2.length() - 1);
	  }
	}
	else {
	  tx2 = t.substr(1, t.length() - 2);
	}
  }
  else {
	tx2 = "";
  }

  p = indexof(t, "problem");
  if (p == NOT_FOUND) {
	p = indexof(t, "Problem");
  }
  if (p >= FOUND) {
	tx2 = rep(tx2, "solves/dissolves", "solves");
	tx2 = rplF(tx2, "solve/dissolve", "solve");
	tx2 = rep(tx2, "solved/dissolved", "solved");
	tx2 = rep(tx2, "solving/dissolving", "solving");
  }

  tx2 = rep(tx2, " Wzxl ", " \"");
  tx2 = rep(tx2, " Wzxl", "  \"");
  tx2 = rep(tx2, "Wzxl", "\"");
  tx2 = rep(tx2, " Wzxr ", "\" ");
  tx2 = rep(tx2, " Wzxr", " \"");
  tx2 = rep(tx2, "Wzxr ", "\" ");
  tx2 = rep(tx2, "Wzxr", "\"");
  tx2 = rep(tx2, "\"shouldn't ", " \"Don't ");
  tx2 = rep(tx2, "\"should ", " \"");
  if (tx2.compare("an one") == 0) {
	tx2 = "a";
  }
  if (tx2.compare("AN ONE") == 0) {
	tx2 = "A";
  }
  if (tx2.compare("an one.") == 0) {
	tx2 = "a.";
  }
  if (tx2.compare("AN ONE.") == 0) {
	tx2 = "A.";
  }
  if (startDash) {
	tx2 = "--" + tx2;
  }
  if (endDash) {
	tx2 += "--";
  }

  //tx2 = rep(tx2, "a\u016diliar", "auxiliar");
  //tx2 = rep(tx2, "A\u016diliar", "Auxiliar");
}

static string translateEsperanto(string txxt) {
  // Process input text word by word:
  if (txxt.length() < 2) return txxt;
  rgx = "\\s+";
  if (regex_replace(txxt, rgx, "").compare("") == 0) return txxt;

  rgx = "\\bl['`´] ";

  txxt = regex_replace(txxt, rgx, "la "); // Replace l' apostrophe: l' -> la
  rgx = "\\bL['`´] ";
  txxt = regex_replace(txxt, rgx, "La ");
  rgx = "\\bl['`´]";
  txxt = regex_replace(txxt, rgx, "la ");
  rgx = "\\bL['`´]";
  txxt = regex_replace(txxt, rgx, "La ");
  rgx = "['`´]([ .,?!:;)])";
  txxt = regex_replace(txxt, rgx, "o$1"); // Replace noun apostrophe: pom' -> pomo
  int yp, yl, u, nxp;
  string karakter, unknownWord;
  textIn = " " + rep(txxt, "", "\"") + " ";
  bool capn, enf, gf;
  tx2 = "";
  currentWordIndex = -1;
  int pt = 0;
  textOut = "";
  bool fksub, fksub2;
  fksub = fksub2 = false;

  // All caps changed to no caps:
  if ((textIn.compare(upperall(textIn)) == 0)
	&& (!textIn.compare(lowerall(textIn)) == 0)) {
	allCapitalized = true;
	textIn = lowerall(textIn);
  }
  else {
	allCapitalized = false;
  }

  if (H_Method) { // Convert H-method to X-method:
	rgx = "([cghjsCGHJS])(h|H)";
	textIn = regex_replace(textIn, rgx, "$1x");
	rgx = "([aeoAEO])(u|U)";
	textIn = regex_replace(textIn, rgx, "$1$2x");
  }
  textIn = textIn.substr(1);

  // Convert Latin-3 to X-method:
  string latin3 = "æø¶¼þýÆØ¦¬ÞÝ";
  string noCircumflexes = "cghjsuCGHJSU";
  int p;
  for (p = 0; p < 12; p++) {
	textIn = rep(textIn, latin3.substr(p, 1), noCircumflexes.substr(p, 1) + "x");
  }

   //Convert circumflexes to X-method:
  // for (int p = 0; p < 12; p++) {
	 //textIn = rep(textIn, (EO_LETTERS_CIRC).substr(p, 1),
	 //  EO_LETTERS_NO_CIRC.substr(p, 1) + "x");
  // }

  // Correct ux to u:
  rgx = " (bal|Bal|hur|Hur|i|I|kamer|Kamer)aux";
  textIn = regex_replace(textIn, rgx, " $1au");
  rgx = " (kapn|Kapn|kr|Kr)eux";
  textIn = regex_replace(textIn, rgx, " $1eu");
  rgx = " (n|N)eux([ .,?!:;])";
  textIn = regex_replace(textIn, rgx, " $1eu$2");
  rgx = " (ob|Ob|pan|Pan|per|Per|rekr|Rekr|sanktol|Sanktol)eux";
  textIn = regex_replace(textIn, rgx, " $1eu");
  textIn = rplUL(textIn, " vetoux", " vetou");

  // Elided a: l' > la
  rgx = "\\bl['`´] ";
  textIn = regex_replace(textIn, rgx, " la "); // Replace l' apostrophe
  rgx = "\\bL['`´] ";
  textIn = regex_replace(textIn, rgx, " La ");
  rgx = "\\bl['`´]";
  textIn = regex_replace(textIn, rgx, " la ");
  rgx = "\\bL['`´]";
  textIn = regex_replace(textIn, rgx, " La ");
  rgx = "['`´]([ .,?!:;)])";
  textIn = regex_replace(textIn, rgx, "o$1"); // Replace noun apostrophe
  textIn = textIn.substr(0, textIn.length() - 1);

  textIn = commaAdjust(textIn);
  //out << "9383" + textIn;
  do {
	capitalized = perfect = false;
	person = "";
	startDash = endDash = false;
	startText = "";
	p = pt;
	while ((textIn.substr(p, 1).compare(" ") <= 0) && (p < textIn.length() - 1)) {
	  p++;
	}
	if (p > pt) {
	  startText = textIn.substr(pt, p - pt);
	  textIn = textIn.substr(0, pt) + " " + textIn.substr(p);
	}
	textIn2 = textIn;
	nxp = textIn.length() - 1;
	connect = indexof(textIn, " ke ", pt) + 2;
	if ((connect > 1) && (connect < nxp)) {
	  nxp = connect;
	}
	connect = indexof(textIn, " cxu ", pt) + 3;
	if ((connect > 2) && (connect < nxp)) {
	  nxp = connect;
	}
	connect = indexof(textIn, "o kiu ", pt) + 4;
	if ((connect > 3) && (connect < nxp)) {
	  nxp = connect;
	}
	connect = indexof(textIn, "a kiu ", pt) + 4;
	if ((connect > 3) && (connect < nxp)) {
	  nxp = connect;
	}
	connect = indexof(textIn, "e kiu ", pt) + 4;
	if ((connect > 3) && (connect < nxp)) {
	  nxp = connect;
	}
	connect = indexof(textIn, "s kiu ", pt) + 4;
	if ((connect > 3) && (connect < nxp)) {
	  nxp = connect;
	}
	connect = indexof(textIn, "o kiun ", pt) + 5;
	if ((connect > 4) && (connect < nxp)) {
	  nxp = connect;
	}
	connect = indexof(textIn, "a kiun ", pt) + 5;
	if ((connect > 4) && (connect < nxp)) {
	  nxp = connect;
	}
	connect = indexof(textIn, "e kiun ", pt) + 5;
	if ((connect > 4) && (connect < nxp)) {
	  nxp = connect;
	}
	connect = indexof(textIn, "s kiun ", pt) + 5;
	if ((connect > 4) && (connect < nxp)) {
	  nxp = connect;
	}
	connect = indexof(textIn, "j kiuj ", pt) + 5;
	if ((connect > 4) && (connect < nxp)) {
	  nxp = connect;
	}
	connect = indexof(textIn, "j kiujn ", pt) + 6;
	if ((connect > 5) && (connect < nxp)) {
	  nxp = connect;
	}
	connect = indexof(textIn, "e kiuj ", pt) + 5;
	if ((connect > 4) && (connect < nxp)) {
	  nxp = connect;
	}
	connect = indexof(textIn, "s kiuj ", pt) + 5;
	if ((connect > 4) && (connect < nxp)) {
	  nxp = connect;
	}
	connect = indexof(textIn, "e kiujn ", pt) + 6;
	if ((connect > 5) && (connect < nxp)) {
	  nxp = connect;
	}
	connect = indexof(textIn, "s kiujn ", pt) + 6;
	if ((connect > 5) && (connect < nxp)) {
	  nxp = connect;
	}
	connect = indexof(textIn, ", kaj ", pt) + 4;
	if ((connect > 3) && (connect < nxp)) {
	  nxp = connect;
	}
	connect = indexof(textIn, ", mi ", pt);
	if ((connect > 2) && (connect < nxp)) {
	  nxp = connect;
	}
	connect = indexof(textIn, ", vi ", pt);
	if ((connect > 2) && (connect < nxp)) {
	  nxp = connect;
	}
	connect = indexof(textIn, ", li ", pt);
	if ((connect > 2) && (connect < nxp)) {
	  nxp = connect;
	}
	connect = indexof(textIn, ", ni ", pt);
	if ((connect > 2) && (connect < nxp)) {
	  nxp = connect;
	}
	connect = indexof(textIn, ", ci ", pt);
	if ((connect > 2) && (connect < nxp)) {
	  nxp = connect;
	}
	connect = indexof(textIn, ", gxi ", pt);
	if ((connect > 3) && (connect < nxp)) {
	  nxp = connect;
	}
	connect = indexof(textIn, ", sxi ", pt);
	if ((connect > 3) && (connect < nxp)) {
	  nxp = connect;
	}
	connect = indexof(textIn, ", ili ", pt);
	if ((connect > 3) && (connect < nxp)) {
	  nxp = connect;
	}
	connect = indexof(textIn, ", oni ", pt);
	if ((connect > 3) && (connect < nxp)) {
	  nxp = connect;
	}
	connect = indexof(textIn, " kiam ", pt) + 4;
	if ((connect > 3) && (connect < nxp)) {
	  nxp = connect;
	}
	connect = indexof(textIn, " kial ", pt) + 4;
	if ((connect > 3) && (connect < nxp)) {
	  nxp = connect;
	}
	connect = indexof(textIn, " kiel ", pt) + 4;
	if ((connect > 3) && (connect < nxp)) {
	  nxp = connect;
	}
	connect = indexof(textIn, " samkiel ", pt) + 7;
	if ((connect > 6) && (connect < nxp)) {
	  nxp = connect;
	}
	connect = indexof(textIn, " kie ", pt) + 3;
	if ((connect > 2) && (connect < nxp)) {
	  nxp = connect;
	}
	connect = indexof(textIn, " kien ", pt) + 4;
	if ((connect > 3) && (connect < nxp)) {
	  nxp = connect;
	}
	connect = indexof(textIn, " tiam ", pt) + 4;
	if ((connect > 3) && (connect < nxp)) {
	  nxp = connect;
	}
	connect = indexof(textIn, " do ", pt) + 2;
	if ((connect > 1) && (connect < nxp)) {
	  nxp = connect;
	}
	connect = indexof(textIn, " tiukaze ", pt) + 7;
	if ((connect > 6) && (connect < nxp)) {
	  nxp = connect;
	}
	connect = indexof(textIn, " sed ", pt) + 3;
	if ((connect > 2) && (connect < nxp)) {
	  nxp = connect;
	}
	connect = indexof(textIn, ", aux ", pt) + 4;
	if ((connect > 3) && (connect < nxp)) {
	  nxp = connect;
	}
	connect = indexof(textIn, ", kajaux ", pt) + 7;
	if ((connect > 6) && (connect < nxp)) {
	  nxp = connect;
	}
	connect = indexof(textIn, " se ", pt) + 2;
	if ((connect > 1) && (connect < nxp)) {
	  nxp = connect;
	}
	connect = indexof(textIn, " cxar ", pt) + 4;
	if ((connect > 3) && (connect < nxp)) {
	  nxp = connect;
	}
	connect = indexof(textIn, " kvankam ", pt) + 7;
	if ((connect > 6) && (connect < nxp)) {
	  nxp = connect;
	}
	connect = indexof(textIn, " tamen ", pt) + 5;
	if ((connect > 4) && (connect < nxp)) {
	  nxp = connect;
	}
	connect = indexof(textIn, " plus ", pt) + 4;
	if ((connect > 3) && (connect < nxp)) {
	  nxp = connect;
	}
	connect = indexof(textIn, ", kiu ", pt) + 4;
	if ((connect > 3) && (connect < nxp)) {
	  nxp = connect;
	}
	connect = indexof(textIn, ", kiuj ", pt) + 5;
	if ((connect > 4) && (connect < nxp)) {
	  nxp = connect;
	}
	connect = indexof(textIn, ", kiun ", pt) + 5;
	if ((connect > 4) && (connect < nxp)) {
	  nxp = connect;
	}
	connect = indexof(textIn, ", kiujn ", pt) + 6;
	if ((connect > 5) && (connect < nxp)) {
	  nxp = connect;
	}
	connect = indexof(textIn, ".\"", pt);
	if ((connect >= FOUND) && (connect < nxp)) {
	  nxp = connect + 1;
	}
	connect = indexof(textIn, "?\"", pt);
	if ((connect >= FOUND) && (connect < nxp)) {
	  nxp = connect + 1;
	}
	connect = indexof(textIn, "!\"", pt);
	if ((connect >= FOUND) && (connect < nxp)) {
	  nxp = connect + 1;
	}
	connect = indexof(textIn, ".]", pt);
	if ((connect >= FOUND) && (connect < nxp)) {
	  nxp = connect + 1;
	}
	connect = indexof(textIn, ".;", pt);
	if ((connect >= FOUND) && (connect < nxp)) {
	  nxp = connect + 1;
	}
	connect = indexof(textIn, ".)", pt);
	if ((connect >= FOUND) && (connect < nxp)) {
	  nxp = connect + 1;
	}
	connect = indexof(textIn, "!]", pt);
	if ((connect >= FOUND) && (connect < nxp)) {
	  nxp = connect + 1;
	}
	connect = indexof(textIn, "!;", pt);
	if ((connect >= FOUND) && (connect < nxp)) {
	  nxp = connect + 1;
	}
	connect = indexof(textIn, "!)", pt);
	if ((connect >= FOUND) && (connect < nxp)) {
	  nxp = connect + 1;
	}
	connect = indexof(textIn, "?]", pt);
	if ((connect >= FOUND) && (connect < nxp)) {
	  nxp = connect + 1;
	}
	connect = indexof(textIn, "?;", pt);
	if ((connect >= FOUND) && (connect < nxp)) {
	  nxp = connect + 1;
	}
	connect = indexof(textIn, "?)", pt);
	if ((connect >= FOUND) && (connect < nxp)) {
	  nxp = connect + 1;
	}
	connect = indexof(textIn, ". ", pt);
	if ((connect >= FOUND) && (connect < nxp - 1)) {
	  nxp = connect;
	}
	connect = indexof(textIn, "? ", pt);
	if ((connect >= FOUND) && (connect < nxp - 1)) {
	  nxp = connect;
	}
	connect = indexof(textIn, "! ", pt);
	if ((connect >= FOUND) && (connect < nxp - 1)) {
	  nxp = connect;
	}
	connect = indexof(textIn, ";", pt);
	if ((connect >= FOUND) && (connect < nxp)) {
	  nxp = connect;
	}
	connect = indexof(textIn, "", pt);
	if ((connect >= FOUND) && (connect < nxp)) {
	  nxp = connect;
	}
	connect = indexof(textIn, ":", pt);
	if ((connect >= FOUND) && (connect < nxp)) {
	  nxp = connect;
	}
	connect = indexof(textIn, entryDelim, pt);
	if ((connect >= FOUND) && (connect < nxp)) {
	  nxp = connect;
	}
	connect = indexof(textIn, "\n", pt);
	if ((connect >= FOUND) && (connect < nxp)) {
	  nxp = connect;
	}
	connect = indexof(textIn, "\t", pt);
	if ((connect >= FOUND) && (connect < nxp)) {
	  nxp = connect;
	}
	connect = 0;
	if (nxp + 1 > textIn.length()) {
	  nxp = textIn.length() - 1;
	}
	if (pt > textIn.length() - 1) {
	  pt = textIn.length() - 1;
	}
	phrase = textIn.substr(pt, nxp + 1 - pt) + " ";
	noItq = false;
	if (fksub) {
	  phrase = " Fakexsubo " + phrase;
	  fksub = false;
	}
	if (fksub2) {
	  phrase = " Fakexsubo kaj Fakexsubo " + phrase;
	  fksub2 = false;
	}
	if (endswith(phrase, " kiu ")) {
	  fksub = true;
	}
	if (endswith(phrase, " kiuj ")) {
	  fksub2 = true;
	}
	//out << "phrase:" + phrase;
	phrase = numberAdjust(phrase);
	//out << "phrase2:" + phrase;
	if (phrase.length() > 0) {
	  phrase = " " + phrase.substr(0, phrase.length() - 1);
	}
	if (phrase.length() > 1) {
	  phrase = phrase.substr(1);
	}
	else {
	  phrase = "";
	}
	
	tx2 = "";
	pt = nxp + 1;
	ip = " " + phrase + " ";
	if (startswith(ip, " --")) {
	  startDash = true;
	  phrase = phrase.substr(2);
	  ip = " " + ip.substr(3);
	}
	if (endswith(ip, "-- ")) {
	  endDash = true;
	  phrase = phrase.substr(0, phrase.length() - 2);
	  ip = ip.substr(0, ip.length() - 3) + " ";
	}
	if (startswith(ip, " --")) {
	  startDash = true;
	  phrase = phrase.substr(2);
	  ip = " " + ip.substr(3);
	}
	if (endswith(ip, "-- ")) {
	  endDash = true;
	  phrase = phrase.substr(0, phrase.length() - 2);
	  ip = ip.substr(0, ip.length() - 3) + " ";
	}
	
	ip = abbreviationAdjust(ip);
	//out << "iprp9728:" + ip;
	// Special character conversions;
	ip = rep(ip, "_", " ¬¯¯¬ ");
	ip = rep(ip, "*", " ¬¯¬¯¬ ");
	ip = rep(ip, "{", "¬¯¬¬ ");
	ip = rep(ip, "}", " ¬¬¯¬");
	ip = rep(ip, "(", "¬¯¯¬¬ ");
	ip = rep(ip, ")", " ¬¬¯¯¬");

	saveEO = ip;
	//out << "b4 pre" + ip;
	preprocessing();
	//out << "after pre" + ip;
	// Translate capitalized first word:
	capn = false;
	x = 0;
	yp = 1;
	vocable = "";
	do {
	  yl = 0;
	  allCaps = false;
	  do {
		enf = false;
		karakter = ip.substr(yp, 1);
		if ((indexof(englishAlphabet, karakter) == NOT_FOUND) && (yl == 0)) {
		  tx2 = tx2 + karakter;
		  if ((karakter.compare(" ") == 0) && (endswith(tx2, "  "))) {
			tx2 = tx2.substr(0, tx2.length() - 1);
		  }
		  if (indexof((fs = ".?!"), karakter) >= FOUND) {
			capn = false;
		  }
		  if (indexof((fs = ",;:"), karakter) >= FOUND) {
			person = "";
		  }
		  if (indexof(DIGITS, karakter) >= FOUND) {
			capn = dontTranslateCapWords;
		  }
		  if (yp < ip.length() - 1) {
			yp++;
		  }
		  else {
			enf = true;
		  }
		}
		else if ((indexof(englishAlphabet, karakter) == NOT_FOUND)) {
		  break;
		}
		else {
		  yl++;
		  yp++;
		  if (yp - 1 >= ip.length() - 1) {
			break;
		  }
		}
	  } while (enf == false);
	  if (enf == true) {
		enf = false;
		break;
	  }
	  do {
		vocable = ip.substr(yp - yl, yl);
		if (vocable.compare(upperall(vocable)) == 0) {
		  allCaps = true;
		  if (vocable.length() > 1) {
			vocable = upperall(vocable.substr(0, 1))
			  + lowerall(vocable.substr(1));
		  }
		  else if (vocable.length() > 0) {
			vocable = upperall(vocable.substr(0, 1));
		  }
		}
		if (vocable.compare("Dioj") == 0) {
		  entry = "*di*o*j*¯*Ogod*";
		  break;
		}
		if (vocable.compare("Diojn") == 0) {
		  entry = "*di*o*j*n*¯*Ogod*";
		  break;
		}
		if (vocable.length() > 2) {
		  p = indexof(asciiCharacters, vocable.substr(0, 1));
		  if (p > 96) {
			p -= 32;
		  }
		  p -= 65;
		  if (p == NOT_FOUND) {
			p = 0;
		  }
		  if (p > 25) {
			p = 25;
		  }
		  demonymEnd = "";
		  // Translatable proper noun search:
		  z = properNouns[p].find("|" + upperall(vocable.substr(0, 1))
			+ vocable.substr(1) + ":");
		  if ((z == NOT_FOUND) && (endswith(vocable, "on"))) {
			z = properNouns[p].find("|" + upperall(vocable.substr(0, 1))
			  + vocable.substr(1, vocable.length() - 2) + ":");
			if ((z == NOT_FOUND) && (endswith(vocable, "oj"))) {
			  z = properNouns[p].find("|" + upperall(vocable.substr(0,
				1)) + vocable.substr(1, vocable.length() - 2) + ":");
			  demonymEnd = "s";
			  if ((z == NOT_FOUND) && (endswith(vocable, "ojn"))) {
				z = properNouns[p].find("|" + upperall(vocable.substr(0,
				  1)) + vocable.substr(1, vocable.length() - 3)
				  + ":");
				demonymEnd = "s";
			  }
			}
		  }
		  if (z >= FOUND) {
			z = properNouns[p].find(":", z + 3);
			if (z >= FOUND) {
			  entry = "*" + upperall(vocable.substr(0, 1))
				+ vocable.substr(1) + PROPER_NOUN_DIVIDER
				+ properNouns[p].substr(z + 1, properNouns[p].find(" ", 1)) +
				demonymEnd + "*";
			  capitalized = (capitalized || !capn);
			  break;
			}
		  }
		  demonymSuffixes = "";
		  pejorative = "";
		  if ((z == NOT_FOUND) && (endswith(vocable, "ano"))) {
			z = properNouns[p].find("|" + upperall(vocable.substr(0,
			  1)) + vocable.substr(1, vocable.length() - 4) + "o:");
			demonymEnd = "ian";
			demonymSuffixes = "*o";
			if ((z == NOT_FOUND) && (endswith(vocable, "anon"))) {
			  z = properNouns[p].find("|" + upperall(vocable.substr(0,
				1)) + vocable.substr(1, vocable.length() - 5)
				+ "o:");
			  demonymEnd = "ian";
			  demonymSuffixes = "*o*n";
			  if ((z == NOT_FOUND) && (endswith(vocable, "anoj"))) {
				z = properNouns[p].find("|" + upperall(vocable.substr(0,
				  1)) + vocable.substr(1, vocable.length() - 5)
				  + "o:");
				demonymEnd = "ian";
				demonymSuffixes = "*o*j";
				if ((z == NOT_FOUND) && (endswith(vocable, "anojn"))) {
				  z = properNouns[p].find("|" + upperall(vocable.substr(0,
					1)) + vocable.substr(1, vocable.length() - 6)
					+ "o:");
				  demonymEnd = "ian";
				  demonymSuffixes = "*o*j*n";
				  if ((z == NOT_FOUND) && (endswith(vocable, "anino"))) {
					z = properNouns[p].find("|" + upperall(vocable.substr(0,
					  1)) + vocable.substr(1, vocable.length() - 6)
					  + "o:");
					demonymEnd = "ian female";
					demonymSuffixes = "*in*o";
					if ((z == NOT_FOUND) && (endswith(vocable, "aninon"))) {
					  z = properNouns[p].find("|" + upperall(vocable.substr(0,
						1)) + vocable.substr(1, vocable.length() - 7)
						+ "o:");
					  demonymEnd = "ian female";
					  demonymSuffixes = "*in*o*n";
					  if ((z == NOT_FOUND) && (endswith(vocable, "aninoj"))) {
						z = properNouns[p].find("|" + upperall(vocable.substr(0,
						  1)) + vocable.substr(1, vocable.length()
						  - 7) + "o:");
						demonymEnd = "ian female";
						demonymSuffixes = "*in*o*j";
						if ((z == NOT_FOUND) && (endswith(vocable, "aninojn"))) {
						  z = properNouns[p].find("|" + upperall(vocable.substr(0,
							1)) + vocable.substr(1, vocable.length()
							- 8) + "o:");
						  demonymEnd = "ian female";
						  demonymSuffixes = "*in*o*j*n";
						  if ((z == NOT_FOUND) && (endswith(vocable, "anicxo"))) {
							z = properNouns[p].find("|" + upperall(vocable.substr(
							  0, 1)) + vocable.substr(1,
							  vocable.length() - 7) + "o:");
							demonymEnd = "ian male";
							demonymSuffixes = "*icx*o";
							if ((z == NOT_FOUND) && (endswith(vocable, "anicxon"))) {
							  z = properNouns[p].find("|" + upperall(vocable
								.substr(0, 1)) + vocable
								.substr(1, vocable.length() - 8) + "o:");
							  demonymEnd = "ian male";
							  demonymSuffixes = "*icx*o*n";
							  if ((z == NOT_FOUND)
								&& (endswith(vocable, "anicxoj"))) {
								z = properNouns[p].find("|" + upperall(vocable
								  .substr(0, 1)) + vocable
								  .substr(1, vocable.length() - 8) + "o:");
								demonymEnd = "ian male";
								demonymSuffixes = "*icx*o*j";
								if ((z == NOT_FOUND)
								  && (endswith(vocable, "anicxojn"))) {
								  z = properNouns[p].find("|" +
									upperall(vocable.substr(0, 1))
									+ vocable.substr(1, vocable.length()
									- 9) + "o:");
								  demonymEnd = "ian male";
								  demonymSuffixes = "*icx*o*j*n";
								}
							  }
							}
						  }
						}
					  }
					}
				  }
				}
			  }
			}
		  }
		  if ((z == NOT_FOUND) && (endswith(vocable, "aneco"))) {
			z = properNouns[p].find("|" + upperall(vocable.substr(0,
			  1)) + vocable.substr(1, vocable.length() - 6) + "o:");
			demonymEnd = "ianness";
			demonymSuffixes = "*ec*o";
			if ((z == NOT_FOUND) && (endswith(vocable, "anecon"))) {
			  z = properNouns[p].find("|" + upperall(vocable.substr(0,
				1)) + vocable.substr(1, vocable.length() - 7)
				+ "o:");
			  demonymEnd = "ianness";
			  demonymSuffixes = "*ec*o*n";
			  if ((z == NOT_FOUND) && (endswith(vocable, "anacxo"))) {
				z = properNouns[p].find("|" + upperall(vocable.substr(0,
				  1)) + vocable.substr(1, vocable.length() - 7) + "o:");
				demonymEnd = "ian";
				pejorative = "lousy ";
				demonymSuffixes = "";
				if ((z == NOT_FOUND) && (endswith(vocable, "anacxon"))) {
				  z = properNouns[p].find("|" + upperall(vocable.substr(0,
					1)) + vocable.substr(1, vocable.length() - 8)
					+ "o:");
				  demonymEnd = "ian";
				  pejorative = "lousy ";
				  demonymSuffixes = "";
				  if ((z == NOT_FOUND) && (endswith(vocable, "anacxoj"))) {
					z = properNouns[p].find("|" + upperall(vocable.substr(0, 1)) +
					  vocable.substr(1, vocable.length() - 8) + "o:");
					demonymEnd = "ians";
					pejorative = "lousy ";
					demonymSuffixes = "";
					if ((z == NOT_FOUND) && (endswith(vocable, "anacxojn"))) {
					  z = properNouns[p].find("|" + upperall(vocable.substr(0,
						1)) + vocable.substr(1, vocable.length() - 9)
						+ "o:");
					  demonymEnd = "ians";
					  pejorative = "lousy ";
					  demonymSuffixes = "";
					}
				  }
				}
			  }
			}
		  }
		  if (z >= FOUND) {
			z = properNouns[p].find(":", z + 3);
			if (z >= FOUND) {
			  entry = "*" + lowerall(vocable) + demonymSuffixes + "*¯*O"
				+ pejorative + properNouns[p].substr(z + 1,
				properNouns[p].find(" ", z + 2) - (z + 1)) + demonymEnd + "*";
			  break;
			}
		  }
		  demonymSuffixes = "";
		  if ((z == NOT_FOUND) && (endswith(vocable, "ana"))) {
			z = properNouns[p].find("|" + upperall(vocable.substr(0,
			  1)) + vocable.substr(1, vocable.length() - 4) + "o:");
			demonymEnd = "ian";
			if ((z == NOT_FOUND) && (endswith(vocable, "anan"))) {
			  z = properNouns[p].find("|" + upperall(vocable.substr(0,
				1)) + vocable.substr(1, vocable.length() - 5)
				+ "o:");
			  demonymEnd = "ian";
			  if ((z == NOT_FOUND) && (endswith(vocable, "anaj"))) {
				z = properNouns[p].find("|" + upperall(vocable.substr(0,
				  1)) + vocable.substr(1, vocable.length() - 5)
				  + "o:");
				demonymEnd = "ian";
				if ((z == NOT_FOUND) && (endswith(vocable, "anajn"))) {
				  z = properNouns[p].find("|" + upperall(vocable.substr(0,
					1)) + vocable.substr(1, vocable.length() - 6)
					+ "o:");
				  demonymEnd = "ian";
				  if ((z == NOT_FOUND) && (endswith(vocable, "a"))) {
					z = properNouns[p].find("|" + upperall(vocable.substr(0,
					  1)) + vocable.substr(1, vocable.length() - 2)
					  + "o:");
					demonymEnd = "ian";
					if ((z == NOT_FOUND) && (endswith(vocable, "an"))) {
					  z = properNouns[p].find("|" + upperall(vocable.substr(0,
						1)) + vocable.substr(1, vocable.length() - 3)
						+ "o:");
					  demonymEnd = "ian";
					  if ((z == NOT_FOUND) && (endswith(vocable, "aj"))) {
						z = properNouns[p].find("|" + upperall(vocable.substr(0,
						  1)) + vocable.substr(1, vocable.length()
						  - 3) + "o:");
						demonymEnd = "ian";
						if ((z == NOT_FOUND) && (endswith(vocable, "ajn"))) {
						  z = properNouns[p].find("|" + upperall(vocable.substr(0,
							1)) + vocable.substr(1, vocable.length() - 4) +
							"o:");
						  demonymEnd = "ian";
						}
					  }
					}
				  }
				}
			  }
			}
		  }
		  //out << "10022" + vocable;
		  if (z >= FOUND) {
			z = properNouns[p].find(":", z + 3);
			if (z >= FOUND) {
			  entry = "*" + lowerall(vocable) + "*¯*A" + demonymSuffixes
				+ properNouns[p].substr(z + 1, properNouns[p].find(" ",
				z + 2) - (z + 1)) + demonymEnd + "*";
			  break;
			}
		  }
		}
		if ((vocable.length() > 1) && (vocable.compare(upperall(vocable.substr(0,
		  1)) + vocable.substr(1)) == 0)) {
		  /* Check for capitalized words to skip unless first word of
		  sentence or option all: */
		  if (capn == false) {
			capitalized = true;
		  }
		  else {
			entry = PROPER_NOUN_DIVIDER + vocable + "*";
			break;
		  }
		}
		if ((capn == false) && (allCaps == false)) {
		  vocable = lowerall(vocable);
		}
		main2();
		//out << "10049" + entry;
	  } while (1 == 0);

	  // for (p = 0; p < 12; p++) { // Change X-Method to circumflexes in input
	  //textIn2 = rep(textIn, esperantoXChars.substr(p * 2, 2),
	  //  esperantoChars.substr(p, 1));
	  // }

	  if (circumflexCorrection) {
		unknownWord = vocable;
		if (startswith(entry, "{*|undefined")) {
		  vocable = vocable + " ";
		  y = 0;
		  gf = false;
		  // missing circumflex correction:
		  do {
			z = indexof((fs = "cghjsuCGHJSU"), vocable.substr(y, 1));
			if ((z >= FOUND) && (!lowerall(vocable.substr(y + 1, 1)).compare("x") == 0)) {
			  oldVocable = vocable;
			  vocable = vocable.substr(0, y + 1) + "x"
				+ vocable.substr(y + 1);
			  vocableCircum = vocable;
			  // for (p = 0; p < 12; p++) {
			  //vocableCircum = rep(vocableCircum, esperantoXChars.substr(p * 2,
			  //  2), esperantoChars.substr(p, 1));
			  // }
			  rgx = " " + trim(oldVocable) + "([ .,?!;:)])?";
			  textIn2 = regex_replace((" " + textIn2 + " "), rgx, " " + trim(vocableCircum) + "$1");
			  textIn2 = textIn2.substr(1, textIn2.length() - 2);
			  gf = true;
			  break;
			}
			y++;
		  } while (y < vocable.length() - 2);
		  vocable = lowerall(vocable.substr(0, vocable.length() - 1));
		  if (gf == false) {
			entry = "{*|undefined|*¯*|" + unknownWord + "*}";
		  }
		  main2();
		  //out << "10088" + entry;
		}
		if (startswith(entry, "{*|undefined")) {
		  vocable = vocable + " ";
		  y = 0;
		  gf = false;
		  do {
			z = indexof((fs = "cghjsuCGHJSU"), vocable.substr(y, 1));
			if ((z >= FOUND) && (!lowerall(vocable.substr(y + 1, 1)).compare("x") == 0)) {
			  oldVocable = vocable;
			  vocable = vocable.substr(0, y + 1) + "x"
				+ vocable.substr(y + 1);
			  vocableCircum = vocable;
			  // for (p = 0; p < 12; p++) {
			  //vocableCircum = rep(vocableCircum, esperantoXChars.substr(p * 2,
			  //  2), esperantoChars.substr(p, 1));
			  // }
			  rgx = " " + trim(oldVocable) + "([ .,?!;:)])?";
			  textIn2 = regex_replace((" " + textIn2 + " "), rgx, " " + trim(vocableCircum) + "$1");
			  textIn2 = textIn2.substr(1, textIn2.length() - 2);
			  gf = true;
			  break;
			}
			y++;
		  } while (y < vocable.length() - 1);
		  vocable = lowerall(vocable.substr(0, vocable.length() - 1));
		  if (gf == false) {
			entry = "{*|undefined|*¯*|" + unknownWord + "*}";
		  }
		  main2();
		  //out << "10118" + entry;
		}
		if (startswith(entry, "{*|undefined")) {
		  vocable = vocable + " ";
		  y = 0;
		  gf = false;
		  do {
			z = indexof((fs = "cghjsuCGHJSU"), vocable.substr(y, 1));
			if ((z >= FOUND) && (!lowerall(vocable.substr(y + 1, 1)).compare("x") == 0)) {
			  oldVocable = vocable;
			  vocable = vocable.substr(0, y + 1) + "x"
				+ vocable.substr(y + 1);
			  vocableCircum = vocable;
			  // for (p = 0; p < 12; p++) {
			  //vocableCircum = rep(vocableCircum, esperantoXChars.substr(p * 2,
			  //  2), esperantoChars.substr(p, 1));
			  // }
			  rgx = " " + trim(oldVocable) + "([ .,?!;:)])?";
			  textIn2 = regex_replace((" " + textIn2 + " "), rgx, " " + trim(vocableCircum) + "$1");
			  textIn2 = textIn2.substr(1, textIn2.length() - 2);
			  gf = true;
			  break;
			}
			y++;
		  } while (y < vocable.length() - 2);
		  vocable = lowerall(vocable.substr(0, vocable.length() - 1));
		  if (gf == false) {
			entry = "{*|undefined|*¯*|" + unknownWord + "*}";
		  }
		  //out << "10162" + entry;
		  main2();
		  //out << "10149" + entry;
		}
		if (startswith(entry, "{*|undefined|*¯")) {
		  vocable = vocable + " ";
		  y = 0;
		  gf = false;
		  do {
			z = indexof((fs = "cghjsuCGHJSU"), vocable.substr(y, 1));
			if ((z >= FOUND) && (lowerall(vocable.substr(y + 1, 1)).compare("x") == 0)) {
			  oldVocable = vocable;
			  vocable = vocable.substr(0, y + 1) + "x"
				+ vocable.substr(y + 1);
			  vocableCircum = vocable;
			  // for (p = 0; p < 12; p++) {
			  //vocableCircum = rep(vocableCircum, esperantoXChars.substr(p * 2,
			  //  2), esperantoChars.substr(p, 1));
			  // }
			  rgx = " " + trim(oldVocable) + "([ .,?!;:)])?";
			  textIn2 = regex_replace((" " + textIn2 + " "), rgx, " " + trim(vocableCircum) + "$1");
			  textIn2 = textIn2.substr(1, textIn2.length() - 2);
			  gf = true;
			  break;
			}
			y++;
		  } while (y < vocable.length() - 2);
		  vocable = lowerall(vocable.substr(0, vocable.length() - 1));
		  if (gf == false) {
			entry = "{*|undefined|*¯*|" + unknownWord + "*}";
		  }
		  main2();
		  //out << "10179" + entry;
		}
		if (startswith(entry, "{*|undefined")) {
		  vocable = vocable + " ";
		  y = 1;
		  gf = false;
		  do {
			z = indexof((fs = "cghjsuCGHJSU"), vocable.substr(y, 1));
			if ((z >= FOUND) && (lowerall(vocable.substr(y + 1, 2)).compare("hx") == 0)) {
			  vocable = vocable.substr(0, y + 1) + vocable.substr(y + 2);
			  gf = true;
			  break;
			}
			if ((z >= FOUND) && (lowerall(vocable.substr(y, 1)).compare("h") == 0)) {
			  vocable = vocable.substr(0, y + 1) + "x"
				+ vocable.substr(y + 2);
			  gf = true;
			  break;
			}
			if ((z >= FOUND) && (lowerall(vocable.substr(y + 1, 2)).compare("xh") == 0)) {
			  vocable = vocable.substr(0, y + 2) + vocable.substr(y + 3);
			  gf = true;
			  break;
			}
			y++;
		  } while (y < vocable.length() - 3);
		  vocable = lowerall(vocable.substr(0, vocable.length() - 1));
		  if (gf == false) {
			entry = "{*|undefined|*¯*|" + unknownWord + "*}";
		  }
		  main2();
		  //out << "10210" + entry;
		}
		if (startswith(entry, "{*|undefined")) {
		  vocable = vocable + " ";
		  y = 0;
		  gf = false;
		  do {
			z = indexof((fs = "cghjsuCGHJSU"), vocable.substr(y, 1));
			if ((z >= FOUND) && (lowerall(vocable.substr(y + 1, 2)).compare("hx") == 0)) {
			  vocable = vocable.substr(0, y + 1) + vocable.substr(y + 2);
			  gf = true;
			  break;
			}
			if ((z >= FOUND) && (lowerall(vocable.substr(y + 1, 1)).compare("h") == 0)) {
			  vocable = vocable.substr(0, y + 1) + "x"
				+ vocable.substr(y + 2);
			  gf = true;
			  break;
			}
			if ((z >= FOUND) && (lowerall(vocable.substr(y + 1, 2)).compare("xh") == 0)) {
			  vocable = vocable.substr(0, y + 2) + vocable.substr(y + 3);
			  gf = true;
			  break;
			}
			y++;
		  } while (y < vocable.length() - 3);
		  vocable = lowerall(vocable.substr(0, vocable.length() - 1));
		  if (gf == false) {
			entry = "{*|undefined|*¯*|" + unknownWord + "*}";
		  }
		  main2();
		  //out << "10241" + entry;
		}
		if (startswith(entry, "{*|undefined")) {
		  vocable = vocable + " ";
		  y = 0;
		  gf = false;
		  do {
			z = indexof((fs = "cghjsuCGHJSU"), vocable.substr(y, 1));
			if ((z >= FOUND) && (lowerall(vocable.substr(y + 1, 2)).compare("hx") == 0)) {
			  vocable = vocable.substr(0, y + 1) + vocable.substr(y + 2);
			  gf = true;
			  break;
			}
			if ((z >= FOUND) && (lowerall(vocable.substr(y + 1, 1)).compare("h") == 0)) {
			  vocable = vocable.substr(0, y + 1) + "x"
				+ vocable.substr(y + 2);
			  gf = true;
			  break;
			}
			if ((z >= FOUND) && (lowerall(vocable.substr(y + 1, 2)).compare("xh") == 0)) {
			  vocable = vocable.substr(0, y + 2) + vocable.substr(y + 3);
			  gf = true;
			  break;
			}
			y++;
		  } while (y < vocable.length() - 3);
		  vocable = lowerall(vocable.substr(0, vocable.length() - 1));
		  if (gf == false) {
			entry = "{*|undefined|*¯*|" + unknownWord + "*}";
		  }
		  main2();
		  //out << "10272" + entry;
		  if (startswith(entry, "{*|undefined")) {
			entry = "{*|undefined|*¯*|"
			  + unknownWord + "*}";
		  }
		}
	  }

	  entry = prefixedPart + "{" + entry + "}";
	  entry = rep(entry, "{{", "{");
	  entry = rep(entry, "}}", "}");
	  //out << "10283" + entry;
	  // Adjust letter prefixes:
	  rgx = "[|]undefined[|][*]¯[*][|]([a-z])kzqa";
	  entry = regex_replace(entry, rgx,
		"$1*a*¯*N$1u8qpz");
	  rgx = "[|]undefined[|][*]¯[*][|]([a-z])pzqa";
	  entry = regex_replace(entry, rgx,
		"$1*a*¯*N$1u2qpz");

	  //out << "10307" + entry;
	  u = indexof(entry, DIVIDER) + 4;
	  if (entry.length() > u) {
		if ((islower(entry[1])) && (!(islower(entry[u])))) {
		  capitalized = false;
		}
	  }
	  if (capitalized) {
		entry = upper(entry, 2);
		u = indexof(entry, DIVIDER) + 4;
		if (u > 3) {
		  entry = upper(entry, u);
		}
		capitalized = false;
	  }
	  if (allCaps) {
		entry = upperall(entry);
		allCaps = false;
	  }
	  tx2 += entry;
	  //out << "tx2:" + tx2 +"\n";
	  //out << "yp:";
	  //out << yp;
	  //out << "iplen-2:";
	  //out << ip.length() - 2;
	  //out << "ip:" + ip;
	  capn = dontTranslateCapWords;
	} while (yp <= ip.length() - 2);
	person = "";
	// Adjust ordinal numbers with digits:
	rgx = "(\\d+)(\\{\\*\\*?aj\\*¯\\*Fq749kqz\\*\\})";
	tx2 = regex_replace(tx2, rgx, "$1{*a|*¯*|a*}");
	rgx = "(\\d+)(\\{\\*\\*?a\\*n\\*¯\\*Fq749kq\\*\\})";
	tx2 = regex_replace(tx2, rgx, "$1{*a|*¯*|a*}");
	rgx = "(\\d+)(\\{\\*ajn\\*¯\\*F-ever/at\\|all\\*\\})";
	tx2 = regex_replace(tx2, rgx, "$1{*a|*¯*|a*}");
	rgx = "(\\d+)(\\{\\*a\\|\\*¯\\*\\|a\\*\\} \\{\\*ajn\\*¯\\*F-ever/at\\|all\\*\\})";
	tx2 = regex_replace(tx2, rgx,
	  "$1{*a|*¯*|a*}");
	rgx = "(\\d+)(\\{\\*a\\|\\*¯\\*\\|a\\*\\} \\{\\*a\\|\\*¯\\*\\|a\\*\\})";
	tx2 = regex_replace(tx2, rgx,
	  "$1{*a|*¯*|a*}");
	rgx = "(\\d+)\\{\\*a\\|\\*¯\\*\\|a\\*\\}";
	tx2 = regex_replace(tx2, rgx, "{*du*a*¯*A$1th*}");
	tx2 = rep(tx2, "1th*}", "1st*}");
	tx2 = rep(tx2, "2th*}", "2nd*}");
	tx2 = rep(tx2, "3th*}", "3rd*}");
	//out << "bf2:" + tx2;

	postProcessing();
	//out << "afer post:" + tx2;
	if ((startswith(saveEO, " La ")) && (startswith(tx2, "The "))) {
	  if (upperall(saveEO.substr(4, 1)).compare(saveEO.substr(4, 1)) == 0) {
		tx2 = upper(tx2, 4);
	  }
	}
	else if ((startswith(saveEO, " la ")) && (startswith(tx2, "the "))) {
	  if (upperall(saveEO.substr(4, 5 - 4)).compare(saveEO.substr(4, 1)) == 0) {
		tx2 = upper(tx2, 4);
	  }
	}
	if (allCapitalized) {
	  tx2 = upperall(tx2);
	}
	textOut += startText + rightTrim(tx2) + "@qyzr@";
  } while (pt < textIn.length() - 1);
  //out << 10466 + textOut;
  rgx = "whom/which (he|she|it|they|I|you|we)( |')";
  textOut = regex_replace(textOut, rgx,
	"which $1$2");
  textOut = rplUL(textOut, " one.K.", " B.C.");
  textOut = rplUL(textOut, " p.K.", " A.D.");
  textOut = rplUL(textOut, " a.K.", " A.D.");
  textOut = rep(textOut, " t.e.", " i.e.");
  textOut = rep(textOut, " in, which", " in which");
  //out << textOut;
  textOut = rplUL(textOut, " whether/or@qyzr@ no?", " right?");
  textOut = rep(textOut, "ññ", "");
  rgx = "(b|B)efore that @qyzr@ (the|a|he|she|it|they|you|I|we|one|this|that|these|those|his|her|its|their|your|my|our) ";
  textOut = regex_replace(textOut, rgx,
	"$1efore $2 ");
  rgx = "(b|B)efore/ago (the|a|he|she|it|they|you|I|we|one|this|that|these|those|his|her|its|their|your|my|our) ";
  textOut = regex_replace(textOut, rgx,
	"$1efore $2 ");
  u = indexof(textOut, ",");
  if ((u >= FOUND) && (u < textOut.length() - 1)) {
	while (!(textOut.substr(u + 1, 1).compare(" ") == 0)
	  && (indexof(DIGITS, textOut.substr(u + 1, 1)) == NOT_FOUND)) {
	  textOut = textOut.substr(0, u + 1) + " " + textOut.substr(u + 1);
	  z = u + 2;
	  u = indexof(textOut, ",", z);
	  if (!((u >= FOUND) && (u < textOut.length() - 1))) {
		break;
	  }
	}
  }
  textOut = rep(textOut, "  @qyzr@", "");
  textOut = rep(textOut, " @qyzr@", "");
  textOut = rep(textOut, "@qyzr@", "");
  // if (indexof((fs = "ABCDEFGHIJKLMNOPQRSTUVWXYZ\u0108\u011c\u0124\u0134\u015c\u016c"), textIn.substr(0, 1)) >=
  //FOUND) textOut = upper(textOut, 0);
  rgx = "([a-zA-Z0-9]+)  +";
  textOut = regex_replace(textOut, rgx, "$1 ");
  rgx = "([.?!]) +a";
  textOut = regex_replace(textOut, rgx, "$1 A");
  rgx = "([.?!]) +b";
  textOut = regex_replace(textOut, rgx, "$1 B");
  rgx = "([.?!]) +c";
  textOut = regex_replace(textOut, rgx, "$1 C");
  rgx = "([.?!]) +d";
  textOut = regex_replace(textOut, rgx, "$1 D");
  rgx = "([.?!]) +e";
  textOut = regex_replace(textOut, rgx, "$1 E");
  rgx = "([.?!]) +f";
  textOut = regex_replace(textOut, rgx, "$1 F");
  rgx = "([.?!]) +g";
  textOut = regex_replace(textOut, rgx, "$1 G");
  rgx = "([.?!]) +h";
  textOut = regex_replace(textOut, rgx, "$1 H");
  rgx = "([.?!]) +i";
  textOut = regex_replace(textOut, rgx, "$1 I");
  rgx = "([.?!]) +j";
  textOut = regex_replace(textOut, rgx, "$1 J");
  rgx = "([.?!]) +k";
  textOut = regex_replace(textOut, rgx, "$1 K");
  rgx = "([.?!]) +l";
  textOut = regex_replace(textOut, rgx, "$1 L");
  rgx = "([.?!]) +m";
  textOut = regex_replace(textOut, rgx, "$1 M");
  rgx = "([.?!]) +n";
  textOut = regex_replace(textOut, rgx, "$1 N");
  rgx = "([.?!]) +o";
  textOut = regex_replace(textOut, rgx, "$1 O");
  rgx = "([.?!]) +p";
  textOut = regex_replace(textOut, rgx, "$1 P");
  rgx = "([.?!]) +q";
  textOut = regex_replace(textOut, rgx, "$1 Q");
  rgx = "([.?!]) +r";
  textOut = regex_replace(textOut, rgx, "$1 R");
  rgx = "([.?!]) +s";
  textOut = regex_replace(textOut, rgx, "$1 S");
  rgx = "([.?!]) +t";
  textOut = regex_replace(textOut, rgx, "$1 T");
  rgx = "([.?!]) +u";
  textOut = regex_replace(textOut, rgx, "$1 U");
  rgx = "([.?!]) +v";
  textOut = regex_replace(textOut, rgx, "$1 V");
  rgx = "([.?!]) +w";
  textOut = regex_replace(textOut, rgx, "$1 W");
  rgx = "([.?!]) +x";
  textOut = regex_replace(textOut, rgx, "$1 X");
  rgx = "([.?!]) +y";
  textOut = regex_replace(textOut, rgx, "$1 Y");
  rgx = "([.?!]) +z";
  textOut = regex_replace(textOut, rgx, "$1 Z");

  return textOut;
}

static string korrections(string t, string tx1a) {
  // Phrase corrections:
  txt1 = tx1a;
  //out << "K1 next" + t;
  t = korrections1(t);
  //out << "K1 done" + t;
  t = korrections2(t);
  //out << "K2 done" + t;
  t = korrections3(t);
  //out << "K3 done" + t;
  t = korrections4(t);
  //out << "K4 done" + t;
  t = korrections5(t);
  //out << "K5 done" + t;
  t = korrections6(t);
  //out << "K6 done" + t;
  t = korrections7(t);
  //out << "K7 done" + t;
  t = korrections8(t);
  //out << "K8 done" + t;
  return t;
}

static string korrections1(string t) {
  // Corrections and adjustments for phrases, part 1:
  if (t.compare(" It  ") == 0) {
	return (t = "");
  }
  if (t.compare(" It ) ") == 0) {
	return (t = " ) ");
  }
  if (t.compare(" It ] ") == 0) {
	return (t = " ] ");
  }
  if (t.compare(" It } ") == 0) {
	return (t = " } ");
  }
  if (t.compare(" It  ") == 0) {
	return (t = "  ");
  }
  if (startswith(t, "  ")) {
	t = t.substr(1);
  }
  rgx = " not(/no)?( itq)? (don't|doesn't|didn't|won't|wouldn't|aren't|isn't|wasn't|weren't) ";
  t = regex_replace(t, rgx, " $3 ");
  rgx = " [aA]n? (\\d+)/(\\d+) of ";
  t = regex_replace(t, rgx, " $1/$2 of a ");

  if (verbPerson == 3) {
	t = rplUL(t, " not   ", " not ");
	t = rplUL(t, " not/no   ", " not/no ");
	t = rplUL(t, " do ", " does ");
	rgx = " (to|will|would|can|could|should) does ";
	t = regex_replace(t, rgx, " $1 do ");
	t = rep(t, "n't does ", "n't do ");
	rgx = " are([ .,?!:;)])";
	t = regex_replace(t, rgx, " is$1");
	rgx = " Are([ .,?!:;)])";
	t = regex_replace(t, rgx, " Is$1");
	rgx = " were([ .,?!:;)])";
	t = regex_replace(t, rgx, " was$1");
	rgx = " Were([ .,?!:;)])";
	t = regex_replace(t, rgx, " Was$1");
	t = rplUL(t, " don't ", " doesn't ");
	t = rplUL(t, " aren't", " isn't");
	t = rplUL(t, " weren't", " wasn't");
  }
  if (verbPerson == 1) {
	rgx = " is([ .,?!:;)])";
	t = regex_replace(t, rgx, " am$1");
	rgx = " Is([ .,?!:;)])";
	t = regex_replace(t, rgx, " Am$1");
	rgx = " are([ .,?!:;)])";
	t = regex_replace(t, rgx, " am$1");
	rgx = " Are([ .,?!:;)])";
	t = regex_replace(t, rgx, " Am$1");
	rgx = " were([ .,?!:;)])";
	t = regex_replace(t, rgx, " was$1");
	rgx = " Were([ .,?!:;)])";
	t = regex_replace(t, rgx, " Was$1");
	t = rplUL(t, " does", " do");
	t = rplUL(t, " isn't", " am not");
	t = rplUL(t, " doesn't", " don't");
	t = rplUL(t, " aren't", " am not");
	t = rplUL(t, " weren't", " wasn't");
	rgx = " (a|A)m not I([ .,?!:;)])";
	t = regex_replace(t, rgx, " $1ren't I$2");
  }
  t = rep(t, " a-a ", " -- ");
  t = rep(t, " a-an ", " -- ");
  t = rep(t, " aa ", " -- ");
  t = rep(t, " aan ", " -- ");
  t = rep(t, "(", "( ");
  t = rep(t, ")", " )");
  t = rep(t, "able-", "");
  t = rep(t, " beens", " been");
  rgx = "(\\d)year";
  t = regex_replace(t, rgx, "$1-year");
  rgx = " a brought (one )?(by|from) ";
  t = regex_replace(t, rgx, " brought $2 ");
  rgx = " A brought (one )?(by|from) ";
  t = regex_replace(t, rgx, " Brought $2 ");
  rgx = " (b|B)rought ones (by|from) ";
  t = regex_replace(t, rgx, " $1rought $2 ");
  t = rep(t, " To-giving, ", " Additionally, ");
  rgx = "(zero-|ten-|twenty-|thirty-|forty-|fifty-|sixty-|seventy-|eighty-|ninety-|hundred-|thousand-|million-|billion-|trillion-|Zero-|Ten-|Twenty-|Thirty-|Forty-|Fifty-|Sixty-|Seventy-|Eighty-|Ninety-|Hundred-|Thousand-|Million-|Billion-|Trillion-)a";
  t = regex_replace(t, rgx, "$1");
  rgx = " (t|T)en && (one|two|three|four|five|six|seven|eight|nine)";
  t = regex_replace(t, rgx,
	" $1en-$2");
  t = rep(t, " && a ", " && ");
  t = rep(t, " && an ", " && ");
  rgx = " (ten|twenty|thirty|forty|fifty|sixty|seventy|eighty|ninety) && ";
  t = regex_replace(t, rgx, " $1-");
  rgx = " (Ten|Twenty|Thirty|Forty|Fifty|Sixty|Seventy|Eighty|Ninety) && ";
  t = regex_replace(t, rgx, " $1-");
  t = rplF(t, "ten-first", "eleventh");
  t = rplF(t, "ten-second", "twelfth");
  t = rplF(t, "ten-third", "thirteenth");
  t = rplF(t, "ten-fourth", "fourteenth");
  t = rplF(t, "ten-fifth", "fifteenth");
  t = rplF(t, "ten-sixth", "sixteenth");
  t = rplF(t, "ten-seventh", "seventeenth");
  t = rplF(t, "ten-eighth", "eighteenth");
  t = rplF(t, "ten-ninth", "nineteenth");
  t = rplF(t, "ten-one", "eleven");
  t = rplF(t, "ten-two", "twelve");
  t = rplF(t, "ten-three", "thirteen");
  t = rplF(t, "ten-four", "fourteen");
  t = rplF(t, "ten-five", "fifteen");
  t = rplF(t, "ten-six", "sixteen");
  t = rplF(t, "ten-seven", "seventeen");
  t = rplF(t, "ten-eight", "eighteen");
  t = rplF(t, "ten-nine", "nineteen");
  t = rep(t, "--", " -- ");
  t = rplUL(t, " in order/for thatxqyy ", " so that ");
  t = rplUL(t, " thatxqyy ", " that ");
  t = rep(t, " an only ", " only a ");
  t = rep(t, "Xqx", "");
  t = rep(t, "oqk", "");
  t = rplUL(t, " hairs", " hair");
  t = rep(t, " one-a ", " first ");
  t = rep(t, " one-an ", " first ");
  t = rep(t, " one-", "-");
  t = rep(t, "-a little", " a little");
  t = rep(t, "-a lot", " a lot");
  t = rplUL(t, "-an a one", " one");
  t = rep(t, "-an a ", " ");
  t = rep(t, "-a ", " ");
  t = rplUL(t, " an or ", " or a ");
  t = rep(t, " an or/either ", " or a ");
  t = rep(t, " an Or/either ", " or a ");
  t = rep(t, "1a-", "1st ");
  t = rep(t, "2a-", "2nd ");
  t = rep(t, "3a-", "3rd ");
  rgx = "([4567890])a-";
  t = regex_replace(t, rgx, "$1th ");
  t = rep(t, "1-ever/at all", "1st");
  t = rep(t, "2-ever/at all", "2nd");
  t = rep(t, "3-ever/at all", "3rd");
  rgx = "([4567890])-ever/at all";
  t = regex_replace(t, rgx, "$1th");
  rgx = " a([.,?!;:])";
  t = regex_replace(t, rgx, "$1");
  t = rep(t, "1q749kqz", "1st");
  t = rep(t, "2q749kqz", "2nd");
  t = rep(t, "3q749kqz", "3rd");
  rgx = "([4567890])q749kqz";
  t = regex_replace(t, rgx, "$1th");
  t = rep(t, "Q749kqz ones", "Ouch");
  t = rep(t, "q749kqz and ", " ones and ");
  t = rep(t, "Q749kqz and ", " Ones and ");
  t = rep(t, "q749kq and ", " one and ");
  t = rep(t, "Q749kq and ", " One and ");
  t = rep(t, "q749kqz or ", " ones or ");
  t = rep(t, "Q749kqz or ", " Ones or ");
  t = rep(t, "q749kq or ", " one or ");
  t = rep(t, "Q749kq or ", " One or ");
  t = rep(t, "q749kqz ", " ");
  t = rep(t, "Q749kqz ", " ");
  t = rep(t, "q749kq ", "");
  rgx = "q749kqz([.,?!;:])";
  t = regex_replace(t, rgx, " ones$1");
  rgx = "Q749kqz([.,?!;:])";
  t = regex_replace(t, rgx, " Ones$1");
  rgx = "q749kq([.,?!;:])";
  t = regex_replace(t, rgx, " one$1");
  rgx = "Q749kq([.,?!;:])";
  t = regex_replace(t, rgx, " One$1");
  t = rplUL(t, " love-bow-", " two-");
  t = rplUL(t, " an one ", " one ");
  t = rplUL(t, " a one ", " one ");
  t = rplUL(t, " a the United Statesian", " an American");
  t = rplUL(t, " bhutanian", " Bhutanese");
  t = rplUL(t, " a the ", " the ");
  t = rplUL(t, " wrong-", " wrong ");
  t = rplUL(t, " wrongly-", " wrongly ");
  t = rplUL(t, "/maked", "/made");
  t = rplUL(t, "-be-bing", "-be-being");
  t = rplUL(t, "-be-maked", "-be-made");
  t = rplUL(t, " bes ", " is ");
  t = rplUL(t, "-bes ", "-is ");
  t = rplUL(t, "/bes ", "/is ");
  t = rplUL(t, " bing", " being");
  t = rplUL(t, "/bing", "/being");
  t = rplUL(t, "-bing", "-being");
  t = rplUL(t, " ber ", " be-er ");
  t = rplUL(t, "/ber ", "/be-er ");
  t = rplUL(t, " bers ", " be-ers ");
  t = rplUL(t, "/bers ", "/be-ers ");
  t = rplF(t, "seing", "seeing");
  t = rplUL(t, " be ", " are ");
  t = rplUL(t, "/be ", "/are ");
  t = rplUL(t, " putting", " puting");
  t = rplUL(t, " is previously able", " has been able");
  t = rplUL(t, " are previously able", " have been able");
  t = rplUL(t, " am previously able", " have been able");
  t = rplUL(t, " was previously able", " had been able");
  t = rplUL(t, " were previously able", " had been able");
  t = rplUL(t, " will are ", " will be ");
  t = rplUL(t, " would are ", " would be ");
  t = rplUL(t, " should are ", " should be ");
  t = rplUL(t, " to are ", " to be ");
  t = rplUL(t, " could are ", " could be ");
  t = rplUL(t, " a some ", " some ");
  t = rplUL(t, " a which ", " which ");
  t = rplUL(t, " maked", " made");
  t = rplUL(t, "-maked", "-made");
  rgx = " (is|I'm|are|was|were|Is|Are|Was|Were) going-to-be( |-)";
  t = regex_replace(t, rgx, " $1 going to be ");
  t = rplUL(t, " going-to-be ", " going to be ");
  t = rplUL(t, " going-to-be-", " going to be ");
  t = rplUL(t, " going to be starting", " going to start");
  t = rplUL(t, " is would-be-", " would be ");
  t = rplUL(t, " I'm would-be-", " I would be ");
  t = rplUL(t, " are would-be-", " would be ");
  t = rplUL(t, " is would-be ", " would be ");
  t = rplUL(t, " I'm would-be ", " I would be ");
  t = rplUL(t, " are would-be ", " would be ");
  t = rplUL(t, " would-be ", " would be ");
  t = rplUL(t, " would-be-", " would be ");
  t = rplUL(t, " be being ", " be ");
  t = rplUL(t, " being raining", " raining");
  t = rplUL(t, " being missing", " missing");
  t = rplUL(t, " be raining", " rain");
  t = rplUL(t, " be becoming ", " become ");
  rgx = " more (is|it is|are|am|was|were) ";
  t = regex_replace(t, rgx, " $1 more ");
  t = rplUL(t, " more be ", " be more ");
  t = rplUL(t, " more being ", " being more ");
  t = rplUL(t, " more beingly ", " being more ");
  t = rep(t, " Buxdqio", " This");
  t = rep(t, " Blxdqio", " this");
  t = rep(t, " Puxdqio", " That");
  t = rep(t, " Plxdqio", " that");
  rgx = "\\[UNKNOWN WORD:  (that|this|what|near me that|something|nothing|everything)\\] an? ";
  t = regex_replace(t, rgx,
	"$1 ");
  t = rplUL(t, " a what", " what");
  t = rplUL(t, " a that", " that");
  t = rplUL(t, " a near me that", " this");
  t = rplUL(t, " a this", " this");
  t = rplUL(t, " a something", " something");
  t = rplUL(t, " a nothing", " nothing");
  t = rplUL(t, " an everything", " everything");
  t = rplUL(t, " whether/or not/no?", " right?");
  t = rep(t, " Whether/or ", " ");
  t = rplUL(t, " be being able to ", " be able to ");
  t = rplUL(t, " would be able to ", " could ");
  t = rplUL(t, " wouldn't be able to ", " couldn't ");
  t = rep(t, " haved ", " had ");
  t = rep(t, " haves ", " has ");
  t = rplF(t, "hazzves to", "has to");
  t = rplF(t, "hazzved to", "had to");
  t = rplF(t, "hazzve to", "have to");
  t = rplF(t, "hazzving to", "having to");
  t = rplF(t, "hazzves", "has to");
  t = rplF(t, "hazzved", "had to");
  t = rplF(t, "hazzve", "have to");
  t = rplF(t, "hazzving", "having to");
  rgx = " (n|N)ot/no([.,?!;:])";
  t = regex_replace(t, rgx, " $1o$2");
  rgx = " not/no (did|does|do|wo|ca|would|could|should|is|are|was|were|has|have|had)n't";
  t = regex_replace(t, rgx, " $1n't");
  rgx = " not/no am not";
  t = regex_replace(t, rgx, " am not");
  rgx = " Not/no didn't";
  t = regex_replace(t, rgx, " Didn't");
  rgx = " Not/no doesn't";
  t = regex_replace(t, rgx, " Doesn't");
  rgx = " Not/no don't";
  t = regex_replace(t, rgx, " Don't");
  rgx = " Not/no won't";
  t = regex_replace(t, rgx, " Won't");
  rgx = " Not/no can't";
  t = regex_replace(t, rgx, " Can't");
  rgx = " Not/no wouldn't";
  t = regex_replace(t, rgx, " Wouldn't");
  rgx = " Not/no couldn't";
  t = regex_replace(t, rgx, " Couldn't");
  rgx = " Not/no shouldn't";
  t = regex_replace(t, rgx, " Shouldn't");
  rgx = " Not/no isn't";
  t = regex_replace(t, rgx, " Isn't");
  rgx = " Not/no am not";
  t = regex_replace(t, rgx, " Am not");
  rgx = " Not/no aren't";
  t = regex_replace(t, rgx, " Aren't");
  rgx = " Not/no wasn't";
  t = regex_replace(t, rgx, " Wasn't");
  rgx = " Not/no weren't";
  t = regex_replace(t, rgx, " Weren't");
  rgx = " Not/no hasn't";
  t = regex_replace(t, rgx, " Hasn't");
  rgx = " Not/no haven't";
  t = regex_replace(t, rgx, " Haven't");
  rgx = " Not/no hadn't";
  t = regex_replace(t, rgx, " Hadn't");
  t = rplUL(t, " not/no only ", " not only ");
  rgx = " (is|are|am|was|were|has|have|had|Is|Are|Am|Was|Were|Has|Have|Had) not/no ";
  t = regex_replace(t, rgx, " $1 not ");
  t = rplUL(t, " I am not", " I'm not");
  t = rplUL(t, "-apparent", "-seeming");
  t = rplUL(t, " someone/some", " some(one)");
  if (indexof(txt1, "Gxi ") == NOT_FOUND) {
	t = rep(t, " It shouldn't ", " Don't ");
	t = rep(t, " It should ", " ");
	t = rep(t, "Not/no shouldn't", "Don't");
	t = rep(t, "Not/no should ", "Don't ");
	t = rep(t, "Shouldn't", "Don't");
  }
  txtxt = " " + txt1;
  if ((indexof(txtxt, " gxi ") == NOT_FOUND) && (indexof(txt1, "Gxi ")
	== NOT_FOUND)) {
	t = rep(t, ", not/no shouldn't", ", don't");
	t = rep(t, ", shouldn't", ", don't");
	t = rep(t, " it shouldn't ", " don't ");
	t = rep(t, " it should ", " ");
  }
  t = rplUL(t, " does have to ", " has to ");
  t = rep(t, " do have to ", " have to ");
  t = rep(t, " do have to ", " Have to ");
  t = rplUL(t, " did have to ", " had to ");
  t = rplUL(t, " wants that should", " wants that it should");
  t = rplUL(t, " wanted that should", " wanted that it should");
  t = rplUL(t, " want that should", " want that it should");
  t = rplUL(t, " wanting that should", " wanting that it should");
  t = rep(t, " there?", " qqthereqq?");
  t = rep(t, " there!", " qqthereqq!");
  t = rep(t, " there.", " qqthereqq.");
  t = rep(t, " there,", " qqthereqq,");
  t = rep(t, " there;", " qqthereqq;");
  t = rep(t, " there:", " qqthereqq:");
  t = rep(t, " there in ", " qqthereqq in ");
  t = rep(t, " there at ", " qqthereqq at ");
  t = rep(t, " there with ", " qqthereqq with ");
  t = rep(t, " there by ", " qqthereqq by ");
  t = rep(t, " there on ", " qqthereqq on ");
  t = rep(t, " there under ", " qqthereqq under ");
  t = rep(t, " there over ", " qqthereqq over ");
  t = rep(t, " there from ", " qqthereqq from ");
  t = rep(t, " there of ", " qqthereqq of ");
  t = rep(t, " there of/from ", " qqthereqq from ");
  t = rep(t, " it there is ", " it xxxthere is ");
  t = rep(t, " it there was ", " it xxxthere was ");
  t = rep(t, " it there are ", " it xxxthere are ");
  t = rep(t, " it there were ", " it xxxthere were ");
  t = rep(t, " it not/no there isn't ", " it xxxthere isn't ");
  t = rep(t, " it not/no there wasn't ", " it xxxthere wasn't ");
  t = rep(t, " it not/no there aren't ", " it xxxthere aren't ");
  t = rep(t, " it not/no there weren't ", " it xxxthere weren't ");
  t = rep(t, " it there", " it");
  t = rep(t, " xxxthere", " there");
  t = rep(t, " It there", " It");
  t = rplUL(t, " he there", " he");
  t = rplUL(t, " she there", " she");
  t = rplUL(t, " you there", " you");
  t = rplUL(t, " I there", " I");
  t = rplUL(t, " they there", " they");
  t = rplUL(t, " we there", " we");
  t = rplUL(t, " it not/no there", " it");
  t = rplUL(t, " he not/no there", " he");
  t = rplUL(t, " she not/no there", " she");
  t = rplUL(t, " you not/no there", " you");
  t = rplUL(t, " I not/no there", " I");
  t = rplUL(t, " they not/no there", " they");
  t = rplUL(t, " we not/no there", " we");
  t = rep(t, " qqthereqq", " there");
  t = rep(t, "opposite-of-on-this-side-of-the-", "beyond-the-");
  t = rplUL(t, " zqx ", " of ");
  t = rep(t, " zqx", "");
  rgx = " (o|O)f she([ .,?!:;)])";
  t = regex_replace(t, rgx, " $1f her$2");
  rgx = " (o|O)f he([ .,?!:;)])";
  t = regex_replace(t, rgx, " $1f him$2");
  rgx = " (o|O)f we([ .,?!:;)])";
  t = regex_replace(t, rgx, " $1f us$2");
  rgx = " (o|O)f they([ .,?!:;)])";
  t = regex_replace(t, rgx, " $1f them$2");
  rgx = " (o|O)f I([ .,?!:;)])";
  t = regex_replace(t, rgx, " $1f me$2");
  t = rplUL(t, " usuallily ", " usually ");
  t = rep(t, " Not/no it ", " It ");
  t = rplUL(t, " that kind of near me ", " this kind of ");
  t = rplUL(t, " near me  ", " near me ");
  t = rplUL(t, " a fakeobj  there", " there");
  t = rplUL(t, " that kind of near me", " this kind");
  t = rplUL(t, " that near me", " this");
  t = rplUL(t, " there near me", " here");
  t = rplUL(t, " so/therefore near me", " for this reason");
  t = rplUL(t, ") {near me", " at this time");
  t = rplUL(t, " those kinds of near me ", " these kinds of ");
  t = rplUL(t, " those kinds of near me", " these kinds");
  t = rplUL(t, " as/that way near me", " this way");
  t = rplUL(t, " that one's near me", " this one's");
  t = rplUL(t, " thoses near me", " these");
  t = rplUL(t, " those near me", " these");
  t = rplUL(t, " how much/many of time", " how long");
  t = rplUL(t, " so much/many near me of ", " this much/many of ");
  t = rplUL(t, " so much/many near me of", " this much/many");
  t = rplUL(t, " so much/many near me", " this much/many");
  t = rep(t, " at that number of near me hour", "at this time");
  t = rep(t, " At that number of near me hour", "At this time");
  t = rplUL(t, " that number of near me ", " this number of ");
  t = rplUL(t, " that number of near me", " this number");
  t = rplUL(t, " near me that", " this");
  t = rplUL(t, " near me those", " these");
  t = rplUL(t, " near me there", " here");
  t = rplUL(t, " near me so/therefore", " for this reason");
  t = rplUL(t, " near me so much/many", " this much/many");
  t = rplUL(t, " at near me that number of hour", " at this time");
  t = rplUL(t, " near me that number", " this number");
  t = rep(t, " at that number of hour", "at that time");
  t = rep(t, " At that number of hour", "At that time");
  t = rep(t, " at this number of hour", "at this time");
  t = rep(t, " At this number of hour", "At this time");
  rgx = " (t|T)hat number of([.,?!;:)])";
  t = regex_replace(t, rgx, " $1hat number$2");
  t = rplUL(t, " in order/for to ", " in order to ");
  t = rplUL(t, " in order/for ", " for ");
  t = rep(t, "ing-continuing", "ing");
  t = rplF(t, "wanting-to-be willing", "willing");
  t = rplF(t, "capable-of-being capable", "capable");
  t = rplF(t, "able-to-be ability", "able");
  t = rplF(t, "abilitily", "ably");
  t = rplUL(t, " persons", " people");
  t = rplF(t, "tending-to-tend", "tending");
  t = rplUL(t, " a tending one to ", " one tending to ");
  t = rplUL(t, " tending one to ", " one tending to ");
  t = rplUL(t, " tending ones to ", " ones tending to ");
  t = rplUL(t, " one of you are", " one of you is");
  t = rplUL(t, " one of you were", " one of you was");
  t = rplUL(t, " one of you have", " one of you has");
  t = rplUL(t, " one of you do", " one of you does");
  t = rplUL(t, " one of/from you are", " one of you is");
  t = rplUL(t, " one of/from you were", " one of you was");
  t = rplUL(t, " one of/from you have", " one of you has");
  t = rplUL(t, " one of/from you do", " one of you does");
  t = rplUL(t, " one of them are", " one of them is");
  t = rplUL(t, " one of them were", " one of them was");
  t = rplUL(t, " one of them have", " one of them has");
  t = rplUL(t, " one of them do", " one of them does");
  t = rplUL(t, " one of/from them are", " one of them is");
  t = rplUL(t, " one of/from them were", " one of them was");
  t = rplUL(t, " one of/from them have", " one of them has");
  t = rplUL(t, " one of/from them do", " one of them does");
  t = rplUL(t, " one of us are", " one of us is");
  t = rplUL(t, " one of us were", " one of us was");
  t = rplUL(t, " one of us have", " one of us has");
  t = rplUL(t, " one of us do", " one of us does");
  if (indexof(t, "f/from") == NOT_FOUND) {
	return t;
  }
  t = rplUL(t, " one of/from us are", " one of us is");
  t = rplUL(t, " one of/from us were", " one of us was");
  t = rplUL(t, " one of/from us have", " one of us has");
  t = rplUL(t, " one of/from us do", " one of us does");
  rgx = " of/from (you|me|her|him|us|them|it|one|someone|a person|a man|a woman|a child|a boy|a girl|people|men|women|children|boys|girls|the person|the man|the woman|the child|the boy|the girl|the people|the men|the women|the children|the boys|the girls|a young)";
  t = regex_replace(t, rgx, " from $1");
  rgx = " Of/from (you|me|her|him|us|them|it|one|someone|a person|a man|a woman|a child|a boy|a girl|people|men|women|children|boys|girls|the person|the man|the woman|the child|the boy|the girl|the people|the men|the women|the children|the boys|the girls|a young)";
  t = regex_replace(t, rgx, " From $1");
  t = rplUL(t, " of/from there", " from there");
  t = rplUL(t, " of/from where", " from where");
  rgx = " of/from ([A-Z])";
  t = regex_replace(t, rgx, " from $1");
  rgx = " Of/from ([A-Z])";
  t = regex_replace(t, rgx, " From $1");
  rgx = " of/from a ([A-Z])";
  t = regex_replace(t, rgx, " from a $1");
  rgx = " Of/from a ([A-Z])";
  t = regex_replace(t, rgx, " From a $1");
  rgx = " of/from an ([A-Z])";
  t = regex_replace(t, rgx, " from an $1");
  rgx = " Of/from an ([A-Z])";
  t = regex_replace(t, rgx, " From an $1");
  t = rplUL(t, " a friend of/from a friend", " a friend of a friend");
  t = rplUL(t, " friends of/from a friend", " friends of a friend");
  t = rplUL(t, " enemy of/from ", " enemy of ");
  t = rplUL(t, " of/from a friend", " from a friend");
  t = rplUL(t, " of/from friend", " from friend");
  t = rplUL(t, " of/from", " of");
  t = rplUL(t, " of who/which", " of/from whom/which");
  t = rplUL(t, " of when ", " since ");
  return t;
}

static string korrections2(string t) {
  // Corrections and adjustments for phrases, part 2:
  rgx = "(hy| hy|HY)fq ?";
  t = regex_replace(t, rgx, "-");
  t = rep(t, " Troyian", " Trojan");
  t = rplUL(t, " an other", " another");
  t = rplUL(t, "-alike/similar", "-like");
  t = rplUL(t, " I -self", " I myself");
  t = rplUL(t, " you -self", " you yourself");
  t = rplUL(t, " she -self", " she herself");
  t = rplUL(t, " he -self", " he himself");
  t = rplUL(t, " they -self", " they themselves");
  t = rplUL(t, " we -self", " we ourselves");
  t = rplUL(t, " it -self", " it itself");
  t = rplUL(t, " one/they -self", " one oneself");
  t = rep(t, " -self", " himself/herself/itself/themselves");
  t = rep(t, " himself/herself/itself/themselves himself/herself/itself/themselves", " himself/herself/itself/themselves");
  rgx = " (m|M)ans([ .,?!::)])";
  t = regex_replace(t, rgx, " $1en$2");
  rgx = " (w|W)omans([ .,?!::)])";
  t = regex_replace(t, rgx, " $1omen$2");
  t = rplUL(t, " who/which -ever/at all", " which/whoever");
  t = rplUL(t, " whom/which -ever/at all", " which/whomever");
  t = rplUL(t, " what -ever/at all", " whatever");
  t = rplUL(t, " when -ever/at all", " whenever");
  t = rplUL(t, " where -ever/at all", " wherever");
  t = rplUL(t, " how/as -ever/at all", " however");
  t = rplUL(t, " whose -ever/at all", " anyone's");
  t = rplUL(t, " what kind of -ever/at all ", " any kind of ");
  t = rplUL(t, " what kinds of -ever/at all ", " any kinds of ");
  t = rplUL(t, " what kind of -ever/at all", " any kind");
  t = rplUL(t, " what kinds of -ever/at all", " any kinds");
  t = rplUL(t, " why -ever/at all", " for whatever reason");
  t = rplUL(t, " how much/many -ever/at all", " any amount");
  t = rplUL(t, " some(one) -ever/at all", " any one");
  t = rplUL(t, " whom/which -ever/at all", " which/whomever");
  t = rplUL(t, " something -ever/at all", " anything");
  t = rplUL(t, " sometime -ever/at all", " at any time");
  t = rplUL(t, " somewhere -ever/at all", " anywhere");
  t = rplUL(t, " somehow -ever/at all", " anyone's");
  t = rplUL(t, " someone's -ever/at all", " in any way");
  t = rplUL(t, " some kind of -ever/at all ", " any kind of ");
  t = rplUL(t, " some kinds of -ever/at all ", " any kinds of ");
  t = rplUL(t, " some kind of -ever/at all", " any kind");
  t = rplUL(t, " some kinds of -ever/at all", " any kinds");
  t = rplUL(t, " for some reason -ever/at all", " for any reason");
  t = rplUL(t, " some -ever/at all", " any amount");
  rgx = " (how|How|so|So|this|This|that|That) (much/many|many) (the|my|your|her|his|its|their|our) ";
  t = regex_replace(t, rgx, " $1 much/many of $3 ");
  rgx = "( some| Some|/many| many| Many) (the|a|an|it|they|you|we|my|your|her|his|its|their|our|its|this|that|these|those|his/her/its/their own)([ .,?!::)])";
  t = regex_replace(t, rgx, "$1 of $2$3");
  t = rplUL(t, " how much/many of them", " how many of them");
  t = rplUL(t, " how much/many of it", " how much of it");
  t = rplUL(t, " how much/many of you ", " how many of you ");
  t = rplUL(t, " how much/many of you?", " how many of you?");
  t = rplUL(t, " how much/many of you,", " how many of you,");
  t = rplUL(t, " how much/many of us", " how many of us");
  t = rplUL(t, " a so much/many", " so much/many");
  t = rplUL(t, " so much/many of ", " so much/many ");
  t = rplUL(t, " this much/many of ", " this much/many ");
  t = rplUL(t, " so much/many the ", " so much/many of the ");
  t = rplUL(t, " so much/many my ", " so much/many of my ");
  t = rplUL(t, " so much/many your ", " so much/many of your ");
  t = rplUL(t, " so much/many her ", " so much/many of her ");
  t = rplUL(t, " so much/many his ", " so much/many of his ");
  t = rplUL(t, " so much/many its ", " so much/many of its ");
  t = rplUL(t, " so much/many their ", " so much/many of their ");
  t = rplUL(t, " so much/many our ", " so much/many of our ");
  t = rplUL(t, " this much/many the ", " this much/many of the ");
  t = rplUL(t, " this much/many my ", " this much/many of my ");
  t = rplUL(t, " this much/many your ", " this much/many of your ");
  t = rplUL(t, " this much/many her ", " this much/many of her ");
  t = rplUL(t, " this much/many his ", " this much/many of his ");
  t = rplUL(t, " this much/many its ", " this much/many of its ");
  t = rplUL(t, " this much/many their ", " this much/many of their ");
  t = rplUL(t, " this much/many our ", " this much/many of our ");
  t = rplUL(t, " so much/many it", " so much/many of it");
  t = rplUL(t, " so much/many them", " so much/many of them");
  t = rplUL(t, " so much/many you", " so much/many of you");
  t = rplUL(t, " so much/many us", " so much/many of us");
  t = rplUL(t, " which number of hour/time is?", " what time is it?");
  t = rplUL(t, " on/in which number of hour/time ", " at what time ");
  t = rplUL(t, " which number of hour/time ", " what time ");
  t = rplUL(t, " somely of ", " some of ");
  t = rplUL(t, " some of ", " some ");
  t = rplUL(t, " some the ", " some of the ");
  t = rplUL(t, " some a ", " some of a ");
  t = rplUL(t, " some an ", " some of an ");
  t = rplUL(t, " some it", " some of it");
  t = rplUL(t, " some they", " some of them");
  t = rplUL(t, " some you", " some of you");
  t = rplUL(t, " some we", " some of us");
  t = rplUL(t, " some my ", " some of my ");
  t = rplUL(t, " some your ", " some of your ");
  t = rplUL(t, " some her ", " some of her ");
  t = rplUL(t, " some his ", " some of his ");
  t = rplUL(t, " some their ", " some of their ");
  t = rplUL(t, " some our ", " some of our ");
  t = rplUL(t, " some his/her/its/their own ", " some of his/her/its/their own ");
  t = rplUL(t, " some its ", " some of its ");
  t = rplUL(t, " some this ", " some of this ");
  t = rplUL(t, " some that ", " some of that ");
  t = rplUL(t, " some these ", " some of these ");
  t = rplUL(t, " some those ", " some of those ");
  t = rplUL(t, "/many of ", "/many ");
  t = rplUL(t, "/many the ", "/many of the ");
  t = rplUL(t, "/many a ", "/many of a ");
  t = rplUL(t, "/many an ", "/many of an ");
  t = rplUL(t, "/many it", "/many of it");
  t = rplUL(t, "/many they", "/many of them");
  t = rplUL(t, "/many you", "/many of you");
  t = rplUL(t, "/many we", "/many of us");
  t = rplUL(t, "/many my ", "/many of my ");
  t = rplUL(t, "/many your ", "/many of your ");
  t = rplUL(t, "/many her ", "/many of her ");
  t = rplUL(t, "/many his ", "/many of his ");
  t = rplUL(t, "/many their ", "/many of their ");
  t = rplUL(t, "/many our ", "/many of our ");
  t = rplUL(t, "/many his/her/its/their own ", "/many of his/her/its/their own ");
  t = rplUL(t, "/many its ", "/many of its ");
  t = rplUL(t, "/many this ", "/many of this ");
  t = rplUL(t, "/many that ", "/many of that ");
  t = rplUL(t, "/many these ", "/many of these ");
  t = rplUL(t, "/many those ", "/many of those ");
  t = rplUL(t, " many of ", " many ");
  t = rplUL(t, " many the ", " many of the ");
  t = rplUL(t, " many a ", " many of a ");
  t = rplUL(t, " many an ", " many of an ");
  t = rplUL(t, " many it", " many of it");
  t = rplUL(t, " many they", " many of them");
  t = rplUL(t, " many you", " many of you");
  t = rplUL(t, " many we", " many of us");
  t = rplUL(t, " many my ", " many of my ");
  t = rplUL(t, " many your ", " many of your ");
  t = rplUL(t, " many her ", " many of her ");
  t = rplUL(t, " many his ", " many of his ");
  t = rplUL(t, " many their ", " many of their ");
  t = rplUL(t, " many our ", " many of our ");
  t = rplUL(t, " many his/her/its/their own ", " many of his/her/its/their own ");
  t = rplUL(t, " many its ", " many of its ");
  t = rplUL(t, " many this ", " many of this ");
  t = rplUL(t, " many that ", " many of that ");
  t = rplUL(t, " many these ", " many of these ");
  t = rplUL(t, " many those ", " many of those ");
  t = rplUL(t, " how many them", " how many of them");
  t = rplUL(t, " how many you", " how many of you");
  t = rplUL(t, " how many us", " how many of us");
  t = rplUL(t, " which number of hour -ever/at all", " at any time");
  t = rplUL(t, " which number of -ever/at all hour", " at any time");
  t = rplUL(t, " which number of -ever/at all", " any number");
  t = rplUL(t, " -ever/at all", " at all");
  t = rep(t, " during/while that ", " while that ");
  t = rep(t, " During/while that ", " while that ");
  t = rplUL(t, " during/while ", " during ");
  t = rep(t, "During me ", "while I ");
  t = rep(t, "during me ", "while I ");
  t = rep(t, "During you ", "while you ");
  t = rep(t, "during you ", "while you ");
  t = rep(t, "During us ", "while we ");
  t = rep(t, "during us ", "while we ");
  t = rep(t, "During him ", "while he ");
  t = rep(t, "during him ", "while he ");
  t = rep(t, "During her ", "while she ");
  t = rep(t, "during her ", "while she ");
  t = rep(t, "During them ", "while they ");
  t = rep(t, "during them ", "while they ");
  t = rep(t, "During it ", "while it ");
  t = rep(t, "during it ", "while it ");
  t = verbChange(t, "derive of", "derive from");
  t = verbChange(t, "succeed to", "manage to");
  t = rplUL(t, " scatteredding/disjoint-making place", " spreading");
  t = rplUL(t, " more aged", " older");
  t = rplUL(t, " more young", " younger");
  t = rplUL(t, " not/no morewqz", " no longer");
  rgx = " (g|G)o(es |ne |ing|)morewqz";
  t = regex_replace(t, rgx, " $1o$2further");
  t = rep(t, " went morewqz", " went further");
  t = rplUL(t, " goingly morewqz", " going further");
  t = verbChange(t, "travel morewqz", "travel further");
  rgx = " (d|D)riv(es |ed |ing |e |en )(.* )?morewqz";
  t = regex_replace(t, rgx,
	" $1riv$2$3further");
  t = rplUL(t, " drove morewqz", " drove further");
  t = rplUL(t, " drivingly morewqz", " driving further");
  t = rplUL(t, " morewqz", " more");
  t = rplUL(t, " theses", " these");
  t = rplUL(t, " thoses", " those");

  t = rep(t, " oneseses", " ones");
  t = rep(t, " oneses", " ones");
  rgx = " (t|T)he ones? ([A-Z])";
  t = regex_replace(t, rgx, " $1he $2");
  rgx = " the( a)? (her|their|your)([ .,?!;:)])";
  t = regex_replace(t, rgx, " $2s$3");
  rgx = " the( a)? our([ .,?!;:)])";
  t = regex_replace(t, rgx, " ours$2");
  rgx = " the( a)? my([ .,?!;:)])";
  t = regex_replace(t, rgx, " mine$2");
  rgx = " the( a)? his([ .,?!;:)])";
  t = regex_replace(t, rgx, " his$2");
  rgx = " the( a)? its([ .,?!;:)])";
  t = regex_replace(t, rgx, " its$2");
  rgx = " the( a)? one's([ .,?!;:)])";
  t = regex_replace(t, rgx, " one's$2");
  rgx = " The( a)? my([ .,?!;:)])";
  t = regex_replace(t, rgx, " Mine$2");
  rgx = " The( a)? his([ .,?!;:)])";
  t = regex_replace(t, rgx, " His$2");
  rgx = " The( a)? her([ .,?!;:)])";
  t = regex_replace(t, rgx, " Hers$2");
  rgx = " The( a)? their([ .,?!;:)])";
  t = regex_replace(t, rgx, " Theirs$2");
  rgx = " The( a)? your([ .,?!;:)])";
  t = regex_replace(t, rgx, " Yours$2");
  rgx = " The( a)? our([ .,?!;:)])";
  t = regex_replace(t, rgx, " Ours$2");
  rgx = " The( a)? its([ .,?!;:)])";
  t = regex_replace(t, rgx, " Its$2");
  rgx = " The( a)? one's([ .,?!;:)])";
  t = regex_replace(t, rgx, " One's$2");
  t = rplUL(t, " the a his/her/its/their own", " his/her/its/their own");
  t = rplUL(t, " the a his/her own", " his/her own");
  t = rplUL(t, " The a his/her/its/their own", " His/her/its/their own");
  t = rplUL(t, " The a his/her own", " His/her own");
  if ((indexof(txtxt, "iaj") >= FOUND) || (indexof(txtxt, "ia kaj ") >= FOUND)) {
	rgx = " (hers|his|its|theirs|mine|yours|ours|one's|Hers|His|Its|Theirs|Mine|Yours|Ours|One's|his/her/its/their own|His/her/its/their own) ones is([ .,?!;:)])";
	t = regex_replace(t, rgx, " $1 are$2");
	rgx = " (hers|his|its|theirs|mine|yours|ours|one's|Hers|His|Its|Theirs|Mine|Yours|Ours|One's|his/her/its/their own|His/her/its/their own) ones isn't([ .,?!;:)])";
	t = regex_replace(t, rgx, " $1 aren't$2");
	rgx = " (hers|his|its|theirs|mine|yours|ours|one's|Hers|His|Its|Theirs|Mine|Yours|Ours|One's|his/her/its/their own|His/her/its/their own) ones was([ .,?!;:)])";
	t = regex_replace(t, rgx, " $1 were$2");
	rgx = " (hers|his|its|theirs|mine|yours|ours|one's|Hers|His|Its|Theirs|Mine|Yours|Ours|One's|his/her/its/their own|His/her/its/their own) ones wasn't([ .,?!;:)])";
	t = regex_replace(t, rgx, " $1 weren't$2");
	rgx = " (hers|his|its|theirs|mine|yours|ours|one's|Hers|His|Its|Theirs|Mine|Yours|Ours|One's|his/her/its/their own|His/her/its/their own) ones does([ .,?!;:)])";
	t = regex_replace(t, rgx, " $1 do$2");
	rgx = " (hers|his|its|theirs|mine|yours|ours|one's|Hers|His|Its|Theirs|Mine|Yours|Ours|One's|his/her/its/their own|His/her/its/their own) ones doesn't([ .,?!;:)])";
	t = regex_replace(t, rgx, " $1 don't$2");
	rgx = " (hers|his|its|theirs|mine|yours|ours|one's|Hers|His|Its|Theirs|Mine|Yours|Ours|One's|his/her/its/their own|His/her/its/their own) ones has([ .,?!;:)])";
	t = regex_replace(t, rgx, " $1 have$2");
	rgx = " (hers|his|its|theirs|mine|yours|ours|one's|Hers|His|Its|Theirs|Mine|Yours|Ours|One's|his/her/its/their own|His/her/its/their own) ones hasn't([ .,?!;:)])";
	t = regex_replace(t, rgx, " $1 haven't$2");
  }
  else if (indexof(txtxt, "ia") >= FOUND) {
	rgx = " (hers|his|its|theirs|mine|yours|ours|one's|Hers|His|Its|Theirs|Mine|Yours|Ours|One's|his/her/its/their own|His/her/its/their own) one are([ .,?!;:)])";
	t = regex_replace(t, rgx, " $1 is$2");
	rgx = " (hers|his|its|theirs|mine|yours|ours|one's|Hers|His|Its|Theirs|Mine|Yours|Ours|One's|his/her/its/their own|His/her/its/their own) one aren't([ .,?!;:)])";
	t = regex_replace(t, rgx, " $1 isn't$2");
	rgx = " (hers|his|its|theirs|mine|yours|ours|one's|Hers|His|Its|Theirs|Mine|Yours|Ours|One's|his/her/its/their own|His/her/its/their own) one were([ .,?!;:)])";
	t = regex_replace(t, rgx, " $1 was$2");
	rgx = " (hers|his|its|theirs|mine|yours|ours|one's|Hers|His|Its|Theirs|Mine|Yours|Ours|One's|his/her/its/their own|His/her/its/their own) one weren't([ .,?!;:)])";
	t = regex_replace(t, rgx, " $1 wasn't$2");
	rgx = " (hers|his|its|theirs|mine|yours|ours|one's|Hers|His|Its|Theirs|Mine|Yours|Ours|One's|his/her/its/their own|His/her/its/their own) one do([ .,?!;:)])";
	t = regex_replace(t, rgx, " $1 does$2");
	rgx = " (hers|his|its|theirs|mine|yours|ours|one's|Hers|His|Its|Theirs|Mine|Yours|Ours|One's|his/her/its/their own|His/her/its/their own) one don't([ .,?!;:)])";
	t = regex_replace(t, rgx, " $1 doesn't$2");
	rgx = " (hers|his|its|theirs|mine|yours|ours|one's|Hers|His|Its|Theirs|Mine|Yours|Ours|One's|his/her/its/their own|His/her/its/their own) one have([ .,?!;:)])";
	t = regex_replace(t, rgx, " $1 has$2");
	rgx = " (hers|his|its|theirs|mine|yours|ours|one's|Hers|His|Its|Theirs|Mine|Yours|Ours|One's|his/her/its/their own|His/her/its/their own) one haven't([ .,?!;:)])";
	t = regex_replace(t, rgx, " $1 hasn't$2");
  }
  rgx = " (hers|his|its|theirs|mine|yours|ours|one's|Hers|His|Its|Theirs|Mine|Yours|Ours|One's|his/her/its/their own|His/her/its/their own) ones?([ .,?!;:)])";
  t = regex_replace(t, rgx, " $1$2");

  t = rplUL(t, " littly", " a little");
  t = rplUL(t, " to to ", " to ");
  t = rep(t, "e-ize", "ize");
  t = rep(t, "-ize", "ize");
  t = rplUL(t, " before/ago than ", " before ");
  t = rep(t, " (how) to ", " how to ");
  t = rep(t, "female himself/herself/itself/themselves",
	"female herself");
  t = rep(t, "male himself/herself/itself/themselves",
	"male himself");
  t = rplUL(t, " the his/her/its/their own?",
	" his/her/its/their own?");
  t = rplF(t, "milli-passion-", "thousand-million-");
  t = rep(t, "-one hundred", "-hundred");
  t = rep(t, "-one thousand", "-thousand");
  t = rep(t, "-one million", "-million");
  rgx = " ([oO]ne|[tT]wo|[tT]hree|[fF]our|[fF]ive|[sS]ix|[sS]even|[eE]ight|[nN]ine|[tT]en|[eE]leven|[tT]welve|[tT]hirteen|[fF]ourteen|[fF]ifteen|[sS]ixteen|[sS]eventeen|[eE]ighteen|[nN]ineteen|[tT]wenty|[tT]hirty|[fF]orty|[fF]ifty|[sS]ixty|[sS]eventy|[eE]ighty|[nN]inety) one (hundred|thousand|million|billion|trillion)s?";
  t = regex_replace(t, rgx, " $1 $2");
  rgx = "(-one|-two|-three|-four|-five|-six|-seven|-eight|-nine) one (hundred|thousand|million|billion|trillion)s?";
  t = regex_replace(t, rgx, "$1 $2");
  /* antaux tridek-du bilionoj tricent dudek-tri miliardoj cent kvardek-tri
  * milionoj kvincent sesdek-tri mil kvarcent tridek-kvin jaroj. */
  rgx = " ([oO]ne|[tT]wo|[tT]hree|[fF]our|[fF]ive|[sS]ix|[sS]even|[eE]ight|[nN]ine|[tT]en|[eE]leven|[tT]welve|[tT]hirteen|[fF]ourteen|[fF]ifteen|[sS]ixteen|[sS]eventeen|[eE]ighteen|[nN]ineteen|[tT]wenty|[tT]hirty|[fF]orty|[fF]ifty|[sS]ixty|[sS]eventy|[eE]ighty|[nN]inety) (million|billion|trillion)s?( of)?";
  t = regex_replace(t, rgx, " $1 $2");
  rgx = "(-one|-two|-three|-four|-five|-six|-seven|-eight|-nine) (million|billion|trillion)s?( of)?";
  t = regex_replace(t, rgx, "$1 $2");
  rgx = "(thousand|million|billion|trillion) (one|two|three|four|five|six|seven|eight|nine|ten|eleven|twelve|thirteen|fourteen|fifteen|sixteen|seventeen|eighteen|nineteen|twenty|thirty|forty|fifty|sixty|seventy|eighty|ninety)";
  t = regex_replace(t, rgx, "$1 $2");
  rgx = "([tT]rillion)( |s )(&& )?(one hundred |two hundred |three hundred |four hundred |five hundred |six hundred |seven hundred |eight hundred |nine hundred )?(one |two |three |four |five |six |seven |eight |nine |ten |eleven |twelve |thirteen |fourteen |fifteen |sixteen |seventeen |eighteen |nineteen |twenty-|thirty-|forty-|fifty-|sixty-|seventy-|eighty-|ninety-|twenty |thirty |forty |fifty |sixty |seventy |eighty |ninety )(one |two |three |four |five |six |seven |eight |nine )?billions?";
  t = regex_replace(t, rgx, "$1 $4$5$6billion");
  rgx = "([bB]illion)( |s )(&& )?(one hundred |two hundred |three hundred |four hundred |five hundred |six hundred |seven hundred |eight hundred |nine hundred )?(one |two |three |four |five |six |seven |eight |nine |ten |eleven |twelve |thirteen |fourteen |fifteen |sixteen |seventeen |eighteen |nineteen |twenty-|thirty-|forty-|fifty-|sixty-|seventy-|eighty-|ninety-|twenty |thirty |forty |fifty |sixty |seventy |eighty |ninety )(one |two |three |four |five |six |seven |eight |nine )?millions?";
  t = regex_replace(t, rgx, "$1 $4$5$6million");
  rgx = "([mMB]illion)( |s )(&& )?(one hundred |two hundred |three hundred |four hundred |five hundred |six hundred |seven hundred |eight hundred |nine hundred )?(one |two |three |four |five |six |seven |eight |nine |ten |eleven |twelve |thirteen |fourteen |fifteen |sixteen |seventeen |eighteen |nineteen |twenty-|thirty-|forty-|fifty-|sixty-|seventy-|eighty-|ninety-|twenty |thirty |forty |fifty |sixty |seventy |eighty |ninety )(one |two |three |four |five |six |seven |eight |nine )?thousand";
  t = regex_replace(t, rgx, "$1 $4$5$6thousand");
  rgx = "([tT]housand)( )(&& )?(one hundred |two hundred |three hundred |four hundred |five hundred |six hundred |seven hundred |eight hundred |nine hundred )?(one |two |three |four |five |six |seven |eight |nine |ten |eleven |twelve |thirteen |fourteen |fifteen |sixteen |seventeen |eighteen |nineteen |twenty-|thirty-|forty-|fifty-|sixty-|seventy-|eighty-|ninety-|twenty |thirty |forty |fifty |sixty |seventy |eighty |ninety )(one |two |three |four |five |six |seven |eight |nine )?hundred";
  t = regex_replace(t, rgx, "$1 $4$5$6hundred");
  t = rep(t, " and half", " and a half");
  t = rep(t, " and third", " and a third");
  t = rep(t, " and third", " and a third");
  t = rep(t, " and fourth", " and a quarter");
  t = rep(t, " and ones an ", " and an ");
  t = rep(t, " and ones a ", " and a ");
  t = rplUL(t, " one and a half hour/time", " one hour and a half");
  t = rplUL(t, " two and a half hours/times", " two hours and a half");
  t = rplUL(t, " three and a half hours/times", " three hours and a half");
  t = rplUL(t, " four and a half hours/times", " four hours and a half");
  t = rplUL(t, " five and a half hours/times", " five hours and a half");
  t = rplUL(t, " six and a half hours/times", " six hours and a half");
  t = rplUL(t, " seven and a half hours/times", " seven hours and a half");
  t = rplUL(t, " eight and a half hours/times", " eight hours and a half");
  t = rplUL(t, " nine and a half hours/times", " nine hours and a half");
  t = rplUL(t, " ten and a half hours/times", " ten hours and a half");
  t = rep(t, "-one and a half hours/time", "-one hour and a half");
  t = rep(t, "-two and a half hours/times", "-two hours and a half");
  t = rep(t, "-three and a half hours/times", "-three hours and a half");
  t = rep(t, "-four and a half hours/times", "-four hours and a half");
  t = rep(t, "-five and a half hours/times", "-five hours and a half");
  t = rep(t, "-six and a half hours/times", "-six hours and a half");
  t = rep(t, "-seven and a half hours/times", "-seven hours and a half");
  t = rep(t, "-eight and a half hours/times", "-eight hours and a half");
  t = rep(t, "-nine and a half hours/times", "-nine hours and a half");
  rgx = " (yocto|zepto|ato|femto|pico|nano|micro|milli|centi|deci|deca|hecto|kilo|mega|giga|tera|peta|exa|zetta|yotta)-";
  t = regex_replace(t, rgx, " $1");
  rgx = " (Yocto|Zepto|Ato|Femto|Pico|Nano|Micro|Milli|Centi|Deci|Deca|Hecto|Kilo|Mega|Giga|Tera|Peta|Exa|Zetta|Yotta)-";
  t = regex_replace(t, rgx, " $1");
  t = rplF(t, "hundreds", "hundred");
  t = rplF(t, "thousands", "thousand");
  return t;
}

static string korrections3(string t) {
  // Corrections and adjustments for phrases, part 3:
  t = rplUL(t, " accommodaters/puters up", " hosts");
  t = rplUL(t, " accommodater/puter up", " host");
  t = rplUL(t, " a both sexes of-", " a male or female ");
  t = rplUL(t, " both sexes of-", " male and female ");
  t = rplUL(t, " make/dos", " makes/does");
  t = rplUL(t, " kind of a ", " kind of ");
  t = rplUL(t, " kind of an ", " kind of ");
  t = rplUL(t, " the United Statesian", " American");
  t = rplUL(t, " canadaian", " Canadian");
  t = rplUL(t, " Franceians", " Frenchmen");
  t = rplUL(t, " Franceian", " Frenchman");
  t = rplUL(t, " Franceian female", " French female");
  t = rplUL(t, " of a tea-frog", " from an Earthling");
  t = rplUL(t, " of tea-frogs", " from Earthlings");
  t = rplUL(t, " a tea-frog", " an Earthling");
  t = rplUL(t, " tea-frog", " Earthling");
  t = rplUL(t, " israela", " Israeli");
  t = rplUL(t, " apart from that ", " except that ");
  t = rep(t, "aian", "an");
  t = rep(t, "eian", "ean");
  t = rep(t, "yian", "ian");
  t = rep(t, "oian", "an");
  t = rep(t, "stanian", "stani");
  t = rep(t, "aianness", "ianness");
  t = rep(t, "yianness", "ianness");
  t = rep(t, "oianness", "ianness");
  t = rplUL(t, " an us", " a us");
  t = rplUL(t, " not/no ", " not ");
  rgx = " (br|cl|fl|r|s|sl|spr|st|str|w|sw|wr)inging";
  t = regex_replace(t, rgx, " $1inging_/");
  rgx = " (Br|Cl|Fl|R|S|Sl|Spr|St|Str|W|Sw|Wr)inging";
  t = regex_replace(t, rgx, " $1inging_/");
  t = rep(t, "inging", "ing");
  t = rep(t, "ing_/", "inging");
  t = rplUL(t, " much ", " a lot of ");
  t = rplUL(t, " a lot of of ", " much of ");
  t = rplUL(t, " a one ", " one ");
  t = rplUL(t, " a the ", " the ");
  t = rplUL(t, " a this ", " this ");
  t = rplUL(t, " a that ", " that ");
  t = rplUL(t, " a which ", " which ");
  t = rplUL(t, " a what ", " what ");
  t = rplUL(t, " a my ", " my ");
  t = rplUL(t, " a your ", " your ");
  t = rplUL(t, " a his ", " his ");
  t = rplUL(t, " a her ", " her ");
  t = rplUL(t, " a his/", " his/");
  t = rplUL(t, " a its ", " its ");
  t = rplUL(t, " a his own ", " his own ");
  t = rplUL(t, " a her own ", " her own ");
  t = rplUL(t, " a its own ", " its own ");
  t = rplUL(t, " a his/her/its/their own ", " his/her/its/their own ");
  t = rplUL(t, " a our ", " our ");
  t = rplUL(t, " a their ", " their ");
  t = rplUL(t, " a their own ", " their own ");
  t = rplUL(t, " a One ", " one ");
  t = rplUL(t, " a The ", " the ");
  t = rplUL(t, " a This ", " this ");
  t = rplUL(t, " a That ", " that ");
  t = rplUL(t, " a Which ", " which ");
  t = rplUL(t, " a What ", " what ");
  t = rplUL(t, " a My ", " my ");
  t = rplUL(t, " a Your ", " your ");
  t = rplUL(t, " a His ", " his ");
  t = rplUL(t, " a Her ", " her ");
  t = rplUL(t, " a Its ", " its ");
  t = rplUL(t, " a His own ", " his own ");
  t = rplUL(t, " a Her own ", " her own ");
  t = rplUL(t, " a Its own ", " its own ");
  t = rplUL(t, " a His/her/its/their own ", " his/her/its/their own ");
  t = rplUL(t, " a Our ", " our ");
  t = rplUL(t, " a Their ", " their ");
  t = rplUL(t, " a Their own ", " their own ");
  t = rplUL(t, " a because of which ", " because of which a ");
  t = rplUL(t, " a because ", " because ");
  t = rplUL(t, " a not ", " not a ");
  t = rep(t, "kzqa a ", "-");
  t = rep(t, "kzqa an ", "-");
  t = rep(t, "kzqa ", "-");
  t = rplUL(t, " a A", " a a");
  t = rplUL(t, " a B", " a b");
  t = rplUL(t, " a C", " a c");
  t = rplUL(t, " a D", " a d");
  t = rplUL(t, " a E", " a e");
  t = rplUL(t, " a F", " a f");
  t = rplUL(t, " a G", " a g");
  t = rplUL(t, " a H", " a h");
  t = rplUL(t, " a I", " a i");
  t = rplUL(t, " a J", " a j");
  t = rplUL(t, " a K", " a k");
  t = rplUL(t, " a L", " a l");
  t = rplUL(t, " a M", " a m");
  t = rplUL(t, " a N", " a n");
  t = rplUL(t, " a O", " a o");
  t = rplUL(t, " a P", " a p");
  t = rplUL(t, " a Q", " a q");
  t = rplUL(t, " a R", " a r");
  t = rplUL(t, " a S", " a s");
  t = rplUL(t, " a T", " a t");
  t = rplUL(t, " a U", " a u");
  t = rplUL(t, " a V", " a v");
  t = rplUL(t, " a W", " a w");
  t = rplUL(t, " a X", " a x");
  t = rplUL(t, " a Y", " a y");
  t = rplUL(t, " a Z", " a z");
  t = rplUL(t, " an as/that way ", " that way a ");
  t = rplUL(t, " a as/that way ", " that way a ");
  t = rplUL(t, " as/that way a ", " that way a ");
  t = rplUL(t, " as/that way an ", " that way a ");
  if ((endswith(trim(t), "!")) && (!indexof(t, "?") >= FOUND) && (!indexof(txtxt, "iom da ") >= FOUND)) {
	t = rplUL(t, " a how much/many ", " such a ");
	t = rep(t, " How much/many ", " Such ");
  }
  rgx = "j\\b";
  if (regex_replace(txtxt, rgx, "").compare(txtxt) == 0) {
	t = rep(t, " much/many ", " much ");
  }
  else {
	t = rep(t, " much/many ", " many ");
  }
  rgx = " (a|A)n? ([aeiouAEIO])";
  t = regex_replace(t, rgx, " $1n ñññ$2");
  t = rplUL(t, " an ", " a ");
  t = rplUL(t, " a ñññ", " an ");
  t = rplUL(t, " a A", " an a");
  t = rplUL(t, " a E", " an e");
  t = rplUL(t, " a I", " an i");
  t = rplUL(t, " a O", " an o");
  t = rplUL(t, " an us", " a us");
  t = rplUL(t, " an Us", " a us");
  rgx = " a ([AEIO])";
  t = regex_replace(t, rgx, " an $1");
  t = rplUL(t, " a un", " an un");
  t = rplUL(t, " an uni", " a uni");
  t = rplUL(t, " a Un", " an un");
  t = rplUL(t, " an Uni", " a uni");
  t = rplUL(t, " that you should ", " for you to ");
  t = rplUL(t, " that I should ", " for me to ");
  t = rplUL(t, " that she should ", " for her to ");
  t = rplUL(t, " that he should ", " for him to ");
  t = rplUL(t, " that it should ", " for it to ");
  t = rplUL(t, " that they should ", " for them to ");
  t = rplUL(t, " that we should ", " for us to ");
  rgx = " (w|W)ant(s |ed |ing|)for";
  t = regex_replace(t, rgx, " $1ant$2");
  t = rplUL(t, " wantingly for ", " wanting ");
  t = rep(t, " the my\"", " mine\"");
  t = rep(t, " The my\"", " mine\"");
  t = rep(t, " the your\"", " yours\"");
  t = rep(t, " The your\"", " yours\"");
  t = rep(t, " the our\"", " ours\"");
  t = rep(t, " The our\"", " ours\"");
  t = rep(t, " the her\"", " hers\"");
  t = rep(t, " The her\"", " hers\"");
  t = rep(t, " the his\"", " his\"");
  t = rep(t, " The his\"", " his\"");
  t = rep(t, " the their\"", " theirs\"");
  t = rep(t, " The their\"", " theirs\"");
  t = rep(t, " the its\"", " its\"");
  t = rep(t, " The its\"", " its\"");
  t = rep(t, " the his/her/its/their own\"", " his/her/its/their own\"");
  t = rep(t, " The his/her/its/their own\"", " his/her/its/their own\"");
  rgx = " the (her|their|your|our)([ .,?!;:)])";
  t = regex_replace(t, rgx, " $1s$2");
  rgx = " the my([ .,?!;:)])";
  t = regex_replace(t, rgx, " mine$1");
  rgx = " the his([ .,?!;:)])";
  t = regex_replace(t, rgx, " hisy$1");
  rgx = " the its([ .,?!;:)])";
  t = regex_replace(t, rgx, " its$1");
  rgx = " the one's([ .,?!;:)])";
  t = regex_replace(t, rgx, " one's$1");
  rgx = " The my([ .,?!;:)])";
  t = regex_replace(t, rgx, " Mine$1");
  rgx = " The his([ .,?!;:)])";
  t = regex_replace(t, rgx, " His$1");
  rgx = " The her([ .,?!;:)])";
  t = regex_replace(t, rgx, " Hers$1");
  rgx = " The their([ .,?!;:)])";
  t = regex_replace(t, rgx, " Theirs$1");
  rgx = " The your([ .,?!;:)])";
  t = regex_replace(t, rgx, " Yours$1");
  rgx = " The our([ .,?!;:)])";
  t = regex_replace(t, rgx, " Ours$1");
  rgx = " The its([ .,?!;:)])";
  t = regex_replace(t, rgx, " Its$1");
  rgx = " The one's([ .,?!;:)])";
  t = regex_replace(t, rgx, " One's$1");
  rgx = " the his/her/its/their own([ .,?!;:)])";
  t = regex_replace(t, rgx, " his/her/its/their own$1");
  rgx = " The his/her/its/their own([ .,?!;:)])";
  t = regex_replace(t, rgx, " His/her/its/their own$1");
  t = rplUL(t, " hers own", " her own");
  t = rplUL(t, " theirs own", " their own");
  t = rplUL(t, " e-a ", " an e-");
  t = rplUL(t, " e-a ", " an e-");
  t = rplUL(t, " e-an ", " an e-");
  t = rplUL(t, " to start-", " suddenly ");
  t = rplUL(t, "-be-start-", "-be suddenly ");
  t = rplUL(t, " start-", " suddenly ");
  t = rplUL(t, " going-to-be-", " going to be ");
  t = rplUL(t, " going-to-", " going to ");
  t = rplUL(t, " would-be-", " would be ");
  t = rplUL(t, " I'm would ", " I would ");
  t = rplUL(t, " A good day", " Hello");
  t = rplUL(t, " A good night", " Good night");
  t = rplUL(t, " A good evening", " Good evening");
  t = rplUL(t, " A good morning", " Good morning");
  t = rplUL(t, " A good afternoon", " Good afternoon");
  t = rplUL(t, " throughxx from ", " through ");
  t = rplUL(t, " throughxx of ", " through ");
  t = rplUL(t, " throughxx by ", " through ");
  t = rplUL(t, " byxx from ", " by ");
  t = rplUL(t, " byxx of ", " by ");
  t = rplUL(t, " byxx by ", " by ");
  t = rplUL(t, " Like/how you are?", " How are you?");
  t = rplUL(t, " Like/how you fare?", " How are you?");
  t = rplUL(t, " Like/how is ", " How is ");
  t = rplUL(t, " Like/how are ", " How are ");
  t = rplUL(t, " Like/how fare ", " How are ");
  t = rplUL(t, " Like/how am ", " How am ");
  t = rplF(t, "okay as ", "well as ");
  t = rplUL(t, " very okay", " very well");
  t = rplUL(t, " hit cream", " whipped cream");
  t = rplUL(t, " potatos", " potatoes");
  t = rplUL(t, " an okay educated", " a well educated");
  t = rplUL(t, " okay educated", " well educated");
  t = rplUL(t, " belles-lettresly cultured/educated", " well-read");
  t = rplUL(t, " gasoline-levelling gauge", " gas-gauge");
  t = rplUL(t, " good-doing/making sale", " rummage sale");
  t = rplUL(t, " Brusselsian cabbage", " Brussels sprout");
  t = rplUL(t, " shop center", " shopping center");
  t = rplUL(t, " chocolate-incubating-ritual", " chocolate-covered");
  t = rplUL(t, " puffing/swelling-cake", " éclair");
  t = rplUL(t, " of time to time", " from time to time");
  t = rplUL(t, " decisive competitions/contests", " play-offs");
  t = rplUL(t, " decisive competition/contest", " play-off");
  rgx = " (d|D)edicat(es |ing |e )attention";
  t = regex_replace(t, rgx, " $1edicat$2attention");
  t = rep(t, " dedicated attention", " paid attention");
  t = rplUL(t, " dedicatingly attention", " paying attention");
  t = rplUL(t, " of-fluent-making pipes/tubes", " drain-pipes");
  t = rplUL(t, " of-fluent-making pipe/tube", " drain-pipe");
  t = verbChange(t, "declare inappropriate/unfitting", "declare unfit");
  t = verbChange(t, "declare inappropriate", "declare unfit");
  t = rplUL(t, " ever since when ", " since ");
  t = rplUL(t, " turning away maneuvers", " smoke screens/diversions");
  t = rplUL(t, " turning away maneuver", " smoke screen/diversion");
  t = verbChange(t, "gape to", "gape at");
  rgx = " guid(e|es|ed|ing)/steer( |s |ed|ing)(himself)?/?(herself)?/?(itself)?/?(themselves)?";
  t = regex_replace(t, rgx, " proceed$2");
  rgx = " Guid(e|es|ed|ing)/steer( |s |ed|ing)(himself)?/?(herself)?/?(itself)?/?(themselves)?";
  t = regex_replace(t, rgx, " Proceed$2");
  rgx = " guidingly/steeringly(himself)?/?(herself)?/?(itself)?/?(themselves)?";
  t = regex_replace(t, rgx, " proceeding");
  rgx = " Guidingly/steeringly(himself)?/?(herself)?/?(itself)?/?(themselves)?";
  t = regex_replace(t, rgx, " Proceeding");
  rgx = " (l|L)og( |s |ged |ging )(in|out) (himself)?/?(herself)?/?(itself)?/?(themselves)?";
  t = regex_replace(t, rgx, " $1og$2$3");
  rgx = " (l|L)oggingly (in|out) (himself)?/?(herself)?/?(itself)?/?(themselves)?";
  t = regex_replace(t, rgx, " $1ogging $2");
  t = rplUL(t, " distracting/entertaining evenings", " evening parties");
  t = rplUL(t, " distracting/entertaining evening", " evening party");
  t = rplUL(t, " sweet/soft water", " fresh water");
  t = rplUL(t, " extraordinary dividend", " bonus");
  t = rplUL(t, " in a presence of", " in the presence of");
  t = rplUL(t, " in a presence from", " in the presence of");
  t = rplUL(t, " in each event", " in any event");
  t = rplUL(t, " getting married party", " wedding party");
  t = rplUL(t, " getting married ceremony", " wedding ceremony");
  t = rplUL(t, " in the event if ", " in case ");
  t = rplUL(t, " inside-adapts accurately", " fits together");
  t = rplUL(t, " inside-adapted accurately", " fit together");
  t = rep(t, " inside-adapting accurately", " fitting together");
  t = rplUL(t, " inside-adaptingly accurately", " fitting together");
  t = rplUL(t, " inside-adapt accurately", " fit together");
  t = rplUL(t, " inside-adapts", " fits");
  t = rplUL(t, " inside-adapted", " fit");
  t = rep(t, " inside-adapting", " fitting");
  t = rplUL(t, " inside-adaptingly", " fitting");
  t = rplUL(t, " inside-adapt", " fit");
  t = rplUL(t, " in love to ", " in love with ");
  t = rplUL(t, " apart of ", " apart from ");
  t = rplUL(t, " according-to-touch", "-textured");
  t = rplUL(t, " some after/behind some", " gradually");
  t = rep(t, " extends beforehand/formerly/in front", " reaches forward");
  t = rplUL(t, " extended beforehand/formerly/in front", " reached forward");
  t = rep(t, " extending beforehand/formerly/in front", " reaching forward");
  t = rep(t, " Extending beforehandly/formerlily/in frontly",
	" Reaching forward");
  t = rplUL(t, " extend beforehand/formerly/in front", " reach forward");
  t = rplUL(t, " branch/compartment/department/section union", " trades-union");
  t = rplUL(t, " domestic room", " living-room");
  t = rplUL(t, " domestic name", " surname");
  t = rplUL(t, " const part", " end parts");
  t = rplUL(t, " const part", " end part");
  t = rplUL(t, " bungled-turnip", " rushed and bungled");
  t = rplUL(t, " sidely of", " beside");
  t = rplUL(t, " sidely from", " beside");
  t = rplUL(t, " yellow copper", " brass");
  rgx = " abandon( |s |ing )with an oath";
  t = regex_replace(t, rgx, " swear$1 off");
  rgx = " Abandon( |s |ing )with an oath";
  t = regex_replace(t, rgx, " Swear$1 off");
  t = rplUL(t, " abandoned with an oath", " swore off");
  t = rplUL(t, " abandoningly with an oath", " swearing off");
  t = rplUL(t, " genealogical indexes/arrays", " family trees");
  t = rplUL(t, " genealogical index/array", " family tree");
  t = rplUL(t, " geographic cards/maps/menus", " maps");
  t = rplUL(t, " geographic card/map/menu", " map");
  t = rplUL(t, " ground collapsing", " landslide");
  t = rplUL(t, " generally gotten/accepted", " generally accepted");
  rgx = " disturbs (himself)?/?(herself)?/?(itself)?/?(themselves)?";
  t = regex_replace(t, rgx,
	" worries");
  rgx = " Disturbs (himself)?/?(herself)?/?(itself)?/?(themselves)?";
  t = regex_replace(t, rgx,
	" Worries");
  rgx = " disturbed (himself)?/?(herself)?/?(itself)?/?(themselves)?";
  t = regex_replace(t, rgx,
	" worried");
  rgx = " Disturbed (himself)?/?(herself)?/?(itself)?/?(themselves)?";
  t = regex_replace(t, rgx,
	" Worried");
  rgx = " disturb(ing)?(ly)?(erly)? (himself)?/?(herself)?/?(itself)?/?(themselves)?";
  t = regex_replace(t, rgx, " worry$1");
  rgx = " Disturb(ing)?(ly)?(erly)? (himself)?/?(herself)?/?(itself)?/?(themselves)?";
  t = regex_replace(t, rgx, " Worry$1");
  t = rplUL(t, " up to a seeing again", " see you later");
  t = rplUL(t, " to himself/herself",
	" for himself/herself");
  rgx = " (g|G)et( |s |ting )hold of (it|them) to ";
  t = regex_replace(t, rgx, " $1et$2hold of $3 for ");
  rgx = " hold of (it|them) for (himself)?/?(herself)?/?(itself)?/?(themselves)?";
  t = regex_replace(t, rgx, " $1");
  t = rplUL(t, " honorary protecter", " patron");
  t = rplUL(t, " offended about", " offended by");
  t = rplUL(t, " contagious centers", " sources of infection");
  t = rplUL(t, " contagious center", " source of infection");
  t = rep(t, " urge/stimulus causes/reasons", " motives");
  t = rep(t, " urge/stimulus causes/reasons", " motives");
  t = rplUL(t, " Urge/stimulus cause/reason", " Motive");
  t = rplUL(t, " urge/stimulus event", " motive");
  t = rplUL(t, " intelligence quotients", " I.Q.'s");
  t = rplUL(t, " intelligence quotient", " I.Q.");
  t = rplUL(t, " interested about", " interested in");
  t = rplUL(t, " interest about ", " interest in ");
  t = rplUL(t, " between/among-", " inter-");
  t = rplUL(t, " betweening/among-", " inter-");
  t = rplUL(t, " the same-pace/steply", " keeping up");
  t = rplUL(t, " going-return", " round-trip");
  t = rplUL(t, " one the other ones", " each other");
  t = rplUL(t, " one the other one", " each other");
  t = rplUL(t, " already of ", " since ");
  t = rplUL(t, " already from ", " since ");
  t = rplUL(t, " already not/no", " no longer");
  t = rplUL(t, " already not ", " no longer ");
  rgx = " already no([.,?!;:)])";
  t = regex_replace(t, rgx, " no longer$1");
  rgx = " Already no([.,?!;:)])";
  t = regex_replace(t, rgx, " No longer$1");
  t = rplUL(t, " year-const day", " New Year's Eve");
  t = rplUL(t, " on/in the end", " at the back");
  t = rplUL(t, " on/in your health", " cheers");
  t = rplUL(t, " judgment grasp", " confiscation");
  rgx = " not can([ .,?!;:)])";
  t = regex_replace(t, rgx, " can't$1");
  rgx = " Not can([ .,?!;:)])";
  t = regex_replace(t, rgx, " Can't$1");
  rgx = " not could([ .,?!;:)])";
  t = regex_replace(t, rgx, " can't$1");
  rgx = " Not could([ .,?!;:)])";
  t = regex_replace(t, rgx, " Can't$1");
  t = rplUL(t, " can't to ", " can't ");
  t = rplUL(t, " couldn't to ", " couldn't ");
  t = rplUL(t, " not will be", " won't be");
  t = rplUL(t, " not would be", " wouldn't be");
  t = rplUL(t, " not should be", " shouldn't be");
  rgx = " throw(s)? (himself)?/?(herself)?/?(itself)?/?(themselves)? on ";
  t = regex_replace(t, rgx, " pounce$1 on ");
  rgx = " Throw(s)? (himself)?/?(herself)?/?(itself)?/?(themselves)? on ";
  t = regex_replace(t, rgx, " Pounce$1 on ");
  t = rep(t, " threw himself/herself/itself/themselves on ", " pounced on ");
  rgx = " throwing(ly)?(erly)? (himself)?/?(herself)?/?(itself)?/?(themselves)? on ";
  t = regex_replace(t, rgx,
	" pouncing on ");
  rgx = " Throwing(ly)?(erly)? (himself)?/?(herself)?/?(itself)?/?(themselves)? on ";
  t = regex_replace(t, rgx,
	" Pouncing on ");
  rgx = " [sS]exually transmitted/venereal disease(s)?/illness(es)?";
  t = regex_replace(t, rgx,
	" STD$1/sexually transmitted disease$1");
  rgx = " [dD]ouble V([ .,?!;:)])";
  t = regex_replace(t, rgx, " W$1");
  t = rplUL(t, " a there is ", " there is a ");
  t = rplUL(t, " a there isn't ", " there isn't a ");
  rgx = " a (he|she|they|it|you|we) ";
  t = regex_replace(t, rgx, " $1 a ");
  t = rep(t, " an I ", " I a ");
  rgx = " ([lL]ong-game|[mM]icroslot) disk(s)?/dials?/records?";
  t = regex_replace(t, rgx, " LP record$1");
  t = rplUL(t, " a generally ", " generally a ");
  t = rplUL(t, " a usually ", " usually a ");
  rgx = " (a|A)n ([bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ])";
  t = regex_replace(t, rgx, " $1 $2");
  t = rplUL(t, " a u", " an u");
  t = rplUL(t, " an us", " a us");
  t = rplUL(t, " an univ", " a univ");
  t = rplUL(t, " a U", " an U");
  t = rplUL(t, " an Us", " a Us");
  t = rplUL(t, " an Univ", " a Univ");
  rgx = " (a|A) ([aeioAEIO])";
  t = regex_replace(t, rgx, " $1n $2");
  rgx = " (a|A) ([fhlmnrsxFHLMNRSX])([- .,?!:;])";
  t = regex_replace(t, rgx, " $1n $2$3");
  rgx = " (a|A)n U([ .,?!:;])";
  t = regex_replace(t, rgx, " $1 U$2");
  t = rep(t, " a LP", " an LP");
  t = rep(t, " A LP", " An LP");
  t = rplUL(t, " an o ", " o ");
  t = rplUL(t, " an O ", " O ");
  t = rplUL(t, " a STD", " an STD");
  t = rplUL(t, " ah an L", " hello");

  return t;
}

static string korrections4(string t) {
  // Corrections and adjustments for phrases, part 4:
  rgx = "([a-zA-Z]) God/a god";
  t = regex_replace(t, rgx, "$1 God");
  t = rplUL(t, " a lots of one", " a lot");
  t = rplUL(t, " lots of ones", " a lot");
  t = rplUL(t, " a lots of", " a lot of");
  rgx = " (l|L)ots of([.,?!;:])";
  t = regex_replace(t, rgx, " a $1ot$2");
  t = rep(t, "-being-become ", "-becoming ");
  t = rep(t, "aian", "ayan");
  t = rep(t, "--", "-qzqx9-");
  rgx = "-([ .,?!])";
  t = regex_replace(t, rgx, "$1");
  t = rep(t, "-qzqx9-", "--");
  t = rep(t, "--ever/at all ", " ");
  t = rep(t, "-ever/at all ", " ");
  t = rplUL(t, "--ever/at all", " ones");
  t = rep(t, "-ever/at all", " ones");
  t = rep(t, "- one", " one");
  t = rep(t, "- ones", " ones");
  rgx = "-'ses([ .,?!;:)])";
  t = regex_replace(t, rgx, "'s$1");
  rgx = " (c|C)oncerning/relating (of|from) ";
  t = regex_replace(t, rgx, " $1oncerning ");
  t = rep(t, "-in-laws", "s-in-law");
  t = rep(t, "/algas", "/algae");
  t = rplUL(t, " algas", " algae");
  t = rplF(t, "funguses", "fungi");
  t = rplF(t, "specieseses", "species");
  t = rplF(t, "under species", "subspecies");
  t = rplF(t, "specieses", "species");
  t = rplUL(t, " sub ", " sub");
  t = rplF(t, "bird of preys", "birds of prey");
  t = rep(t, "-hairs", "");
  t = rplUL(t, " quadratic/square metre", " square metre");
  t = rplUL(t, " quadratic/square kilometre", " square kilometre");
  t = rep(t, " cuxxently", "");
  t = rep(t, " Cuxxently", "");
  t = rplUL(t, " a made one to ", " one made to ");
  t = rplUL(t, " made one to ", " one made to ");
  t = rplUL(t, " made ones to ", " ones made to ");
  t = rplUL(t, " a would be made one to ", " one that would be made to ");
  t = rplUL(t, " would be made one to ", " one that would be made to ");
  t = rplUL(t, " would be made ones to ", " ones that would be made to ");
  t = rplUL(t, " a going to be made one to ", " one that will be made to ");
  t = rplUL(t, " going to be made one to ", " one that will be made to ");
  t = rplUL(t, " going to be made ones to ", " ones that will be made to ");
  t = rplUL(t, " a made one to ", " one made to ");
  t = rplUL(t, " made one to ", " one made to ");
  t = rplUL(t, " made ones to ", " ones made to ");
  t = rep(t, "-able", "able");
  t = rep(t, ") makeable", "-makeable");
  t = rep(t, ") makable", "-makeable");
  t = rep(t, " chews its or their cud", " chews its cud");
  t = rep(t, "s chew its or their cud", "s chew their cud");
  t = rplUL(t, " opposite-of-light-", "  dark-");
  rgx = "\"the my([ .,?!;:]|\")";
  t = regex_replace(t, rgx, "\"mine$1");
  rgx = "\"The my([ .,?!;:]|\")";
  t = regex_replace(t, rgx, "\"Mine$1");
  rgx = "\"the his([ .,?!;:]|\")";
  t = regex_replace(t, rgx, "\"his$1");
  rgx = "\"The his([ .,?!;:]|\")";
  t = regex_replace(t, rgx, "\"His$1");
  rgx = "\"the its([ .,?!;:]|\")";
  t = regex_replace(t, rgx, "\"its$1");
  rgx = "\"The its([ .,?!;:]|\")";
  t = regex_replace(t, rgx, "\"Its$1");
  rgx = "\"the one's([ .,?!;:]|\")";
  t = regex_replace(t, rgx, "\"one's$1");
  rgx = "\"The one's([ .,?!;:]|\")";
  t = regex_replace(t, rgx, "\"One's$1");
  rgx = "\"the (her|their|your|our)([ .,?!;:]|\")";
  t = regex_replace(t, rgx, "\"$1s$2");
  rgx = "\"the his/her/its/their own([ .,?!;:]|\")";
  t = regex_replace(t, rgx, "\"his/her/its/their own$1");
  rgx = "\"The his/her/its/their own([ .,?!;:]|\")";
  t = regex_replace(t, rgx, "\"His/her/its/their own$1");
  rgx = "\"The your([ .,?!;:]|\")";
  t = regex_replace(t, rgx, "\"Yours$1");
  rgx = "\"The our([ .,?!;:]|\")";
  t = regex_replace(t, rgx, "\"Ours$1");
  rgx = "\"The her([ .,?!;:]|\")";
  t = regex_replace(t, rgx, "\"Hers$1");
  rgx = "\"The their([ .,?!;:]|\")";
  t = regex_replace(t, rgx, "\"Theirs$1");
  t = rplUL(t, " defiantly/in spite to ", " in spite of ");
  t = rep(t, " (of) zzix it", " is it");
  t = rep(t, " (of) zzwx it", " was it");
  t = rplUL(t, " zzix it", " is it that");
  t = rplUL(t, " zzwx it", " was it that");
  t = rplUL(t, " zzix", " should");
  t = rep(t, " I know/are ", " I know/am ");
  t = rplUL(t, " you know/was ", " you knew/were ");
  t = rplUL(t, " they know/was ", " they knew/were ");
  t = rplUL(t, " we know/was ", " we knew/were ");
  t = rplUL(t, " know/is ", " knows/is ");
  t = rplUL(t, " know/was ", " knew/was ");
  t = rep(t, " like/how is it ", " like ");
  t = rep(t, " and like ", " and how is it ");
  rgx = " (l|L)ike a ([aeiouAEIOU])";
  t = regex_replace(t, rgx, " $1ike an $2");
  rgx = " (l|L)ike an (us|Us)";
  t = regex_replace(t, rgx, " $1ike a $2");
  t = rplUL(t, " How much/many of you ", " How much is it you ");
  t = rplUL(t, " How much/many of them ", " How much is it they ");
  t = rplUL(t, " How much/many of him ", " How much is it he ");
  t = rplUL(t, " How much/many of her ", " How much is it she ");
  t = rplUL(t, " How much/many of it ", " How much is it it ");
  t = rplUL(t, " How much/many of me ", " How much is it I ");
  t = rplUL(t, " How much/many of us ", " How much is it we ");
  t = rplUL(t, " genders/genuses from the family", " genuses of the family");
  t = rplUL(t, " gender/genus from the family", " genus of the family");
  t = rplUL(t, " with that, what is it ", " by that, which ");
  rgx = " not there (is|are|was|were|wo|would|should|could|has|have|had)n't";
  t = regex_replace(t, rgx, " there $1n't");
  rgx = " Not there (is|are|was|were|wo|would|should|could|has|have|had)n't";
  t = regex_replace(t, rgx, " There $1n't");
  t = rplUL(t, " is it is ", " is ");
  t = rplUL(t, " was it was ", " was ");
  t = rplUL(t, " is it are ", " are ");
  t = rplUL(t, " was it were ", " were ");
  t = rplUL(t, " is it am ", " am ");
  t = rplUL(t, " is it will ", " will ");
  t = rplUL(t, " is it would ", " would ");
  t = rplUL(t, " is it should ", " should ");
  t = rplUL(t, " he is ", " he's ");
  t = rplUL(t, " she is ", " she's ");
  t = rplUL(t, " it is ", " it's ");
  t = rplUL(t, " they are ", " they're ");
  t = rplUL(t, " I am ", " I'm ");
  t = rplUL(t, " you are ", " you're ");
  t = rplUL(t, " we are ", " we're ");
  rgx = " (will|would|should|could|won't|shouldn't|wouldn't|couldn't) be (he|she|it|they|you|I|we|one)([ ?])";
  t = regex_replace(t, rgx, " $1 $2 be$3");
  rgx = " (Will|Would|Should|Could|Won't|Shouldn't|Wouldn't|Couldn't) be (he|she|it|they|you|I|we|one)([ ?])";
  t = regex_replace(t, rgx, " $1 $2 be$3");
  t = rplUL(t, " Don't be you ", " You shouldn't be ");
  t = rplUL(t, " Don't be we ", " We shouldn't be ");
  t = rplUL(t, " Don't be I ", " I shouldn't be ");
  t = rplUL(t, " Don't be he ", " He shouldn't be ");
  t = rplUL(t, " Don't be she ", " She shouldn't be ");
  t = rplUL(t, " Don't be it ", " It shouldn't be ");
  t = rplUL(t, " Don't be they ", " They shouldn't be ");
  t = rplUL(t, " Don't be one ", " One shouldn't be ");
  if (startswith(t, " it and ")) {
	t = " and it " + t.substr(8);
  }
  if (startswith(t, " it and ")) {
	t = " and it " + t.substr(8);
  }
  txtxt = " " + txt1;
  if (indexof(txtxt, " Dio") >= FOUND) {
	rgx = " god\\b";
	t = regex_replace(t, rgx, " God");
  }
  if (indexof(txtxt, " gxi ") == NOT_FOUND) {
	t = rep(t, " And it should ", " And ");
	t = rep(t, " And it shouldn't ", " And don't ");
	t = rplUL(t, " and shouldn't ", " and don't ");
	t = rplUL(t, " and should ", " and ");
  }

  if (indexof(txt1, "Gxi ") == NOT_FOUND) {
	t = rep(t, " Should ", " You should ");
	t = rep(t, " It shouldn't ", " Don't ");
	t = rep(t, " Shouldn't ", " Don't ");
  }
  rgx = " not (he|she|it|they|you|I|we|one) (did|does|do|wo|should|would|could)n't";
  t = regex_replace(t, rgx,
	" $1 $2n't");
  rgx = " Not he (did|does|do|wo|should|would|could)n't";
  t = regex_replace(t, rgx, " He $2n't");
  rgx = " Not she (did|does|do|wo|should|would|could)n't";
  t = regex_replace(t, rgx, " She $2n't");
  rgx = " Not it (did|does|do|wo|should|would|could)n't";
  t = regex_replace(t, rgx, " It $2n't");
  rgx = " Not they (did|does|do|wo|should|would|could)n't";
  t = regex_replace(t, rgx, " They $2n't");
  rgx = " Not you (did|does|do|wo|should|would|could)n't";
  t = regex_replace(t, rgx, " You $2n't");
  rgx = " Not I (did|does|do|wo|should|would|could)n't";
  t = regex_replace(t, rgx, " I $2n't");
  rgx = " Not we (did|does|do|wo|should|would|could)n't";
  t = regex_replace(t, rgx, " We $2n't");
  rgx = " Not one (did|does|do|wo|should|would|could)n't";
  t = regex_replace(t, rgx, " One $2n't");
  rgx = " be able (he|she|it|they|you|I|we|one)([.,?!;:)])";
  t = regex_replace(t, rgx, " $1 be able to$2");
  rgx = " be able (he|she|it|they|you|I|we|one) ";
  t = regex_replace(t, rgx, " $1 be able ");
  rgx = " able([.,?!;:)])";
  t = regex_replace(t, rgx, " able to$1");

  if (startswith(t, " it And ")) {
	t = " And it " + t.substr(8);
  }
  if (startswith(t, " it and ")) {
	t = " and it " + t.substr(8);
  }
  if (startswith(t, " There should be ")) {
	t = " Be " + t.substr(17);
  }
  if (startswith(t, " And there should be ")) {
	t = " And be " + t.substr(21);
  }
  if (startswith(t, " There shouldn't be ")) {
	t = " Don't be " + t.substr(20);
  }
  if (startswith(t, " And there shouldn't be ")) {
	t = " And don't be " + t.substr(24);
  }
  rgx = " Don't (he|she|it|they|you|I|we|one) be ";
  t = regex_replace(t, rgx, " Shouldn't $1 be ");

  rgx = " It should (he|she|it|they|you|I|we|one) be ";

  t = regex_replace(t, rgx, " Should $1 be ");
  rgx = " mak(e|es|ing)?(ly)?(erly)? to ";
  t = regex_replace(t, rgx, " arrang$1 to ");
  t = rep(t, " Make to ", " Arrange to ");
  t = rep(t, " Making to ", " Arranging to ");
  t = rep(t, " Makingly to ", " Arranging to ");
  t = rep(t, "ablyable", "ably");
  t = rep(t, "ableable", "able");
  t = rep(t, " oneable", " one");
  t = rep(t, " onesable", " ones");
  t = rep(t, "-tooling-tool", "-tool");
  t = rep(t, "e-want ", " ");
  t = rep(t, "-want ", " ");
  t = rplUL(t, " wanting-to-be ", " wanting-to-be-");
  t = rep(t, "-tend", "");
  t = rep(t, "-seemingly/seemingly", "-seeming");
  t = rep(t, "-seemingly/seeminglily", "-like");
  t = rep(t, " doed", " done");
  t = rep(t, " can to ", " can ");
  t = rep(t, " could to ", " could ");
  t = rep(t, "eist", "ist");
  t = rep(t, "fisty", "feisty");
  t = rep(t, "fisti", "feisti");
  t = rep(t, "-in appearance", "-like-looking");
  t = rep(t, "-wayly", "-like");
  t = rep(t, "-way", "-like");
  t = rep(t, " one-like", " one-way");
  t = rep(t, " two-like", " two-way");
  t = rep(t, " One-like", " One-way");
  t = rep(t, " Two-like", " Two-way");
  t = rep(t, "-completely", "-full");
  t = rep(t, "-completelily", "-fully");
  t = rep(t, "-love", "-loving");
  t = rep(t, "-lovingr", "-lover");
  t = rep(t, "-young", " youngster");
  t = rep(t, "-offspring", " youngster");
  t = rplUL(t, " duoes", " duos");
  t = rplUL(t, " trioes", " trios");
  t = rep(t, "ed one of ", "ed of/by ");
  t = rep(t, "ed ones of ", "ed of/by ");
  t = rep(t, " group of one thousand one", " group of one thousand");
  t = rplUL(t, " groups of one thousand ones", " groups of one thousand");
  t = rep(t, " group of one million one", " group of one million");
  t = rplUL(t, " groups of one million ones", " groups of one million");
  t = rplUL(t, " groups of one millions", " groups of one million");
  t = rep(t, " group of one billion one", " group of one billion");
  t = rplUL(t, " groups of one billion ones", " groups of one billion");
  t = rplUL(t, " groups of one billions", " groups of one billion");
  t = rep(t, " group of one trillion one", " group of one trillion");
  t = rplUL(t, " groups of one trillion ones", " groups of one trillion");
  t = rplUL(t, " groups of one trillions", " groups of one trillion");
  t = rep(t, "-at a time", " at a time");
  rgx = " (he|she|it|they|you|I|we|one)( is|'s) it that ";
  t = regex_replace(t, rgx, " is it that $1 ");
  rgx = " (he|she|it|they|you|I|we|one) was it that ";
  t = regex_replace(t, rgx, " was it that $1 ");
  rgx = " (he|she|it|one) not is it that ";
  t = regex_replace(t, rgx, " is it that $1 doesn't ");
  rgx = " (they|you|I|we) not is it that ";
  t = regex_replace(t, rgx, " is it that $1 don't ");
  rgx = " (he|she|it|they|you|I|we|one) not was it that ";
  t = regex_replace(t, rgx, " was it that $1 didn't ");
  t = rep(t, "-persons", "-people");
  t = rep(t, "-branch/wing", "ness-type");
  t = rep(t, "ing-placing", "ing-place");
  t = rep(t, "-placing", "-place");
  t = rplUL(t, " very a ", " a very ");
  t = rplUL(t, " very an ", " a very ");
  t = rep(t, " your a ", " your ");
  rgx = " (a|A)n a(n)? ";
  t = regex_replace(t, rgx, " $1$2");
  rgx = " (his|her|its|their|my|your|our|one's|His|Her|Its|Their|My|Your|Our|One's) an? ";
  t = regex_replace(t, rgx,
	" $1 ");
  t = rep(t, "-log", "ologist");
  t = rep(t, "-lurings", "ologies");
  t = rep(t, "-luring", "ology");
  t = rep(t, ") make-", "ly make ");
  t = rep(t, ") smalling", "( small)");
  t = rep(t, ") bigging", "( big)");
  t = rep(t, ") maling", "( male)");
  t = rep(t, ") femaling", "( female)");
  t = rep(t, "-governsing/controlings", "-leaders");
  t = rep(t, "-governing/controling", "-leader");
  t = rep(t, " governsing/controls", "-leaders");
  t = rep(t, " governing/control", "-leader");
  t = rep(t, "job/work-piece", "part");
  t = rep(t, " authorities/rights", " rights");
  t = rep(t, " watches secretly", " spies on");
  t = rplUL(t, " watched secretly", " spied on");
  t = rplUL(t, " watch secretly", " spy on");
  t = rep(t, " watching secret", " spying on");
  t = rplUL(t, " watchingly secretly", " spying on");
  t = rep(t, " official clothing", " robes of office");
  t = rep(t, " official crime", " abuse of power");
  t = rep(t, " abuse of power rate", " official crime rate");
  t = rep(t, " official dwelling", " official residence");
  t = rep(t, " official period", " term of office");
  t = rep(t, " westernly of", " west of");
  t = rep(t, " easternly of", " east of");
  t = rep(t, " northernly of", " north of");
  t = rep(t, " southernly of", " south of");
  t = rep(t, " westernly from", " west of");
  t = rep(t, " easternly from", " east of");
  t = rep(t, " northernly from", " north of");
  t = rep(t, " southernly from", " south of");
  t = rep(t, " a one and a half", " one and a half");
  t = rep(t, " one the other one", " each other");
  t = rep(t, " first partially-payment", " down payment");
  t = rep(t, " partially-payment", " partial payment");
  t = rep(t, "-hourly/per", "-hour");
  t = rep(t, " first plan", " close-up");
  t = rep(t, "-hour hour", "-hour");
  t = rep(t, " an one-", " a one-");
  t = rep(t, " usefulness program", " utility program");
  t = rep(t, " soccerist", " soccer player");
  t = rep(t, " American soccer", " American football");
  t = rep(t, " an academic certificated/graduate", " a college graduate");
  t = rep(t, " academic certificated/graduate", " college graduate");
  t = rep(t, " academic certificateds/graduates", " college graduates");
  t = rep(t, " a is it ", " is it a ");
  t = rep(t, " a was it ", " was it a ");
  t = rep(t, " like/how was it a distant one", " how far");
  t = rep(t, " like/how is it a distant one", " how far");
  t = rep(t, " How is it distant", " How far");
  t = rep(t, " How was it distant", " How far");
  t = rep(t, " which number of hour/time", " what time");
  t = rep(t, " an at ", " at ");
  t = rep(t, " an At ", " At ");
  t = rep(t, " is it is?", " is it?");
  t = rep(t, " is it is ", " is it ");
  t = rep(t, " What time was when ", " What time was it when ");
  t = rep(t, " What time is when ", " What time is it when ");
  t = rep(t, " time was it when was it ", " time was it when ");
  t = rep(t, " time is it when is it ", " time is it when ");
  t = rep(t, " time will be when is it ", " time will it be when ");
  t = rep(t, " time would be when is it ", " time would it be when ");
  t = rep(t, " like long", " how long");
  t = rep(t, " Like/how is it long", " How long");
  t = rep(t, " Like/how was it long", " How long");
  t = rep(t, " like/how was it long", " how long");
  t = rplUL(t, " and as/that way more", " et cetera");
  t = rep(t, " which/whoever", " whoever/whichever");
  t = rep(t, " what is it at all", " whatever");
  t = rep(t, " which is it at all", " whichever");
  rgx = " stoop(s|ing)?(ly)?(erly)? forward([.,?!;:)])";
  t = regex_replace(t, rgx, " bend$1 over$3");
  t = rplUL(t, " stooped forward", " bent over");
  t = rep(t, " Stoop forward", " Bend over");
  t = rep(t, " Stooping forward", " Bending over");
  t = rep(t, " Stoopingly forward", " Bending over");
  t = rplUL(t, " initial cost", " start-up cost");
  return t;
}

static string korrections5(string t) {
  // Corrections and adjustments for phrases, part 5:
  t = rplUL(t, " bringing/conducting ram", " leading indicator");
  t = rep(t, " competition/rivalry contract-continuing to entrusting/tell",
	" public tender");
  t = rep(t, " Competition/rivalry contract-continuing to entrusting/tell",
	" public tender");
  t = rplUL(t, " council living rooms/lounges/salons", " boardrooms");
  t = rplUL(t, " council living room/lounge/salon", " boardroom");
  t = rplUL(t, " against-slippery", " non-skid");
  t = rplUL(t, " against-mosquito gauze", " mosquito net");
  t = rplUL(t, " against-mosquito veil", " mosquito net");
  t = rplUL(t, " against-", " anti-");
  t = rplF(t, "slaveness", "slavery");
  t = rplUL(t, " anti-clothes-moth", " moth-proof");
  t = rplUL(t, " outer space room/space", " outer space");
  rgx = " grow(s|ing)?(ly)?(erly)? with mud/slime([.,?!;:)])";
  t = regex_replace(t, rgx, " silt$1 up$3");
  t = rep(t, " grew with mud/slime", " silted up");
  t = rplUL(t, " grown with mud/slime", " silted up");
  t = rplUL(t, " with reserve about", " barring");
  t = rplUL(t, " uniting parentheses/brackets/staples/clamps/braces",
	" braces");
  t = rplUL(t, " uniting parenthesis/bracket/staple/clamp/brace",
	" brace");
  t = rplUL(t, " medical gymnastics", " physiotherapy");
  t = rplUL(t, " medical gymnast", " physiotherapist");
  t = rplUL(t, " zoology garden", " zoo");
  t = rep(t, " care of for", " care of");
  t = rep(t, " care of about", " care of");
  rgx = " want(s|ed|ing)?(ly)?(erly)?([.,?!;:)])";
  t = regex_replace(t, rgx, " want$1 to$3");
  rgx = " want(s|ing)?(ly)?(erly)? to say([ .,?!;:)])";
  t = regex_replace(t, rgx, " mean$1$3");
  rgx = " Want(s|ing)?(ly)?(erly)? to say([ .,?!;:)])";
  t = regex_replace(t, rgx, " Mean$1$3");
  t = rep(t, " wanted to say", " meant");
  t = rep(t, " Wanting to say", " Meaning");
  t = rep(t, " Wantingly to say", " Meaning");
  t = rep(t, " not wants", " doesn't want");
  t = rep(t, " not wanted ", " didn't want ");
  t = rep(t, " not want ", " don't want ");
  t = rplUL(t, " willingly involuntarily", " willy-nilly");
  t = rplUL(t, " face neuralgia", " facial tic");
  t = rplUL(t, " supporting minimum", " subsistence level minimum");
  rgx = " (l|L)ike/how (he|she|it|one)([.,?!;:)])";
  t = regex_replace(t, rgx, " $1ike $2 does$3");
  rgx = " (l|L)ike/how (they|you|I|we)([.,?!;:)])";
  t = regex_replace(t, rgx, " $1ike $2 do$3");
  t = rep(t, " to be to ", " to ");
  t = rep(t, " and ones to ", " and to ");
  t = rep(t, ". there", ". There");
  t = rplUL(t, " the former week", " last week");
  t = rplUL(t, " the yesterday's night", " last night");
  t = rplUL(t, " the tomorrow's", " tomorrow's");
  t = rplUL(t, " the last night", " last night");
  t = rplUL(t, " the last week", " last week");
  t = rplUL(t, " the majority of ", " most ");
  t = rplUL(t, " most the ", " most of the ");
  t = rplUL(t, " most a ", " most of a ");
  t = rplUL(t, " the nearby week", " next week");
  t = rplUL(t, " the next week", " next week");
  t = rplUL(t, " worker class", " working class");
  t = rplUL(t, " worker movement", " labor movement");
  t = rplUL(t, " lamp petroleum", " kerosene");
  t = rplUL(t, " according to a desire/wish", " at will");
  t = rplUL(t, " according to insistence/pressure of", " at the insistence of");
  t = rplUL(t, " according to the circumstances", " under the circumstances");
  t = rep(t, " washing-cleans the eating utensils", " washes the dishes");
  t = rep(t, " Washing-cleaned the eating utensils", " With the dishes washed");
  rgx = " (w|W)ashing-clean(ed|ing)?(ly)?(erly)? the eating utensils";
  t = regex_replace(t, rgx, " $1ash$2 the dishes");
  t = rplUL(t, " school vacation day", " school holiday");
  t = rep(t, " liquid petroleum gas", " LPG/liquified petroleum gas");
  t = rep(t, " Liquid petroleum gas", " LPG/Liquified petroleum gas");
  t = rplUL(t, " bed above/over-cover/lid", " bedspread");
  t = rplUL(t, " for rent houses", " houses for rent");
  t = rplUL(t, " for rent house", " house for rent");
  t = rplUL(t, " for rent apartments", " apartments for rent");
  t = rplUL(t, " for rent apartment", " apartment for rent");
  t = rplUL(t, " illustrated postcard", " picture postcard");
  t = rplUL(t, " evening school", " night school");
  t = rplUL(t, " vertebra column", " spine");
  t = rplUL(t, " verb time", " verb tense");
  t = rep(t, " dresses attempt/testly", " tries on");
  t = rep(t, " dressed attempt/testly", " tried on");
  t = rplUL(t, " dress attempt/testly", " try on");
  t = rep(t, " dressing attempt/testly", " trying on");
  t = rplUL(t, " dressingly attempt/testly", " trying on");
  t = rep(t, " dresses himself/herself/itself/themselves", " gets dressed");
  t = rep(t, " dressed himself/herself/itself/themselves", " got dressed");
  t = rplUL(t, " dress himself/herself/itself/themselves", " get dressed");
  t = rep(t, " dressing himself/herself/itself/themselves", " getting dressed");
  t = rplUL(t, " dressingly himself/herself/itself/themselves",
	" getting dressed");
  t = rep(t, " drives backwards", " backs up");
  t = rep(t, " drove backwards", " backed up");
  t = rplUL(t, " driven backwards", " backed up");
  t = rplUL(t, " drive backwards", " back up");
  t = rep(t, " driving backwards", " backing up");
  t = rplUL(t, " drivingly backwards", " backing up");
  t = rep(t, " travels/drives backwards", " backs up");
  t = rep(t, " traveled/drove backwards", " backed up");
  t = rplUL(t, " travel/drive backwards", " back up");
  t = rep(t, " traveling/driving backwards", " backing up");
  t = rplUL(t, " travelingly/drivingly backwards", " backing up");
  t = rep(t, " comes in order to accompany", " picks up");
  t = rep(t, " came in order to accompany", " picked up");
  t = rplUL(t, " come in order to accompany", " pick up");
  t = rep(t, " coming in order to accompany", " picking up");
  t = rplUL(t, " comingly in order to accompany", " picking up");
  t = rep(t, " Basque cap", " Basque cap/beret");
  t = rep(t, " Basque cap/berets", " Basque caps/berets");
  t = rep(t, " valuable-adding tax", " VAT/value-added tax");
  t = rep(t, " Valuable-adding tax", " VAT/Value-added tax");
  t = rplUL(t, " coach/wagon/train car-entrance entrance halls/lobbies",
	" train platforms");
  t = rplUL(t, " coach/wagon/train car-entrance entrance hall/lobby",
	" train platform");
  t = rplUL(t, " city council/town council house", " city hall");
  t = rplUL(t, " low schools", " grammar/elementary schools");
  t = rplUL(t, " low school", " grammar/elementary school");
  t = rplUL(t, " back benches", " back seats");
  t = rplUL(t, " back bench", " back seat");
  t = rplUL(t, " casely of ", " in case of ");
  t = rplUL(t, " casely that ", " in case ");
  t = rplUL(t, " erer-full", " dangerous");
  t = rplUL(t, " sodium bicarbonate", " bicarbonate of soda");
  t = rplUL(t, " not beingly attentive", " apart from");
  t = rplUL(t, " house-clothes robes/dresses", " housedresses");
  t = rplUL(t, " house-clothes robe/dress", " housedress");
  t = rplUL(t, " non-applied crystal to sugar", " castor sugar");
  t = rplUL(t, " noble classes", " nobilities");
  t = rplUL(t, " noble class", " nobility");
  t = rplUL(t, " night animal", " nocturnal animal");
  t = rplUL(t, " night lamp", " night-light");
  t = rep(t, " night rest", " a night's rest");
  t = rplUL(t, " short time", " a short time");
  t = rplUL(t, " a a ", " a ");
  t = rplUL(t, " the a ", " the ");
  t = rplUL(t, " the an ", " the ");
  t = rplUL(t, " night service", " night shift");
  t = rplUL(t, " name share", " registered share");
  t = rep(t, " new-Greek language", " Modern Greek language");
  t = rep(t, " new-Hebrew language", " Modern Hebrew language");
  t = rep(t, " now still", " still");
  t = rplUL(t, " by ship-saving/salvation/salvage", " salvage");
  t = rep(t, " by to ship-travel/drive", " to sail");
  t = rep(t, " by ship-travels/drives", " sails");
  t = rep(t, " by ship-traveled/drove", " sailed");
  t = rep(t, " by ship-travel/driven", " sailed");
  t = rplUL(t, " by ship-travel/drive", " sail");
  t = rep(t, " by ship-traveling/driving", " sailing");
  t = rplUL(t, " by ship-travelingly/drivingly", " sailing");
  t = rep(t, " according-to-fluently", " downstream/with the flow");
  t = rep(t, " shelters/protects himself/herself/itself/themselves",
	" takes shelter");
  t = rep(t, " sheltered/protected himself/herself/itself/themselves",
	" took shelter");
  t = rplUL(t, " shelter/protect himself/herself/itself/themselves",
	" take shelter");
  t = rep(t, " sheltering/protecting himself/herself/itself/themselves",
	" taking shelter");
  t = rplUL(t, " shelteringly/protectingly himself/herself/itself/themselves",
	" taking shelter");
  t = rep(t, " takes shelter against", " wards off");
  t = rep(t, " took shelter against", " warded off");
  t = rplUL(t, " take shelter against", " ward off");
  t = rep(t, " taking shelter against", " warding off");
  t = rplUL(t, " takingly shelter against", " warding off");
  t = rep(t, " puts on make-up himself/herself/itself/themselves",
	" puts on make-up");
  t = rplUL(t, " put on make-up himself/herself/itself/themselves",
	" put on make-up");
  t = rep(t, " puting on make-up himself/herself/itself/themselves",
	" puting on make-up");
  t = rplUL(t, " putingly on make-up himself/herself/itself/themselves",
	" puting on make-up");
  t = rplUL(t, " more firmly", " tightly");
  t = rep(t, " goes stealthily to", " stalks");
  t = rep(t, " went stealthily to", " stalked");
  t = rplUL(t, " go stealthily to", " stalk");
  t = rep(t, " going stealthily to", " stalking");
  t = rplUL(t, " goingly stealthily to", " stalking");
  t = rplUL(t, " tire of-tongs", " tire iron/crowbar");
  t = rplUL(t, " tire ofs/from-tongses", " tire irons/crowbars");
  t = rep(t, " rides on ", " rides ");
  t = rep(t, " rode on ", " rode ");
  t = rplUL(t, " ridden on ", " ridden ");
  t = rplUL(t, " ride on ", " ride ");
  t = rep(t, " riding on ", " riding ");
  t = rplUL(t, " ridingly on ", " riding ");
  t = rep(t, " entertains/treats with ", " treats to ");
  t = rplUL(t, " entertained/treated with ", " treated to ");
  t = rplUL(t, " entertain/treat with ", " treat to ");
  t = rep(t, " entertaining/treating with ", " treating to ");
  t = rplUL(t, " entertainingly/treatingly with ", " treating to ");
  t = rplUL(t, " over-", " over");
  t = rplUL(t, " recommendation letters", " letters of recommendation");
  t = rplUL(t, " recommendation letter", " letter of recommendation");
  t = rplUL(t, " recommended/registered letter", " registered letter");
  t = rplUL(t, " directly forward", " straight ahead");
  t = rplUL(t, " directly through", " throughout");
  t = rep(t, " meets/encounters each other", " meet each other");
  t = rep(t, " met/encountered each other", " met each other");
  t = rplUL(t, " meet/encounter each other", " meet each other");
  t = rep(t, " meeting/encountering each other", " meeting each other");
  t = rplUL(t, " meetingly/encounteringly each other", " meeting each other");
  t = rep(t, " vehicly", " in a vehicle");
  t = rep(t, " overthrows/knocks down with a vehicle", " runs into");
  t = rep(t, " overthrew/knocked down with a vehicle", " ran into");
  t = rplUL(t, " overthrown/knocked down with a vehicle", " run into");
  t = rplUL(t, " overthrow/knock down with a vehicle", " run into");
  t = rep(t, " overthrowing/knocking down with a vehicle", " running into");
  t = rplUL(t, " overthrowingly/knockingly down with a vehicle", " running into");
  t = rplUL(t, " respiration treatment", " artificial respiration");
  t = rep(t, " in his/her/its/their own function", " in office");
  t = rep(t, " resigns/gives up about", " renounces/waives");
  t = rep(t, " resigned/gave up about", " renounced/waived");
  t = rplUL(t, " resign/give up about", " renounce/waive");
  t = rep(t, " resigning/giving up about", " renouncing/waiving");
  t = rplUL(t, " resigningly/givingly up about", " renouncing/waiving");
  t = rep(t, " gets erection", " gets an erection");
  t = rep(t, " got erection", " got an erection");
  t = rplUL(t, " get erection", " get an erection");
  t = rep(t, " getting erection", " getting an erection");
  t = rplUL(t, " gettingly erection", " getting an erection");
  t = rep(t, " an erections", " erections");
  t = rep(t, " looks at fixedly", " stares at");
  t = rplUL(t, " looked at fixedly", " stared at");
  t = rplUL(t, " look at fixedly", " stare at");
  t = rep(t, " looking at fixedly", " staring at");
  t = rplUL(t, " spectatorly fixedly to", " staring at");
  rgx = " look(s|ed|ing)?(ly)?(erly)?( at)( .*)? like/(as|how)";
  t = regex_replace(t, rgx, " consider$1$2$3$5 as");
  rgx = " Look(s|ed|ing)?(ly)?(erly)?( at)( .*)? like/(as|how)";
  t = regex_replace(t, rgx, " Consider$1$2$3$5 as");
  t = rplUL(t, " looked at like/how", " considered");
  t = verbChange(t, "look at underneath/downstairs", "look down");
  t = verbChange(t, "look at up", "look up");
  t = verbChange(t, "look at down", "look down");
  t = verbChange(t, "look at upstairs/above", "look up");
  t = rplUL(t, " look at like/how", " consider");
  t = rep(t, " looking at like/how", " considering");
  t = rplUL(t, " lookingly at like/how", " considering");
  rgx = " (l|L)ook(s|ed|ing)?(ly)?(erly)?( at) (down|up)";
  t = regex_replace(t, rgx, " $1ook$2 $5");
  t = rplUL(t, " relationly to", " concerning");
  t = rplUL(t, " scolding/blame notices/observations", " scolding remarks");
  t = rplUL(t, " scolding/blame notice/observation", " scolding remark");
  t = rplUL(t, " ritual self-washing", " ablution");
  t = rplUL(t, " salty water", " salt water");
  t = rep(t, " greets militarily", " salutes");
  t = rplUL(t, " greeted militarily", " saluted");
  t = rplUL(t, " greet militarily", " salute");
  t = rep(t, " greeting militarily", " saluting");
  t = rplUL(t, " greetingly militarily", " saluting");
  t = rplUL(t, " making safing/secure officers/officials", " security officers");
  t = rplUL(t, " making safing/secure officer/official", " security officer");
  t = rplUL(t, " making safing/secure", " security");
  t = rplUL(t, " so/consequently of", " as a result of");
  t = rplUL(t, " safe pin", " safety-pin");
  rgx = " excus(e|es|ed|ing)(ly)?(erly)? himself/herself/itself/themselves";
  t = regex_replace(t, rgx, " apologiz$1");
  rgx = " Excus(e|es|ed|ing)(ly)?(erly)? himself/herself/itself/themselves";
  t = regex_replace(t, rgx, " Apologiz$1");
  t = rplUL(t, " anonymous share", " bearer share");
  t = rplUL(t, " salty-less water", " fresh water");
  t = rplUL(t, " shelled/peeled rice", " husked rice");
  t = rep(t, " senses/feels nausea", " feels nauseated");
  t = rep(t, " sensed/felt nausea", " felt nauseated");
  t = rplUL(t, " sense/feel nausea", " feel nauseated");
  t = rep(t, " sensing/feeling nausea", " feeling nauseated");
  t = rplUL(t, " sensingly/feelingly nausea", " feeling nauseated");
  t = rep(t, " suffering one because of", " suffering because of");
  t = rep(t, " suffering ones because of", " suffering because of");
  t = rplUL(t, " malicious/mischievously clever/tricky", " maliciously tricky");
  t = rplUL(t, " bar/pub stool", " barstool");
  t = rplUL(t, " this night", " tonight");
  t = rplUL(t, " that isn't important", " never mind");
  t = rplUL(t, " a lot of one", " a lot");
  t = rplUL(t, " many ones", " many");
  t = rplUL(t, " too a lot of ", " too much ");
  t = rplUL(t, " completely not ", " not at all ");
  rgx = " completely no([.,?!;:)])";
  t = regex_replace(t, rgx, " not at all$1");
  rgx = " Completely no([.,?!;:)])";
  t = regex_replace(t, rgx, " Not at all$1");
  t = rplUL(t, " completely dead", " stone-dead");
  rgx = " (r|R)eject(s|ed|ing)?(ly)?(erly)? voting";
  t = regex_replace(t, rgx, " $1eject$2 by voting");
  t = rplUL(t, " rejected voting", " rejected by voting");
  t = rplUL(t, " back lamp", " tail-light");
  t = rplUL(t, " firing/laying off arrangement", " unemployment check");
  t = rplUL(t, " old man home", " old people's home");
  t = rplUL(t, " forbidden out-from-going-time", " curfew");
  t = rplUL(t, " downstairs/bottom side", " bottom");
  t = rplUL(t, " downstairs/bottom neighbor", " downstairs neighbor");
  t = rplUL(t, " palm continuing to hit/knock", " applause");
  t = rplUL(t, " sailor blue", " navy blue");
  t = rplUL(t, " sailorly blue", " navy-blue");
  t = rplUL(t, " managing/keeping house system", " operating system");
  t = rplUL(t, " mental after/behind-left/remainingnesses",
	" mental retardations");
  t = rplUL(t, " mental after/behind-left/remainingness", " mental retardation");
  t = rplUL(t, " mentally left-behind", " mentally retarded");
  t = rplUL(t, " military in the evening-concert", " playing of tattoo");
  t = rplUL(t, " me himself/herself/itself/themselves", " me myself");
  t = rplUL(t, " us himself/herself/itself/themselves", " us ourselves");
  t = rplUL(t, " him himself/herself/itself/themselves", " him himself");
  t = rplUL(t, " her himself/herself/itself/themselves", " her herself");
  t = rplUL(t, " them himself/herself/itself/themselves", " them themselves");
  t = rplUL(t, " one himself/herself/itself/themselves", " one oneself");
  t = rplUL(t, " threatening frightening", " intimidation");
  t = rplUL(t, " mine-fenced off/bounded terrains/grounds", " minefields");
  t = rplUL(t, " mine-fenced off/bounded terrain/ground", " minefield");
  t = rplUL(t, " mine-seed", " mine-layer");
  t = rplUL(t, " salaries/wageses", " salaries/wages");
  t = rplUL(t, " lousy/miserable salaries/wages", " starvation wages");
  t = rplUL(t, " lousy/miserable salary/wages", " starvation wages");
  t = rplUL(t, " slightly coin money", " change");
  t = rplUL(t, " mountain chain air", " mountain air");
  t = rplUL(t, " showing pronoun", " demonstrative pronoun");
  t = rplUL(t, " assembled photograph", " photomontage");
  t = rplUL(t, " mustard sauces/gravies", " mustards");
  t = rplUL(t, " mustard sauce/gravy", " mustard");
  t = rplUL(t, " musical presentation-thing", " musical performance");
  t = rep(t, " musical joint-stock company", " music club");
  t = rep(t, " musical joint-stock companies", " music clubs");
  t = rep(t, " Musical joint-stock company", " Music club");
  t = rep(t, " Musical joint-stock companies", " Music clubs");
  rgx = " (p|P)(ays|aid|aying)(ly)?(erly)? the first part(s)?";
  t = regex_replace(t, rgx, " $1$2 the down payment$4");
  t = rep(t, " Paid the first parts", " With the down payments paid");
  t = rplUL(t, " pay the first part", " pay the down payment");
  t = rep(t, " Paid the first part", " With the down payment paid");
  rgx = " (p|P)(ay|ays|aid|aying)(ly)?(erly)? partially";
  t = regex_replace(t, rgx, " $1$2 on account");
  t = rep(t, " touches/feels looking for", " gropes");
  t = rep(t, " touched/felt looking for", " groped");
  t = rplUL(t, " touch/feel looking for", " grope");
  t = rep(t, " touching/feeling looking for", " groping");
  t = rplUL(t, " touchingly/feelingly looking for", " groping");
  t = rep(t, " speaks senselessly", " babbles");
  t = rep(t, " spoke senselessly", " babbled");
  t = rep(t, " Senselessly spoken", " Babbled");
  t = rplUL(t, " speak senselessly", " babble");
  t = rep(t, " speaking senselessly", " babbling");
  t = rplUL(t, " speakingly senselessly", " babbling");
  rgx = " participat(e|es|ed|ing)(ly)?(erly)? feelings?/sensations?";
  t = regex_replace(t, rgx, " sympathiz($1)");
  t = rep(t, " passes near-touchly", " skims");
  t = rep(t, " passed near-touchly", " skimmed");
  t = rplUL(t, " pass near-touchly", " skim");
  t = rep(t, " passing near-touchly", " skimming");
  t = rplUL(t, " passingly near-touchly", " skimming");
  t = rplUL(t, " pickled meat", " salted meat");
  t = rep(t, " chases/impels kickly", " kicks");
  t = rep(t, " chased/impelled kickly", " kicked");
  t = rplUL(t, " chase/impel kickly", " kick");
  t = rep(t, " chasing/impelling kickly", " kicking");
  t = rplUL(t, " chasingly/impellingly kickly", " kicking");
  t = rep(t, " repents about", " regrets");
  t = rep(t, " repented about", " regretted");
  t = rplUL(t, " repent about", " regret");
  t = rep(t, " repenting about", " regretting");
  t = rplUL(t, " repentingly about", " regretting");
  t = rplUL(t, " periodic/periodical periodical", " periodical");
  t = rep(t, " with-needle job/work", " needlework");
  t = rep(t, " with-needle jobs/works", " needlework");
  t = rep(t, " With-needle job/work", " Needlework");
  t = rep(t, " With-needle jobs/works", " Needlework");
  t = rplUL(t, " division around from ", " dividing up of ");
  t = rplUL(t, " division around", " dividing up");
  t = rplUL(t, " orderlily-less", " disorderly");
  t = rplUL(t, " potato mush/mess", " mashed potatoes");
  t = rep(t, " Earthling axle/axis", " Earth's axis");
  t = rplUL(t, " so/therefore that", " because");
  t = rplUL(t, " there and there", " here and there");
  t = rplUL(t, " so much like/how", " as much as");
  t = rep(t, " it as/that way should be", " amen");
  t = rep(t, " it As/that way should be", " Amen");
  rgx = " suffer(s|ed|ing)?(ly)?(erly)? (because)? of";
  t = regex_replace(t, rgx, " suffer$1 from");
  t = rep(t, " most fine/great", " best of all");
  t = rep(t, " most external/outside", " outer");
  t = rep(t, " most important/serious", " most important");
  t = rplUL(t, " most important/seriously", " most importantly");
  t = rep(t, " most later/latter", " last");
  t = rep(t, " more nearby", " nearer");
  t = rep(t, " most nearby", " nearest");
  t = rep(t, " most upper", " uppermost");
  t = rep(t, " most lower", " lowermost");
  t = rplUL(t, " completely-air barbecue", " outdoor barbecue");
  rgx = " more (new|old|young|small|slow|low)";
  t = regex_replace(t, rgx, " $1er");
  rgx = " most (new|old|young|small|slow|low)";
  t = regex_replace(t, rgx, " $1est");
  t = rplUL(t, " more late", " later on");
  t = rep(t, " more good", " better");
  t = rep(t, " more well", " better");
  t = rep(t, " more badly", " worse");
  t = rep(t, " more bad", " worse");
  t = rep(t, " more large", " bigger");
  t = rep(t, " more big", " bigger");
  t = rep(t, " more little", " smaller");
  t = rep(t, " more fast/quickly", " faster");
  t = rep(t, " more slowly", " slower");
  t = rep(t, " More old", " Older");
  t = rep(t, " More good", " Better");
  t = rep(t, " More well", " Better");
  t = rep(t, " More badly", " Worse");
  t = rep(t, " More bad", " Worse");
  t = rep(t, " More large", " Bigger");
  t = rep(t, " More big", " Bigger");
  t = rep(t, " More small", " Smaller");
  t = rep(t, " More little", " Smaller");
  t = rep(t, " More fast/quickly", " Faster");
  t = rep(t, " More slowly", " Slower");
  t = rep(t, " More slow", " Slower");
  t = rep(t, " most good", " best");
  t = rep(t, " most well", " best");
  t = rep(t, " most badly", " worst");
  t = rep(t, " most bad", " worst");
  t = rep(t, " most large", " biggest");
  t = rep(t, " most big", " biggest");
  t = rep(t, " most little", " smallest");
  t = rep(t, " most fast/quickly", " fastest");
  t = rep(t, " most slowly", " slowest");
  t = rep(t, " Most old", " Oldest");
  t = rep(t, " Most good", " Best");
  t = rep(t, " Most well", " Best");
  t = rep(t, " Most badly", " Worst");
  t = rep(t, " Most bad", " Worst");
  t = rep(t, " Most large", " Biggest");
  t = rep(t, " Most big", " Biggest");
  t = rep(t, " Most small", " Smallest");
  t = rep(t, " Most little", " Smallest");
  t = rep(t, " Most fast/quickly", " Fastest");
  t = rep(t, " Most slowly", " Slowest");
  t = rep(t, " Most slow", " Slowest");
  t = rplUL(t, " more distantly", " farther");
  t = rplUL(t, " more distant", " farther");
  t = rplUL(t, " more far away/remotely than", " beyond");
  t = rplUL(t, " more far away/remotely", " farther");
  t = rplUL(t, " most far away/remotely", " farthest");
  return t;
}

static string korrections6(string t) {
  // Corrections and adjustments for phrases, part 6:
  t = rplUL(t, " more willingly", " preferably");
  t = rplUL(t, " several-layer wood", " plywood");
  t = rplUL(t, " for as/that way to say", " so to speak");
  t = rplUL(t, " for-eating utensils washing machine", " dishwasher machine");
  t = rplUL(t, " piece of clothings", " pieces of clothing");
  t = rplUL(t, " piece of furnitures", " pieces of furniture");
  t = rplUL(t, " for-in the evening pieces of clothing", " evening clothes");
  t = rplUL(t, " for-in the evening piece of clothing", " evening clothes");
  t = rplUL(t, " after/behind when", " after");
  t = rplUL(t, " after/behind the flats/piece of stage sceneries",
	" behind the scenes");
  t = rplUL(t, " after/behind briefly", " soon");
  t = rplUL(t, " later/latter meditation", " commentary");
  t = rplUL(t, " former stem/stern", " stem");
  t = rplUL(t, " former stems/sterns", " stems");
  t = rplUL(t, " later/latter stem/stern", " stern");
  t = rplUL(t, " later/latter stems/sterns", " sterns");
  t = rep(t, " after/behind-dead world", " hereafter");
  t = rplUL(t, " after/behind-operation treatment", " after-treatment/follow-up");
  t = rplUL(t, " afterring/behind-", " post-");
  t = rplUL(t, " post-shaving ointment", " aftershave");
  t = rplUL(t, " remaining/staying behind position", " arrears");
  t = rep(t, " completely-does/makes", " handles");
  t = rep(t, " completely-did/made", " handled");
  t = rplUL(t, " completely-done/made", " handled");
  t = rplUL(t, " completely-do/make", " handle");
  t = rep(t, " completely-doing/making", " handling");
  t = rplUL(t, " completely-doingly/makingly", " handling");
  t = rep(t, " picks up judgmently", " seizes");
  t = rep(t, " picked up judgmently", " seized");
  t = rplUL(t, " pick up judgmently", " seize");
  t = rep(t, " picking up judgmently", " seizing");
  t = rplUL(t, " pickingly up judgmently", " seizing");
  t = rplUL(t, " finished/ready-partially", " prefabricated");
  t = rplUL(t, " presented clearly", " clear/graphic");
  t = rep(t, " departurely", " out");
  t = rplUL(t, " priority road", " major road");
  t = rep(t, "rctican", "rctic");
  t = rep(t, "rctician", "rctic");
  t = rep(t, " Bahrainian", " Bahraini");
  t = rep(t, " Barbadosian", " Barbadian");
  t = rep(t, " Berlinian", " Berliner");
  t = rep(t, "one-to one", "one-to-one");
  t = rplUL(t, " beingo", " bingo");
  t = rep(t, " Byzantiumian", " Byzantine");
  t = rep(t, " Brabantian", " Brabantine");
  t = rep(t, " Britian", " British");
  t = rep(t, " Britainian", " Brit");
  t = rep(t, "iian", "ian");
  t = rep(t, " Bhutanian", " Bhutanese");
  t = rep(t, " Ceylonian", " Ceylonese");
  t = rep(t, " Celsiusian", " Celsius");
  t = rep(t, " Cyprusian", " Cypriot");
  t = rep(t, " Chinan", " Chinese");
  t = rep(t, " God/a godian", " divine");
  t = rep(t, " Godian", " divine");
  t = rep(t, " Dominican Republician", " Dominican");
  t = rep(t, " El Salvadorian", " Salvadorian");
  t = rep(t, " Euclidian", " Euclidean");
  t = rep(t, " Philippinean woman", " Filipina woman");
  t = rep(t, " Philippinean women", " Filipina women");
  t = rep(t, " Philippinean", " Filipino");
  t = rep(t, " Greenlandian", " Greenlander");
  t = rep(t, " The Haguean", " Haguian");
  t = rep(t, " a hallelujah one", " hallelujah");
  t = rep(t, " a hurray one", " hurray");
  t = rplUL(t, " across-carriesing/wearing-meansessing/resources", " means of transportation");
  t = rplUL(t, " across-carrying/wearing-meansing/resource", " means of transportation");
  t = rplUL(t, " across-carriesing/wearing-systems", " transportation systems");
  t = rplUL(t, " across-carrying/wearing-system", " transportation system");
  t = rep(t, " Helenian", " Hellenic");
  t = rep(t, " Hollandian female", " Dutch female");
  t = rep(t, " Hollandians", " Dutch people");
  t = rep(t, " Hollandian", " Dutchman/Hollander");
  t = rep(t, " Netherlandsian female", " Dutch female");
  t = rep(t, " Netherlandsians", " Dutch people");
  t = rep(t, " Netherlandsian", " Dutchman/Hollander");
  t = rep(t, " Hondurasian", " Honduran");
  t = rep(t, " Vietnamian", " Vietnamese");
  t = rep(t, " going to wish", " voluntary/willing");
  t = rep(t, "Zealandian", "Zealander");
  t = rplF(t, "new-", "New ");
  t = rep(t, " Irelandian female", " Irish female");
  t = rep(t, " Irelandians", " Irish people");
  t = rep(t, " Irelandian", " Irishman/Irish");
  t = rep(t, " Israelian", " Israeli");
  t = rep(t, " Icelandian", " Icelander");
  t = rep(t, " Iraqian", " Iraqi");
  t = rep(t, " Javan", " Javanese");
  t = rep(t, " Yemenian", " Yemeni");
  t = rep(t, " Yiddishian", " Yiddish");
  t = rep(t, " Romean", " Roman");
  t = rep(t, " Roman Empirean", " Roman");
  t = rep(t, " Rhinelandian", " Rhinelander");
  t = rep(t, " Viennan", " Viennese");
  t = rep(t, " Venicean", " Venetian");
  t = rep(t, " the Transvaalian", " Transvaalian");
  t = rplUL(t, " chalk/Cretean", " Cretan");
  t = rplUL(t, " chalks/Cretean", " Cretan");
  t = rep(t, " Carthagean", " Carthaginian");
  t = rep(t, " Descartesian", " Cartesian");
  t = rep(t, " Confuciusian", " Confucian");
  t = rep(t, " Congan", " Congolese");
  t = rep(t, " Christianness", " Christianity");
  t = rep(t, " Cruxian", " cross-shaped");
  t = rep(t, " Laosian", " Laotian");
  t = rep(t, " Levantian", " Levantine");
  t = rep(t, " Lebanonian", " Lebanese");
  t = rep(t, " Liechtensteinian", " Liechtensteiner");
  t = rep(t, " Luxembourgian", " Luxemburger");
  t = rep(t, " Madagascarian", " Madagascan");
  t = rep(t, " Mohammedian", " Muslim");
  t = rep(t, " Maldive Islandian", " Maldive Islander");
  t = rplUL(t, " malts/Maltans", " Maltese people");
  t = rplUL(t, " malt/Maltan", " Maltese");
  t = rep(t, " Marsian", " Martian");
  t = rep(t, " Mediterraneanian", " Mediterranean");
  t = rplUL(t, " monk/Monacan", " Monegasque");
  t = rep(t, " Montenegran", " Montenegrin");
  t = rep(t, " Morsean", " Morse-code");
  t = rep(t, " Moscowian", " Muscovite");
  t = rep(t, " Mozambiquean", " Mozambican");
  t = rep(t, " Naplesian", " Neapolitan");
  t = rep(t, " Nepalian", " Nepalese");
  t = rep(t, " Nurembergian", " Nuremberger");
  t = rep(t, " Year'sian", " Year's");
  t = rep(t, " Year's a party", " Year's party");
  t = rep(t, " Year's a day", " Year's Day");
  t = rep(t, " Year's an evening", " Year's Eve");
  t = rep(t, " Palestinean", " Palestinian");
  t = rep(t, " Peruian", " Peruvian");
  t = rep(t, " Pyreneean", " Pyrenean");
  t = rep(t, " Polandians", " Polish people");
  t = rep(t, " Polandian", " Pole/Polish");
  t = rep(t, " Pythagorasian", " Pythagorean");
  t = rep(t, " Satanian", " Satanic");
  t = rep(t, " Saudi Arabian", " Saudi");
  t = rep(t, " siam/Thailandian", " siamese");
  t = rep(t, " Sudanian", " Sudanese");
  t = rep(t, " Surinamian", " Surinamese");
  t = rep(t, " Thailandian", " Thai");
  t = rep(t, " Taiwanian", " Taiwanese");
  t = rep(t, " Texasian", " Texan");
  t = rep(t, " Earthian", " Earthling");
  t = rep(t, " Tibetian", " Tibetan");
  t = rep(t, " Titanian", " titanic");
  t = rep(t, " Togo/togas", " togas");
  t = rep(t, " Tuscanian", " Tuscan");
  t = rep(t, " Dutchman/Hollander language", " Dutch language");
  t = rep(t, " An A ", " A ");
  t = rep(t, " of some", " of/by some");
  t = rep(t, " a he ", " he a ");
  t = rep(t, " a she ", " she a ");
  t = rep(t, " a they ", " they a ");
  t = rep(t, " a it ", " it a ");
  t = rep(t, " a you ", " you a ");
  t = rep(t, " an I ", " I a ");
  t = rep(t, " a we ", " we a ");
  t = rep(t, "God/a God", "God/a god");
  t = rep(t, " supplies with a small layer", " coats");
  t = rplUL(t, " supplied with a small layer", " coated");
  t = rplUL(t, " supply with a small layer", " coat");
  t = rep(t, " supplying with a small layer", " coating");
  t = rplUL(t, " supplyingly with a small layer", " coating");
  t = rplUL(t, " because of what", " why");
  t = rplUL(t, " because of that that", " for the reason that");
  t = rplUL(t, " nearby to", " close to");
  t = rplUL(t, " nearby of", " near");
  t = rplUL(t, " approximate calculation/computation", " approximation");
  t = rplUL(t, " proportionally with", " proportional to");
  t = rep(t, " supplies himself/herself/itself/themselves on/in", " stores");
  t = rep(t, " supplied himself/herself/itself/themselves on/in", " stored");
  t = rplUL(t, " supply himself/herself/itself/themselves on/in", " store");
  t = rep(t, " supplying himself/herself/itself/themselves on/in", " storing");
  t = rplUL(t, " supplyingly himself/herself/itself/themselves on/in", " storing");
  t = rep(t, " supplies himself/herself/itself/themselves with", " gets");
  t = rep(t, " supplied himself/herself/itself/themselves with", " got");
  t = rplUL(t, " supply himself/herself/itself/themselves with", " get");
  t = rep(t, " supplying himself/herself/itself/themselves with", " getting");
  t = rplUL(t, " supplyingly himself/herself/itself/themselves with", " getting");
  rgx = " (s|S)uppl(y|ies|ied|ying)(ly)?(erly)?( \\.+)? on/in";
  t = regex_replace(t, rgx, " $1uppl$2$4 with");
  rgx = " borrow(s|ed|ing|ingly)/(lend|lends|lent|lending)(ly)?(erly)? to ";
  t = regex_replace(t, rgx, " $1 to ");
  rgx = " borrow(s|ed|ing|ingly)/(lend|lends|lent|lending)(ly)?(erly)? (of|from) ";
  t = regex_replace(t, rgx, " $1 from ");
  t = rplUL(t, " borrow/lend to ", " lend to ");
  t = rplUL(t, " borrow/lend of ", " borrow from ");
  t = rplUL(t, " borrow/lend from", " borrow from");
  t = rplUL(t, " from/from", " from");
  t = rplUL(t, " pulverized milk", " powdered milk");
  t = rep(t, " punishes strikingly", " chastises/punishes");
  t = rep(t, " punished strikingly", " chastised/punished");
  t = rep(t, " Punished strikingly", " Chastised");
  t = rplUL(t, " punish strikingly", " chastise/punish");
  t = rep(t, " punishing strikingly", " chastising/punishing");
  t = rplUL(t, " punishingly strikingly", " chastising/punishing");
  t = rep(t, " cleans the nose", " blows his/her/its/their own nose");
  t = rep(t, " cleaned the nose", " blew his/her/its/their own nose");
  t = rplUL(t, " clean the nose", " blow his/her/its/their own nose");
  t = rep(t, " cleaning the nose", " blowing his/her/its/their own nose");
  t = rplUL(t, " cleaningly the nose", " blowing his/her/its/their own nose");
  t = rep(t, " senses/feels himself/herself/itself/themselves", " feels");
  t = rep(t, " sensed/felt himself/herself/itself/themselves", " felt");
  t = rplUL(t, " sense/feel himself/herself/itself/themselves", " feel");
  t = rep(t, " sensing/feeling himself/herself/itself/themselves", " feeling");
  t = rplUL(t, " sensingly/feelingly himself/herself/itself/themselves",
	" feeling");
  t = rep(t, " looks for contact", " strikes up an acquaintance");
  t = rep(t, " looked for contact", " struck up an acquaintance");
  t = rplUL(t, " look for contact", " strike up an acquaintance");
  t = rep(t, " looking for contact", " striking up an acquaintance");
  t = rplUL(t, " lookingly for contact", " striking up an acquaintance");
  t = rplUL(t, " service money", " service charge");
  t = rplUL(t, " service monies", " service charges");
  rgx = " s(its|it|itting)(ly)?(erly)? (okay|well)";
  t = regex_replace(t, rgx, " f$1");
  t = rep(t, " sat okay", " fit");
  t = rep(t, " resembl(e|es|ing)(ly)?(erly)? in character", " tak$1 after");
  t = rep(t, " resembled in character", " took after");
  t = rplUL(t, " written command/order", " writ/warrant");
  t = rplUL(t, " alone/only agent", " sole agent");
  t = rplUL(t, " alone/only cell", " single cell");
  t = rplUL(t, " immediately when", " as soon as");
  t = rplUL(t, " drinkable water", " drinking-water");
  t = rplUL(t, " three-finger sloth", " three-toed sloth");
  t = rplUL(t, " bull-battle arena", " bullring");
  t = rplUL(t, " lower current/flow", " lower course");
  t = rplUL(t, " lower neighbor", " downstairs neighbor");
  t = rplUL(t, " there and back", " back and forth");
  t = rep(t, " strikingly said", " to the point");
  t = rep(t, " strikingly reacting/responding", " to the point");
  t = rplUL(t, " index/array-bill/calculation program", " spreadsheet program");
  t = rplUL(t, " absorbent paper", " blotting paper");
  t = rplUL(t, " soldier bottle", " canteen");
  t = rep(t, " stamp(s|ed|ing)(ly)?(erly)? coins", " mint$1 money");
  t = rep(t, " Stamp coins", " Mint money");
  t = rplUL(t, " stamping coins", " minting money");
  t = rplUL(t, " stampingly coins", " minting money");
  t = rplUL(t, " stomach juice", " gastric juice");
  t = rep(t, " subdues/subjugates himself/herself/itself/themselves",
	" submits");
  t = rep(t, " subdued/subjugated himself/herself/itself/themselves",
	" submitted");
  t = rplUL(t, " subdue/subjugate himself/herself/itself/themselves",
	" submit");
  t = rep(t, " subduing/subjugating himself/herself/itself/themselves",
	" submitting");
  t = rplUL(t, " subduingly/subjugatingly himself/herself/itself/themselves",
	" submitting");
  rgx = " (a|A)mount(s|ed|ing)?(ly)?(erly)? on/in";
  t = regex_replace(t, rgx, " $1mount$2 to");
  t = rplUL(t, " above/over-altar paintings/pictures", " altarpieces");
  t = rplUL(t, " above/over-altar painting/picture", " altarpiece");
  t = rplUL(t, " upstairs/above mentioned", " above-mentioned");
  t = rplUL(t, " upstairs/above called", " above-mentioned");
  t = rplUL(t, " upstairs/above on", " on top of");
  t = rplUL(t, " on-constructed", " built-up");
  t = rplUL(t, " make fainting/passing out hemlock",
	" hemlock to cause unconsciousness");
  t = rplUL(t, " board edge/shore-cover", " campshedding");
  t = rplUL(t, " text-process", " text-processing");
  t = rep(t, " matter of about", " matter of");
  t = rplUL(t, " time in order to think about", " time to consider");
  rgx = " hold(s|ing)?(ly)?(erly)?/keep(s|ing)?(ly)?(erly)? burning";
  t = regex_replace(t, rgx, " keep$3 burning");
  rgx = " Hold(s|ing)?(ly)?(erly)?/keep(s|ing)?(ly)?(erly)? burning";
  t = regex_replace(t, rgx, " Keep$3 burning");
  t = rplUL(t, " held/kept burning", " kept burning");
  rgx = " (p|P)otatoeshelling/peeling kni(fe|ve)(s)?";
  t = regex_replace(t, rgx, " $1otato-peeler$3");
  t = rplUL(t, " track-level passageway", " level-crossing");
  rgx = " (t|T)reat(s|ing)?(ly)?(erly)?/deal(s|ing)?(ly)?(erly)? with( \\.+) like/how";
  t = regex_replace(t, rgx, " $1reat$2$6 as");
  t = rplUL(t, " treated/dealt with like/how", " treated as");
  rgx = " (t|T)reat(s|ing)?(ly)?(erly)?/deal(s|ing)?(ly)?(erly)? with( \\.+) badly";
  t = regex_replace(t, rgx,
	" $1reat$2$6 abusively");
  t = rplUL(t, " treated/dealt with badly", " treated abusively");
  t = rep(t, " treats/deals with with a radiation", " radiates");
  t = rplUL(t, " treated/dealt with with a radiation", " radiated");
  t = rplUL(t, " treat/deal with with a radiation", " radiate");
  t = rep(t, " treating/dealing with with a radiation", " radiating");
  t = rplUL(t, " treatingly/dealingly with with a radiation", " radiating");
  t = rep(t, " finds himself/herself/itself/themselves", " is located");
  t = rep(t, " found himself/herself/itself/themselves", " was located");
  t = rep(t, " find himself/herself/itself/themselves", " be located");
  t = rep(t, " finding himself/herself/itself/themselves", " being located");
  t = rplUL(t, " findingly himself/herself/itself/themselves", " located");
  rgx = " (t|T)urn(s|ed|ing)?(ly)?(erly)? as well-burdensomely";
  t = regex_replace(t, rgx, " $1ighten$2");
  rgx = " (t|T)urn(s|ed|ing)?(ly)?(erly)? himself/herself/itself/themselves";
  t = regex_replace(t, rgx, " $1urn$2 around");
  t = rplUL(t, " according-to-measurement", " fitting");
  t = rplUL(t, " original-less", " unoriginal");
  rgx = " (t|T)hread(s|ed|ing)?(ly)?(erly)? thread";
  t = regex_replace(t, rgx, " $1hread$2 a needle");
  t = rep(t, " abscissa axle/axis", " x-axis");
  t = rep(t, " abscissa axles/axes", " x-axes");
  t = rep(t, " ordinate axle/axis", " y-axis");
  t = rep(t, " ordinate axles/axes", " y-axes");
  t = rplUL(t, " if and only then ", " if and only if ");
  t = rplUL(t, " current/up-to-date infinity", " actual infinity");
  t = rplUL(t, " to in ", " into ");
  t = rplUL(t, " the ebb and the flowing away", " the flow");
  t = rplUL(t, " an ebb and a flowing away", " a flow");
  t = rplUL(t, " crowd/mass-destruction weapon", " weapon of mass destruction");
  t = rplUL(t, " two-direction channels/canals", " circuits");
  t = rplUL(t, " two-direction channel/canal", " circuit");
  t = rep(t, " Before/ago briefly", " A little while ago");
  t = rplUL(t, " before-going space", " leading space");
  t = rplUL(t, " tail space", " trailing space");
  t = rplUL(t, " applying software", " application software");
  t = rplUL(t, " applying program", " application program");
  t = rplUL(t, " arithmetic average", " arithmetic average/mean");
  t = rplUL(t, " armed concrete", " reinforced concrete");
  t = rplUL(t, " group/set of all subsets", " set of all subsets/power set");
  t = rplUL(t, " artificial intellect", " artificial intelligence");
  t = rplUL(t, " articulating/utterring points/dots/periods",
	" articulation points");
  t = rplUL(t, " articulating/utterring point/dot/period", " articulation point");
  t = rplUL(t, " articulating points/dots/periods", " articulation points");
  t = rplUL(t, " articulating point/dot/period", " articulation point");
  t = rplUL(t, " assembling language", " assembler language");
  t = rplUL(t, " thick/fat intestine", " large intestine");
  t = rplUL(t, " thin intestine", " small intestine");
  t = rplUL(t, " small chimpanzee", " dwarf chimpanzee");
  t = rplUL(t, " shame to you", " shame on you");
  t = rplUL(t, " male genders/genuses", " masculine genders");
  t = rplUL(t, " male gender/genus", " masculine gender");
  t = rplUL(t, " female genders/genuses", " feminine genders");
  t = rplUL(t, " female gender/genus", " feminine gender");
  t = rplUL(t, " ransoming/redeeming moneys", " ransom moneys");
  t = rplUL(t, " ransoming/redeeming money", " ransom money");
  t = rplUL(t, " integer/integral part", " integer parts");
  t = rplUL(t, " integer/integral part", " integer part");
  t = rplUL(t, " academic area", " campus");
  t = rep(t, " suddenly is familiar with", " gets to know");
  t = rep(t, " suddenly are familiar with", " get to know");
  t = rep(t, " suddenly am familiar with", " get to know");
  t = rep(t, " suddenly was familiar with", " got to know");
  t = rep(t, " suddenly were familiar with", " got to know");
  t = rep(t, " suddenly to be familiar with", " to get to know");
  t = rplUL(t, " suddenly be familiar with", " get to know");
  t = rep(t, " suddenly being familiar with", " getting to know");
  t = rplUL(t, " suddenly beingly familiar with", " getting to know");
  t = rep(t, " starts to be familiar with", " gets to know");
  t = rep(t, " started to be familiar with", " got to know");
  t = rplUL(t, " start to be familiar with", " get to know");
  t = rep(t, " starting to be familiar with", " getting to know");
  t = rplUL(t, " startingly to be familiar with", " getting to know");
  t = rplUL(t, " base/basis of natural logarithms", " base of natural logarithms");
  t = rep(t, " blank/white blood cell", " white blood cell");
  t = rep(t, " Blank/white blood cell", " white blood cell");
  t = rplUL(t, " blank/white bear", " polar bear");
  t = rplUL(t, " cow/bovine spongy encephalopathy",
	" BSE/Bovine Spongiform Encephalopathy");
  t = rplUL(t, " circulation/traffic of drugs", " drug trafficking");
  t = rplUL(t, " chain fraction", " continued fraction");
  t = rplUL(t, " lasting plant", " perennial plant");
  t = rep(t, " remote steering", " remote control");
  t = rplUL(t, " decimal logarithm", " common logarithm");
  rgx = " take(s|ing)?(ly)?(erly)? off a file system";
  t = regex_replace(t, rgx, " remove$1 a file system");
  rgx = " Take(s|ing)?(ly)?(erly)? off a file system";
  t = regex_replace(t, rgx, " Remove$1 a file system");
  t = rep(t, " took off a file system", " removed a file system");
  t = rplUL(t, " differential bill/calculation", " differential calculus");
  t = rplUL(t, " dynamically bindable library", " DLL/dynamic link library ");
  t = rplUL(t, " dividing conjunction", " disjunctive conjunction");
  t = rplUL(t, " distribution function", " distribution function/probability");
  t = rep(t, " showers himself/herself/itself/themselves", " takes a shower");
  t = rep(t, " showered himself/herself/itself/themselves", " took a shower");
  t = rplUL(t, " shower himself/herself/itself/themselves", " take a shower");
  t = rep(t, " showering himself/herself/itself/themselves",
	" taking a shower");
  t = rplUL(t, " showeringly himself/herself/itself/themselves",
	" taking a shower");
  t = rplUL(t, " binary fraction", " dyadic fraction");
  t = rplUL(t, " echolocator ", " sonar");
  t = rep(t, " out-from-makes to stack data", " pops");
  t = rep(t, " out-from-made to stack data", " popped");
  t = rplUL(t, " out-from-make to stack data", " pop");
  t = rep(t, " out-from-making to stack data", " popping");
  t = rplUL(t, " out-from-makingly to stack data", " popping");
  t = rep(t, " out-from-arranges to have stacked data", " pops");
  t = rep(t, " out-from-arranged to have stacked data", " popped");
  t = rplUL(t, " out-from-arrange to have stacked data", " pop");
  t = rep(t, " out-from-arranging to have stacked data", " popping");
  t = rplUL(t, " out-from-arrangingly to have stacked data", " popping");
  t = rplUL(t, " in the middle/average/mean of", " in the middle of");
  t = rplUL(t, " closed roads/ways", " closed loops");
  t = rplUL(t, " closed road", " closed loop");
  t = rplUL(t, " fixed dots/periods/points", " fixed points");
  t = rplUL(t, " fixed dot/period/point", " fixed point");
  t = rep(t, " Also itq ", " Also there ");
  t = rplUL(t, " non-debatable/questionable", " unchallengeable");
  t = rep(t, " attached/fastened/fixed disks/dials/records", " hard drives");
  t = rep(t, " Attached/fastened/fixed disks/dials/records", " hard drives");
  t = rep(t, " attached/fastened/fixed disk/dial/record", " hard drive");
  t = rep(t, " Attached/fastened/fixed disk/dial/record", " hard drive");
  t = rplUL(t, " source/spring groups/sets", " domains");
  t = rplUL(t, " source/spring group/set", " domain");
  t = rplUL(t, " distant terminal", " remote terminal");
  t = rplUL(t, " distant user", " remote user");
  t = rplUL(t, " photographing apparatuses/appliances", " cameras");
  t = rplUL(t, " photographing apparatus/appliance", " camera");
  t = rplUL(t, " fraction part", " fractional parts");
  t = rplUL(t, " fraction part", " fractional part");
  t = rplUL(t, " opposite to", " facing");
  t = rplUL(t, " geometric figures/diagrams/representations", " geometric shapes");
  t = rplUL(t, " geometric figure/diagram/representation", " geometric shape");
  t = rplUL(t, " geometric averages", " geometric averages/means");
  t = rplUL(t, " geometric average", " geometric average/mean");
  t = rplUL(t, " geometric lines/rows", " geometric progressions/sequences");
  t = rplUL(t, " geometric line/row", " geometric progression/sequence");
  t = rplUL(t, " graphic façade", " GUI/graphical user interface");
  t = rep(t, " graphic presentation", " public plot");
  t = rep(t, " Graphic presentation", " public plot");
  t = rplUL(t, " graphic editor", " graphics editor");
  t = rplUL(t, " large letter", " capital letter");
  t = rep(t, " Teutonic language", " Germanic language");
  t = rplUL(t, " it's for me gibberish", " it's Greek to me");
  t = rplUL(t, " enjoyment for the eyes", " eye candy");
  t = rplUL(t, " hyperbola function", " hyperbolic function");
  t = rplUL(t, " honest game", " fair play");
  t = rplUL(t, " raft-icies", " ice floes");
  t = rplUL(t, " raft-icy", " ice floe");
  t = rplUL(t, " imaginary part", " imaginary parts");
  t = rplUL(t, " imaginary part", " imaginary part");
  t = rep(t, " indicative mood sentence", " narrative sentence");
  t = rep(t, " Indicative mood sentence", " narrative sentence");
  t = rplUL(t, " inert gas", " inert/noble gas");
  t = rplUL(t, " infinitesimal bill/calculation", " infinitesimal calculus");
  t = rplUL(t, " integral circuit", " integrated circuit");
  t = rplUL(t, " integral bill/calculation", " integral calculus");
  t = rplUL(t, " intelligent terminal", " smart terminal");
  t = rplUL(t, " intercitizen war", " civil war");
  t = rplUL(t, " inside/internally of", " inside");
  t = rplUL(t, " interrupted sexual intercourse", " coitus interruptus");
  rgx = " (i|I)nterdissect(s|ed|ing)?(ly)?(erly)? himself/herself/itself/themselves";
  t = regex_replace(t, rgx,
	" $1ntersect$2");
  t = rplUL(t, " reversed relation", " inverse relation");
  t = rep(t, " Italian pumpkin/squash/gourd", " Zucchini");
  t = rplUL(t, " legal person", " juridical person");
  t = rplUL(t, " frameworkly", " in the framework");
  t = rplUL(t, " framework/substructurely of ", " in the framework of ");
  t = rplUL(t, " corrosive/burning lime", " quicklime");
  t = rep(t, " Calvarian road", " Calvary/stations of the cross");
  t = rplUL(t, " canonical law", " canon law");
  t = rep(t, " what was going to be proven", " Q.E.D./quod erat demonstrandum");
  t = rep(t, " What was going to be proven", " Q.E.D./Quod erat demonstrandum");
  t = rplUL(t, " who/which more early comes", " first come/first served");
  t = rplUL(t, " bell jarshape bend/curve", " bell-curve");
  t = rplUL(t, " wedge tooth", " eyetooth/canine");
  t = rplUL(t, " wedgeshape writing", " cuneiform");
  t = rplUL(t, " commerce/trade agent", " commercial agent");
  t = rplUL(t, " commission/errand agent", " commission agent");
  t = rplUL(t, " calculation/computation system", " computer system");
  t = rplUL(t, " computer net/network", " computer network");
  t = rplUL(t, " condition/terms probability/probability measure",
	" conditional probability");
  t = rplUL(t, " coordinate axle/axis", " coordinate axis");
  t = rplUL(t, " heart/hearty tendencies/inclinations", " fondness");
  t = rplUL(t, " heart/hearty tendency/inclination", " fondness");
  t = rplUL(t, " correlative conjunctions", " adversative conjunction");
  t = rplUL(t, " growth diphthong", " rising diphthong");
  t = rplUL(t, " cross-shaped going to war", " crusade");
  t = rplUL(t, " tending-to-be-togethermeltingtend language",
	" inflective language");
  t = rplUL(t, " uniting tissue", " connective tissue");
  t = rplUL(t, " quotient/ratio fraction", " common fraction");
  t = rplUL(t, " the American daydream", " the American dream");
  t = rplUL(t, " lengthwise of", " along");
  t = rplUL(t, " laser locator", " lidar/optical ranger");
  t = rplUL(t, " last/latestly but not ballastly", " last but not least");
  t = rplUL(t, " lawodefractional", " legislative");
  t = rplUL(t, " linseed oil linen", " linoleum");
  t = rplUL(t, " local nets/networks", " LANs/local area computer networks");
  t = rplUL(t, " local net/network", " LAN/local area computer network");
  t = rplUL(t, " random variables", " random variables/variates");
  t = rplUL(t, " random variable", " random variable/variate");
  t = rplUL(t, " magical lantern", " magic lantern");
  t = rplUL(t, " magnetic disks/dials/records", " magnetic disks");
  t = rplUL(t, " magnetic disk/dial/record", " magnetic disk");
  t = rplUL(t, " decrease/diminishing diphthong", " falling diphthong");
  t = rplUL(t, " distant nets/networks", " WANs/wide area computer networks");
  t = rplUL(t, " distant net/network", " WAN/wide area computer network");
  t = rplUL(t, " unclear domestic/aboriginal product",
	" GDP/gross domestic product");
  t = rplUL(t, " unclear/gross national product", " GNP/gross national product");
  t = rplUL(t, " empty group/set", " empty set");
  t = rplUL(t, " distracted season", " off-season");
  t = rplUL(t, " handinsidehandly with", " hand in hand with");
  t = rplUL(t, " hand one-an internal one-handly with", " hand in hand with");
  t = rplUL(t, " mathematical logic", " logistics/mathematical logic");
  t = rplUL(t, " conditions/termses", " conditions/terms");
  t = rep(t, " middle mast", " mainmast");
  t = rep(t, " Middle mast", " mainmast");
  t = rplUL(t, " in the middle of", " among/in the middle of");
  t = rplUL(t, " in the middle in", " among/in the middle of");
  t = rplUL(t, " in the middle between/among", " among/in the middle of");
  t = rplUL(t, " mixing fraction", " mixed fraction");
  t = rplUL(t, " soft-thing of fruit", " pulp");
  t = rplUL(t, " dead sin", " mortal sin");
  t = rplUL(t, " natural integer", " natural number");
  t = rplUL(t, " natural amounts/numbers", " natural numbers");
  t = rplUL(t, " natural amount/number", " natural number");
  t = rplUL(t, " not everything shining is a diamond",
	" all that glitters is not gold");
  t = rplUL(t, " necessary conditions/terms", " necessary conditions");
  t = rplUL(t, " necessary condition/terms", " necessary condition");
  t = rplUL(t, " nonown fraction", " improper fraction");
  t = rplUL(t, " nonclean/pure rhyme", " approximate rhyme");
  t = rplUL(t, " neutral gender/genus", " inanimate gender");
  t = rplUL(t, " making neutral element", " reciprocal element");
  t = rplUL(t, " irreducible fraction", " reduced fraction");
  t = rplUL(t, " nonbreakable space", " no-break space");
  t = rplUL(t, " non-salty water", " fresh water");
  t = rplUL(t, " noble gases", " inert/noble gases");
  t = rplUL(t, " noble gas", " inert/noble gas");
  t = rplUL(t, " northern deer", " reindeer");
  t = rplUL(t, " slanting projection", " skew projection");
  t = rplUL(t, " on occasion of", " in case of");
  t = rplUL(t, " wave sheet-metal", " corrugated iron");
  t = rplUL(t, " optical fiber", " fiber optics");
  t = rplUL(t, " optical locator", " lidar/optical ranger");
  t = rplUL(t, " golden set partition", " golden section");
  t = rplUL(t, " tidy groups/sets", " ordered sets");
  t = rplUL(t, " tidy group/set", " ordered set");
  t = rplUL(t, " ordinary logarithm", " common logarithm");
  t = rplUL(t, " right-angled projection", " orthogonal projection");
  t = rep(t, " Pascalian triangle", " Pascal's triangle");
  t = rplUL(t, " sinfulsacrificing goat", " scapegoat");
  t = rplUL(t, " sinfulcarrying/wearing goat", " scapegoat");
  t = rplUL(t, " periodic/periodical position fraction", " periodic fraction");
  t = rplUL(t, " personal computer", " PC/personal computer");
  t = rplUL(t, " heavy job/work", " hard work");
  t = rplUL(t, " on foot of", " at the foot of/below");
  t = rplUL(t, " pilot license/permit", " pilot's licence");
  t = rep(t, " Pythagorean theorem", " Pythagoras's theorem");
  t = rplUL(t, " flatbeak duck", " mallard");
  t = rplUL(t, " biggest common divisor", " greatest common divisor");
  t = rplUL(t, " smallest common multiple", " least common multiple");
  t = rplUL(t, " polar distance", " polar radius/radius vector");
  t = rplUL(t, " better place picks up", " first come/first served");
  t = rplUL(t, " tiremat hammer", " jackhammer");
  t = rplUL(t, " pocket thief", " pickpocket");
  t = rplUL(t, " position number system", " place value system");
  t = rplUL(t, " because-ofsinful goat", " scapegoat");
  t = rplUL(t, " own fraction", " proper fraction");
  t = rplUL(t, " proof/sign of existence ", " sproof of existence");
  t = rplUL(t, " proof/sign with an induction", " proof by induction");
  t = rplUL(t, " proof/sign with a reducing to an absurdity",
	" proof by reductio ad absurdum");
  t = rplUL(t, " public garden", " park");
  t = rplUL(t, " public letter", " open letter");
  t = rplUL(t, " public secret", " open secret");
  t = rplUL(t, " real time regime", " real-time mode/real-time operation");
  t = rplUL(t, " reducing to an absurd", " reductio ad absurdum");
  t = rplUL(t, " straight/direct intestine", " rectum");
  t = rplUL(t, " relative sound-feeling/sensation", " relative pitch");
  t = rplUL(t, " relation of an equivalent", " equivalence relation");
  t = rplUL(t, " rotational axle/axis", " axis of rotation");
  t = rplUL(t, " rotation of cultures ", " crop rotation");
  t = rplUL(t, " red pimpernel", " scarlet pimpernel");
  t = rplUL(t, " satin/sateen weave", " satin weave");
  t = rplUL(t, " suet/tallow candle", " tallow candle");
  t = rplUL(t, " serieses", " series");
  t = rep(t, " series of functions", " public series");
  t = rep(t, " Series of functions", " Function series");
  t = rplUL(t, " sphere coordinate", " spherical coordinate");
  t = rplUL(t, " syntax analyser", " parser");
  t = rplUL(t, " systematic software", " system software");
  t = rplUL(t, " scalar mathematical product", " scalar product");
  t = rplUL(t, " lower barrier", " lower bound");
  t = rplUL(t, " lower index", " subscript");
  t = rplUL(t, " undermade iron concrete", " reinforced concrete");
  t = rplUL(t, " higher barrier", " upper bound");
  t = rplUL(t, " upper index", " superscript");
  t = rplUL(t, " ontable computer", " desktop computer");
  t = rplUL(t, " state monopoly", " government monopoly");
  t = rplUL(t, " staircase function", " step function");
  t = rplUL(t, " theory of the groups/sets", " set theory");
  t = rplUL(t, " font cut", " typeface");
  t = rplUL(t, " cutting/slicing tooth", " incisor");
  t = rplUL(t, " trigonometric presentation",
	" polar form/trigonometric representation");
  t = rplUL(t, " lump/bump/knob sunflower", " Jerusalem artichoke");
  t = rplUL(t, " tower-holder robot", " Turing machine");
  t = rplUL(t, " urban excise", " local tariff");
  t = rplUL(t, " warmlyair air-balloon", " hot-air balloon");
  t = rplUL(t, " vector/vectorial geometry plane",
	" two-dimensional vector space");
  t = rplUL(t, " vector/vectorial mathematical product", " vector product");
  t = rplUL(t, " vector/vectorial straight line", " one-dimensional vector space");
  t = rplUL(t, " vector/vectorial subspace", " vector subspace");
  t = rplUL(t, " green maritime/seatortoise", " green sea turtle");
  t = rplUL(t, " volume lumps/masses", " densities");
  t = rplUL(t, " volume lump/mass", " density");
  rgx = " (l|L)os(e|es|ing)(ly)?(erly)? the thread";
  t = regex_replace(t, rgx, " $1os$2 the train of thought");
  t = rplUL(t, " lost the thread", " lost the train of thought");
  t = rplUL(t, " weighed/found the weight of average", " weighted average/mean");
  t = rplUL(t, " fullfilling power", " executive power");
  t = rplUL(t, " more or less early", " sooner or later");
  t = rplUL(t, " more okay late than never", " better late than never");
  t = rplUL(t, " polar axles/axes", " polar axes");
  t = rplUL(t, " polar axle/axis", " polar axis");
  t = rplUL(t, " polar angles/corners", " amplitude/azimuth/polar angles");
  t = rplUL(t, " polar angle/corner", " amplitude/azimuth/polar angle");
  t = rplUL(t, " straight/direct parentheses/brackets/staples/clamps/braces",
	" square bracket");
  t = rplUL(t, " straight/direct parenthesis/bracket/staple/clamp/brace",
	" square bracket");
  t = rplUL(t, " straight/direct current", " direct current/DC");
  t = rplUL(t, " round parentheses/brackets/staples/clamps/braces",
	" parentheses");
  t = rplUL(t, " round parenthesis/bracket/staple/clamp/brace", " parenthesis");
  t = rplUL(t, " at the same time with", " at the same time as");
  t = rplUL(t, " symbol/badge bonds/ties", " shortcuts/symlinks");
  t = rplUL(t, " symbol/badge bond/tie", " shortcut/symlink");
  t = rplUL(t, " summer time", " daylight saving time/summertime");
  t = rplUL(t, " tending-to-be-absorbenttend platforms/wharves",
	" logical AND operator");
  t = rplUL(t, " tending-to-be-absorbenttend platform/wharf",
	" logical AND operator");
  t = rplUL(t, " warlock/wizard canes/sticks", " wands");
  t = rplUL(t, " warlock/wizard cane/stick", " wand");
  t = rplUL(t, " special event", " special case");
  t = rplUL(t, " specific lumps/masses", " densities");
  t = rplUL(t, " specific lump/mass", " density");
  t = rplUL(t, " spine marrow/medulla", " spinal chord");
  t = rplUL(t, " enough conditions/terms", " sufficient conditions");
  t = rplUL(t, " enough condition/terms", " sufficient condition");
  t = rep(t, " puts on a file system", " mounts a file system");
  t = rep(t, " put on a file system", " mount/mounted a file system");
  t = rep(t, " Put on a file system", " Mount a file system");
  t = rep(t, " puting on a file system", " mounting a file system");
  t = rplUL(t, " putingly on a file system", " mounting a file system");
  t = rep(t, " onto arrange to stack data", " push");
  t = rep(t, " onto arrange to stack data", " push");
  t = rplUL(t, " made effervescented/sparkling", " foamed");
  t = rplUL(t, " indexes/arrays of truth", " truth tables");
  t = rplUL(t, " index/array of truth", " truth table");
  t = rplUL(t, " that there is another story/tale", " but I digress");
  t = rplUL(t, " that isn't proudto are worthy of-thing",
	" that's nothing to be proud of");
  t = rplUL(t, " font degrees/grades", " point sizes");
  t = rplUL(t, " font degree/grade", " point size");
  t = rplUL(t, " transit nets/networks", " transit networks");
  t = rplUL(t, " transit net/network", " transit network");
  t = rplUL(t, " infrared door", " infrared port");
  t = rplUL(t, " navel cords/ropes", " umbilical cords");
  t = rplUL(t, " navel cord/rope", " umbilical cord");
  t = rplUL(t, " one-way channels/canals", " channels");
  t = rplUL(t, " one-way channel/canal", " channel");
  t = rep(t, " Ural Mountainian-Altaian language-domestic",
	" Turanian language group/Ural-Altaic group");
  t = rplUL(t, " assignment commands/orders", " assignment statements");
  t = rplUL(t, " assignment command/order", " assignment statement");
  t = rplUL(t, " variance aberrations", " standard deviations");
  t = rplUL(t, " variance aberration", " standard deviation");
  t = rplUL(t, " vector/vectorial room/space", " vector space");
  t = rplUL(t, " winter time", " standard time/wintertime");
  t = rep(t, " disturbs himself/herself/itself/themselves",
	" goes to the trouble of");
  t = rep(t, " disturbed himself/herself/itself/themselves",
	" went to the trouble of");
  t = rplUL(t, " disturb himself/herself/itself/themselves",
	" go to the trouble of");
  t = rep(t, " disturbing himself/herself/itself/themselves",
	" going to the trouble of");
  t = rplUL(t, " disturbingly himself/herself/itself/themselves",
	" going to the trouble of");
  t = rep(t, " demonstrates/shows himself/herself/itself/themselves",
	" manifests");
  t = rep(t, " demonstrated/showed himself/herself/itself/themselves",
	" manifested");
  t = rplUL(t, " demonstrate/show himself/herself/itself/themselves",
	" manifest");
  t = rep(t, " demonstrating/showing himself/herself/itself/themselves",
	" manifesting");
  t = rplUL(t, " demonstratingly/showingly himself/herself/itself/themselves",
	" manifesting");
  return t;
}

static string korrections7(string t) {
  // Corrections and adjustments for phrases, part 7:
  t = rep(t, " guided/steered yourself", " proceeded");
  t = rplUL(t, " guide/steer yourself", " proceed");
  t = rep(t, " guiding/steering yourself", " proceeding");
  t = rplUL(t, " guidingly/steeringly yourself", " proceeding");
  t = rep(t, " logged in yourself", " logged in");
  t = rplUL(t, " log in yourself", " log in");
  t = rep(t, " logging in yourself", " logging in");
  t = rplUL(t, " loggingly in yourself", " logging in");
  t = rep(t, " logged out yourself", " logged out");
  t = rplUL(t, " log out yourself", " log out");
  t = rep(t, " logging out yourself", " logging out");
  t = rplUL(t, " loggingly out yourself", " logging out");
  t = rep(t, " disturbed yourself", " worried");
  t = rplUL(t, " disturb yourself", " worry");
  t = rep(t, " disturbing yourself", " worrying");
  t = rplUL(t, " disturbingly yourself", " worrying");
  t = rep(t, " threw yourself on ", " pounced on ");
  t = rplUL(t, " throw yourself on ", " pounce on ");
  t = rep(t, " throwing yourself on ", " pouncing on ");
  t = rplUL(t, " throwingly yourself on ", " pouncing on ");
  t = rep(t, " guided/steered yourself", " proceeded");
  t = rplUL(t, " guide/steer yourself", " proceed");
  t = rep(t, " guiding/steering yourself", " proceeding");
  t = rplUL(t, " guidingly/steeringly yourself", " proceeding");
  t = rep(t, " logged in yourself", " logged in");
  t = rplUL(t, " log in yourself", " log in");
  t = rep(t, " logging in yourself", " logging in");
  t = rplUL(t, " loggingly in yourself", " logging in");
  t = rep(t, " logged out yourself", " logged out");
  t = rplUL(t, " log out yourself", " log out");
  t = rep(t, " logging out yourself", " logging out");
  t = rplUL(t, " loggingly out yourself", " logging out");
  t = rep(t, " hold of it for yourself", " it");
  t = rep(t, " hold of them for yourself", " them");
  t = rep(t, " threw yourself on ", " pounced on ");
  t = rep(t, " throw yourself on ", " pounce on ");
  t = rep(t, " throwing yourself on ", " pouncing on ");
  t = rplUL(t, " throwingly yourself on ", " pouncing on ");
  t = rep(t, " dressed yourself", " got dressed");
  t = rplUL(t, " dress yourself", " get dressed");
  t = rep(t, " dressing yourself", " getting dressed");
  t = rplUL(t, " dressingly yourself", " getting dressed");
  t = rep(t, " sheltered/protected yourself", " took shelter");
  t = rplUL(t, " shelter/protect yourself", " take shelter");
  t = rep(t, " sheltering/protecting yourself", " taking shelter");
  t = rplUL(t, " shelteringly/protectingly yourself", " taking shelter");
  t = rplUL(t, " put on make-up yourself", " put on make-up");
  t = rep(t, " on make-up yourself", " on make-up");
  rgx = " excus(e|es|ed|ing)(ly)?(erly)? yourself";
  t = regex_replace(t, rgx, " apologiz$1");
  rgx = " Excus(e|es|ed|ing)(ly)?(erly)? yourself";
  t = regex_replace(t, rgx, " Apologiz$1");
  t = rep(t, " supplied yourself on/in", " stored");
  t = rplUL(t, " supply yourself on/in", " store");
  t = rep(t, " supplying yourself on/in", " storing");
  t = rplUL(t, " supplyingly yourself on/in", " storing");
  t = rep(t, " supplied yourself with", " got");
  t = rplUL(t, " supply yourself with", " get");
  t = rep(t, " supplying yourself with", " getting");
  t = rplUL(t, " supplyingly yourself with", " getting");
  t = rep(t, " sensed/felt yourself", " felt");
  t = rplUL(t, " sense/feel yourself", " feel");
  t = rep(t, " sensing/feeling yourself", " feeling");
  t = rplUL(t, " sensingly/feelingly yourself", " feeling");
  t = rep(t, " subdued/subjugated yourself", " submitted");
  t = rplUL(t, " subdue/subjugate yourself", " submit");
  t = rep(t, " subduing/subjugating yourself", " submitting");
  t = rplUL(t, " subduingly/subjugatingly yourself", " submitting");
  t = rep(t, " found yourself", " was located");
  t = rep(t, " find yourself", " be located");
  t = rep(t, " finding yourself", " being located");
  t = rplUL(t, " findingly yourself", " located");
  rgx = " (t|T)urn(ed|ing)?(ly)?(erly)? yourself";
  t = regex_replace(t, rgx, " $1urn$2 around");
  t = rep(t, " showered yourself", " took a shower");
  t = rplUL(t, " shower yourself", " take a shower");
  t = rep(t, " showering yourself", " taking a shower");
  t = rplUL(t, " showeringly yourself", " taking a shower");
  t = rep(t, " interdissected yourself", " intersected");
  t = rplUL(t, " interdissect yourself", " intersect");
  t = rep(t, " interdissecting yourself", " intersecting");
  t = rplUL(t, " interdissectingly yourself", " intersecting");
  t = rep(t, " disturbed yourself", " went to the trouble of");
  t = rplUL(t, " disturb yourself", " go to the trouble of");
  t = rep(t, " disturbing yourself", " going to the trouble of");
  t = rplUL(t, " disturbingly yourself", " going to the trouble of");
  t = rep(t, " demonstrated/showed yourself", " manifested");
  t = rplUL(t, " demonstrate/show yourself", " manifest");
  t = rep(t, " demonstrating/showing yourself", " manifesting");
  t = rplUL(t, " demonstratingly/showingly yourself", " manifesting");
  t = rep(t, " guided/steered myself", " proceeded");
  t = rplUL(t, " guide/steer myself", " proceed");
  t = rep(t, " guiding/steering myself", " proceeding");
  t = rplUL(t, " guidingly/steeringly myself", " proceeding");
  t = rep(t, " logged in myself", " logged in");
  t = rplUL(t, " log in myself", " log in");
  t = rep(t, " logging in myself", " logging in");
  t = rplUL(t, " loggingly in myself", " logging in");
  t = rep(t, " logged out myself", " logged out");
  t = rplUL(t, " log out myself", " log out");
  t = rep(t, " logging out myself", " logging out");
  t = rplUL(t, " loggingly out myself", " logging out");
  t = rep(t, " disturbed myself", " worried");
  t = rplUL(t, " disturb myself", " worry");
  t = rep(t, " disturbing myself", " worrying");
  t = rplUL(t, " disturbingly myself", " worrying");
  t = rep(t, " threw myself on ", " pounced on ");
  t = rplUL(t, " throw myself on ", " pounce on ");
  t = rep(t, " throwing myself on ", " pouncing on ");
  t = rplUL(t, " throwingly myself on ", " pouncing on ");
  t = rep(t, " guided/steered myself", " proceeded");
  t = rplUL(t, " guide/steer myself", " proceed");
  t = rep(t, " guiding/steering myself", " proceeding");
  t = rplUL(t, " guidingly/steeringly myself", " proceeding");
  t = rep(t, " logged in myself", " logged in");
  t = rplUL(t, " log in myself", " log in");
  t = rep(t, " logging in myself", " logging in");
  t = rplUL(t, " loggingly in myself", " logging in");
  t = rep(t, " logged out myself", " logged out");
  t = rplUL(t, " log out myself", " log out");
  t = rep(t, " logging out myself", " logging out");
  t = rplUL(t, " loggingly out myself", " logging out");
  t = rep(t, " disturbed myself", " worried");
  t = rplUL(t, " disturb myself", " worry");
  t = rep(t, " disturbing myself", " worrying");
  t = rplUL(t, " disturbingly myself", " worrying");
  t = rep(t, " got hold of it for myself", " got it");
  t = rplUL(t, " get hold of it for myself", " get it");
  t = rep(t, " getting hold of it for myself", " getting it");
  t = rplUL(t, " gettingly hold of it for myself", " getting it");
  t = rep(t, " got hold of them for myself", " got them");
  t = rplUL(t, " get hold of them for myself", " get them");
  t = rep(t, " getting hold of them for myself", " getting them");
  t = rplUL(t, " gettingly hold of them for myself", " getting them");
  t = rep(t, " threw myself on ", " pounced on ");
  t = rep(t, " throw myself on ", " pounce on ");
  t = rep(t, " throwing myself on ", " pouncing on ");
  t = rplUL(t, " throwingly myself on ", " pouncing on ");
  t = rep(t, " dressed myself", " got dressed");
  t = rplUL(t, " dress myself", " get dressed");
  t = rep(t, " dressing myself", " getting dressed");
  t = rplUL(t, " dressingly myself", " getting dressed");
  t = rep(t, " sheltered/protected myself", " took shelter");
  t = rplUL(t, " shelter/protect myself", " take shelter");
  t = rep(t, " sheltering/protecting myself", " taking shelter");
  t = rplUL(t, " shelteringly/protectingly myself", " taking shelter");
  t = rplUL(t, " put on make-up myself", " put on make-up");
  t = rep(t, " puting on make-up myself", " puting on make-up");
  t = rplUL(t, " putingly on make-up myself", " puting on make-up");
  t = rep(t, " excused myself", " apologized");
  t = rplUL(t, " excuse myself", " apologize");
  t = rep(t, " excusing myself", " apologizing");
  t = rplUL(t, " excusingly myself", " apologizing");
  t = rep(t, " supplied myself on/in", " stored");
  t = rplUL(t, " supply myself on/in", " store");
  t = rep(t, " supplying myself on/in", " storing");
  t = rplUL(t, " supplyingly myself on/in", " storing");
  t = rep(t, " supplied myself with", " got");
  t = rplUL(t, " supply myself with", " get");
  t = rep(t, " supplying myself with", " getting");
  t = rplUL(t, " supplyingly myself with", " getting");
  t = rep(t, " sensed/felt myself", " felt");
  t = rplUL(t, " sense/feel myself", " feel");
  t = rep(t, " sensing/feeling myself", " feeling");
  t = rplUL(t, " sensingly/feelingly myself", " feeling");
  t = rep(t, " subdued/subjugated myself", " submitted");
  t = rplUL(t, " subdue/subjugate myself", " submit");
  t = rep(t, " subduing/subjugating myself", " submitting");
  t = rplUL(t, " subduingly/subjugatingly myself", " submitting");
  t = rep(t, " found myself", " was located");
  t = rep(t, " find myself", " be located");
  t = rep(t, " finding myself", " being located");
  t = rplUL(t, " findingly myself", " located");
  t = rep(t, " turned myself", " turned around");
  t = rplUL(t, " turn myself", " turn around");
  t = rep(t, " turning myself", " turning around");
  t = rplUL(t, " turningly myself", " turning around");
  t = rep(t, " showered myself", " took a shower");
  t = rplUL(t, " shower myself", " take a shower");
  t = rep(t, " showering myself", " taking a shower");
  t = rplUL(t, " showeringly myself", " taking a shower");
  t = rep(t, " interdissected myself", " intersected");
  t = rplUL(t, " interdissect myself", " intersect");
  t = rep(t, " interdissecting myself", " intersecting");
  t = rplUL(t, " interdissectingly myself", " intersecting");
  t = rep(t, " disturbed myself", " went to the trouble of");
  t = rplUL(t, " disturb myself", " go to the trouble of");
  t = rep(t, " disturbing myself", " going to the trouble of");
  t = rplUL(t, " disturbingly myself", " going to the trouble of");
  t = rep(t, " demonstrated/showed myself", " manifested");
  t = rplUL(t, " demonstrate/show myself", " manifest");
  t = rep(t, " demonstrating/showing myself", " manifesting");
  t = rplUL(t, " demonstratingly/showingly myself", " manifesting");
  t = rep(t, " guided/steered ourselves", " proceeded");
  t = rplUL(t, " guide/steer ourselves", " proceed");
  t = rep(t, " guiding/steering ourselves", " proceeding");
  t = rplUL(t, " guidingly/steeringly ourselves", " proceeding");
  t = rep(t, " logged in ourselves", " logged in");
  t = rplUL(t, " log in ourselves", " log in");
  t = rep(t, " logging in ourselves", " logging in");
  t = rplUL(t, " loggingly in ourselves", " logging in");
  t = rep(t, " logged out ourselves", " logged out");
  t = rplUL(t, " log out ourselves", " log out");
  t = rep(t, " logging out ourselves", " logging out");
  t = rplUL(t, " loggingly out ourselves", " logging out");
  t = rep(t, " disturbed ourselves", " worried");
  t = rplUL(t, " disturb ourselves", " worry");
  t = rep(t, " disturbing ourselves", " worrying");
  t = rplUL(t, " disturbingly ourselves", " worrying");
  t = rep(t, " threw ourselves on ", " pounced on ");
  t = rplUL(t, " throw ourselves on ", " pounce on ");
  t = rep(t, " throwing ourselves on ", " pouncing on ");
  t = rplUL(t, " throwingly ourselves on ", " pouncing on ");
  t = rep(t, " guided/steered ourselves", " proceeded");
  t = rplUL(t, " guide/steer ourselves", " proceed");
  t = rep(t, " guiding/steering ourselves", " proceeding");
  t = rplUL(t, " guidingly/steeringly ourselves", " proceeding");
  t = rep(t, " logged in ourselves", " logged in");
  t = rplUL(t, " log in ourselves", " log in");
  t = rep(t, " logging in ourselves", " logging in");
  t = rplUL(t, " loggingly in ourselves", " logging in");
  t = rep(t, " logged out ourselves", " logged out");
  t = rplUL(t, " log out ourselves", " log out");
  t = rep(t, " logging out ourselves", " logging out");
  t = rplUL(t, " loggingly out ourselves", " logging out");
  t = rep(t, " disturbed ourselves", " worried");
  t = rplUL(t, " disturb ourselves", " worry");
  t = rep(t, " disturbing ourselves", " worrying");
  t = rplUL(t, " disturbingly ourselves", " worrying");
  t = rep(t, " got hold of it for ourselves", " got it");
  t = rplUL(t, " get hold of it for ourselves", " get it");
  t = rep(t, " getting hold of it for ourselves", " getting it");
  t = rplUL(t, " gettingly hold of it for ourselves", " getting it");
  t = rep(t, " got hold of them for ourselves", " got them");
  t = rplUL(t, " get hold of them for ourselves", " get them");
  t = rep(t, " getting hold of them for ourselves", " getting them");
  t = rplUL(t, " gettingly hold of them for ourselves", " getting them");
  t = rep(t, " threw ourselves on ", " pounced on ");
  t = rep(t, " throw ourselves on ", " pounce on ");
  t = rep(t, " throwing ourselves on ", " pouncing on ");
  t = rplUL(t, " throwingly ourselves on ", " pouncing on ");
  t = rep(t, " dressed ourselves", " got dressed");
  t = rplUL(t, " dress ourselves", " get dressed");
  t = rep(t, " dressing ourselves", " getting dressed");
  t = rplUL(t, " dressingly ourselves", " getting dressed");
  t = rep(t, " sheltered/protected ourselves", " took shelter");
  t = rplUL(t, " shelter/protect ourselves", " take shelter");
  t = rep(t, " sheltering/protecting ourselves", " taking shelter");
  t = rplUL(t, " shelteringly/protectingly ourselves", " taking shelter");
  t = rplUL(t, " put on make-up ourselves", " put on make-up");
  t = rep(t, " puting on make-up ourselves", " puting on make-up");
  t = rplUL(t, " putingly on make-up ourselves", " puting on make-up");
  t = rep(t, " excused ourselves", " apologized");
  t = rplUL(t, " excuse ourselves", " apologize");
  t = rep(t, " excusing ourselves", " apologizing");
  t = rplUL(t, " excusingly ourselves", " apologizing");
  t = rep(t, " supplied ourselves on/in", " stored");
  t = rplUL(t, " supply ourselves on/in", " store");
  t = rep(t, " supplying ourselves on/in", " storing");
  t = rplUL(t, " supplyingly ourselves on/in", " storing");
  t = rep(t, " supplied ourselves with", " got");
  t = rplUL(t, " supply ourselves with", " get");
  t = rep(t, " supplying ourselves with", " getting");
  t = rplUL(t, " supplyingly ourselves with", " getting");
  t = rep(t, " sensed/felt ourselves", " felt");
  t = rplUL(t, " sense/feel ourselves", " feel");
  t = rep(t, " sensing/feeling ourselves", " feeling");
  t = rplUL(t, " sensingly/feelingly ourselves", " feeling");
  t = rep(t, " subdued/subjugated ourselves", " submitted");
  t = rplUL(t, " subdue/subjugate ourselves", " submit");
  t = rep(t, " subduing/subjugating ourselves", " submitting");
  t = rplUL(t, " subduingly/subjugatingly ourselves", " submitting");
  t = rep(t, " found ourselves", " was located");
  t = rep(t, " find ourselves", " be located");
  t = rep(t, " finding ourselves", " being located");
  t = rplUL(t, " findingly ourselves", " located");
  t = rep(t, " turned ourselves", " turned around");
  t = rplUL(t, " turn ourselves", " turn around");
  t = rep(t, " turning ourselves", " turning around");
  t = rplUL(t, " turningly ourselves", " turning around");
  t = rep(t, " showered ourselves", " took a shower");
  t = rplUL(t, " shower ourselves", " take a shower");
  t = rep(t, " showering ourselves", " taking a shower");
  t = rplUL(t, " showeringly ourselves", " taking a shower");
  t = rep(t, " interdissected ourselves", " intersected");
  t = rplUL(t, " interdissect ourselves", " intersect");
  t = rep(t, " interdissecting ourselves", " intersecting");
  t = rplUL(t, " interdissectingly ourselves", " intersecting");
  t = rep(t, " disturbed ourselves", " went to the trouble of");
  t = rplUL(t, " disturb ourselves", " go to the trouble of");
  t = rep(t, " disturbing ourselves", " going to the trouble of");
  t = rplUL(t, " disturbingly ourselves", " going to the trouble of");
  t = rep(t, " demonstrated/showed ourselves", " manifested");
  t = rplUL(t, " demonstrate/show ourselves", " manifest");
  t = rep(t, " demonstrating/showing ourselves", " manifesting");
  t = rplUL(t, " demonstratingly/showingly ourselves", " manifesting");
  t = rep(t, " guided/steered oneself", " proceeded");
  t = rplUL(t, " guide/steer oneself", " proceed");
  t = rep(t, " guiding/steering oneself", " proceeding");
  t = rplUL(t, " guidingly/steeringly oneself", " proceeding");
  t = rep(t, " logged in oneself", " logged in");
  t = rplUL(t, " log in oneself", " log in");
  t = rep(t, " logging in oneself", " logging in");
  t = rplUL(t, " loggingly in oneself", " logging in");
  t = rep(t, " logged out oneself", " logged out");
  t = rplUL(t, " log out oneself", " log out");
  t = rep(t, " logging out oneself", " logging out");
  t = rplUL(t, " loggingly out oneself", " logging out");
  t = rep(t, " disturbed oneself", " worried");
  t = rplUL(t, " disturb oneself", " worry");
  t = rep(t, " disturbing oneself", " worrying");
  t = rplUL(t, " disturbingly oneself", " worrying");
  t = rep(t, " threw oneself on ", " pounced on ");
  t = rplUL(t, " throw oneself on ", " pounce on ");
  t = rep(t, " throwing oneself on ", " pouncing on ");
  t = rplUL(t, " throwingly oneself on ", " pouncing on ");
  t = rep(t, " guided/steered oneself", " proceeded");
  t = rplUL(t, " guide/steer oneself", " proceed");
  t = rep(t, " guiding/steering oneself", " proceeding");
  t = rplUL(t, " guidingly/steeringly oneself", " proceeding");
  t = rep(t, " logged in oneself", " logged in");
  t = rplUL(t, " log in oneself", " log in");
  t = rep(t, " logging in oneself", " logging in");
  t = rplUL(t, " loggingly in oneself", " logging in");
  t = rep(t, " logged out oneself", " logged out");
  t = rplUL(t, " log out oneself", " log out");
  t = rep(t, " logging out oneself", " logging out");
  t = rplUL(t, " loggingly out oneself", " logging out");
  t = rep(t, " disturbed oneself", " worried");
  t = rplUL(t, " disturb oneself", " worry");
  t = rep(t, " disturbing oneself", " worrying");
  t = rplUL(t, " disturbingly oneself", " worrying");
  t = rep(t, " got hold of it for oneself", " got it");
  t = rplUL(t, " get hold of it for oneself", " get it");
  t = rep(t, " getting hold of it for oneself", " getting it");
  t = rplUL(t, " gettingly hold of it for oneself", " getting it");
  t = rep(t, " got hold of them for oneself", " got them");
  t = rplUL(t, " get hold of them for oneself", " get them");
  t = rep(t, " getting hold of them for oneself", " getting them");
  t = rplUL(t, " gettingly hold of them for oneself", " getting them");
  t = rep(t, " threw oneself on ", " pounced on ");
  t = rep(t, " throw oneself on ", " pounce on ");
  t = rep(t, " throwing oneself on ", " pouncing on ");
  t = rplUL(t, " throwingly oneself on ", " pouncing on ");
  t = rep(t, " dressed oneself", " got dressed");
  t = rplUL(t, " dress oneself", " get dressed");
  t = rep(t, " dressing oneself", " getting dressed");
  t = rplUL(t, " dressingly oneself", " getting dressed");
  t = rep(t, " sheltered/protected oneself", " took shelter");
  t = rplUL(t, " shelter/protect oneself", " take shelter");
  t = rep(t, " sheltering/protecting oneself", " taking shelter");
  t = rplUL(t, " shelteringly/protectingly oneself", " taking shelter");
  t = rplUL(t, " put on make-up oneself", " put on make-up");
  t = rep(t, " puting on make-up oneself", " puting on make-up");
  t = rplUL(t, " putingly on make-up oneself", " puting on make-up");
  t = rep(t, " excused oneself", " apologized");
  t = rplUL(t, " excuse oneself", " apologize");
  t = rep(t, " excusing oneself", " apologizing");
  t = rplUL(t, " excusingly oneself", " apologizing");
  t = rep(t, " supplied oneself on/in", " stored");
  t = rplUL(t, " supply oneself on/in", " store");
  t = rep(t, " supplying oneself on/in", " storing");
  t = rplUL(t, " supplyingly oneself on/in", " storing");
  t = rep(t, " supplied oneself with", " got");
  t = rplUL(t, " supply oneself with", " get");
  t = rep(t, " supplying oneself with", " getting");
  t = rplUL(t, " supplyingly oneself with", " getting");
  t = rep(t, " sensed/felt oneself", " felt");
  t = rplUL(t, " sense/feel oneself", " feel");
  t = rep(t, " sensing/feeling oneself", " feeling");
  t = rplUL(t, " sensingly/feelingly oneself", " feeling");
  t = rep(t, " subdued/subjugated oneself", " submitted");
  t = rplUL(t, " subdue/subjugate oneself", " submit");
  t = rep(t, " subduing/subjugating oneself", " submitting");
  t = rplUL(t, " subduingly/subjugatingly oneself", " submitting");
  t = rep(t, " found oneself", " was located");
  t = rep(t, " find oneself", " be located");
  t = rep(t, " finding oneself", " being located");
  t = rplUL(t, " findingly oneself", " located");
  t = rep(t, " turned oneself", " turned around");
  t = rplUL(t, " turn oneself", " turn around");
  t = rep(t, " turning oneself", " turning around");
  t = rplUL(t, " turningly oneself", " turning around");
  t = rep(t, " showered oneself", " took a shower");
  t = rplUL(t, " shower oneself", " take a shower");
  t = rep(t, " showering oneself", " taking a shower");
  t = rplUL(t, " showeringly oneself", " taking a shower");
  t = rep(t, " interdissected oneself", " intersected");
  t = rplUL(t, " interdissect oneself", " intersect");
  t = rep(t, " interdissecting oneself", " intersecting");
  t = rplUL(t, " interdissectingly oneself", " intersecting");
  t = rep(t, " disturbed oneself", " went to the trouble of");
  t = rplUL(t, " disturb oneself", " go to the trouble of");
  t = rep(t, " disturbing oneself", " going to the trouble of");
  t = rplUL(t, " disturbingly oneself", " going to the trouble of");
  t = rep(t, " demonstrated/showed oneself", " manifested");
  t = rplUL(t, " demonstrate/show oneself", " manifest");
  t = rep(t, " demonstrating/showing oneself", " manifesting");
  t = rplUL(t, " demonstratingly/showingly oneself", " manifesting");
  t = rplUL(t, " according-to-inside-having", " by contents");
  t = rep(t, " Contentsly", " By contents");
  t = rep(t, " Contentses ", " Contents");
  t = rep(t, " treats/deals with", " deals with");
  t = rep(t, " treated/dealt with", " dealt with");
  t = rplUL(t, " treat/deal with", " deal with");
  t = rep(t, " treating/dealing with", " dealing with");
  t = rplUL(t, " treatingly/dealingly with", " dealing with");
  t = rplUL(t, " by contents divided", " sorted by contents");
  t = rplUL(t, " by a subject divided", " sorted by subject");
  t = rplUL(t, " by an author divided", " sorted by author");
  t = rplUL(t, " by a title/heading/degree divided", " sorted by title");
  t = rplUL(t, " by a key word divided", " sorted by key word");
  t = rplUL(t, " divided by contents", " sorted by contents");
  t = rplUL(t, " divided by a subject", " sorted by subject");
  t = rplUL(t, " divided by an author", " sorted by author");
  t = rplUL(t, " divided by a title/heading/degree", " sorted by title");
  t = rplUL(t, " divided by a key word", " sorted by key word");
  t = rplUL(t, " by contents divided", " sorted by contents");
  t = rplUL(t, " by subjects divided", " sorted by subject");
  t = rplUL(t, " by authors divided", " sorted by author");
  t = rplUL(t, " by titles/headings/degrees divided", " sorted by title");
  t = rplUL(t, " by key words divided", " sorted by key word");
  t = rplUL(t, " divided by contents", " sorted by contents");
  t = rplUL(t, " divided by subjects", " sorted by subject");
  t = rplUL(t, " divided by authors", " sorted by author");
  t = rplUL(t, " divided by titles/headings/degrees", " sorted by title");
  t = rplUL(t, " divided by key words", " sorted by key word");
  t = rplUL(t, " divided according-to-title/heading/degree", " sorted by title");
  t = rplUL(t, " divided ones according-to-title/heading/degree",
	" sorted by title");
  t = rplUL(t, " divided ones an according-to-title/heading/degree",
	" sorted by title");
  t = rplUL(t, " divided according-to-titles/headings/degrees",
	" sorted by title");
  t = rplUL(t, " divided ones according-to-titles/headings/degrees",
	" sorted by title");
  t = rplUL(t, " divided ones an according-to-titles/headings/degrees",
	" sorted by title");
  t = rplUL(t, " divided ones according-to-", " sorted by ");
  t = rplUL(t, " divided ones an according-to-", " sorted by ");
  t = rplUL(t, " divided according-to-", " sorted by ");
  t = rplUL(t, " divided ones according to", " sorted by");
  t = rplUL(t, " divided ones by ", " sorted by ");
  t = rep(t, " one like/how a ", " as a ");
  t = rep(t, " one like/how an ", " as an ");
  t = rplUL(t, " picked up like/how", " taken as");
  t = rplUL(t, " absence of mind", " entertainment");
  t = rep(t, "liing", "lying");
  t = rep(t, "diing", "dying");
  t = rep(t, "viing", "vying");
  t = rep(t, " Liing", " Lying");
  t = rep(t, " Diing", " Dying");
  t = rep(t, " Viing", " Vying");
  t = rplUL(t, " presiding-entity", " president");
  t = rplUL(t, " presiding-entities", " presidents");
  t = rplUL(t, " accelerater", " promoter");
  t = rplUL(t, " cursers/swearers", " blasphemers");
  t = rplUL(t, " curser/swearer", " blasphemer");
  t = rplUL(t, " guiders/steerers", " managers");
  t = rplUL(t, " guider/steerer", " manager");
  t = rplUL(t, " guider", " leader");
  t = rplUL(t, " helper", " assistant");
  t = rplUL(t, " provoker", " instigator");
  t = rplUL(t, " spier on", " spy");
  t = rplUL(t, " spiers on", " spies");
  t = rplUL(t, " beginnerly", " beginning");
  t = rplUL(t, " counsellorly", " advisingly");
  t = rplUL(t, " judgely", " judgingly");
  t = rplUL(t, " crusierly", " cruising");
  t = rplUL(t, " readerly", " reading");
  t = rplUL(t, " opposer", " opponent");
  t = rplUL(t, " stragglerly", " staying behind");
  t = rplUL(t, " exponently", " raising to the power");
  t = rplUL(t, " practitionerly", " practising");
  t = rplUL(t, " passer-bily", " passing by");
  t = rplUL(t, " presidently", " presiding");
  t = rplUL(t, " strollerly", " walking");
  t = rplUL(t, " patronly", " protectingly");
  t = rep(t, " Protestantly", " Protestingly");
  t = rplUL(t, " rulerly", " controlingly");
  t = rplUL(t, " rebel/mutineerly", " rebelliously");
  t = rplUL(t, " recipient/consigneely", " receiving");
  t = rplUL(t, " spectatorly", " looking");
  t = rplUL(t, " starterly", " starting");
  t = rplUL(t, " studently", " studying");
  t = rplUL(t, " tempterly", " temptingly");
  t = rplUL(t, " cheater/deceiver/imposterly", " deceptively");
  t = rplUL(t, " userly", " using");
  t = rplUL(t, " variably", " varying");
  t = rplUL(t, " baby-sitterly", " baby-sitting");
  t = rplUL(t, " visitorly", " visiting");
  t = rplUL(t, " travelerly", " traveling");
  t = rplUL(t, " caretakerly", " taking care of");
  t = rplUL(t, " an own ", " his/her/its own ");
  t = rplUL(t, " disgustingsmall flaxes", " little daughters");
  t = rplUL(t, " disgustingsmall flax", " little daughter");
  t = rplUL(t, " offsprings", " offspring");
  t = rep(t, "otherwise than", "differently from");
  t = rep(t, " Otherwise than", " Differently from");
  t = rplUL(t, " representer", " representative");
  t = rplUL(t, " the more many", " more");
  t = rplUL(t, " the most many", " most");
  t = rplUL(t, " the more many", " more");
  t = rplUL(t, " the most many", " most");
  t = rep(t, " middle/average/mean of the day", " middle of the day");
  t = rep(t, " middle/average/mean of the night", " middle of the night");
  t = rep(t, " middle/average/mean of the morning", " middle of the morning");
  t = rep(t, " middle/average/mean of the afternoon",
	" middle of the afternoon");
  t = rep(t, " middle/average/mean of the street", " middle of the street");
  t = rep(t, " middle/average/mean of the road", " middle of the road");
  t = rep(t, " middle/average/mean of the week", " middle of the week");
  t = rep(t, " middle/average/mean of the month", " middle of the month");
  t = rep(t, " middle/average/mean of the year", " middle of the year");
  t = rep(t, " middle/average/mean of the room", " middle of the room");
  t = rep(t, " as/that way, that", ", so that");
  t = rep(t, " As/that way, that", "So that");
  t = rplUL(t, " as/that way that", " so that");
  t = rplUL(t, " backed/again", " back/again");
  t = rplUL(t, " to be now ", " to be ");
  t = rep(t, "It  ", " It ");
  t = rep(t, "it  ", " it ");
  t = rep(t, " a but ", " but a ");
  t = rep(t, " an and ", " and a ");
  t = rep(t, " and/an or ", " and/or a ");
  t = rep(t, " a nor ", " nor a ");
  t = rplUL(t, " aide-de-camps", " aides-de-camp");
  t = rplUL(t, " fastly/quickly", " fast");
  t = rplUL(t, " more fastly/quickly", " faster");
  t = rplUL(t, " most fastly/quickly", " fastest");
  t = rplUL(t, " of a place", " from a place");
  t = rplUL(t, " of places", " from places");
  t = rplUL(t, " non-been familiar with", " unfamiliar");
  rgx = " (h|H)a(s|d|ve|ving)(ly)?(erly)? what to ";
  t = regex_replace(t, rgx, " $1a$2 anything to ");
  rgx = " (h|H)a(s|d|ve|ving)(ly)?(erly)? which to ";
  t = regex_replace(t, rgx, " $1a$2 anyone to ");
  t = rplUL(t, " global/world-wide warming up", " global warming");
  t = rplUL(t, " account receivables/debtors", " accounts receivable/debtors");
  t = rplUL(t, " account payables/creditors", " accounts payable/creditors");
  t = rep(t, " dominoeses", " dominoes");
  t = rplUL(t, " attached/fastened/fixed statement-thing", " fixed saying");
  t = rep(t, " Dominoeses", " Dominoes");
  t = rplUL(t, " givens/datums", " data");
  t = rplUL(t, " create-thing", " creation");
  t = rplUL(t, " enough new", " new enough");
  t = rplUL(t, " enough old", " old enough");
  t = rplUL(t, " enough large", " big enough");
  t = rplUL(t, " enough small", " small enough");
  t = rplUL(t, " enough fast", " fast enough");
  t = rep(t, " enough slowly", " slowly enough");
  t = rplUL(t, " enough slow", " slow enough");
  t = rplUL(t, " enough tall/high", " tall/high enough");
  t = rplUL(t, " opposite-of-continuing to derive", " back-formation");
  t = rep(t, " becomes deriving of ", " derives from ");
  t = rep(t, " became deriving of ", " derived from ");
  t = rep(t, " become deriving of ", " derive from ");
  t = rep(t, " becoming deriving of ", " deriving from ");
  t = rplUL(t, " becomingly deriving of ", " deriving from ");
  t = rep(t, " becomes deriving from ", " derives from ");
  t = rep(t, " became deriving from ", " derived from ");
  t = rep(t, " become deriving from ", " derive from ");
  t = rep(t, " becoming deriving from ", " deriving from ");
  t = rplUL(t, " becomingly deriving from ", " deriving from ");
  t = rep(t, " becomes occupation", " becomes occupied");
  t = rep(t, " became occupation", " became occupied");
  t = rep(t, " becoming occupation", " becoming occupied");
  t = rplUL(t, " becomingly occupation", " becoming occupied");
  t = rplUL(t, " become occupation", " become occupied");
  t = rep(t, " becomes number", " is numbered");
  t = rep(t, " became number", " was numbered");
  t = rep(t, " become number", " are numbered");
  t = rep(t, " Become number", " Numbered");
  t = rep(t, " becoming number", " being numbered");
  t = rplUL(t, " becomingly number", " being numbered");
  t = rplUL(t, " numbered on/in", " numbered at");
  t = rplUL(t, " occupied about ", " occupied with ");
  t = rplUL(t, " an new", " a new");
  t = rep(t, "Continu", "continu");
  t = rep(t, ". continu", ". Continu");
  t = rep(t, "? continu", "? Continu");
  t = rep(t, "! continu", "! Continu");
  t = rep(t, " -bec", " bec");
  t = rep(t, " to-be-", " toxx-be-");
  t = rep(t, " to-", " ");
  t = rep(t, " toxx-be-", " to-be-");
  t = rep(t, " To-be-", " Toxx-be-");
  t = rep(t, " To-", " ");
  t = rep(t, " Toxx-be-", " To-be-");
  t = rplUL(t, " deriving-golden-people a lot", " derivation rules");
  t = rplUL(t, " deriving-golden-person a lot", " derivation rule");
  rgx = " (s|S)olv(e|es|ed|ing)(ly)?(erly)?/dissolv(e|es|ed|ing)(ly)?(erly)? (the|a) problem";
  t = regex_replace(t, rgx,
	" $1olv$2 $6 problem");
  t = rplUL(t, " esperantan", " Esperanto");
  t = rep(t, ", is ", ", it's ");
  t = rep(t, "; is ", "; it's ");
  t = rep(t, ": is ", ": it's ");
  t = rep(t, " Is not ", " It's not ");
  t = rplUL(t, " the bigger part of", " the majority of");
  t = rplUL(t, " the smaller part of", " the minority of");
  t = rplUL(t, " meaningness", " meaningfulness");
  t = rep(t, "-in the ", " ");
  if (t.length() > 2) {
	if (t.substr(t.length() - 3).find("?") >= FOUND) {
	  t = rep(t, " Like/how is it ", " How is it ");

	}
	if (t.substr(t.length() - 3).find("?") >= FOUND) {
	  t = rep(t, " Like/how was it ", " How was it ");
	}
  }
  t = rep(t, " But like that ", " But how is it that ");
  t = rplF(t, "betweened/among-tied/linked", "interlinked");
  t = rep(t, " Is to ", " It's to ");
  t = rep(t, " Is to-", " It's to-");
  t = rplUL(t, " how much/many maybe so much/many", " as much as possible");
  t = rplUL(t, " as much as possible many", " as many as possible");
  t = rplUL(t, " out-from-use", " using up");
  t = rep(t, " on-is burdensome", " presses down on");
  t = rep(t, " on-was burdensome", " pressed down on");
  t = rep(t, " on-were burdensome", " pressed down on");
  t = rep(t, " on-are burdensome", " press down on");
  t = rep(t, " on-am burdensome", " press down on");
  t = rep(t, " on-been burdensome", " pressed down on");
  t = rep(t, " on-be burdensome", " press down on");
  t = rep(t, " on-being burdensome", " pressing down on");
  t = rplUL(t, " on-beingly burdensome", " pressing down on");
  t = rep(t, " through-be stings", " pierces");
  t = rep(t, " through-be stung", " pierced");
  t = rplUL(t, " through-be sting", " pierce");
  t = rep(t, " through-is stinging", " piercing");
  t = rplUL(t, " through-is stingingly", " piercing");
  t = rplUL(t, " pregnantnesses", " pregnancies");
  t = rplUL(t, " pregnantness", " pregnancy");
  t = rplUL(t, " opposite-of-toologist", " unattractive");
  t = rplUL(t, " opposite-of-toologistness", " unattractiveness");
  t = rplUL(t, " toologistness", " attractiveness");
  rgx = " \\(how\\)([.,?!:;)])";
  t = regex_replace(t, rgx, "$1");
  rgx = " like/how (you|it)([.,?!:;)])";
  t = regex_replace(t, rgx, " like $1$2");
  rgx = " like/how I([.,?!:;)])";
  t = regex_replace(t, rgx, " like me$1");
  rgx = " like/how he([.,?!:;)])";
  t = regex_replace(t, rgx, " like him$1");
  rgx = " like/how she([.,?!:;)])";
  t = regex_replace(t, rgx, " like her$1");
  rgx = " like/how they([.,?!:;)])";
  t = regex_replace(t, rgx, " like them$1");
  rgx = " like/how we([.,?!:;)])";
  t = regex_replace(t, rgx, " like us$1");
  rgx = " Like/how is it that (you|it)([.,?!:;)])";
  t = regex_replace(t, rgx, " Like $1$2");
  rgx = " Like/how is it that I([.,?!:;)])";
  t = regex_replace(t, rgx, " Like me$1");
  rgx = " Like/how is it that he([.,?!:;)])";
  t = regex_replace(t, rgx, " Like him$1");
  rgx = " Like/how is it that she([.,?!:;)])";
  t = regex_replace(t, rgx, " Like her$1");
  rgx = " Like/how is it that they([.,?!:;)])";
  t = regex_replace(t, rgx, " Like them$1");
  rgx = " Like/how is it that we([.,?!:;)])";
  t = regex_replace(t, rgx, " Like us$1");
  rgx = " How is it that (you|it)([.,?!:;)])";
  t = regex_replace(t, rgx, " Like $1$2");
  rgx = " How is it that I([.,?!:;)])";
  t = regex_replace(t, rgx, " Like me$1");
  rgx = " How is it that he([.,?!:;)])";
  t = regex_replace(t, rgx, " Like him$1");
  rgx = " How is it that she([.,?!:;)])";
  t = regex_replace(t, rgx, " Like her$1");
  rgx = " How is it that they([.,?!:;)])";
  t = regex_replace(t, rgx, " Like them$1");
  rgx = " How is it that we([.,?!:;)])";
  t = regex_replace(t, rgx, " Like us$1");
  rgx = " access(.{1,6})reach(.*) of ";
  t = regex_replace(t, rgx, " reach$2 from ");
  rgx = " Access(.{1,6})reach(.*) of ";
  t = regex_replace(t, rgx, " Reach$2 from ");
  t = rplUL(t, " pierceing", " piercing");
  t = rep(t, " (how) a ", " a ");
  t = rep(t, " (how) an ", " an ");
  t = rep(t, " (how) the ", " the ");
  t = rep(t, " (how) that ", " that ");
  t = rep(t, " (how) this ", " this ");
  t = rep(t, " (how) these ", " these ");
  t = rep(t, " (how) those ", " those ");
  t = rplUL(t, " opposite-of-height", " lowness");
  t = rep(t, " Is no ", " There is no ");
  rgx = " (k|K)now(s|ing)?(ly)?(erly)? that (is|was|are|were|isn't|wasn't|aren't|weren't|would|will|wouldn't|won't)([ .,?!;:)])";
  t = regex_replace(t, rgx, " $1now$2 that there $4$5");
  t = rep(t, " knew that is ", " knew that there is ");
  t = rep(t, " knew that was ", " knew that there was ");
  rgx = "\\b(know|knows|knew|known|knowing|Know) how (it|them)\\b";
  t = regex_replace(t, rgx, "$1 $2");
  t = rep(t, "During me ", "while I ");
  t = rep(t, "during me ", "while I ");
  t = rep(t, "During you ", "while you ");
  t = rep(t, "during you ", "while you ");
  t = rep(t, "During us ", "while we ");
  t = rep(t, "during us ", "while we ");
  t = rep(t, "During him ", "while he ");
  t = rep(t, "during him ", "while he ");
  t = rep(t, "During her ", "while she ");
  t = rep(t, "during her ", "while she ");
  t = rep(t, "During them ", "while they ");
  t = rep(t, "during them ", "while they ");
  t = rep(t, "During it ", "while it ");
  t = rep(t, "during it ", "while it ");
  t = rplUL(t, " a Romance one America", " Latin America");
  t = rplUL(t, " Romance America", " Latin America");
  t = rplUL(t, " web-a place", " website");
  t = rplUL(t, " web-places", " websites");
  t = rplUL(t, " like/how maybe more of ", " as many as possible ");
  t = rplUL(t, " like/how maybe more", " as many as possible");
  t = rplUL(t, " before-thankses", " thanks in advance");
  t = rplUL(t, " before-thanks", " thanks in advance");
  t = rplUL(t, " broken member", " broken limb");
  t = rplUL(t, " long member", " long limb");
  t = rplUL(t, " short members", " short limbs/members");
  t = rplUL(t, " short member", " short limb/member");
  t = rep(t, "Jorko", "York");
  t = rplUL(t, " up to that ", " until ");
  t = rplUL(t, " friendlies", " friends");
  rgx = " (a|A)rriv(e|es|ed|ing)(ly)?(erly)? to ";
  t = regex_replace(t, rgx, " $1rriv$2 at ");
  t = rep(t, " inside-types", " types in");
  t = rep(t, " inside-typed", " typed in");
  t = rplUL(t, " inside-type", " type in");
  t = rep(t, " inside-typing", " typing in");
  t = rplUL(t, " inside-typingly", " typing in");
  t = rep(t, " picks up decisions", " makes decisions");
  t = rep(t, " picked up decisions", " made decisions");
  t = rplUL(t, " pick up decisions", " make decisions");
  t = rep(t, " picking up decisions", " making decisions");
  t = rplUL(t, " pickingly up decisions", " making decisions");
  t = rep(t, " picks up a decision", " makes a decision");
  t = rep(t, " picked up a decision", " made a decision");
  t = rplUL(t, " pick up a decision", " make a decision");
  t = rep(t, " picking up a decision", " making a decision");
  t = rplUL(t, " pickingly up a decision", " making a decision");
  rgx = "(r|R)esult(s|ed|ing)?(ly)?(erly)? of ";
  t = regex_replace(t, rgx, "$1esult$2 from ");
  t = rplUL(t, " please should ", " please ");
  t = rplUL(t, " like/how usually", " as usual");
  t = rplF(t, "agreemently", "by common agreement");
  t = rep(t, "-been worthy", "");
  t = rep(t, " not it's ", " it's not ");
  rgx = " not it (was|would|should) ";
  t = regex_replace(t, rgx, " it $1n't ");
  t = rep(t, " not it will ", " it won't ");
  t = rep(t, " Not it's ", " It's not ");
  t = rep(t, " Not it was ", " It wasn't ");
  t = rep(t, " Not it will ", " It won't ");
  t = rep(t, " Not it would ", " It wouldn't ");
  t = rep(t, " Not it should ", " It shouldn't ");
  t = rep(t, " isn't previously ", " hasn't been ");
  t = rep(t, " Isn't previously ", " There hasn't been ");
  t = rplUL(t, " not okay", " not very well");
  t = rplUL(t, " that, what ", " that which ");
  t = rplUL(t, " hostel/innist", " innkeeper");
  t = rep(t, "day'ly", "day");
  t = rep(t, "Sundayly", "Sunday");
  t = rep(t, "Mondayly", "Monday");
  t = rep(t, "Tuesdayly", "Tuesday");
  t = rep(t, "Wednesdayly", "Wednesday");
  t = rep(t, "Thursdayly", "Thursday");
  t = rep(t, "Fridayly", "Friday");
  t = rep(t, "Saturdayly", "Saturday");
  t = rep(t, "Januaryly", "in January");
  t = rep(t, "Februaryly", "in February");
  t = rep(t, "Marchly", "in March");
  t = rep(t, "Aprilly", "in April");
  t = rep(t, "Mayly", "in May");
  t = rep(t, "Junely", "in June");
  t = rep(t, "Julyly", "in July");
  t = rep(t, "Augustly", "in August");
  t = rep(t, "Septemberly", "in September");
  t = rep(t, "Octoberly", "in October");
  t = rep(t, "Novemberly", "in November");
  t = rep(t, "Decemberly", "in December");
  t = rep(t, " if it the ", " if the ");
  rgx = " \\(of\\) (and|or|but|with|and/or) ";
  t = regex_replace(t, rgx, " $1 ");
  t = rplUL(t, " please it should ", " please ");
  t = rep(t, " Please to ", " Please ");
  t = rep(t, " please to ", " please ");
  t = rep(t, " opposite-of-length", " shortness");
  t = rep(t, " opposite-of-height", " shortness");
  t = rep(t, " opposite-of-width", " narrowness");
  t = rep(t, " opposite-of-depth", " shallowness");
  t = rep(t, " opposite-of-size", " smallness");
  t = rep(t, " opposite-of-goodness", " evil");
  t = rep(t, " opposite-of-speed", " slowness");
  t = rep(t, " Like/how?", " How?");
  rgx = " is it that is (it|he|she)( |\\?)";
  t = regex_replace(t, rgx, " is $1$2");
  rgx = " was it that was (it|he|she|I)( |\\?)";
  t = regex_replace(t, rgx, " was $1$2");
  rgx = " is it that it's( |\\?)";
  t = regex_replace(t, rgx, " is it$1");
  rgx = " is it that are (they|you|we|I)( |\\?)";
  t = regex_replace(t, rgx, " are $1$2");
  rgx = " was it that were (they|you|we|I)( |\\?)";
  t = regex_replace(t, rgx, " were $1$2");
  rgx = " is it that am I( |,|\\?)";
  t = regex_replace(t, rgx, " am I$1");
  t = rep(t, " is it that is the ", " is the ");
  t = rep(t, " is it that are the ", " are the ");
  t = rep(t, " was it that was the ", " was the ");
  t = rep(t, " was it that were the ", " were the ");
  t = rep(t, " was it that was a ", " was a ");
  t = rep(t, " was it that was an ", " was an ");
  t = rplUL(t, " near me) {", " at this time");
  t = rep(t, " forward to about ", " forward to ");
  t = rep(t, " somebody/some from you", " some of you");
  t = rep(t, " somebody/some from us", " some of us");
  t = rep(t, " somebody/some from them", " some of them");
  t = rep(t, " Somebody/some from you", " Some of you");
  t = rep(t, " Somebody/some from us", " Some of us");
  t = rep(t, " Somebody/some from them", " Some of them");
  t = rplUL(t, " some(one) other", " someone else");
  t = rplUL(t, " something other", " something else");
  t = rplUL(t, " anything other", " anything else");
  t = rep(t, " to okay to ", " to pretty well ");
  t = rplUL(t, " chosen/elected word", " chosen word");
  t = rplUL(t, " the by chance ", " the randomly ");
  t = rplUL(t, " able-to-be able", " able");
  t = rplUL(t, " only of ", " only from ");
  t = rep(t, " to while ", " to during ");
  t = rep(t, " while one ", " during one ");
  t = rep(t, " while one ", " During one ");
  t = rplUL(t, " this -", " this ");
  t = rplUL(t, " slightly cinema", " kinetic");
  t = rep(t, " Isn't missing ", " There's no lack of ");
  t = rep(t, " Is missing ", " There's a lack of ");
  t = rep(t, " Wasn't missing ", " There was no lack of ");
  t = rep(t, " Was missing ", " There was a lack of ");
  t = rep(t, " Won't be missing ", " There won't be a lack of ");
  t = rep(t, " Will be missing ", " There will be a lack of ");
  t = rep(t, " Wouldn't be missing ", " There wouldn't be a lack of ");
  t = rep(t, " Would be missing ", " There would be a lack of ");
  t = rep(t, " Shouldn't be missing ", " There shouldn't be a lack of ");
  t = rep(t, " Should be missing ", " There should be a lack of ");
  t = rep(t, " suckles his/her/its/their ", " suckles her ");
  t = rep(t, " suckled his/her/its/their ", " suckled her/their ");
  t = rep(t, " suckle his/her/its/their ", " suckle her/their ");
  t = rep(t, " suckling his/her/its/their ", " suckling her/their ");
  t = rplUL(t, " sucklingly his/her/its/their ", " suckling her/their ");
  t = rep(t, " buys to ", " buys for ");
  t = rep(t, " bought to ", " bought for ");
  t = rplUL(t, " buy to ", " buy for ");
  t = rep(t, " buying to ", " buying for ");
  t = rplUL(t, " buyingly to ", " buying for ");
  t = rep(t, " does/makes to ", " does/makes for ");
  t = rep(t, " did/made to ", " did/made for ");
  t = rplUL(t, " done/made to ", " done/made for ");
  t = rplUL(t, " do/make to ", " do/make for ");
  t = rep(t, " doing/making to ", " doing/making for ");
  t = rplUL(t, " doingly/makingly to ", " doing/making for ");
  rgx = " (t|T)each(es|ing)(ly)?(erly)? to (them|him|her|it|me|you|us|one)";
  t = regex_replace(t, rgx, " $1each$2 $4");
  rgx = " (he|she|they|I|you|we|He|She|They|You|We) taught to (them|him|her|it|me|you|us|one)";
  t = regex_replace(t, rgx, " $1 taught $2");
  t = rep(t, " Does ", " It does ");
  t = rep(t, " Did ", " It did ");
  t = rep(t, " Will ", " It will ");
  t = rep(t, " Would ", " It would ");
  t = rep(t, " Doesn't ", " It doesn't ");
  t = rep(t, " Didn't ", " It didn't ");
  t = rep(t, " Won't ", " It won't ");
  t = rep(t, " Wouldn't ", " It wouldn't ");
  t = rplUL(t, " internetian", " Internet");
  t = rep(t, " lily", " xxlily");
  t = rep(t, "lily", "ly");
  t = rep(t, " xxlily", "lily");
  t = rep(t, "microbackground", "microphone");
  t = rep(t, " Microbackground", " Mcrophone");
  t = rep(t, " Is in ", " It's in ");
  t = rep(t, " Is about ", " It's about ");
  t = rep(t, " Is for ", " It's for ");
  t = rep(t, " Is from ", " It's from ");
  t = rep(t, " Is of ", " It's from ");
  t = rep(t, " It's of ", " It's from ");
  if (!(indexof(txtxt, "francio") >= FOUND) && (!startswith(txtxt, " Franc"))) t = rep(t, " France/francium",
	" France");
  t = rep(t, " from France/francium", " from France");
  t = rplUL(t, " daily newses/novelties", " daily news");
  t = rplUL(t, " daily news/novelty", " daily news");
  t = rplUL(t, " matters/businesses", " matters");
  t = rplUL(t, " lock of hairs", " locks of hair");
  t = rplUL(t, " hours/times", " hours");
  t = rplUL(t, " under-species", " sub-species");
  rgx = " after/behind (\\d)";
  t = regex_replace(t, rgx, " after $1");
  rgx = " After/behind ([0-9'.])";
  t = regex_replace(t, rgx, " After $1");
  rgx = " (a|A)fter/behind (one|tw|three|four|five|six|seven|eight|nine|ten|eleven|thirt|forty|fif)";
  t = regex_replace(t, rgx, " $1fter $2");
  t = rep(t, " birth into ", " birth to in ");
  t = rplUL(t, " his wallet/purse", " his wallet");
  t = rep(t, " periodic/periodical table", " periodic table");
  t = rep(t, " A good one.", " Good.");
  t = rep(t, " A good one!", " Good!");
  t = rep(t, " A good one?", " Good?");
  t = rplUL(t, " medical recipes/prescriptions", " medical prescriptions");
  t = rplUL(t, " medical recipe/prescription", " medical prescription");
  t = rplUL(t, " food recipes/prescriptions", " recipes");
  t = rplUL(t, " food recipe/prescription", " recipe");
  t = rplUL(t, " romantic appointments/dates", " dates");
  t = rplUL(t, " romantic appointment/date", " date");
  t = rplUL(t, " medical appointments/dates", " medical appointments");
  t = rplUL(t, " medical appointment/date", " medical appointment");
  t = rplUL(t, " dental appointments/dates", " dental appointments");
  t = rplUL(t, " dental appointment/date", " dental appointment");
  t = rplUL(t, " meanses/resources", " means/resources");
  t = rplUL(t, " romes/novelians", " Romans/novels");
  t = rplUL(t, " rome/novelian", " Roman/novel");
  t = rplUL(t, " epoches", " epochs");
  t = rplUL(t, " between/among the two of ", " between the two of ");
  t = rplUL(t, " responsible about ", " responsible for ");
  t = rplUL(t, " responsibility about ", " responsibility for ");
  t = rep(t, "-leaderring", "-leader");
  t = rep(t, "-governings/controllings", "-leaders");
  t = rep(t, "-governing/controlling", "-leader");
  t = rplUL(t, " merchandises/wares", " merchandise");
  t = rplUL(t, " merchandise/ware", " piece of merchandise");
  t = rplUL(t, " watts/cotton-wools", " watts");
  t = rplUL(t, " one watt/cotton-wool", " one watt");
  t = rep(t, " piece of clothings/garments", "pieces of clothing/garments");
  t = rep(t, " Piece of clothings/garments", "Pieces of clothing/garments");
  t = rep(t, " voice/vote for", " vote for");
  t = rplUL(t, " voices/votes for", " votes for");
  t = rplUL(t, " web-place", " website");
  t = rplUL(t, " governed/controlled of ", " governed/controlled by ");
  t = rplUL(t, " web-master", " webmaster");
  t = rplUL(t, " a lot-", " multi-");
  t = rplUL(t, " more like/as ", " more like ");
  t = rep(t, "-ber ", "-be-er ");
  t = rep(t, "-small", " little");
  t = rplUL(t, " oh should ", " oh ");
  t = rep(t, " I aren't", " I'm not");
  t = rplUL(t, " before/ago some years", " several years ago");
  t = rplUL(t, " before/ago some months", " several months ago");
  t = rplUL(t, " before/ago some weeks", " several weeks ago");
  t = rplUL(t, " before/ago some days", " several days ago");
  t = rplUL(t, " before/ago some hours", " several hours ago");
  t = rplUL(t, " before/ago some minutes", " several minutes ago");
  t = rplUL(t, " it it's ", " it's ");
  return t;
}

static string korrections8(string t) {
  // Corrections and adjustments for phrases, part 8:
  t = rep(t, " certain whether/or ", " certain whether ");
  t = rep(t, " indeed it ", " it really ");
  rgx = " indeed (he|she|it|they|I|you|we|one) ";
  t = regex_replace(t, rgx, " $1 sure ");
  t = rep(t, " Indeed it ", " It sure ");
  t = rep(t, " Indeed he ", " He sure ");
  t = rep(t, " Indeed she ", " She sure ");
  t = rep(t, " Indeed they ", " They sure ");
  t = rep(t, " Indeed you ", " You sure ");
  t = rep(t, " Indeed I ", " I sure ");
  t = rep(t, " Indeed we ", " We sure ");
  t = rplUL(t, " indeed", " definitely");
  t = rep(t, " with difficulty to ", " hard to ");
  t = rep(t, " easily to ", " easy to ");
  rgx = " (e|E)arn(s|ed|ing)?(ly)?(erly)?/gain(s|ed|ing)?(ly)?(erly)?/win(s|ed|ing)?(ly)?(erly)? money";
  t = regex_replace(t, rgx,
	" $1arn$2 money");
  rgx = " earn(s|ed|ing)?(ly)?(erly)?/gain(s|ed|ing)?(ly)?(erly)?/win(s|ed|ing)?(ly)?(erly)? weight";
  t = regex_replace(t, rgx,
	" gain$1 weight");
  rgx = " Earn(s|ed|ing)?(ly)?(erly)?/gain(s|ed|ing)?(ly)?(erly)?/win(s|ed|ing)?(ly)?(erly)? weight";
  t = regex_replace(t, rgx,
	" Gain$1 weight");
  rgx = " earn(s|ed|ing)?(ly)?(erly)?/gain(s|ed|ing)?(ly)?(erly)?/win(s|ed|ing)?(ly)?(erly)? (the|an) award/prize";
  t = regex_replace(t, rgx,
	" win$2 $7 award/prize");
  rgx = " Earn(s|ed|ing)?(ly)?(erly)?/gain(s|ed|ing)?(ly)?(erly)?/win(s|ed|ing)?(ly)?(erly)? (the|an) award/prize";
  t = regex_replace(t, rgx,
	" Win$2 $7 award/prize");
  t = rep(t, " says to ", " tells ");
  t = rep(t, " said to ", " told ");
  t = rplUL(t, " say to ", " tell ");
  t = rep(t, " saying to ", " telling ");
  t = rplUL(t, " sayingly to ", " telling ");
  t = rplUL(t, " be internal", " be in");
  t = rep(t, " is internal", " is in");
  t = rep(t, " was internal", " was in");
  t = rep(t, " am internal", " am in");
  t = rep(t, " I'm internal", " I'm in");
  t = rep(t, " are internal", " are in");
  t = rep(t, "'s internal", "'s in");
  t = rep(t, "'re internal", "'re in");
  t = rep(t, " were internal", " were in");
  t = rep(t, " being internal", " being in");
  t = rplUL(t, " beingly internal", " being in");
  rgx = "\\( (but|But|and|And|or|Or|and/or|And/or) should ";
  t = regex_replace(t, rgx, "( $1 ");
  rgx = " (But|And|Or|And/or) whether/or ";
  t = regex_replace(t, rgx, " $1 ");
  t = rplF(t, "carefully should ", "carefully ");
  t = rep(t, " nets/network-pages", " web-pages");
  t = rep(t, " net/network-page", " web-page");
  t = rep(t, " Nets/network-pages", " Web-pages");
  t = rep(t, " Net/network-page", " Web-page");
  t = rep(t, " Latinian", " Latin");
  t = rep(t, "an a-", "-");
  t = rplUL(t, " ea-", " e-");
  t = rplUL(t, " any one ones", " any");
  t = rplUL(t, " somebody/some at all ones", " any ones");
  t = rep(t, "-personning", "-person");
  t = rep(t, "-persons", "-people");
  t = rplUL(t, " size-", " big-");
  t = rplUL(t, " smallness-", " small-");
  t = rplUL(t, " height/altitude-", " tall-");
  t = rplUL(t, " lowness/altitude-", " short-");
  t = rplUL(t, " opposite-of-thickness-", " thin-");
  t = rplUL(t, " thickness-", " fat-");
  t = rplUL(t, " length-", " long-");
  rgx = " former-(\\d)";
  t = regex_replace(t, rgx, " pre-$1");
  rgx = " Former-(\\d)";
  t = regex_replace(t, rgx, " Pre-$1");
  t = rep(t, " a there ", " there a ");
  t = rep(t, " a somewhere ", " somewhere a ");
  t = rep(t, " an anywhere ", " anywhere a ");
  t = rep(t, " a nowhere ", " nowhere a ");
  t = rep(t, " an everywhere ", " everywhere a ");
  t = rep(t, " a) {", ") {a ");
  t = rep(t, " A there ", " There a ");
  t = rep(t, " A somewhere ", " Somewhere a ");
  t = rep(t, " An anywhere ", " Anywhere a ");
  t = rep(t, " A nowhere ", " Nowhere a ");
  t = rep(t, " An everywhere ", " Everywhere a ");
  t = rep(t, " A) {", ") {a ");
  t = rep(t, " in danger to be ", " in danger of being ");
  t = rep(t, " in danger to become ", " in danger of becoming ");
  t = rep(t, " in danger to have ", " in danger of having ");
  t = rep(t, " in danger to go ", " in danger of going ");
  t = rep(t, " in danger to get ", " in danger of getting ");
  t = rep(t, " in danger to do/make ", " in danger of doing/making ");
  t = rep(t, " Exists", " There is");
  t = rep(t, " Exist ", " There are ");
  t = rep(t, " Existed", " There was");
  t = rep(t, " Exist.", " There should be.");
  t = rep(t, " Exist!", " There should be!");
  t = rep(t, " Exist?", " There should be?");
  t = rplUL(t, " card/map/menu playing", " card playing");
  t = rep(t, " 52-card/map/menu", " 52-card");
  t = rep(t, " 52 cards/maps/menus", " 52 cards");
  t = rplUL(t, " card-groups", " packs of cards");
  t = rplUL(t, " card-group", " pack of cards");
  t = rplUL(t, " distributer", " distributor");
  t = rplUL(t, " a now ", " now a ");
  t = rplUL(t, " a called ", " called a ");
  rgx = " (given|Given|sent|Sent|sold|Sold|taken|Taken|received|Received|gotten|Gotten) ones? (from|to) ";
  t = regex_replace(t, rgx, " $1 $2 ");
  t = rplUL(t, " the life from ", " the life of ");
  rgx = " an? (him|her|it|them|me|you|us|one)([.,?!:;)])";
  t = regex_replace(t, rgx, " $1$2 ");
  t = rep(t, " But seems ", " But it seems ");
  t = rep(t, " But seemed ", " But it seemed ");
  t = rep(t, " And seems ", " And it seems ");
  t = rep(t, " And seemed ", " And it seemed ");
  t = rep(t, " Or seems ", " Or it seems ");
  t = rep(t, " Or seemed ", " Or it seemed ");
  t = rep(t, "Skylight/porthole/Luke", "Luke");
  t = rep(t, " of the beginning", " from the beginning");
  rgx = "Brand/mark ([1-9])";
  t = regex_replace(t, rgx, "Mark $1");
  rgx = "Yerba mate/Matthew ([1-9])";
  t = regex_replace(t, rgx, "Matthew $1");
  t = rplUL(t, " king from ", " king of ");
  t = rplUL(t, " kings from ", " kings of ");
  t = rplUL(t, " the Mr", " the Lord");
  t = rplUL(t, " paparazzos", " paparazzi");
  t = rplUL(t, " under-committee", " sub-committee");
  t = rep(t, " Saturday/Sabbath'ly", " on Saturday/the Sabbath");
  t = rplUL(t, " halfly through", " halfway through");
  t = rplUL(t, " year from ", " year of ");
  t = rplUL(t, " human ones authorities/rights", " human rights");
  t = rplUL(t, " human authority/right", " human right");
  t = rplUL(t, " responsibly tellingly", " answering");
  t = rplUL(t, " responsibly tell", " answer");
  t = rep(t, " responsibly told", " answered");
  t = rplUL(t, " responsibly sayingly", " answering");
  t = rplUL(t, " responsibly say", " answer");
  t = rep(t, " responsibly said", " answered");
  rgx = " (b|B)ecom(e|es|ing)(ly)?(erly)? fullfilling";
  t = regex_replace(t, rgx, " $1ecom$2 fullfilled");
  t = rep(t, " became fullfilling", " became fullfilled");
  t = rep(t, " sees vision", " has a vision");
  t = rep(t, " see vision", " have a vision");
  t = rep(t, " saw vision", " had a vision");
  t = rep(t, " seeing vision", " having a vision");
  t = rplUL(t, " seeingly vision", " having a vision");
  t = rep(t, " a visions", " visions");
  rgx = " Li([ .,?!;:)])";
  t = regex_replace(t, rgx, " He$1");
  rgx = " Liaj?n?([ .,?!;:)])";
  t = regex_replace(t, rgx, " His$1");
  rgx = " Lin([ .,?!;:)])";
  t = regex_replace(t, rgx, " Him$1");
  rgx = " Si([ .,?!;:)])";
  t = regex_replace(t, rgx, " He himself/she herself$1");
  rgx = " Siaj?n?([ .,?!;:)])";
  t = regex_replace(t, rgx, " His/her own$1");
  rgx = " Sin([ .,?!;:)])";
  t = regex_replace(t, rgx, " He himself/she herself$1");
  t = rep(t, " city from ", " city of ");
  t = rep(t, " cities from ", " cities of ");
  t = rplUL(t, " whose a ", " whose ");
  t = rep(t, " from the house from ", " from the house of ");
  t = rep(t, " from the houses from ", " from the houses of ");
  t = rep(t, " not is it that ", " not ");
  t = rep(t, " I not is ", " I'm not ");
  t = rep(t, " you not is ", " you're not ");
  t = rep(t, " they not is ", " they're not ");
  t = rep(t, " we not is ", " we're not ");
  t = rep(t, " will be that", " will that be");
  t = rep(t, " would be that", " would that be");
  t = rep(t, " Son from God/a god", " Son of God");
  t = rep(t, " Son from God", " Son of God");
  t = rep(t, " be to me ", " may it be for me ");
  t = rep(t, " rose/get", " rose/got");
  t = rep(t, " risen/getted", " risen/gotten");
  t = rplUL(t, " of now", " from now on");
  t = rplUL(t, " of) {", " from) {on");
  t = rplUL(t, " birth from ", " birth of ");
  rgx = " birth to([.,?!;:)])";
  t = regex_replace(t, rgx, " birth$1");
  t = rep(t, " will be now ", " will be ");
  t = rep(t, " would be now ", " would be ");
  t = rep(t, " visat", " visited");
  t = rep(t, " At most-tall/high person", " Highest One");
  rgx = " (grand)?(son|daughter|mother|father)(s)? from ";
  t = regex_replace(t, rgx, " $1$2$3 of ");
  rgx = " (brother|sister|uncle|aunt|cousin|husband|wife|friend|boyfriend|girlfriend|relative|enemy)(s)? from ";
  t = regex_replace(t, rgx, " $1$2 of ");
  t = rep(t, "in-law from ", "in-law of ");
  t = rep(t, "in-laws from ", "in-laws of ");
  t = rep(t, " aK", " B.C.");
  t = rep(t, " AK ", " B.C. ");
  t = rep(t, " pK", " A.D.");
  t = rep(t, " PK ", " A.D. ");
  t = rplUL(t, " done/made one when ", " done when ");
  t = rplUL(t, " done/made one where ", " done where ");
  t = rep(t, " Beta-Lehxem", " Bethlehem");
  t = rep(t, " Bet-Lehxem", " Bethlehem");
  t = rep(t, " Betlehxem", " Bethlehem");
  t = rplUL(t, " because wasn't ", " because there wasn't ");
  t = rplUL(t, " because was ", " because there was ");
  t = rplUL(t, " large fear", " great fear");
  t = rplUL(t, " large joy", " great joy");
  t = rplUL(t, " savers", " rescuers");
  t = rep(t, " saver", " rescuer");
  t = rep(t, " Saver", " Savior");
  txtxt = " " + txt1;
  if (indexof(txtxt, " gxi ") >= FOUND) {
	rgx = " (And|Or|But) (had|has|will have|would have|should have) ";
	t = regex_replace(t, rgx, " $1 it $2 ");
  }
  t = rep(t, " of after/behind ", " since ");
  t = rep(t, " is it that is ", " is ");
  t = rep(t, " A beet-Lehxem", " Bethlehem");
  t = rplUL(t, " king by ", " king of ");
  t = rplUL(t, " out-from-look", " search");
  rgx = " (i|I)mpos(e|es|ed|ing)(ly)?(.{1,30}) to ";
  t = regex_replace(t, rgx, " $1mpos$2$4 on ");
  t = rep(t, "It to go ", "Go ");
  t = rep(t, "-stoop", "-bow");
  t = rplUL(t, " having been audio", " having heard");
  t = rep(t, " till that ", " until ");
  t = rep(t, " death from ", " death of ");
  rgx = " very (is|are|am|was|were|be|been|being)(ly)?(erly)? ";
  t = regex_replace(t, rgx, " $1 very ");
  t = rplUL(t, " environments/surroundingses", " environments/surroundings");
  t = rplUL(t, " in accordance with to ", " according to ");
  t = rep(t, " Easter/Passoverian", " Easter/Passover");
  t = rep(t, " A son, ", " Son, ");
  t = rep(t, " A daughter, ", " Daughter, ");
  t = rep(t, " A friend, ", " Friend, ");
  rgx = ", a (friend|son|daughter|father|mother|uncle|aunt|grandmother|grandfather)(.,?!;)";
  t = regex_replace(t, rgx, ", $1$2");
  t = rplUL(t, " a shadow/shade", " a shadow");
  t = rplUL(t, " shadows/shades", " shadows");
  t = rplUL(t, " in the shadow/shade", " in the shade");
  t = rplUL(t, " at the shadow/shade", " in the shade");
  t = rplF(t, "priest/clergymanness", "priesthood");
  rgx = " Who/which (him|her|them|you|me|us) told";
  t = regex_replace(t, rgx, " Who told $1");
  t = rplUL(t, " away of ", " away from ");
  rgx = " (he|she|they|one|you|we|He|She|They|One|I|You|We) (rise|rises|rose)/";
  t = regex_replace(t, rgx, " $1 ");
  t = rep(t, " risen/get ", " risen/got ");
  t = rplUL(t, " with the time", " with time");
  t = rep(t, "0a-", "0-");
  rgx = "([1-9])a-";
  t = regex_replace(t, rgx, "$1-");
  rgx = "(\\d)-year";
  t = regex_replace(t, rgx, "$1-year-old");
  rgx = "(one|two|three|four|five|six|seven|eight|nine|ten|teen|ty|eleven|twelve|hundred|thousand|illion|zero)-(year|month|day|week)([ .,?!:;)])";
  t = regex_replace(t, rgx, "$1-$2-old$3");
  t = rep(t, "-year-old one", "-year-old");
  t = rep(t, " goes in ", " goes into ");
  t = rplUL(t, " go in ", " go into ");
  t = rep(t, " went in ", " went into ");
  t = rplUL(t, " gone in ", " gone into ");
  t = rep(t, " going in ", " going into ");
  t = rplUL(t, " goingly in ", " going into ");
  t = rep(t, " comes in ", " comes into ");
  t = rplUL(t, " come in ", " come into ");
  t = rep(t, " came in ", " came into ");
  t = rep(t, " coming in ", " coming into ");
  t = rplUL(t, " comingly in ", " coming into ");
  t = rep(t, " enters in ", " enters into ");
  t = rplUL(t, " enter in ", " enter into ");
  t = rep(t, " entered in ", " entered into ");
  t = rep(t, " entering in ", " entering into ");
  t = rplUL(t, " enteringly in ", " entering into ");
  t = rep(t, " Ha method", " H-method");
  t = rep(t, " Xa method", " X-method");
  t = rep(t, " Ha-bomb", " H-bomb");
  t = rep(t, " comes a house", " comes home");
  t = rep(t, " came a house", " came home");
  t = rplUL(t, " come a house", " come home");
  t = rep(t, " coming a house", " coming home");
  t = rplUL(t, " comingly a house", " coming home");
  if (startswith(t, " is a matter")) {
	t = " it's a matter" + t.substr(12);
  }
  if (startswith(t, " was a matter")) {
	t = " it was a matter" + t.substr(13);
  }
  if (startswith(t, " would be a matter")) {
	t = " it would be a matter" + t.substr(18);
  }
  if (startswith(t, " should be a matter")) {
	t = " it should be a matter" + t.substr(19);
  }
  if (startswith(t, " will be a matter")) {
	t = " it will be a matter" + t.substr(17);
  }
  if (startswith(t, " exists")) {
	t = " there is" + t.substr(7);
  }
  if (startswith(t, " existed")) {
	t = " there was" + t.substr(8);
  }
  if (startswith(t, " will exist")) {
	t = " there will be" + t.substr(11);
  }
  if (startswith(t, " would exist")) {
	t = " there would be" + t.substr(12);
  }
  if (startswith(t, " existingly")) {
	t = " there being" + t.substr(11);
  }
  if (startswith(t, "(  exists")) {
	t = "(  there is" + t.substr(7);
  }
  if (startswith(t, "(  existed")) {
	t = "(  there was" + t.substr(8);
  }
  if (startswith(t, "(  will exist")) {
	t = "(  there will be" + t.substr(11);
  }
  if (startswith(t, "(  would exist")) {
	t = "(  there would be" + t.substr(12);
  }
  if (startswith(t, "(  existingly")) {
	t = "(  there being" + t.substr(11);
  }
  if (startswith(t, " You should exist")) {
	t = " There should be" + t.substr(17);
  }
  rgx = " (c|C)onsist(s|ed|ing)?(ly)?(erly)? from ";
  t = regex_replace(t, rgx, " $1onsist$2 of ");
  t = rep(t, " ( should see ", " ( see ");
  t = rep(t, " ( Should see ", " ( See ");
  t = rep(t, "-child-birth", "-producing");
  t = rplUL(t, " last/latestly", " last");
  t = rplUL(t, " that, that ", " that which ");
  t = rep(t, " of to ", " of ");
  t = rep(t, " usable/suitable one in order to ", " usable to ");
  t = rep(t, " usable/suitable ones in order to ", " usable to ");
  t = rep(t, "illions after/behind ", "illion after ");
  t = rep(t, "illions before/ago ", "illion before ");
  t = rep(t, "illion of ", "illion ");
  t = rplUL(t, " two-fractional-", " half-");
  t = rplUL(t, " less many", " fewer");
  t = rplUL(t, " less a lot of ", " less ");
  t = rplUL(t, " less a lot", " less");
  t = rep(t, " one as ", " as ");
  t = rep(t, " ones as ", " as ");
  t = rep(t, " treely", " in a tree");
  t = rep(t, " island from ", " island of ");
  t = rep(t, " islands from ", " islands of ");
  t = rep(t, " at the island", " on the island");
  t = rep(t, " while that epoch/period", " during that epoch/period");
  t = rep(t, " While that epoch/period", " During that epoch/period");
  t = rep(t, " while that time", " during that time");
  t = rep(t, " While that time", " During that time");
  t = rep(t, " kind from ", " kind of ");
  t = rplUL(t, " kinds from ", " kinds of ");
  t = rplUL(t, " used like/how ", " used as ");
  t = rplUL(t, " treatment-possibility", " manageability");
  t = rplUL(t, " some-times", " sometimes");
  t = rep(t, "4th from ", "4th of");
  t = rplUL(t, " that-subjectly", " on that subject");
  t = rplUL(t, " life-thing", " life-form");
  t = rplUL(t, " an another/some more-less", " more-or-less");
  t = rplUL(t, " opposite-of-thirsty", " thirst-quenched");
  t = rplUL(t, " except-for-effect", " side-effect");
  t = rplUL(t, " nerve-systematic", " nervous system");
  t = rplUL(t, " inside-have-things", " contents");
  t = rep(t, " inside-have-thing", " contents");
  t = rplUL(t, " bone/big-boned marrow", " bone marrow");
  t = rplUL(t, " bone/big-boned cell", " bone cell");
  t = rplUL(t, " bone/big-boned tissue", " bone tissue");
  t = rplUL(t, " bone/big-boned matri", " bone matri");
  t = rplUL(t, " bone/big-boned saw", " bone saw");
  t = rep(t, "metres long ones", "metres long");
  t = rep(t, "metres long one", "metres long");
  t = rep(t, "metre long ones", "metre long");
  t = rep(t, "metre long one", "metre long");
  t = rep(t, "metres tall/high ones", "metres tall/high");
  t = rep(t, "metres tall/high one", "metres tall/high");
  t = rep(t, "metre tall/high ones", "metre tall/high");
  t = rep(t, "metre tall/high one", "metre tall/high");
  t = rep(t, "metres wide ones", "metres wide");
  t = rep(t, "metres wide one", "metres wide");
  t = rep(t, "metre wide ones", "metre wide");
  t = rep(t, "metre wide one", "metre wide");
  t = rplUL(t, " the today's", " today's");
  t = rplUL(t, " out-from-thought-thing", " idea");
  t = rplUL(t, " very by ", " a lot by ");
  t = rplUL(t, " assembling-chain", " assembly-line");
  t = rplUL(t, " every-day", " daily life");
  t = rplUL(t, " merchandises", " merchandise");
  t = rplUL(t, " with-handly", " by hand");
  t = rep(t, " should see ", " see ");
  t = rplUL(t, " delit", " delighted");
  t = rep(t, "-delit", "-loving");
  t = rplUL(t, " before/ago everything", " above all");
  t = rep(t, " has and a ", " has both a ");
  t = rep(t, " had and a ", " had both a ");
  t = rplUL(t, " have and a ", " have both a ");
  t = rep(t, " having and a ", " having both a ");
  t = rplUL(t, " havingly and a ", " having both a ");
  t = rep(t, " has and an ", " has both an ");
  t = rep(t, " had and an ", " had both an ");
  t = rplUL(t, " have and an ", " have both an ");
  t = rep(t, " having and an ", " having both an ");
  t = rplUL(t, " havingly and an ", " having both an ");
  t = rplUL(t, " ordinarily-casely", " ordinarily");
  t = rep(t, " wear outs", " wears out");
  t = rep(t, " wear outing", " wearing out");
  t = rep(t, " wear outed", " wore out");
  t = rplUL(t, " wear outingly", " wearing out");
  t = rplUL(t, " using uprly", " using up/wearing out");
  t = rplUL(t, " jobs/work-hourlies/per hours", " hours of labor");
  t = rplUL(t, " job/work-hour", " hour of labor");
  t = rplUL(t, " dependent ones of ", " dependent on ");
  t = rplUL(t, " dependent one of ", " dependent on ");
  t = rplUL(t, " ratessing/appraisessing/estimatings",
	" ratings/appraisings/estimatings");
  t = rplUL(t, " one from the biggest", " one of the biggest");
  t = rplUL(t, " one from the best", " one of the best");
  t = rplUL(t, " between/among otherwise", " among other things");
  t = rep(t, " (m|M)any other({.,?!;:)])", " $1any others$2");
  t = rep(t, " Italyian", " Italian");
  t = rep(t, " of Vinci", " da Vinci");
  t = rplUL(t, " thet Roman Empire", " the Roman Empire");
  t = rplUL(t, " thet Roman", " Roman");
  t = rplUL(t, " bovine animals", " cattle");
  t = rep(t, "-etimologi-o-etymology", " etymology");
  t = rplUL(t, " given of ", " given by ");
  t = rep(t, "ing one ", "ing ");
  t = rep(t, "ing ones ", "ing ");
  t = rep(t, " come one ", " previously coming ");
  t = rep(t, " come ones ", " previously coming ");
  t = rep(t, " comes of ", " comes from ");
  t = rplUL(t, " come of ", " come from ");
  t = rep(t, " came of ", " came from ");
  t = rep(t, " coming of ", " coming from ");
  t = rplUL(t, " comingly of ", " coming from ");
  t = rep(t, " goes of ", " goes from ");
  t = rplUL(t, " go of ", " go from ");
  t = rep(t, " went of ", " went from ");
  t = rep(t, " going of ", " going from ");
  t = rplUL(t, " goingly of ", " going from ");
  t = rplUL(t, " culture-centrals", " centers of culture");
  t = rplUL(t, " culture-central", " center of culture");
  t = rep(t, " Holy/sacred the Roman Empire", " Holy Roman Empire");
  t = rep(t, " remained a long ", " long remained a ");
  t = rep(t, " remains a long ", " long remains a ");
  t = rep(t, " remain a long ", " long remain a ");
  t = rep(t, " remaining a long ", " long remaining a ");
  t = rplUL(t, " remainingly a long ", " long remaining a ");
  t = rep(t, " Popean", " Papal");
  t = rplUL(t, " after/behind the end of ", " after the end of ");
  t = rplUL(t, " union from ", " union of ");
  rgx = "(th|st|nd|rd) one from (January|February|March|April|May|June|July|August|September|October|November|December)";
  t = regex_replace(t, rgx, "$1 of $2");
  t = rep(t, " nation from ", " nation of ");
  t = rep(t, " nations from ", " nations of ");
  t = rep(t, " country from ", " country of ");
  t = rep(t, " countries from ", " countries of ");
  t = rep(t, " province from ", " province of ");
  t = rep(t, " provinces from ", " provinces of ");
  t = rep(t, " state from ", " state of ");
  t = rep(t, " states from ", " states of ");
  t = rep(t, "-state from ", "-state of ");
  t = rep(t, "-states from ", "-states of ");
  t = rplUL(t, " most last", " last of all");
  t = rplUL(t, " most first", " first of all");
  t = rep(t, " region from ", " region of ");
  t = rep(t, " regions from ", " regions of ");
  t = rplUL(t, " completely-country", " full-country");
  t = rplUL(t, " having been establishing", " founding");
  t = rep(t, " an eu", " a eu");
  t = rep(t, " an Eu", " a Eu");
  t = rplUL(t, " ex ", " ex-");
  t = rep(t, " role like/how ", " role of ");
  t = rep(t, " roles like/how ", " roles of ");
  t = rplUL(t, " one from the most ", " one of the most ");
  t = rplUL(t, " one from the least ", " one of the least ");
  t = rplUL(t, " plaid", " played");
  t = rplUL(t, " playedx", " plaid");
  t = rplUL(t, " assigned one about ", " assigned to ");
  t = rplUL(t, " assigned ones about ", " assigned to ");
  t = rep(t, "an A ", "an ");
  t = rep(t, "an An ", "an ");
  rgx = " (c|C)onsist(s|ed|ing)(ly)?(erly)? mostly from ";
  t = regex_replace(t, rgx, " $1onsist$2 mostly of ");
  t = rplUL(t, " less large", " smaller");
  t = rep(t, " Adriatician", " Adriatic");
  t = rplUL(t, " whose an ", " whose ");
  t = rplUL(t, " whose a ", " whose ");
  t = rep(t, " is talls/high", " is tall/high");
  t = rplUL(t, " citizen-group", " citizenry");
  t = rplUL(t, " before-vot", " pre-vot");
  t = rplUL(t, " differently like/how ", " unlike ");
  t = rplUL(t, " part from the ", " part of the ");
  t = rplUL(t, " parts from the ", " parts of the ");
  t = rplUL(t, " several-", " multi-");
  t = rep(t, "% from ", "% of ");
  t = rplUL(t, " year growth", " yearly growth");
  t = rplUL(t, " middle life-span", " average life-span");
  t = rplUL(t, " the most tall/high one of ", " the highest of ");
  t = rplUL(t, " the most tall/high ones of ", " the highest of ");
  t = rplUL(t, " the most low one of ", " the lowest of ");
  t = rplUL(t, " the most low ones of ", " the lowest of ");
  t = rplUL(t, " called one according to ", " named according to ");
  t = rplUL(t, " called ones according to ", " named according to ");
  t = rep(t, " of Rome/novel", " of Rome");
  t = rep(t, " desire/wish by ", " desire/wish of ");
  t = rplUL(t, " fruit-juicy", " fruit juice");
  t = rplUL(t, " fruit-juicies", " fruit juices");
  t = rplUL(t, " tight meaning", " strict meaning");
  t = rplUL(t, " in France/francium", " in France");
  t = rplUL(t, " to France/francium", " to France");
  rgx = " paris\\b";
  t = regex_replace(t, rgx, " Paris");
  rgx = "Paris(.+)France/francium";
  t = regex_replace(t, rgx, "Paris$1France"); // Disambiguation by context
  rgx = "France/francium(.+)Paris";
  t = regex_replace(t, rgx, "France$1Paris"); // Disambiguation by context
  t = rep(t, "-variable", "-variety");
  t = rplUL(t, " mostly of the ", " most of the ");
  t = rep(t, "-methodical", "-method");
  t = rep(t, "-variables", "-varieties");
  t = rep(t, "-variable", "-variety");
  t = rplUL(t, " harvest-year", " vintage");
  t = rplUL(t, " beastly", " animal");
  t = rplUL(t, " animal-raiseeing", " raising of animals");
  t = rplUL(t, " supplied one with ", " supplied with ");
  t = rplUL(t, " supplied ones with ", " supplied with ");
  t = rplUL(t, " different of ", " different from ");
  t = rep(t, "-scientific", "-science");
  t = rep(t, " divides on/in ", " divides into ");
  t = rplUL(t, " divide on/in ", " divide into ");
  t = rep(t, " divided on/in ", " divided into ");
  t = rplUL(t, " dividedly on/in ", " divided into ");
  t = rep(t, " nation mineral", " mineral kingdom");
  t = rep(t, " mineral nation", " mineral kingdom");
  t = rep(t, " nation animal", " animal kingdom");
  t = rep(t, " animal nation", " animal kingdom");
  t = rep(t, " nation plant", " plant kingdom");
  t = rep(t, " plant nation", " plant kingdom");
  t = rplUL(t, " a being used one like ", " used as ");
  t = rplUL(t, " being used ones like ", " used as ");
  t = rep(t, " between/among the two", " between the two");
  t = rep(t, "-languageally ", "-language");
  t = rplUL(t, " non-in writing an attached/fastened/fixed", " an unwritten");
  t = rplUL(t, " non-in writing attached/fastened/fixed", " unwritten");
  t = rplUL(t, " understood like/how ", " understood as ");
  t = rep(t, "an history/story", "an history");
  t = rep(t, "ese history/story", "ese history");
  t = rep(t, " Middle Agesian", " Medieval");
  t = rep(t, "-artistic", "-art");
  t = rep(t, "-less", "less");
  t = rep(t, "-orless", "-or-less");
  t = rep(t, " Zena-buddhis", " Zen-buddhis");
  t = rplUL(t, " influential of ", " influenced by ");
  t = rep(t, " Dear/expensive gentleman/Mr.", " Dear Mr.");
  t = rep(t, " Dear/expensive bachelor/Mr.", " Dear Mr.");
  t = rep(t, " Dear/expensive lady/ma'am/Mrs.", " Dear Mrs.");
  t = rep(t, " Dear/expensive bachelorette/Miss", " Dear Miss");
  rgx = " (d|D)ear/expensive ([A-Z])";
  t = regex_replace(t, rgx, " $1ear $2");
  t = rep(t, " source/spring about ", " source of ");
  t = rplUL(t, " sources/springs about ", " sources of ");
  t = rplUL(t, " changing of parties/sides", " changing of sides");
  t = rep(t, " philosophy from ", " philosophy of ");
  t = rep(t, " philosophies from ", " philosophies of ");
  t = rplUL(t, " leaves/sheets of paper", " sheets of paper");
  t = rep(t, " leaf/sheet of paper", " sheet of paper");
  t = rplUL(t, " e book", " e-book");
  t = rep(t, " distinguish it of ", " distinguish it from ");
  t = rep(t, " distinguish them of ", " distinguish them from ");
  t = rplUL(t, " materials/datas", " materials");
  t = rplUL(t, " like/how, for example", " as, for example");
  t = rep(t, " library from ", " library of ");
  t = rplUL(t, " wrapping up-book", " scroll");
  t = rep(t, " agent from ", " agent of ");
  t = rplUL(t, " agents from ", " agents of ");
  t = rplUL(t, " primodials/great-civili", " ancient civili");
  t = rep(t, " primodial/great-civili", " ancient civili");
  t = rplUL(t, " in writing-", " writing-");
  t = rplUL(t, " tree-shells/peels/barks", " tree-barks");
  t = rep(t, " tree-shell/peel/bark", " tree-bark");
  t = rplUL(t, " etymologily", " etymologically");
  t = rplF(t, "tree-leaves/sheets", "tree-leaves");
  t = rep(t, "tree-leaf/sheet", "tree-leaf");
  t = rep(t, " Chineses", " Chinese");
  t = rep(t, " Japaneses", " Japanese");
  t = rep(t, " piece of woods", " pieces of wood");
  t = rep(t, " piece of papers", " pieces of paper");
  t = rep(t, "-metric", "-metre");
  t = rplUL(t, " done/made from ", " made from ");
  t = rplUL(t, " skin by ", " skin from ");
  t = rep(t, " like/how did/made ", " as did ");
  t = rplUL(t, " in a shape of ", " in a form of ");
  t = rplUL(t, " chemistry substance", " chemical");
  t = rep(t, " side from ", " side of ");
  t = rep(t, " sides from ", " sides of ");
  t = rplUL(t, " finally but not backgroundly", " last but not least");
  t = rplUL(t, " more less", " more or less");
  rgx = " near me( .*) there\\b";
  t = regex_replace(t, rgx, " here$1");
  t = rplUL(t, " near me at that time", " at this time");
  t = rplUL(t, " at that time near me", " at this time");
  t = rplUL(t, " time-rooms/spaces", " periods of time");
  t = rep(t, " time-room/space", " period of time");
  t = rep(t, " some-month-old", " few-months-old");
  t = rplUL(t, " newses/novelties", " news/novelties");
  t = rplUL(t, " differently to ", " unlike ");
  t = rplUL(t, " edited of ", " edited by ");
  t = rplUL(t, " worthy-of-being-avoiding of", " to-be-avoided");
  t = rplUL(t, " piece of real estates", " real estate");
  t = rplUL(t, " in the daytime-", " daytime-");
  t = rplUL(t, " at night-", " night-");
  t = rep(t, "-rhythmic", "-rhythm");
  t = rep(t, " at a timenesses", "-pieces");
  t = rep(t, " at a timeness", "-piece");
  t = rep(t, " wears off advantageous/favorably", " loses popularity");
  t = rep(t, " wear off advantageous/favorably", " lose popularity");
  t = rep(t, " wore off advantageous/favorably", " lost popularity");
  t = rep(t, " wearing off advantageous/favorably", " losing popularity");
  t = rplUL(t, " wearingly off advantageous/favorably", " losing popularity");
  t = rplUL(t, " most today's", " most of today's");
  t = rplUL(t, " one from the first", " one of the first");
  t = rplUL(t, " some of it said", " some said");
  t = rep(t, " inside-brings/conducts", " brings in");
  t = rplUL(t, " inside-bring/conduct", " bring in");
  t = rplUL(t, " inside-brought/conducted", " brought in");
  t = rep(t, " inside-bringing/conducting", " bringing in");
  t = rplUL(t, " inside-bringing/conductingly", " bringing in");
  t = rplUL(t, " opposite-of-good will", " ill will");
  t = rep(t, " an and...", " and...");
  t = rep(t, " an and,", " and,");
  t = rplUL(t, " cloths/material-parts", " pieces of cloth");
  t = rep(t, " cloth/material-part", " piece of cloth");
  t = rplUL(t, " some) {/afterwords", " sometime later");
  t = rep(t, " different one to ", " different from ");
  t = rep(t, " different ones to ", " different from ");
  t = rep(t, " english", " English");
  t = rep(t, " spanish", " Spanish");
  t = rep(t, " chinese", " Chinese");
  t = rep(t, " russian", " Russian");
  t = rep(t, " portuguese", " Portuguese");
  t = rep(t, " french", " French");
  t = rep(t, " german", " German");
  t = rep(t, " arabic", " Arabic");
  t = rep(t, " japanese", " Japanese");
  t = rep(t, " hindi", " Hindi");
  t = rep(t, " vietnamese", " Vietnamese");
  t = rep(t, " indonesian", " Indonesian");
  t = rep(t, " dutch", " Dutch");
  t = rep(t, " swahili", " Swahili");
  t = rep(t, " swedish", " Swedish");
  t = rep(t, " hungarian", " Hungarian");
  t = rep(t, " yiddish", " Yiddish");
  t = rep(t, " inuit", " Inuit");
  t = rep(t, " aborigine", " Aborigine");
  t = rep(t, " native american", " Native American");
  t = rep(t, " italian", " Italian");
  t = rep(t, " latin", " Latin");
  t = rep(t, " greek", " Greek");
  t = rep(t, " farsi", " Farsi");
  t = rep(t, " hebrew", " Hebrew");
  t = rep(t, " Esperantoly", " in Esperanto");
  t = rep(t, " Latinly", " in Latin");
  t = rep(t, " Greekly", " in Greek");
  t = rep(t, " Frenchly", " in French");
  t = rep(t, " Chinesely", " in Chinese");
  t = rep(t, " Japanesely", " in Japanese");
  t = rep(t, " Russianly", " in Russian");
  t = rep(t, " Spanishly", " in Spanish");
  t = rep(t, " Portuguesely", " in Portuguese");
  t = rep(t, " Arabically", " in Arabic");
  t = rep(t, " Germanly", " in German");
  t = rep(t, " Hebrewly", " in Hebrew");
  t = rep(t, " Hinduly", " in Hindu");
  t = rep(t, " Italianly", " in Italian");
  t = rep(t, " Swedishly", " in Swedish");
  t = rep(t, " Dutchly", " in Dutch");
  t = rep(t, " Indonesianly", " in Indonesian");
  t = rep(t, " Vietnamesely", " in Vietnamese");
  t = rep(t, " Interlingualy", " in Interlingua");
  t = rplUL(t, " the Esperanto one", " Esperanto");
  t = rplUL(t, " the Interlingua one", " Interlingua");
  t = rplUL(t, " across-sea", " overseas");
  t = rep(t, "-linear", "-line");
  rgx = " an? (his|her|their|its|my|your|its|our|one's) ";
  t = regex_replace(t, rgx, " $1 ");
  t = rplUL(t, " printed one with ", " printed with ");
  t = rplUL(t, " printed ones with ", " printed with ");
  t = rplUL(t, " large hit/craze-thing", " big craze");
  rgx = " present (him|her|one|it|my|your|our|them)sel(f|ves)";
  t = regex_replace(t, rgx, " introduce $1sel$2");
  rgx = " presents (him|her|one|it|my|your|our|them)sel(f|ves)";
  t = regex_replace(t, rgx, " introduces $1sel$2");
  rgx = " presented (him|her|one|it|my|your|our|them)sel(f|ves)";
  t = regex_replace(t, rgx, " introduced $1sel$2");
  rgx = " presenting(ly)?(erly)? (him|her|one|it|my|your|our|them)sel(f|ves)";
  t = regex_replace(t, rgx,
	" introducing $2sel$3");
  rgx = " Present yoursel(f|ves)";
  t = regex_replace(t, rgx, " Introduce yoursel$1");
  rgx = " Presenting(ly)?(erly)? (him|her|one|it|my|your|our|them)sel(f|ves)";
  t = regex_replace(t, rgx,
	" Introducing $2sel$3");
  t = rplUL(t, " including/inclusively of ", " including ");
  t = rplUL(t, " electric engineer-art", " electrical engineering");
  t = rplUL(t, " a considered one like ", " considered ");
  t = rplUL(t, " considered ones like ", " considered ");
  rgx = " of (is|are|was|were|will|would|should|could|being|has|have|had|having) ";
  t = regex_replace(t, rgx, " $1 ");
  t = rplUL(t, " tele-", " tele");
  t = rep(t, " (a meaning ", " (meaning ");
  t = rplUL(t, " creater", " creator");
  t = rep(t, "-dimension", "-dimensional");
  t = rplUL(t, " auxiliarily of ", " with the help of ");
  t = rplF(t, "radioes", "radios");
  t = rep(t, " bright/light-radio/beam", " beam of light");
  t = rplUL(t, " brights/light-radios/beams", " beams of light");
  t = rplUL(t, " with radio/beam", " by radio");
  t = rep(t, " first one a ", " first ");
  t = rep(t, " first one an ", " first ");
  t = rep(t, " first ones completely ", " first completely ");
  t = rep(t, "-systematic", "-system");
  t = rep(t, " cathode/negative electrode-radio/beam pipe/tube",
	" cathode-ray tube");
  t = rplUL(t, " cathode/negative electrode-radio/beam pipes/tubes",
	" cathode-ray tubes");
  t = rplUL(t, " that-purpose/aimly", " for that purpose");
  t = rplUL(t, " this-purpose/aimly", " for this purpose");
  t = rplUL(t, " on/in age of ", " at the age of ");
  t = rplUL(t, " on/in the age of ", " at the age of ");
  t = rplUL(t, " on/in ages of ", " at the ages of ");
  t = rplUL(t, " on/in the ages of ", " at the ages of ");
  t = rplUL(t, " tall/high-school", " high school");
  t = rplUL(t, " Small boy", " little boy");
  t = rplUL(t, " Small girl", " little girl");
  t = rplUL(t, " Small man", " little man");
  t = rplUL(t, " Small men", " little men");
  t = rplUL(t, " Small woman", " little woman");
  t = rplUL(t, " Small women", " little women");
  t = rplUL(t, " Small prince", " little prince");
  t = rep(t, " majority from ", " majority of ");
  t = rep(t, " minority from ", " minority of ");
  t = rep(t, "Msexcel", "MS-Excel");
  t = rep(t, "MSExcel", "MS-Excel");
  t = rep(t, " a besides, ", " besides, a ");
  t = rep(t, " a besides ", " besides a ");
  t = rep(t, " A besides, ", " Besides, a ");
  t = rep(t, " A besides ", " Besides a ");
  t = rplUL(t, " purpose/aimly to ", " for the purpose of ");
  t = rplUL(t, " naturally-language", " natural-language");
  t = rep(t, " concept from ", " concept of ");
  t = rplUL(t, " concepts from ", " concepts of ");
  t = rplUL(t, " option history/story", " alternative history");
  t = rplUL(t, " option histories/stories", " alternative histories");
  t = rplUL(t, " capof-being capable", " capable");
  t = rplUL(t, " thing-oriented", " object-oriented");
  t = rplUL(t, " invented from ", " invented by ");
  rgx = "(n't| is| are| was| were| been| being) accurately";
  t = regex_replace(t, rgx, "$1 accurate");
  t = rplUL(t, " be accurately.", " be accurate.");
  rgx = " (d|D)epend(s|ed|ing)?(ly)?(erly)? on/in";
  t = regex_replace(t, rgx, " $1epend$2 on");
  t = rplUL(t, " between/among the first ones", " among the first ones");
  t = rplUL(t, " dot/period/point-shaped", " dot-shaped");
  t = rep(t, " How general at ", " As generally with ");
  t = rep(t, "-problematic", "-problem");
  t = rplUL(t, " from one a ", " from one ");
  t = rplUL(t, " absent of ", " absent from ");
  t = rep(t, " la a ", " the ");
  t = rep(t, " la an ", " the ");
  if (startswith(t, " Happens")) {
	t = " It happens" + t.substr(8);
  }
  if (startswith(t, " Happened")) {
	t = " It happened" + t.substr(9);
  }
  if (startswith(t, " Sometime happened")) {
	t = " Sometime it happened" + t.substr(18);
  }
  if (startswith(t, " Sometime happens")) {
	t = " Sometime it happens" + t.substr(17);
  }
  if (startswith(t, " Sometime will happen")) {
	t = " Sometime it will happen" + t.substr(21);
  }
  if (startswith(t, " Sometime would happen")) {
	t = " Sometime it would happen" + t.substr(22);
  }
  if (startswith(t, " nor ")) {
	t = " not even " + t.substr(5);
  }
  if (startswith(t, " and nor ")) {
	t = " and not even " + t.substr(9);
  }
  if (startswith(t, " And nor ")) {
	t = " And not even " + t.substr(9);
  }
  if (startswith(t, " but nor ")) {
	t = " but not even " + t.substr(9);
  }
  if (startswith(t, " But nor ")) {
	t = " But not even " + t.substr(9);
  }
  rgx = " nor([.,?!:;)])";
  t = regex_replace(t, rgx, " neither$1");
  t = rep(t, " it and ", " and ");
  t = rep(t, "Should ", "You should ");
  rgx = "you should (he|she|it|I|you|they|we|one) ";
  t = regex_replace(t, rgx, "$1 should ");
  t = rep(t, "You should he ", "He should ");
  t = rep(t, "You should she ", "She should ");
  t = rep(t, "You should it ", "It should ");
  t = rep(t, "You should I ", "I should ");
  t = rep(t, "You should you ", "You should ");
  t = rep(t, "You should they ", "They should ");
  t = rep(t, "You should we ", "We should ");
  t = rep(t, "You should one ", "One should ");
  if (startswith(t, " should ")) {
	t = " you should " + t.substr(8);
  }
  if (startswith(t, " Should ")) {
	t = " you should " + t.substr(8);
  }
  t = rep(t, ", should ", ", you should ");
  if (indexof(txt1, "Gxi ") == NOT_FOUND) {
	t = rep(t, " It should ", " You should ");
  }
  t = rep(t, "You should a", "A");
  t = rep(t, "You should b", "B");
  t = rep(t, "You should c", "C");
  t = rep(t, "You should d", "D");
  t = rep(t, "You should e", "E");
  t = rep(t, "You should f", "F");
  t = rep(t, "You should g", "G");
  t = rep(t, "You should h", "H");
  t = rep(t, "You should i", "I");
  t = rep(t, "You should j", "J");
  t = rep(t, "You should k", "K");
  t = rep(t, "You should l", "L");
  t = rep(t, "You should m", "M");
  t = rep(t, "You should n", "N");
  t = rep(t, "You should o", "O");
  t = rep(t, "You should p", "P");
  t = rep(t, "You should q", "Q");
  t = rep(t, "You should r", "R");
  t = rep(t, "You should s", "S");
  t = rep(t, "You should t", "T");
  t = rep(t, "You should u", "U");
  t = rep(t, "You should v", "V");
  t = rep(t, "You should w", "W");
  t = rep(t, "You should x", "X");
  t = rep(t, "You should y", "Y");
  t = rep(t, "You should z", "Z");
  t = rep(t, "You shouldn't", "Don't");
  if (indexof(txt1, "Gxi ") == NOT_FOUND) {
	t = rep(t, " It shouldn't ", " Don't ");
  }
  t = rep(t, " We should ", " Let's ");

  for (p = 0; p < 8; p++) {
	string punc = " .,?!;:)";
	punc = punc.substr(p, 1);
	if ((indexof(txt1, "u" + punc) >= FOUND) && ((indexof(txt1, "u" + punc)
	  != indexof(txt1, " tiu" + punc) + 3) || (indexof(txt1, " neniu" + punc) == NOT_FOUND))
	  && ((indexof(txt1, "u" + punc) != indexof(txt1, " kiu" + punc) + 3)
	  || (indexof(txt1, " kiu" + punc) == NOT_FOUND)) && ((indexof(txt1, "u" + punc)
	  != indexof(txt1, " iu" + punc) + 2) || (indexof(txt1, " iu" + punc) == NOT_FOUND))
	  && ((indexof(txt1, "u" + punc) != indexof(txt1, " cxiu" + punc) + 4)
	  || (indexof(txt1, " cxiu" + punc) == NOT_FOUND)) && ((indexof(txt1, "u" + punc)
	  != indexof(txt1, " neniu" + punc) + 5) || (indexof(txt1, " neniu" + punc) == NOT_FOUND))
	  && (indexof(t, " devas ") == NOT_FOUND)) {
	  t = rep(t, " you should ", " ");
	  t = rep(t, " You should ", " ");
	  t = rplUL(t, " you shouldn't ", " don't ");
	  t = rep(t, " or should ", " or ");
	  t = rplUL(t, " not should ", " don't ");
	  t = rplUL(t, " don't shouldn't ", " don't ");
	  t = rplUL(t, " shouldn't ", " don't ");
	  t = rplUL(t, " it doesn't shouldn't", " don't");
	  t = rplUL(t, " it doesn't don't", " don't");
	  t = rplUL(t, " then/afterwords shouldn't ", " then don't ");
	}
  }

  t = rplUL(t, " then/afterwords don't ", " then don't ");
  t = rep(t, " somewhats", "that are small");
  t = rplUL(t, " singly", " one at a time");
  t = rep(t, "ingly", "ing");
  t = rep(t, "ingxx", "ingly");
  t = rep(t, "New-York", "New York");
  t = rep(t, "-a ", "-");
  t = rep(t, "-an ", "-");
  t = rep(t, "¬", "");
  t = rep(t, "¯", "");
  t = rplUL(t, " chlorine at a time-lasts/latests", " chloroplasts");
  t = rplUL(t, " chlorine at a time-last/latest", " chloroplast");
  t = rep(t, "[UNKNOWN WORD:  ", "[UNKNOWN WORD: ");
  t = rep(t, "[UNKNOWN WORD: ajna]", "any kind of");
  t = rep(t, "[UNKNOWN WORD: ajnan]", "any kind of");
  t = rep(t, "[UNKNOWN WORD: ajnaj]", "any kinds of");
  t = rep(t, "[UNKNOWN WORD: ajnajn]", "any kinds of");
  t = rep(t, "[UNKNOWN WORD: toreo]", "bullfighting");
  t = rep(t, "[UNKNOWN WORD: toreon]", "bullfighting");
  t = rep(t, "[UNKNOWN WORD: centrigita]", "centralized");
  t = rep(t, "[UNKNOWN WORD: centrigitan]", "centralized");
  t = rep(t, "[UNKNOWN WORD: centrigitaj]", "centralized");
  t = rep(t, "[UNKNOWN WORD: centrigitajn]", "centralized");
  t = rep(t, "[UNKNOWN WORD: ekzekutivo]", "executive");
  t = rep(t, "[UNKNOWN WORD: ekzekutivon]", "executive");
  t = rep(t, "[UNKNOWN WORD: ekzekutivoj]", "executive");
  t = rep(t, "[UNKNOWN WORD: ekzekutivojn]", "executive");
  t = rep(t, "[UNKNOWN WORD: neceso]", "necessity");
  t = rep(t, "[UNKNOWN WORD: neceson]", "necessity");
  t = rep(t, "[UNKNOWN WORD: necesoj]", "necessities");
  t = rep(t, "[UNKNOWN WORD: necesojn]", "necessities");
  t = rep(t, "[UNKNOWN WORD: sendependo]", "independence");
  t = rep(t, "[UNKNOWN WORD: sendependon]", "independence");
  rgx = "\\[UNKNOWN WORD: ([a-zA-Z]{2})(²|³|2|3)?\\]";
  t = regex_replace(t, rgx, "$1$2");
  t = rplUL(t, " nordea", " from north");
  t = rplUL(t, " sudea", " from south");
  t = rplUL(t, " okcidentea", " from west");
  t = rplUL(t, " orientea", " from east");
  t = rep(t, "[UNKNOWN WORD: from north]", "from north");
  t = rep(t, "[UNKNOWN WORD: from south]", "from south");
  t = rep(t, "[UNKNOWN WORD: from east]", "from east");
  t = rep(t, "[UNKNOWN WORD: from west]", "from west");
  rgx = "(k|c|m|K|C|M)m of (\\w+)(²|³|2|3)";
  t = regex_replace(t, rgx, "$1m$3 of $2");
  t = rplUL(t, " from north southernly", " from north to south");
  t = rplUL(t, " from south northernly", " from south to north");
  t = rplUL(t, " from east westernly", " from east to west");
  t = rplUL(t, " from west easternly", " from west to east");
  rgx = "\\[UNKNOWN WORD : vidkapabloj ? n ? \\]";
  t = regex_replace(t, rgx, " sight");
  t = rplUL(t, " non-about away-thinkable", " indispensable");
  t = rplUL(t, " care/concernness", " care");
  t = rplUL(t, " constantly more", " more and more");
  t = rplUL(t, " at most-size", " greatest extent");
  t = rplUL(t, " icy era", " ice age");
  t = rep(t, "[UNKNOWN WORD: vidkapablon]", "sight");
  t = rep(t, "[UNKNOWN WORD: auxdkapablo]", "hearing");
  t = rep(t, "[UNKNOWN WORD: auxdkapablon]", "hearing");
  t = rep(t, "[UNKNOWN WORD: ekvo]", "equid");
  t = rep(t, "[UNKNOWN WORD: ekvon]", "equid");
  t = rep(t, "[UNKNOWN WORD: ekvoj]", "equids");
  t = rep(t, "[UNKNOWN WORD: ekvojn]", "equids");
  t = rep(t, "[UNKNOWN WORD: ekva]", "equine");
  t = rep(t, "[UNKNOWN WORD: ekvan]", "equine");
  t = rep(t, "[UNKNOWN WORD: ekvaj]", "equine");
  t = rep(t, "[UNKNOWN WORD: ekvajn]", "equine");
  t = rep(t, "[UNKNOWN WORD: sekurigado]", " securing");
  t = rep(t, "[UNKNOWN WORD: sekurigadon]", " securing");
  rgx = "UNKNOWN WORD: ([A-Za-z]+)ilionoj";
  t = regex_replace(t, rgx, "$1illion");
  rgx = "UNKNOWN WORD: ([A-Za-z]+)iliono";
  t = regex_replace(t, rgx, "$1illion");
  rgx = " (w|W)orth \\(it\\)/worthy of (one|tw|three|four|five|six|seven|eight|nine|ten|eleven|thir|forty|fif|hundred|thousand|million|billion|trillion|zero)";
  t = regex_replace(t, rgx, " $1orth $2");
  t = rep(t, "-linguistic", "-language");
  t = rep(t, " I aren't", " I'm not");
  t = rplUL(t, " I be ", " I'm ");
  t = rplUL(t, " you be ", " you are ");
  t = rplUL(t, " they be ", " they are ");
  t = rplUL(t, " we be ", " we are ");
  t = rplUL(t, " I are ", " I'm ");
  txtxt = " " + txt1;
  if (indexof(txtxt, " gxi ") == NOT_FOUND) {
	t = rep(t, " but it shouldn't ", " but don't ");
	t = rep(t, " and it shouldn't ", " and don't ");
	t = rep(t, " or it shouldn't ", " or don't ");
  }
  t = rep(t, " dwelling of/by ", " dwelling of ");
  t = rplUL(t, " dwellings of/by ", " dwellings of ");
  t = rplUL(t, " now called ", " called ");
  t = rplUL(t, " somebody/some people", " some people");
  t = rep(t, " and/or it shouldn't ", " and/or don't ");
  rgx = " was it that (he|she|they|it|one|we|I|you) didn't ";
  t = regex_replace(t, rgx, " didn't $1 ");
  rgx = " was it that (he|she|it|one) (doesn't|could|couldn't|was|wasn't|were|weren't|has|have|had|hasn't|haven't|hadn't) ";
  t = regex_replace(t, rgx, " $2 $1 ");
  rgx = " was it that (you|they|I|we) (don't|could|couldn't|was|wasn't|were|weren't|have|had|haven't|hadn't) ";
  t = regex_replace(t, rgx, " $2 $1 ");
  rgx = " is it that (he|she|it|one) (is|isn't|will|won't|can|can't|could|couldn't|would|wouldn't|should|shouldn't) ";
  t = regex_replace(t, rgx, " $2 $1 ");
  rgx = " is it that (you|they|I|we) (are|am|aren't|am not|will|won't|can|can't|could|couldn't|would|wouldn't|should|shouldn't) ";
  t = regex_replace(t, rgx, " $2 $1 ");
  t = rep(t, " is it that I ", " do I ");
  t = rep(t, " not will ", " won't ");
  rgx = " not (would|should|could|can|is|are|was|were|have|has|had) ";
  t = regex_replace(t, rgx, " $1n't ");
  rgx = " not (he|she|they|it|one|we|I|you) (would|should|could|can|is|are|was|were|have|has|had) ";
  t = regex_replace(t, rgx, " $2n't $1 ");
  rgx = " not (he|she|they|it|one|we|I|you) will ";
  t = regex_replace(t, rgx, " won't $1 ");
  t = rep(t, " does haven't ", " doesn't have ");
  t = rep(t, " do haven't ", " don't have ");
  t = rep(t, " did haven't ", " didn't have ");
  rgx = " of (c|w|sh)ould(n't) ";
  t = regex_replace(t, rgx, " $1ould$2 ");
  rgx = " of (will|won't|can|can't) ";
  t = regex_replace(t, rgx, " $1 ");
  t = rplUL(t, " the one's ", " one's ");
  t = rep(t, " it's to ", " it is to ");
  t = rplUL(t, " known from ", " known by ");
  t = rep(t, " could easy to ", " could easily ");
  t = rep(t, " couldn't easy to ", " couldn't easily ");
  t = rep(t, " can easy to ", " can easily ");
  t = rep(t, " can't easy to ", " can't easily ");
  t = rep(t, " able to easy to ", " able to easily ");
  t = rep(t, " law eyes", " eyes of the law");
  t = rep(t, "-face", "-faced");
  t = rplUL(t, " a lot of a ", " a lot of ");
  t = rplUL(t, " a lot of an ", " a lot of ");
  t = rplUL(t, " that from ", " that of ");
  t = rplUL(t, " those from ", " those of ");
  t = rplUL(t, " infancily", " as a child");
  t = rplUL(t, " adultly", " as an adult");
  rgx = ",([a-zA-Z])";
  t = regex_replace(t, rgx, ", $1");
  rgx = " (d|D)iffer(s|ed|ing)?(ly)?(erly)? of ";
  t = regex_replace(t, rgx, " $1iffer$2 from ");
  rgx = " [bB]efore/ago (some |about |approximately |nearly |almost )?((a |one |two |three |four |five |six |seven |eight |nine |ten |eleven |twelve |thirteen |fourteen |fifteen |sixteen |seventeen |eighteen |nineteen |twenty-|thirty-|forty-|fifty-|sixty-|seventy-|eighty-|ninety-|twenty |thirty |forty |fifty |sixty |seventy |eighty |ninety |dozen |score |hundred |thousand |millions? |billions? |trillions? |and |&& )+)*(seconds|minutes|hours|days|weeks|months|years|decades|centuries|millennia|moment|second|minute|hour|day|week|month|year|decade|century|millennium)( and |, and |, )(some |about |approximately |nearly |almost )?((a |one |two |three |four |five |six |seven |eight |nine |ten |eleven |twelve |thirteen |fourteen |fifteen |sixteen |seventeen |eighteen |nineteen |twenty-|thirty-|forty-|fifty-|sixty-|seventy-|eighty-|ninety-|twenty |thirty |forty |fifty |sixty |seventy |eighty |ninety |dozen |score |hundred |thousand |millions? |billions? |trillions? |and |&& )+)*(seconds|minutes|hours|days|weeks|months|years|decades|centuries|millennia|moment|second|minute|hour|day|week|month|year|decade|century|millennium)";
  t = regex_replace(t, rgx, " $1$2$4$5$6$8$9 ago");
  rgx = " [bB]efore/ago (some |about |approximately |nearly |almost )?((a |one |two |three |four |five |six |seven |eight |nine |ten |eleven |twelve |thirteen |fourteen |fifteen |sixteen |seventeen |eighteen |nineteen |twenty-|thirty-|forty-|fifty-|sixty-|seventy-|eighty-|ninety-|twenty |thirty |forty |fifty |sixty |seventy |eighty |ninety |dozen |score |hundred |thousand |millions? |billions? |trillions? |and |&& |or )+)*(seconds|minutes|hours|days|weeks|months|years|decades|centuries|millennia|moment|second|minute|hour|day|week|month|year|decade|century|millennium)";
  t = regex_replace(t, rgx, " $1$2$4 ago");
  t = rep(t, "1-becoming year", "1st anniversary");
  t = rep(t, "2-becoming year", "2nd anniversary");
  t = rep(t, "3-becoming year", "3rd anniversary");
  rgx = "([4567890])-becoming year";
  t = regex_replace(t, rgx, "$1th anniversary");
  t = rep(t, "anniversarys", "anniversaries");
  t = rep(t, "1-one", "1st");
  t = rep(t, "2-one", "2nd");
  t = rep(t, "3-one", "3rd");
  rgx = "([4567890])-one";
  t = regex_replace(t, rgx, "$1th");
  t = rep(t, "1an an ", "1st ");
  t = rep(t, "2an an ", "2nd ");
  t = rep(t, "3an an ", "3rd ");
  t = rep(t, "1an a ", "1st ");
  t = rep(t, "2an a ", "2nd ");
  t = rep(t, "3an a ", "3rd ");
  rgx = "([4567890])an an? ";
  t = regex_replace(t, rgx, "$1th ");
  t = rep(t, "1an", "1st");
  t = rep(t, "2an", "2nd");
  t = rep(t, "3an", "3rd");
  t = rep(t, "1a", "1st");
  t = rep(t, "2a", "2nd");
  t = rep(t, "3a", "3rd");
  rgx = "([4567890])an?";
  t = regex_replace(t, rgx, "$1th");
  t = rep(t, "1st a ", "1st ");
  t = rep(t, "2nd a ", "2nd ");
  t = rep(t, "3rd a ", "3rd ");
  t = rep(t, "1st an ", "1st ");
  t = rep(t, "2nd an ", "2nd ");
  t = rep(t, "3rd an ", "3rd ");
  rgx = "([4567890])th an? ";
  t = regex_replace(t, rgx, "$1th ");
  t = rep(t, " one by ", " by ");
  t = rep(t, " ones by ", " by ");
  t = rplUL(t, " near me-", " this ");
  rgx = " (it|It|you|You|I|he|He|she|She|they|They|we|We) will ";
  t = regex_replace(t, rgx, " $1'll ");
  rgx = " (it|It|you|You|I|he|He|she|She|they|They|we|We) would ";
  t = regex_replace(t, rgx, " $1'd ");
  rgx = " (does|did|done|do|doing)(ly)?(erly)?/ma(kes?|de|king)(ly)?(erly)? (a? |th|some |any|all )";
  t = regex_replace(t, rgx, " ma$4 $7");
  rgx = " (Do|Doing)(ly)?(erly)?/ma(kes?|de|king)(ly)?(erly)? (a? |th|some |any|all )";
  t = regex_replace(t, rgx,
	" Ma$4 $7");
  rgx = " (r|R)elat(e|es|ed|ing)(ly)?(erly)? on/in";
  t = regex_replace(t, rgx, " $1elat$2 to");
  rgx = " (year|week|month|day|hour|minute|second|century|centurie|millennium)(s)? after/behind";
  t = regex_replace(t, rgx,
	" $1$2 after");
  rgx = " (Years|Weeks|Months|Days|Hours|Minutes|Seconds|Centuries|Millennia) after/behind";
  t = regex_replace(t, rgx,
	" $1$2 after");
  t = rep(t, " somewhat-masc", " small and male");
  t = rep(t, " somewhat-fem", " small and female");
  t = rep(t, "-big-masc", " big and male");
  t = rep(t, "-big-fem", " big and female");
  t = rep(t, "-lousy-big", " big and lousy");
  t = rplUL(t, " not don't ", " don't ");
  t = rplUL(t, " above/over-", " super-");
  t = rplUL(t, " aboves/over-", " super-");
  rgx = " (r|R)esembl(e|es|ed|ing)(ly)?(erly)? to ";
  t = regex_replace(t, rgx, " $1esembl$2 ");
  t = rep(t, " shape attached/fastened/fixed", " fixed form");
  t = rplUL(t, " shapes attached/fastened/fixed", " fixed forms");
  t = rplUL(t, " attached/fastened/fixed shape", " fixed form");
  t = rplUL(t, " those kinds of like/how", " such as");
  t = rplUL(t, " bases/bases", " bases");
  t = rplUL(t, " text-containers", " textboxes");
  t = rplUL(t, " text-container", " textbox");
  rgx = " (c|C)alculat(e|es|ed|ing)(ly)?(erly)? on/in ";
  t = regex_replace(t, rgx, " $1ount$2 on ");
  t = rplUL(t, " it are ", " it's ");
  t = rplUL(t, " it were ", " it was ");
  t = rplUL(t, " it have ", " it has ");
  t = rplUL(t, " it aren't ", " it isn't ");
  t = rplUL(t, " it weren't ", " it wasn't ");
  t = rplUL(t, " it haven't ", " it hasn't ");
  t = rplUL(t, " it okay ", " it well ");
  t = rplUL(t, " he okay ", " he well ");
  t = rplUL(t, " she okay ", " she well ");
  t = rplUL(t, " they okay ", " they well ");
  t = rplUL(t, " you okay ", " you well ");
  t = rplUL(t, " we okay ", " we well ");
  t = rep(t, " I okay ", " I well ");
  rgx = " (a|A)n? ([aeiouAEIOU])";
  t = regex_replace(t, rgx, " $1n ñññ$2");
  t = rplUL(t, " an ", " a ");
  t = rplUL(t, " a ñññ", " an ");
  rgx = " (a|A) ([aeiouAEIOU])";
  t = regex_replace(t, rgx, " $1n $2");
  t = rplUL(t, " an us", " a us");
  t = rplUL(t, " an U", " a U");
  rgx = " (a|A) (honest|honor|herb|hour)([ .,?!;:)])";
  t = regex_replace(t, rgx, " $1n $2$3");
  t = rplUL(t, " are a ", " is a ");
  t = rplUL(t, " are an ", " is an ");
  t = rplUL(t, " were a ", " was a ");
  t = rplUL(t, " were an ", " was an ");
  t = rplF(t, "before/ago a ", "before a ");
  t = rplF(t, "before/ago an ", "before an ");
  t = rep(t, "1st from ", "1st of ");
  t = rep(t, "2nd from ", "2nd of ");
  t = rep(t, "3rd from ", "3rd of ");
  rgx = "([4567890])th from ";
  t = regex_replace(t, rgx, "$1th of ");
  t = rep(t, "1st first ", "1st ");
  t = rep(t, "2nd first ", "2nd ");
  t = rep(t, "3rd first ", "3rd ");
  rgx = "[4567890]th first ";
  t = regex_replace(t, rgx, "$1th ");
  rgx = "(\\d) one ";
  t = regex_replace(t, rgx, "$1 ");
  rgx = "(th|1st|2nd|3rd) (one|a) (centur|millenni)";
  t = regex_replace(t, rgx, "$1 $3");
  t = rep(t, "11st", "11th");
  t = rep(t, "12nd", "12th");
  t = rep(t, "13rd", "13th");
  t = rep(t, "0th years", "0s");
  t = rep(t, "-year-old-aged one", "-year-old");
  t = rep(t, " or here, and don't ", " here, or don't ");
  t = rep(t, " Buxdqio", " This");
  t = rep(t, " Blxdqio", " this");
  t = rep(t, " Puxdqio", " That");
  t = rep(t, " Plxdqio", " that");
  t = rplUL(t, " from beginning", " at first");
  t = rplUL(t, " and okay", " and well");
  t = rplUL(t, " but okay", " but well");
  t = rplUL(t, " or okay", " or well");
  t = rep(t, " and/or okay", " and/or well");
  t = rep(t, " one okay", " one well");
  t = rep(t, " ones okay", " ones well");
  t = rplUL(t, " fast/quickly", " quickly");
  t = rep(t, "-namely", "-name");
  t = rep(t, "c'mon-", "b-");
  t = rep(t, " one) a ", ") ");
  t = rep(t, " one) an ", ") ");
  t = rep(t, " one )", ")");
  t = rep(t, " ones )", ")");
  t = rplUL(t, " an-", " one-");
  t = rplUL(t, " very having been ", " very much having been ");
  t = rplUL(t, " an okay ", " a well ");
  t = rep(t, " He are ", " He is ");
  t = rep(t, " He were ", " He was ");
  t = rep(t, " He have ", " He has ");
  t = rep(t, " He aren't", " He isn't");
  t = rep(t, " He weren't", " He wasn't");
  t = rep(t, " He haven't", " He hasn't");
  t = rep(t, " He go ", " He goes ");
  t = rep(t, " She are ", " She is ");
  t = rep(t, " She were ", " She was ");
  t = rep(t, " She have ", " She has ");
  t = rep(t, " She aren't", " She isn't");
  t = rep(t, " She weren't", " She wasn't");
  t = rep(t, " She haven't", " She hasn't");
  t = rep(t, " She go ", " She goes ");
  t = rep(t, " It are ", " It is ");
  t = rep(t, " It were ", " It was ");
  t = rep(t, " It have ", " It has ");
  t = rep(t, " It aren't", " It isn't");
  t = rep(t, " It weren't", " It wasn't");
  t = rep(t, " It haven't", " It hasn't");
  t = rep(t, " It go ", " It goes ");
  t = rep(t, " One are ", " One is ");
  t = rep(t, " One were ", " One was ");
  t = rep(t, " One have ", " One has ");
  t = rep(t, " One aren't", " One isn't");
  t = rep(t, " One weren't", " One wasn't");
  t = rep(t, " One haven't", " One hasn't");
  t = rep(t, " One go ", " One goes ");
  t = rplUL(t, " a so ", " so ");
  if (!indexof(txtxt, " kaj ") >= FOUND) {
	rgx = "([^hH])is are ";
	t = regex_replace(t, rgx, "$1is is ");
	t = rep(t, "us are ", "us is ");
	rgx = "([^hH])is were ";
	t = regex_replace(t, rgx, "$1is was ");
	t = rep(t, "us were ", "us was ");
	rgx = "([^hH])is have ";
	t = regex_replace(t, rgx, "$1is has ");
	t = rep(t, "us have ", "us has ");
  }
  t = rep(t, "n't are ", "n't be ");
  t = rep(t, " they don't be ", " they aren't ");
  t = rep(t, " you don't be ", " you aren't ");
  t = rep(t, " I don't be ", " I'm not ");
  t = rep(t, " we don't be ", " we aren't ");
  t = rep(t, "s don't be ", "s aren't ");
  t = rep(t, " They don't be ", " They aren't ");
  t = rep(t, " You don't be ", " You aren't ");
  t = rep(t, " We don't be ", " We aren't ");
  t = rplF(t, "doesn't be ", "isn't ");
  t = rplF(t, "didn't be ", "wasn't ");
  if (indexof(txt1, "Gxi ") == NOT_FOUND) {
	t = rep(t, " It is ", " There is ");
	t = rep(t, " It was ", " There was ");
	t = rep(t, " It will be ", " There will be ");
	t = rep(t, " It would be ", " There would be ");
	t = rep(t, " It isn't ", " There isn't ");
	t = rep(t, " It wasn't ", " There wasn't ");
	t = rep(t, " It won't be ", " There won't be ");
	t = rep(t, " It wouldn't be ", " There wouldn't be ");
  }

  t = rep(t, "thatxqyy", "that");
  t = rep(t, "that.", "that .");
  t = rep(t, " There is good that ", " It is good that ");
  t = rep(t, " There is okay that ", " It is okay that ");
  t = rep(t, " There is important that ", " It is important that ");
  t = rep(t, " There is too bad that ", " It is too bad that ");
  t = rep(t, " There is necessary that ", " It is necessary that ");
  t = rep(t, " There isn't good that ", " It isn't good that ");
  t = rep(t, " There isn't okay that ", " It isn't okay that ");
  t = rep(t, " There isn't important that ", " It isn't important that ");
  t = rep(t, " There isn't too bad that ", " It isn't too bad that ");
  t = rep(t, " There isn't necessary that ", " It isn't necessary that ");
  t = rep(t, " There isn't necessary for ", " It isn't necessary for ");
  t = rep(t, " There isn't necessary to ", " It isn't necessary to ");
  t = rep(t, " There isn't necessary in ", " It isn't necessary in ");
  t = rep(t, " There wasn't good that ", " It wasn't good that ");
  t = rep(t, " There wasn't okay that ", " It wasn't okay that ");
  t = rep(t, " There wasn't important that ", " It wasn't important that ");
  t = rep(t, " There wasn't too bad that ", " It wasn't too bad that ");
  t = rep(t, " There wasn't necessary that ", " It wasn't necessary that ");
  t = rep(t, " There wasn't necessary for ", " It wasn't necessary for ");
  t = rep(t, " There wasn't necessary to ", " It wasn't necessary to ");
  t = rep(t, " There wasn't necessary in ", " It wasn't necessary in ");
  t = rep(t, " There won't be good that ", " It won't be good that ");
  t = rep(t, " There won't be okay that ", " It won't be okay that ");
  t = rep(t, " There won't be important that ", " It won't be important that ");
  t = rep(t, " There won't be too bad that ", " It won't be too bad that ");
  t = rep(t, " There won't be necessary that ", " It won't be necessary that ");
  t = rep(t, " There will be good that ", " It will be good that ");
  t = rep(t, " There will be okay that ", " It will be okay that ");
  t = rep(t, " There will be important that ", " It will be important that ");
  t = rep(t, " There will be too bad that ", " It will be too bad that ");
  t = rep(t, " There will be necessary that ", " It will be necessary that ");
  t = rep(t, " There will be necessary for ", " It will be necessary for ");
  t = rep(t, " There will be necessary to ", " It will be necessary to ");
  t = rep(t, " There will be necessary in ", " It will be necessary in ");
  t = rep(t, " There wouldn't be good that ", " It wouldn't be good that ");
  t = rep(t, " There wouldn't be okay that ", " It wouldn't be okay that ");
  t = rep(t, " There wouldn't be important that ",
	" It wouldn't be important that ");
  t = rep(t, " There wouldn't be too bad that ",
	" It wouldn't be too bad that ");
  t = rep(t, " There wouldn't be necessary that ",
	" It wouldn't be necessary that ");
  t = rep(t, " There shouldn't be good that ", " It shouldn't be good that ");
  t = rep(t, " There shouldn't be okay that ", " It shouldn't be okay that ");
  t = rep(t, " There shouldn't be important that ",
	" It shouldn't be important that ");
  t = rep(t, " There shouldn't be too bad that ",
	" It shouldn't be too bad that ");
  t = rep(t, " There shouldn't be necessary that ",
	" It shouldn't be necessary that ");
  t = rep(t, " There shouldn't be necessary for ",
	" It shouldn't be necessary for ");
  t = rep(t, " There shouldn't be necessary to ",
	" It shouldn't be necessary to ");
  t = rep(t, " There shouldn't be necessary in ",
	" It shouldn't be necessary in ");
  t = rep(t, " There would be good that ", " It would be good that ");
  t = rep(t, " There would be okay that ", " It would be okay that ");
  t = rep(t, " There would be important that ", " It would be important that ");
  t = rep(t, " There would be too bad that ", " It would be too bad that ");
  t = rep(t, " There would be necessary that ", " It would be necessary that ");
  t = rep(t, " There should be good that ", " It should be good that ");
  t = rep(t, " There should be okay that ", " It should be okay that ");
  t = rep(t, " There should be important that ",
	" It should be important that ");
  t = rep(t, " There should be too bad that ", " It should be too bad that ");
  t = rep(t, " There should be necessary that ",
	" It should be necessary that ");
  t = rep(t, " There should be necessary for ", " It should be necessary for ");
  t = rep(t, " There should be necessary to ", " It should be necessary to ");
  t = rep(t, " There should be necessary in ", " It should be necessary in ");
  t = rep(t, "that .", "that.");
  t += " ";
  rgx = "ty && (one|two|three|four|five|six|seven|eight|nine)\\b";
  t = regex_replace(t, rgx, "ty-$1");
  rgx = "(wen|hir|or|if|ix|even|igh|ine)ty (one|two|three|four|five|six|seven|eight|nine)([.,?!:;)])";
  t = regex_replace(t, rgx, "$1ty-$2$3");
  rgx = "(o|O)n/in (Monday|Tuesday|Wednesday|Thursday|Friday|Saturday|Sunday)";
  t = regex_replace(t, rgx, "$1n $2");
  t = rep(t, "on/in (January|February|March|April|May|June|July|August|September|October|November|December)", "in $1");
  t = rep(t, "On/in (January|February|March|April|May|June|July|August|September|October|November|December)", "In $1");
  rgx = " small\\b";
  t = regex_replace(t, rgx, " little");
  rgx = " Small\\b";
  t = regex_replace(t, rgx, " Little");
  t = rep(t, " It)", "");
  t = t.substr(0, t.length() - 1);
  if (startswith(t, " Okay ")) {
	t = " Well " + t.substr(6);
  }
  t = rplUL(t, " one a ", " a ");
  t = rplUL(t, " one an ", " an ");
  t = rplUL(t, " the a ", " the ");
  t = rplUL(t, " the an ", " the ");
  t = rep(t, " The it a", " A");
  t = rep(t, " The it b", " B");
  t = rep(t, " The it c", " C");
  t = rep(t, " The it d", " D");
  t = rep(t, " The it e", " E");
  t = rep(t, " The it f", " F");
  t = rep(t, " The it g", " G");
  t = rep(t, " The it h", " H");
  t = rep(t, " The it i", " I");
  t = rep(t, " The it j", " J");
  t = rep(t, " The it k", " K");
  t = rep(t, " The it l", " L");
  t = rep(t, " The it m", " M");
  t = rep(t, " The it n", " N");
  t = rep(t, " The it o", " O");
  t = rep(t, " The it p", " P");
  t = rep(t, " The it q", " Q");
  t = rep(t, " The it r", " R");
  t = rep(t, " The it s", " S");
  t = rep(t, " The it t", " T");
  t = rep(t, " The it u", " U");
  t = rep(t, " The it v", " V");
  t = rep(t, " The it w", " W");
  t = rep(t, " The it x", " X");
  t = rep(t, " The it y", " Y");
  t = rep(t, " The it z", " Z");
  t = rplUL(t, " shape", " form");
  t = rplUL(t, " brushly", " brushily");
  t = rep(t, " It ises", " There is");
  t = rep(t, "self of ", "self from ");
  t = rep(t, "selves of ", "selves from ");
  t = rplUL(t, " having been becoming", " having become");
  t = rplUL(t, " midnightly", " at midnight");
  t = rep(t, " too is ", " is too ");
  t = rep(t, " too are ", " are too ");
  t = rep(t, " too was ", " was too ");
  t = rep(t, " too were ", " were too ");
  t = rep(t, " too am ", " am too ");
  t = rplUL(t, " too to be ", " to be too ");
  t = rplUL(t, " to is ", " to be ");
  t = rplUL(t, " to are ", " to be ");
  t = rplUL(t, " more okay", " better");
  t = rplUL(t, " most okay", " best");
  t = rplUL(t, " that-casely", " in that case");
  t = rplUL(t, " during-the-long", " for a long time");
  t = rplUL(t, " very okay", " very well");
  t = rplUL(t, " too okay", " too well");
  t = rplUL(t, " as okay", " as well");
  t = rep(t, " man/male", " man");
  t = rplUL(t, " men/males", " men");
  t = rep(t, " woman/female", " woman");
  t = rplUL(t, " women/females", " women");
  t = rplUL(t, " that aren't", " that isn't");
  t = rplUL(t, " that weren't", " that wasn't");
  t = rplUL(t, " this aren't", " this isn't");
  t = rplUL(t, " this weren't", " this wasn't");
  t = rplUL(t, " can have ", " may have ");
  t = rep(t, "( ", "(");
  t = rep(t, " )", ")");
  t = rep(t, " -", " -- ");
  t = rep(t, " ", "--");
  t = rep(t, "-- qzqx9 N", "> ");
  t = rep(t, "qzqx9", "");
  t = rep(t, "  --", " --");
  t = rep(t, "--  ", "-- ");
  t = rep(t, "  --", " --");
  t = rep(t, "--  ", "-- ");
  t = rep(t, " a-", " -- ");
  t = rep(t, "iqzxuqqe", "-");
  t = rep(t, "Qzxuq", "--");
  t = rep(t, " fakeqxj", "");
  t = rep(t, "-- Wzx", "--  Wzx");
  t = rep(t, "-/ -- ", "-");
  rgx = " how wh(y|ere|en|at|o|om)([ .,?!:;)])";
  t = regex_replace(t, rgx, " wh$1$2");
  rgx = " (k|K)now(s|ing)?(ly)?(erly)? how( that|,) ";
  t = regex_replace(t, rgx, " $1now$2$3 ");
  t = rep(t, " null", " cqsxull");
  t = rep(t, "null", "");
  t = rep(t, " cqsxull", " null");
  rgx = " near me that([ .,?!:;)])";
  t = regex_replace(t, rgx, " this$1");
  rgx = " near me those([ .,?!:;)])";
  t = regex_replace(t, rgx, " these$1");
  rgx = " are th(is|at)([ .,?!:;)])";
  t = regex_replace(t, rgx, " is th$1$2");
  rgx = " (w|W)ered([ .,?!:;)])";
  t = regex_replace(t, rgx, " $1ere$2");
  if (indexof(t, " upstairs/above") >= FOUND) {
	if ((indexof(t, " run") == NOT_FOUND) && (indexof(t, " Run") == NOT_FOUND)
	  && (indexof(t, " went") == NOT_FOUND) && (indexof(t, " go") == NOT_FOUND)
	  && (indexof(t, " Go") == NOT_FOUND) && (indexof(t, " ran") == NOT_FOUND)) {
	  t = rep(t, " upstairs/above", " above");
	}
  }
  rgx = " kind(s)? of (is|was|are|were) it that ";
  t = regex_replace(t, rgx, " kind$1 $2 it that ");
  t = rep(t, " how how ", " how ");
  t = rplUL(t, " an univ", " a univ");
  t = rplUL(t, " h-method", " H-method");
  t = rplUL(t, " x-method", " X-method");
  t = rplUL(t, " species from ", " species of ");
  t = rep(t, " (should see", " (see");
  t = rep(t, " (Should see", " (See");
  t = rep(t, " (see a ", " (see ");
  t = rep(t, " (See a ", " (See ");
  t = rep(t, " (see an ", " (see ");
  t = rep(t, " (See an ", " (See ");
  t = rep(t, " the an ah ", " the H-");
  t = rep(t, " The an ah ", " The H-");
  t = rep(t, "[UNKNOWN WORD: xa] a ", "X-");
  t = rep(t, " && ", " and ");
  t = rep(t, " how whether/or", " whether");
  t = rplUL(t, " alot-", " multi");
  t = rplUL(t, " this ññ", " these ");
  t = rplUL(t, " that ññ", " those ");
  t = rep(t, " An other", " Another");
  t = rep(t, " an other", " another");
  t = rep(t, " Fakexsubo and Fakexsubo ", " ");
  t = rep(t, " subo and Fakexsubo ", " ");
  t = rep(t, " Fakexsubo ", " ");
  t = rep(t, " fakexsubo and fakexsubo ", " ");
  t = rep(t, " fakexsubo ", " ");
  t = rep(t, " [UNKNOWN WORD: fakexsubo] ", " ");
  t = rep(t, " [UNKNOWN WORD:  fakexsubo] ", " ");
  t = rep(t, "[UNKNOWN WORD: funikularo]", "cablecar");
  t = rep(t, "[UNKNOWN WORD: funikularon]", "cablecar");
  t = rep(t, "[UNKNOWN WORD: funikularoj]", "cablecars");
  t = rep(t, "[UNKNOWN WORD: funikularojn]", "cablecars");
  t = rplUL(t, " during at ", " while at ");
  t = rep(t, " a fakeobj ", " ");
  t = rep(t, " A Fakeobj ", " ");
  t = rep(t, "fakeobj ", " ");
  t = rep(t, "Fakeobj ", " ");
  t = rep(t, " a fakeobj", "");
  t = rep(t, "fakeobj ", "");
  t = rep(t, "u8qpz ", "-");
  t = rep(t, "Itq should ", " ");
  t = rep(t, "itq should ", " ");
  t = rep(t, " itq ", " ");
  t = rep(t, " Itq ", " ");
  t = rep(t, " An oh ", " Oh ");
  t = rep(t, " an oh ", " oh ");
  t = rep(t, " An oh!", " Oh!");
  t = rep(t, " an oh!", " oh!");
  t = rep(t, " An oh?", " Oh?");
  t = rep(t, " an oh?", " oh?");
  t = rep(t, " An oh,", " Oh,");
  t = rep(t, " an oh,", " oh,");
  rgx = " (b|B)efore/ago (.*)(seconds?|minutes?|hours?|days?|weeks?|months?|years?|decades?|centuries|century|millennium|millennia)";
  t = regex_replace(t, rgx, " $2$3 ago");
  rgx = " (t|T)he (English|Spanish|Chinese|Russian|Portuguese|Latin|Greek|Hebrew|Farsi|French|German|Arabic|Japanese|Hindi|Vietnamese|Indonesian|Dutch|Italian|Swahili|Swedish|Hungarian|Yiddish|Inuit|Aborigine|Native American) one([ .,?!:;)])";
  t = regex_replace(t, rgx, " $2$3");
  rgx = " (i|I)n the (English|Spanish|Chinese|Russian|Portuguese|Latin|Greek|Hebrew|Farsi|French|German|Arabic|Japanese|Hindi|Vietnamese|Indonesian|Dutch|Swahili|Swedish|Hungarian|Yiddish|Inuit|Aborigine|Native American|Italian)([.,?!:;)])";
  t = regex_replace(t, rgx, " $1n $2$3");
  t = rep(t, " Chineses", " Chinese");
  t = rep(t, " Japaneses", " Japanese");
  t = rep(t, " Vietnameses", " Vietnamese");
  t = rep(t, " Portugueses", " Portuguese");
  rgx = " roman\\b";
  t = regex_replace(t, rgx, " Roman");
  t = rep(t, " gaul", " Gaul");
  t = rplUL(t, " finally of ", " at the end of ");
  t = rplUL(t, " finally from ", " at the end of ");
  t = rplUL(t, " Then/afterwords should ", " Then ");
  t = rplUL(t, " then/afterwords should ", " then ");
  t = rplUL(t, " female home", " dominant");
  if ((indexof(t, " it ") == NOT_FOUND) && (indexof(t, " It ") == NOT_FOUND)) {
	t = rep(t, " are raining", " it's raining");
	t = rep(t, " was raining", " it was raining");
	t = rep(t, " will rain", " it'll rain");
	t = rep(t, " would rain", " it would rain");
	t = rep(t, " have been raining", " it has rained");
	t = rep(t, " had been raining", " it had rained");
	t = rep(t, " are snowing", " it's snowing");
	t = rep(t, " was snowing", " it was snowing");
	t = rep(t, " will snow", " it'll snow");
	t = rep(t, " would snow", " it would snow");
	t = rep(t, " have been snowing", " it has snowed");
	t = rep(t, " had been snowing", " it had snowed");
	t = rep(t, " (be|are|am) having been ", " have been ");
	t = rep(t, " (was|were) having been ", " had been ");
	t = rplUL(t, " is having been ", " has been ");
	rgx = " being(ly)?(erly)? having been ";
	t = regex_replace(t, rgx, " having been ");
	rgx = " Being(ly)?(erly)? having been ";
	t = regex_replace(t, rgx, " Having been ");
	t = rep(t, " xrdth", "th");
	t = rep(t, " xrdst", "st");
	t = rep(t, " xrdnd", "nd");
	t = rep(t, " xrdrd", "rd");
	t = rep(t, "Wzxl ", "\"");
	if (endswith(t, "  ")) {
	  t = t.substr(0, t.length() - 1);
	}
	if (endswith(t, "  ")) {
	  t = t.substr(0, t.length() - 1);
	}
	if (t.compare(" not  ") == 0) {
	  t = " no ";
	}
	if (t.compare(" not ") == 0) {
	  t = " no ";
	}
	if (t.compare(" not. ") == 0) {
	  t = " no. ";
	}
	if (t.compare(" not! ") == 0) {
	  t = " no! ";
	}
	if (t.compare(" not? ") == 0) {
	  t = " no? ";
	}
	if (t.compare(" not?? ") == 0) {
	  t = " no?? ";
	}
	if (t.compare(" not?! ") == 0) {
	  t = " no?! ";
	}
	if (t.compare(" not??? ") == 0) {
	  t = " no??? ";
	}
	if (t.compare(" not!! ") == 0) {
	  t = " no!! ";
	}
	if (t.compare(" not!!! ") == 0) {
	  t = " no!!! ";
	}
	if (t.compare(" not!!!! ") == 0) {
	  t = " no!!!! ";
	}
	if (t.compare(" not!!!!! ") == 0) {
	  t = " no!!!!! ";
	}
	if (t.compare(" \"not  ") == 0) {
	  t = " \"no\" ";
	}
	if (t.compare(" \"not \"") == 0) {
	  t = " \"no\" ";
	}
	if (t.compare(" \"not \" ") == 0) {
	  t = " \"no\" ";
	}
	if (t.compare(" \"not. \" ") == 0) {
	  t = " \"no.\" ";
	}
	if (t.compare(" \"not! \" ") == 0) {
	  t = " \"no!\" ";
	}
	if (t.compare(" \"not? \" ") == 0) {
	  t = " \"no?\" ";
	}
	if (t.compare(" \"not?? \" ") == 0) {
	  t = " \"no??\" ";
	}
	if (t.compare(" \"not?! \" ") == 0) {
	  t = " \"no?!\" ";
	}
	if (t.compare(" \"not??? \" ") == 0) {
	  t = " \"no???\" ";
	}
	if (t.compare(" \"not!! \" ") == 0) {
	  t = " \"no!!\" ";
	}
	if (t.compare(" \"not!!! \" ") == 0) {
	  t = " \"no!!!\" ";
	}
	if (t.compare(" \"not!!!! \" ") == 0) {
	  t = " \"no!!!!\" ";
	}
	if (t.compare(" \"not!!!!! \" ") == 0) {
	  t = " \"no!!!!!\" ";
	}
	if (t.compare(" \"not/no  ") == 0) {
	  t = " \"no\" ";
	}
	if (t.compare(" \"not/no \"") == 0) {
	  t = " \"no\" ";
	}
	if (t.compare(" \"not/no \" ") == 0) {
	  t = " \"no\" ";
	}
	if (t.compare(" \"not/no. \" ") == 0) {
	  t = " \"no.\" ";
	}
	if (t.compare(" \"not/no! \" ") == 0) {
	  t = " \"no!\" ";
	}
	if (t.compare(" \"not/no? \" ") == 0) {
	  t = " \"no?\" ";
	}
	if (t.compare(" \"not/no?? \" ") == 0) {
	  t = " \"no??\" ";
	}
	if (t.compare(" \"not/no??? \" ") == 0) {
	  t = " \"no???\" ";
	}
	if (t.compare(" \"not/no?! \" ") == 0) {
	  t = " \"no?!\" ";
	}
	if (t.compare(" \"not/no!! \" ") == 0) {
	  t = " \"no!!\" ";
	}
	if (t.compare(" \"not/no!!! \" ") == 0) {
	  t = " \"no!!!\" ";
	}
	if (t.compare(" \"not/no!!!! \" ") == 0) {
	  t = " \"no!!!!\" ";
	}
	if (t.compare(" \"not/no!!!!! \" ") == 0) {
	  t = " \"no!!!!!\" ";
	}
	if (t.compare(" \"Not/no \" ") == 0) {
	  t = " \"No\" ";
	}
	if (t.compare(" \"not/no \" ") == 0) {
	  t = " \"no\" ";
	}
	if (t.compare(" Not ") == 0) {
	  t = " No ";
	}
	rgx = "(|\")Not(/no)?((\\.|,|\\?|!||;|:|\\)){1,5})( \")";
	t = regex_replace(t, rgx, "$1No$3\"");
	rgx = "(|\")Not(/no)?((\\.|,|\\?|!|\"|;|:|\\)){1,5})";
	t = regex_replace(t, rgx, "$1No$3");

	if (startswith(t, " it ")) {
	  t = " It " + t.substr(4);
	}
  }
  rgx = " (would|will|wouldn't|won't) it has (rained|snowed)";
  t = regex_replace(t, rgx, " it $1 have $2");
  t = rep(t, " will it has rained", " it will have rained");
  t = rep(t, " would it has snowed", " it would have snowed");
  t = rep(t, " will it has snowed", " it will have snowed");
  rgx = " ([.,?!;:]) ";
  t = regex_replace(t, rgx, "$1 ");
  t = rep(t, "( ", "(");
  t = rep(t, "{ ", "{");
  p = indexof(t, "u2qpz");
  while (p >= FOUND) {
	t = t.substr(0, p - 1) + upperall(t.substr(p - 1, p - (p - 1))) + "-"
	  + t.substr(p + 6);
	p = indexof(t, "u2qpz");
  }
  rgx = " That an? ";
  t = regex_replace(t, rgx, " That ");
  t = rplUL(t, " part of/by ", " part of ");
  t = rplUL(t, " quality from ", " quality of ");
  t = rplUL(t, " qualities from ", " qualities of ");
  t = rplUL(t, " quantity from ", " quantity of ");
  t = rplUL(t, " quantities from ", " quantities of ");
  t = rplUL(t, " at most-large quantity", " most");
  t = rep(t, ", who/which ", ", which ");
  t = rep(t, ", whom/which ", ", which ");
  if (!indexof(t, "?") >= FOUND) {
	rgx = "(.{16,})whom?/which ";
	t = regex_replace(t, rgx, "$1which ");
  }
  t = rplUL(t, " opposite-of-one", " last");
  t = rep(t, "Homo [UNKNOWN WORD: sapiens]", "Homo sapiens");
  t = rep(t, "homo [UNKNOWN WORD: sapiens]", "Homo sapiens");
  t = rep(t, " [UNKNOWN WORD: tenigxo]", " posture");
  t = rplUL(t, " capables", " capable");
  t = rep(t, "[UNKNOWN WORD: patriarkuma]", "patriarchal");
  t = rep(t, "[UNKNOWN WORD: patriarkumaj]", "patriarchal");
  t = rep(t, "[UNKNOWN WORD: patriarkuman]", "patriarchal");
  t = rep(t, "[UNKNOWN WORD: patriarkumajn]", "patriarchal");
  t = rep(t, "[UNKNOWN WORD: bonobo]", "bonobo");
  t = rep(t, "[UNKNOWN WORD: bonoboj]", "bonobos");
  t = rep(t, "[UNKNOWN WORD: bonobon]", "bonobo");
  t = rep(t, "[UNKNOWN WORD: bonobojn]", "bonobos");
  t = rplUL(t, " chimpanzeeses", " chimpanzees");
  t = rplUL(t, " opposite-of-becomes majority", " becomes a minority");
  t = rplUL(t, " opposite-of-become majority", " become a minority");
  t = rplUL(t, " opposite-of-became majority", " became a minority");
  t = rplUL(t, " opposite-of-becoming majority", " becoming a minority");
  t = rplUL(t, " opposite-of-becomingly majority", " becoming a minority"); 
  t = rplUL(t, " aing ", " a ");
  t = rplUL(t, " aning ", " an ");
  t = rplUL(t, " eaching ", " each ");
  t = rplUL(t, " theing ", " the ");
  t = rep(t, "Vidu ", "See ");
  t = rep(t, "Vidu:", "See:");
  t = rep(t, " most early", " earliest");
  t = rep(t, " most late/slow", " latest");
  t = rplUL(t, " climatic-belt/waist/zone", " climate zone");
  t = rplUL(t, " climatic-belts/waists/zones", " climate zones");
  rgx = " (b|B)etween/among (\\-?\\+?\\d+\\.?\\d* and \\-?\\+?\\d+\\.?\\d*)";
  t = regex_replace(t, rgx, " $1etween $2");
  t = rplUL(t, " resultly of ", " as a result of ");
  rgx = " (d|D)at(e|es|ed|ing)(ly)? of ";
  t = regex_replace(t, rgx, " $1at$2 from ");
  t = rplUL(t, " rating/appraising/estimating-calling", " taxonomical");
  t = rep(t, "[UNKNOWN WORD: subsahara]", "Sub-Saharan");
  t = rep(t, "[UNKNOWN WORD: duflankas]", "straddles");
  t = rep(t, "[UNKNOWN WORD: duflankis]", "straddled");
  t = rep(t, "[UNKNOWN WORD: duflankanta]", "straddling");
  t = rep(t, "[UNKNOWN WORD: duflankante]", "straddling");
  t = rep(t, "[UNKNOWN WORD: duflanki", "to straddle");
  t = rep(t, "[UNKNOWN WORD: duflankos]", "will straddle");
  t = rep(t, "[UNKNOWN WORD: duflankus", "would straddle");
  t = rep(t, "[UNKNOWN WORD: duflanku]", "straddle");
  t = rep(t, "[UNKNOWN WORD: taksonomioj]", "taxonomies");
  t = rep(t, "[UNKNOWN WORD: taksonomiojn]", "taxonomies");
  t = rep(t, "[UNKNOWN WORD: taksonomio]", "taxonomy");
  t = rep(t, "[UNKNOWN WORD: taksonomion]", "taxonomy");
  t = rep(t, "[UNKNOWN WORD: homo]", "person");
  t = rep(t, "[UNKNOWN WORD: orangutano]", "orangutan");
  t = rep(t, "[UNKNOWN WORD: orangutanoj]", "orangutans");
  t = rep(t, "[UNKNOWN WORD: orangutanon]", "orangutan");
  t = rep(t, "[UNKNOWN WORD: orangutanojn]", "orangutans");
  t = rep(t, "[UNKNOWN WORD: nebonvenigata]", "unwelcome");
  t = rep(t, "[UNKNOWN WORD: nebonvenigataj]", "unwelcome");
  t = rep(t, "[UNKNOWN WORD: nebonvenigatan]", "unwelcome");
  t = rep(t, "[UNKNOWN WORD: nebonvenigatajn]", "unwelcome");
  t = rep(t, "[UNKNOWN WORD: toksinoplasmozo]", " toxoplasmosis");
  t = rep(t, "[UNKNOWN WORD: toksinoplasmozon]", " toxoplasmosis");
  t = rep(t, " [UNKNOWN WORD: felisedoj]", " felidae");
  t = rep(t, " [UNKNOWN WORD: felisedojn]", " felidae");
  t = rep(t, " Oni ", " One ");
  rgx = " (d|D)istinguish(.*) of ";
  t = regex_replace(t, rgx, " $1istinguish$2 from ");
  rgx = " (r|R)each(.*) of ";
  t = regex_replace(t, rgx, " $1each$2 from ");
  t = rplUL(t, " wide/hugely considered", " widely considered");
  t = rplUL(t, " considered like/as", " considered");
  t = rplUL(t, " as/that way called", " so-called");
  t = rplUL(t, " touching heat", " emotional warmth");
  t = rplUL(t, " ten of years", " tens of years");
  t = rplUL(t, " hundred of years", " hundreds of years");
  t = rplUL(t, " thousand of years", " thousands of years");
  t = rplUL(t, "illion of years", "illions of years");
  rgx = " (v|V)ery lot([ .,?!::)])";
  t = regex_replace(t, rgx, " $1ery much$2");
  rgx = " (a|A)part an? ";
  t = regex_replace(t, rgx, " $1part one ");
  t = rep(t, " god/a god", " God/a god");
  t = rplUL(t, " its own a ", " its own ");
  t = rplUL(t, " icy-epoch/period", " ice age");
  t = rplUL(t, " magpie-mint", " pigment");
  t = rplUL(t, " century-thousand", " hundreds of thousands of years");
  t = rplUL(t, " almost same", " almost the same");
  t = rplUL(t, " large-scalely", " on a large scale");
  t = rep(t, ", then/afterwords", ", then");
  t = rep(t, "(then/afterwords", "(later");
  t = rep(t, "(Then/afterwords", "(Later");
  rgx = " ([bB])ased (.{0,20})on/in";
  t = regex_replace(t, rgx, " $1ased $2on");
  t = rplUL(t, " furthermore-", " furthermore ");
  t = rep(t, "undefinedon", "");
  t = rep(t, "undefinedo", "");
  rgx = "([a-zA-Z0-9]+)  +";
  t = regex_replace(t, rgx, "$1 ");
  t = rplUL(t, " an also ", " also ");
  rgx = " (a|A) ([aefhilmnorsxAEFHILMNORSX])-";
  t = regex_replace(t, rgx, " $1n $2-");
  t = rplUL(t, " the (a ", " the (");
  t = rplUL(t, " the (an ", " the (");
  rgx = "(\\d) a ";
  t = regex_replace(t, rgx, "$1 ");
  rgx = "(\\d) an ";
  t = regex_replace(t, rgx, "$1 ");
  rgx = "(\\d) -- (\\d)";
  t = regex_replace(t, rgx, "$1 - $2");
  p = indexof(t, ", it's ");
  if (p >= 15) {
	t = rep(t, ", it's ", ", is ");
  }
  if (endswith(t, " the. ")) {
	if (startswith(t, upperall(t.substr(0, 2)))) {
	  t = " The" + t.substr(0, t.length() - 6) + ". ";
	}
	else {
	  t = " the" + t.substr(0, t.length() - 6) + ". ";
	}
	t = t.substr(0, 5) + lowerall(t.substr(5, 6 - 5)) + t.substr(6);
  }
  if (endswith(t, " the? ")) {
	if (startswith(t, upperall(t.substr(0, 2)))) {
	  t = " The" + t.substr(0, t.length() - 6) + "? ";
	}
	else {
	  t = " the" + t.substr(0, t.length() - 6) + "? ";
	}
	t = t.substr(0, 5) + lowerall(t.substr(5, 6 - 5)) + t.substr(6);
  }
  if (endswith(t, " the! ")) {
	if (startswith(t, upperall(t.substr(0, 2)))) {
	  t = " The" + t.substr(0, t.length() - 6) + "! ";
	}
	else {
	  t = " the" + t.substr(0, t.length() - 6) + "! ";
	}
	t = t.substr(0, 5) + lowerall(t.substr(5, 6 - 5)) + t.substr(6);
  }
  if (endswith(t, " the; ")) {
	if (startswith(t, upperall(t.substr(0, 2)))) {
	  t = " The" + t.substr(0, t.length() - 6) + "; ";
	}
	else {
	  t = " the" + t.substr(0, t.length() - 6) + "; ";
	}
	t = t.substr(0, 5) + lowerall(t.substr(5, 6 - 5)) + t.substr(6);
  }
  if (endswith(t, " the: ")) {
	if (startswith(t, upperall(t.substr(0, 2)))) {
	  t = " The" + t.substr(0, t.length() - 6) + "; ";
	}
	else {
	  t = " the" + t.substr(0, t.length() - 6) + "; ";
	}
	t = t.substr(0, 5) + lowerall(t.substr(5, 6 - 5)) + t.substr(6);
  }
  if (endswith(t, " the ")) {
	if (startswith(t, upperall(t.substr(0, 2)))) {
	  if (t.length() > 5) t = " The" + t.substr(0, t.length() - 5) + " ";
	}
	else {
	  if (t.length() > 5) t = " the" + t.substr(0, t.length() - 5) + " ";
	}
	if (t.length() > 5) t = t.substr(0, 5) + lowerall(t.substr(5, 6 - 5)) + t.substr(6);
  }
  return t;
}

static string fillDictionary(string prefx, string sec) { //  Fill next section of dictionary:
  int colon, entryEnd, prefixLen, searchStart;
  //static string alphabetUpper;
  //static string alphabetLowerUpper;
  //static string decimalDigits;
  //static string entry, stem;
  //static string entryDelim = "";
  searchStart = 0;
  string prefix = prefx;
  while ((searchStart < sec.length() - 3) && (searchStart >= FOUND)) {
	/* Get total of entries staring with the same letters (prefix) to decompress
	by adding these letters */
	int entriesLeft = indexof(alphabetLowerUpper, sec.substr(searchStart, 1)) + 1;
	// Find colon dividing EO (Esperanto) entry word from English translation(s)
	colon = indexof(sec, ":", searchStart);
	stem = sec.substr(searchStart + 1, colon - (searchStart + 1)); // Get EO word stem
	entryEnd = 0;
	while (entriesLeft > 0) {
	  // Find end-of-entry marker:
	  entryEnd = indexof(sec, entryDelim, colon + 1);
	  entry = sec.substr(colon + 1, entryEnd - (colon + 1)); // Get next entry
	  if (indexof(alphabetUpper, entry.substr(0, 1)) >= FOUND) {
		//if (strstr(fs = "ABCDEFGHIJKLMNOPQRSTUVWXYZ"), entry.substr(0, 1) >= FOUND) {
		/* Entry starts with POS (part of speech), so put colon after EO stem to
		divide from English */
		entry = stem + ":" + entry;
	  }
	  else {
		/* Dividing colon is already present since POS is not at start of entry,
		so just prepend EO stem */
		entry = stem + entry;
	  }
	  colon = indexof(entry, ":"); // Find position of dividing colon
	  prefixLen = indexof(decimalDigits, entry.substr(colon + 2, 1)) + 2; // Get the length of the decompression prefix letters
	  if (prefixLen > EXISTS) { // If prefix placeholder digit found
		if (entry.length() > colon + 2) {
		  entry = entry.substr(0, colon + 2) + prefix.substr(0,
			prefixLen) + entry.substr(colon + 3); // Insert prefix
		}
		else {
		  // Append prefix since it's the full English
		  entry = entry.substr(0, colon + 2) + prefix.substr(0, prefixLen);
		}
	  }
	  prefix = entry.substr(colon + 2); // Get new English prefix
	  // Remove "to|" from infinitives:
	  if (startswith(prefix, "to|")) {
		prefix = prefix.substr(3);
	  }
	  // Store EO prefix in array:
	  esperantoWords[ii] = entry.substr(0, colon);
	  // Store POS and English translations in array:
	  englishTranslations[ii] = entry.substr(colon + 1);
	  colon = entryEnd; // Move search start to next entry
	  ii++; // Increment array indexes
	  entriesLeft--; // Decrease count of words starting with same letters
	} // More words starting with same letters
	// Move search start to find new group of words starting with same letters
	searchStart = entryEnd + 1;
  } // Continue to next entry
  return prefix;
}

static void loadDictionary() {
  // Load and decompress Esperanto and English dictionary arrays:  
  /* Item format during processing:

  {*Esperanto_word*¯*One_letter_part_of_speech_tagEnglish_word1/English_word2/.../English_wordN*}
  ññ means EO singular -> EN plural.
  */
  for (ii = 0; ii <= 255; ii++) asciiCharacters += (char)ii;

  while (indexof(dictionaryIndex, "h") >= FOUND) dictionaryIndex.replace(indexof(dictionaryIndex, "h"), (fs = "h").length(), "ffffffffffffffff"); // Decompress dictionary index
  while (indexof(dictionaryIndex, "i") >= FOUND) dictionaryIndex.replace(indexof(dictionaryIndex, "i"), (fs = "i").length(), "ffffffffffff");
  while (indexof(dictionaryIndex, "j") >= FOUND) dictionaryIndex.replace(indexof(dictionaryIndex, "j"), (fs = "j").length(), "ffffffff");
  while (indexof(dictionaryIndex, "g") >= FOUND) dictionaryIndex.replace(indexof(dictionaryIndex, "g"), (fs = "g").length(), "ffff");

  ii = 0;
  prefix = "";
  prefix = fillDictionary(prefix, "aabak:Oabacusbabandon:Ito|relinquishO9mentaabasid:OAbbasidgabat:OabbotA2atialec:O3cyej:O2eyej:A2atialin:O2essinej:O3yaabces:O1scessbabdik:Ito|resignOabdicationbabdomen:O2omenA4inalaabduktor:O2uctoriabel:ObeeA2/Abelian/commutativeed:OApidae|lifeformej:Oapiaryist:Obee-keeperkultur:O7ingregxin:Oqueen|beeuj:Obeehivevaks:O2swaxbaberaci:Ito|deviateOaberrationaabhxaz:OAbkhazianeabi:Ofirogenez:Oabiogenesissen:OAbyssiniansm:Oabyssturient:Ohigh-school|graduatebabjxur:Ito|abjureO4ationaablaci:O1lationaablativ:O5vebabnegaci:Ito|(himself¯¯¯herself¯¯¯itself¯¯¯themselves)|denyOabnegationcabnorm:A2ormalajx:O7ityec:O9yaaboc:Oalphabetdabol:Ito|abolishO4tionici:Ito|abolishici:O4tionaabomas:Orennet-stomachfabomen:Ito|abhorO4renceAhorribleajx:Oabominationind:A6ble/horribleindajx:O6tion/atrocitycabon:Ito|subscribeO6ptionil:O9on|formaaborigen:Oaboriginaleabort:Ito|miscarryO6iageig:Ito|abortig:O4ionigist:O7istaabrakadabr:O1racadabraaabraziigx:Ito|collapseaabreviaci:Oabbreviationcabrikot:Oapricotarb:O6|treeuj:O9eeaabrogaci:Oabrogationaabrotan:Osouthern|wormwoodbabrupt:AabruptE5lyaabsces:O1scessaabscis:O3issaaabsejl:Ito|rappelaabsid:Oapsecabsint:Oabsinthajx:O6likvor:O6cabsolut:A2oluteE7lyism:O6ismbabsolv:Ito|absolveO4utiondabsorb:Ito|absorbO4ptionA4bentil:O6raabstemi:Oteetotalismdabstin:Ito|abstainad:O3inenceenc:O9encul:Ototal|abstainercabstrakt:I1|abstractA7ajx:O7iondabsurd:O2urdityA5ajx:O5ityec:O8eabund:Ito|aboundO1undanceAplentifulEabundantlyec:O6ceaabutment:O2tmentcacer:Omaple/sycamoreac:O4-type|lifeformb:Aharsh/sourdacet:Oacetic|acidat:O3ateilen:O3yleneon:O3oneeacid:Ito|(sour)|beOacidAsourigx:Ito|(sour)|turnkrem:Osour|creamaacipenser:Osturgeonaacxakatur:Oacciaccaturaiacxet:Ito|buyOpurchasead:O7ajx:O7akir:Ito|buyebl:Ito|(purchasable)|beebl:Afor|saleist:Obuyer/purchasing|agentkost:Opurchase|costaacxul:Olousy|personaadagx:Eadagioiadapt:Ito|adaptO4ationig:Oaccommodationigx:Ito|adaptigx:O4ation/adjustmentigxem:O5bilityil:O4er/controllerint:O4orit:A4edaadasism:Osuffix|rhymeaadekvat:Aadequatebadept:Osupporterig:Ito|indoctrinate/recruitdadher:Ito|stickOadhesion/adherenceA5ve/adherent/closure/limit/stickyajx:O3rence/adherent/closurebadiaux:Ito|(goodbye)|sayOgoodbyecadici:Ito|addO2itionat:A2edbadjektiv:O1jectiveA7albadjudik:Ito|(out|for|bids)|putOinvitation|to|tenderaadjunkt:Oassistantaadjutant:Oaide-de-campjadministr:Ito|manageOadministration/managementA9tiveaci:O9tion/managementad:O9tion/managementant:Omanagerantar:Oadministration/managementej:O9tive|officeist:O9toristar:O9tion/managementgadmir:Ito|admireO4ationA4ingal:O4alalitat:O6tyantin:O4erind:A4ableaadmitanc:O3ttancecadmon:Ito|scoldOexhortationleter:Oscolding|letteraadob:Oadobehadolesk:Ito|(through|puberty)|goOpubertyAadolescentant:O9|maleantin:O9|femaleec:Opubertyul:Oadolescent|maleulin:O9|femaleaadolt:O1ultaadonid:Opheasant's|eyefadopt:Ito|adoptO4ionad:O7it:O4ed|childit:A6ul:O6|childfador:Ito|adore/worshipOworshipad:O6antin:Ofemale|worshipperatin:Oadored|womanind:A3ableaadrenalin:O1renalineiadres:Ito|addressO6ant:Osenderar:Oaddress|listat:O6eeigil:O6ing|machineit:O6eelibr:Odirectorysxangx:Ochange|of|addressbadstring:Atartil:Oastringenteadult:Ito|(adultery)|commitOadulteryA6ousul:O6erulin:O7ssaadvent:O1ventbadverb:O3rbA5ialbadvokat:Olawyeracx:Oshysteraadz:OadzeKaer:Oairdefend:O2-defenseeskadr:O2|squadronfiltril:O2-filterflot:O4leetkav:O3pocketklap:O3valveklimatizit:A3conditionedkusen:O2|cushionmalpurig:O3pollutionmalsan:O2sicknessmalsan:A6mehxanikist:Oflight|engineerobi:Aaerobicodrom:Oairfieldohaven:O2portolit:Ometeoric|stoneometr:Oaerometeronauxt:O3nautonauxtik:O7icsoplan:Oairplaneostat:O2-balloonpafil:O3gunpirat:Oskyjackerpont:Oairliftposxt:O2mailposxtmark:O2-mail|stampprem:O2|pressurepumpil:O4umpstevardin:Ostewardesssxip:Oair-shipsxton:Oaerolite/meteortransport:Oair|transporttub:Otubeum:Ito|(out)|ventilate/airum:Aairyvoj:O2waycafabl:Aniceec:Okindnesseg:Amost|charmingaafazi:Oaphasiacafekci:Ito|affectO5ionit:A5ediafekt:Ito|pose/affectO2ing/affectationAaffected/artificialad:Oposing/affectationajx:Oaffectation/mannerismem:Aposing/affectedit:Ainflatedul:Oposerulin:Ofemale|poseraafeli:Oaphelionfafer:Omatter/businessAbusiness/objectec:A7-likeem:A9ikeist:O7personkoncernec:Orelevancecafgan:OAfghan|manA5in:O5|womanbafid:Oaphid/aphised:O4-type|lifeformaafiks:Oaffixbafin:Arelatedec:Oaffinitydafisx:Ito|postO3erkolon:Oadvertising|pillartabul:Obulletin-boardeaflikt:Ito|afflictO6ionad:Oordealigx:Osadnessit:A2aafoni:Oaphoniaaaforism:O3rismeafrank:Ito|(postage|for)|payOpostageit:A3-paid/stampedit:Ewith|the|postage|prepaidtarif:Opostal|ratesfafrik:AAfricanan:O6ans:O3kaanerans:A7sat:Oaffricativeazi:AAfro-Asianaafrodiziigajx:Oaphrodisiacbaft:O2tha/aphthous|ulceroz:Ohoof-and-mouth|diseaseaafust:Ogun-carriageZag:Ito|actO2/actionac:Ito|annoy/irritateac:Atartad:Oactivityap:Oagapearagar:O2rarik:Omushroomarikac:OAgrucis|lifeformat:Oagateav:O2veem:Oactivityem:A4eend:Oagendaent:O3tentec:O3cyentej:O5entur:O5it:Ito|(up)|agitate/stirit:Ocommotion/disturbanceit:Ainflammatoryitad:Ocommotionitant:Oactivistitgrup:O3on|committee/groupitigx:Ocommotionitkomision:Oaction|committee/groupl:Oeaglelec:Aaquilineliber:Oelbow-roomlid:Oeagletlomer:Ito|agglomeratelomerajx:O9elutin:Ito|agglutinatelutin:A9ivenat:Ofather's|side|relativenatec:O9ide|relatedness/kinshipnosk:Ito|recognizenosk:Oacknowledgement/recognitionnostikism:Oagnosticismondi:O1onyoni:Ito|(near|death)|beoni:Odeath|throesorafobi:Oagoraphobiaord:Ito|(up)|tune/setord:Oset-up/tuningordigxem:Otractabilityordil:Opitch|tuner/set-up|programordist:Otunerr:Oarable|land/fieldrabl:Anice/pleasantrabl:Epleasantlyrablec:O7nessbagraf:Ito|claspO4aagrar:Aagriculturalaagregat:O1gregateeagres:Ito|(aggression|against)|commitOaggressionA5iveem:A5siveiv:A9bagrikultur:O1ricultureist:O2arianbagrokultur:O2icultureist:Ofarmerdagronom:Oagriculturisti:O9ei:A9aliist:O2onomistaagropir:Ocouch-grassaagrostem:O1rn|cockleaagroturism:Ofarm|tourismgagx:Ito|(at|the|age|of)|beOageA2di:Opremiumiot:Ito|(in|stocks)|speculateiotad:Ojobbing/stockjobbingiotist:Ostock-speculatoraahx:Fohbaidos:OAIDSul:O3|patientaaidoz:O3aaikid:Oaikidoaailant:OAilanthus/tree|of|heavenaain:A1nuaajatol:Oayatollahdajgen:Oeigenvaluespac:Ocharacteristic|subspacesubspac:O9stic|subspacevektor:Oeigenvectorbajl:Ogarlicer:O5|bulbaajut:Onozzleaajxgenr:Oinanimate|genderaajxur:Aopen-workaakaci:Oacaciacakademi:O2demyA5ican:O7ianaakajunuks:Ocashew|nutaakajxuarb:O5aakajxunuks:O5|nutaakajxuuj:O5aakant:Oacanthusaakapar:Ito|corner/monopolizeaakar:Omitefakcel:Ito|accelerateO8ionant:A9veigx:Ito|accelerateigx:O8ionil:O8oreakcent:I3ntuateO5A5ed/stressedit:A9tressedsign:Ostress-markmakcept:Ito|get/acceptOacceptanceant:O5orebl:A5ableig:Ito|forceind:Aacceptableindec:Osusceptibilityist:Oreceptionististin:O9stit:Aacceptedosalon:Oreception|roomposxtgxiril:Opayment|slipsalon:Oreception|roombakcesor:Aaccessoryajx:O8/side-issuemakci:Osharear:O4-capitalbors:Ostock|exchangedent:Ito|(an|accident)|havedent:Oaccidentdentem:A7-pronedentrisk:O7|riskpitr:Ohawkpitred:OAccipitridae|lifeformul:Oshareholderulec:O9rshipz:Ito|excisez:O5aakcxent:Oaccentaake:Oslothaakile:OAchilleaaakilkalkan:O6s'|heelaakiltenden:O9tendoneakir:Ito|getOacquisition/assetad:O9najx:O9n/gainebl:Aavailabledaklam:Ito|applaudOacclaim/approvalEby|acclamationad:Oacclamationaaklimatiz:Ito|acclimatizebakn:O1neer:Opimpleaakolit:Oacolytecakomod:Ito|accommodateO9ionigx:O9ionfakompan:Ito|accompanyO7iment/escortad:O9entant:Ocompanion/accompanist/chaperonantar:Oretinue/posseantin:Ochaperoneaakonit:Oaconite/monkshoodiakor:Ocalamusd:Ito|agreed:O4ment/chordd:Ain|accordancedig:Ito|(into|agreement)|bringdigx:Ito|(to|an|agreement)|comedigxem:Atractabledion:Oaccordiondionist:O8istAakr:O1reAabrasive/sharpaflank:Aangular/sharp-edgedajx:Oblade/cutting|edgeaton:Aabrasivee:Oacreec:Osharpnessedit:Ito|accrediteditajx:Ocredentialeditiv:Ito|(a|credit)|arrangeeditiv:Oletter|of|crediteson:Ashrillid:Ograsshopper/locustided:OAcrididae|lifeformig:Ito|sharpenigil:O6erigrimen:Ostropobat:Oacrobatobat:A6icobatad:O8sobatajx:O9omat:A1hromaticomatopsi:Acolor-blindonicx:Oacronychia/yellow-woodonim:O5mostihx:O3sticulin:Ocathaks:Oaxle/axisA1ialel:Oarmpitesorajx:Oaccessorying:Ohub/naveiom:Oaxiomiom:A4aticiomar:O8|systemuakt:Oact/certificate/diploma/documentian:OActiumiteini:Oactiniuminium:O7ist:O2uaryiv:Ito|(active)|beiv:Oassetiv:Aactiveivad:O4ityivec:O7ivig:Ito|(on)|activate/turnor:Ito|actor:O2ororin:O2ressual:Acurrent/up-to-dateualajx:Otopicualec:O4alityualig:I1|updateualig:O4inguari:Oactuaryuj:Obriefcase/portfolioeakumul:Ito|(up)|accumulate/pileator:Oaccumulator/batteryej:O9rigx:A8ionil:O8or/batterybakupunktur:O1upunctureist:O9istcakurat:ApunctualEon|timeec:Oaccuracybakustik:O1ousticsA7kakusx:Ito|(in|labor)|beOchildbirthig:Ito|(labor)|induceigist:Omidhusbandigistin:O2wifeil:Oforcepsintin:Owoman|who|just|gave|birthist:Omidhusbandistin:O2wifelit:Ochildbedocxambr:Obirthing|roombakut:Aacuteangul:A4-angledfakuz:Ito|accuseO4ation/chargeA6oryajx:O6ion/charge/indictmentativ:O7veit:O4ed/defendantuakv:OwaterAaquatic/waterafort:Oetchingamarin:Oaquamarinearel:Owater-colorari:Oaquariumatint:Oacid-washing/aquatintedukt:Oaqueductemetit:Aalluvialifoli:Ohollyifoliac:OAquifoliaceae|lifeformilegi:O3legia/columbineodislim:Odivide/watershedodukt:Oaqueductofal:Owaterfallokok:Ocootokondukil:Ohose/pipeokres:Owatercressomelon:O4melonuj:O4-tankum:Ito|irrigateZal:Obranch/wingabastr:Oalabasterarm:Ito|alarmarm:O4arm:A4ingarmil:O4armist:O4istauxd:Oskylarkauxded:OAlaudidae/lark-type|lifeformb:Oalbbatred:O2atross-type|lifeformbatros:O8bin:O2inobum:O2umbumen:Oendospermbumin:Oalbumin/egg|whitebuminuri:O6uriaburn:Osapwoodced:Okingfishercion:O9cxemil:Orosacead:Oaltodehid:O1dehydedon:Ito|adddon:E2itionallydonvalor:Avalue-addeddviolon:Oalto/violae:Oavenue/pathegori:Oallegoryegr:O4roegret:O5ettoen:Oawlergi:Oallergyergi:A5iceron:Oaileroneut:OAleutez:Ito|reamezil:O3erf:Ostipa|grassfabet:Oalphabetfabet:A7icalfabetum:Obook|of|ABCsfenid:Oalfenideflu:Oebbfront:Ito|confrontg:Oseaweed/algagebr:Oalgebragebr:A6icgoritm:O2orithmgxebr:Olinear|algebragxustig:Ito|adjust/correctgzz:Oalgabalhxemi:O1chemyist:O5istIali:Osomething|elseAotheranc:Oallianceancan:O2yancigx:Ito|(an|alliance)|formbi:Oalibidir:Ein|other|wordsflank:Eon|the|other|handformig:Ito|transformg:Ito|ascribegator:Oalligatorgatored:O8-type|lifeformgx:Ito|joingxil:Oregistration|formig:Ito|changeig:O5igx:Ito|changeigx:O5konstru:Ito|modifykonstru:O4icationkvant:Onon-aliquot|partkvot:Oaliquot|partland:Aforeignlandan:O6erlandul:O8ment:Oalimony/maintenance|allowancene:Oparagraph|indentationr:Ito|approachr:Ito|approachspec:Aof|another|kindteraci:Oalliterationvest:Ito|disguisevest:O7zarb:Ocommon|whitebeamzuj:O9tebeambaljugx:Ito|awardajx:O4qalk:Omooseal:Oalkalial:A5nealec:A7ali:O5aloid:O4oidemi:O1chemylak:Ito|clicklimatigx:Ito|acclimateohol:Oalcoholohol:A6icoholajx:Odrinkoholig:Ito|spikeoholism:Oalcoholismov:O3verocxigx:Ito|clingutimigx:Ito|(accustomed)|getballig:Ito|attachO5mentaallog:A2ractiveaalmanahx:Oalmanacaalmanak:O6aalmet:Ito|attachhalmoz:Ito|begOhandoutdon:Ito|(a|handout)|givedonem:Acharitableist:Obeggarkest:Opoor|boxul:Obeggarulej:Opoorhousebaln:Oalderom:O1ias/nicknamehalo:O1oej:Ito|alloyj:O4ngx:O3ngepati:O3pathypati:A7icpeci:Obaldnessz:Oshadjalp:Oalpak:O2acaar:Oface|value/parityar:Eat|face|value/at|parism:Omountain-climbingort:Ito|bringrem:Ito|claspren:Ito|(a|value)|assumeroksimig:Ito|(close|together)|bringrunt:Ito|lend/loanaalsin:OStellariaaalsxut:Ito|uploadzalt:Oheight/altitudeAtall/highajx:Oheightsan:Ooverlookar:Oaltararej:Opresbyterium/sanctuarye:Oaltheaec:Oheighterigx:Ito|landern:Ito|alternateern:A7ingernanc:Ohalf-periodernativ:Ooptionernativ:E5allyernator:Oalternatorig:Ito|raiseir:Ito|attractir:O6ionmar:Ohigh|tideocentr:Oorthocenterrelief:Ohigh|reliefrud:Ito|imposeruism:Oaltruismruism:A6ticruist:O7statur:Atallbalud:Ito|referOallusionaalumet:Omatchbalumin:Oaluminai:O5umaalun:O3aaluvi:O1luviumbalven:Ito|arriveO4alaalveol:Ocavitybalvetur:Ito|arriveO4alaalvok:Ito|summonaalvus:Orestocking|fishZam:Ito|loveO3acx:Ito|(love)|makeafer:Olove|affairajx:Ito|(love)|makeajx:Olove|affairajxem:Aflirtatiousajxist:Ocourtisaneajxistin:O9algam:Ito|amalgamatealgam:O6anit:OAmanita|mushroomantin:Oloverar:Abitterarant:Oamarantharilid:O3yllisarilidac:Ocrinum-type|lifeformas:O1owd/massasfabrik:Ito|mass-produceasig:Ito|(up)|pileasinformil:Omass|mediaatajx:Ohobbyator:Oamateuratorec:A6ishazon:O2zonbasad:Oembassybasadej:O6basador:Oambassadorbasadorej:Oembassybici:Ito|(the|ambition)|havebici:Oambitionbici:A6usbl:O2lebos:Oanvilbr:Oambergrisbrozi:O2rosiabulanc:O2ulanceeb:O1oebael:Ostarchen:Famenend:Ito|amendend:O4mentent:O3tum/catkinerici:O2riciumerik:AAmericanerikan:O7et:Ito|(a|crush|on)|haveetist:Oamethystfibi:O1phibian|lifeformfibrahx:O5rachfibrak:O9fiteatr:O4theaterbamfor:O3oraA6aamianti:Oflypoisoneamik:OfriendA5lyec:O5shipigx:Ito|(friends)|makein:Ofriendbamind:Alovableum:Ito|courtaamnesti:Oamnestyaamnezi:O4iaaamoniak:O1moniaaamonit:O5teiamor:Ito|(love)|makeOamour/erosant:Oloverantin:O4f:Aamorphousist:Oprostitute/gigoloistin:O9tiz:Ito|amortizetizil:Oshock|absorberbamovendist:Oprostitutein:O9aampelops:Oampelopsis|creeperbamper:O3remetr:O2metercampleks:Ito|containOextent/rangeA4siveeamplif:Ito|amplifyik:Ito|amplifyikator:O5ierikil:O8il:O8aamplitud:O4tudeaampol:Obulbaamput:Ito|amputateaamulet:O1ulet/lucky|charmiamuz:Ito|amuseOfunA2nyad:Oamusementadigx:Ito|(a|good|time)|haveigx:Ito|(a|good|time)|haveil:Otoyist:Oentertainerpark:Oamusement|parkaamzz:Alovingaanagal:Opimpernelaanagram:Oanagramaanakronism:O2chronismbanalfabet:Oilliterateec:O7cybanalitik:OanalysisA4ticalcanaliz:Ito|analyseO5isil:O5ereanalog:O3ogA5ousec:O8nessi:O5yi:A5icalbananas:Opineappleuj:O8aanapest:Oanapest/antidactylusmanar:Omembershiphxi:Oanarchyhxi:A5ist/chaotichxiism:O7mhxiist:O7thxiul:O8ki:O5yki:A5ist/chaotickiism:O7mkiist:O7tkism:O7mkist:O7tkiul:O8banas:Oducktigmat:Aanastigmaticbanatem:Ito|anathematizeO7banatomi:O3omyist:O5istbancx:Oreedov:Oanchovybandant:O1danteE6aandrogin:A2rogynousaanekdot:O1ecdotebaneks:Ito|annexajx:O4banemi:O1emiaA4caanemometr:O3ometeraanemon:O4necanestez:Ito|anesthetizeO6siail:O6ticaanet:Odillaanfrakt:Ocavityaangelik:Oangelicacangi:Oblood|vessell:Oeeln:Oanginaeangl:OEnglish|manA6Ein|Englishin:OEnglish|womanism:Oanglicismcangor:Ito|(distressed)|feelOagonyAdistressedcangul:Oangle/cornerfidel:Aconformalmezuril:Oprotractorcangxel:OangelA4icus:Othe|angelusaanhel:Ito|hyperventilateaanhidr:Awaterless/anhydrousaanigx:Ito|joinbanihilaci:Ito|annihilateO8ionaanilin:O1ilineeanim:Ito|animateOsoulaci:Oanimational:O4lstat:Ostate|of|mindcaniz:Oaniseedlikvor:O4tteuj:O4aankorauxfoj:Eonce|morecankr:Ito|anchorO5ej:O5ageaanksi:O1xietyaanod:O1odeaanomali:O2malyfanon:Ocherimoyac:Ito|advertise/announcec:O1/announcementcist:Oannouncerim:A1onymousimec:O5ityaanorak:O2rakaanormal:Aabnormalgans:Ohandle/knober:Ogoosetataux:Ito|(for)|substitutetataux:Oreplacement/substitutiontataux:Asubstitutetataux:Einsteadtatauxig:Ito|replaceaantagonism:Oantagonismaantagonist:O8t");
  prefix = fillDictionary(prefix, "eantarkt:A3rctican:OAntarcticanano:Antarcticanikan:OAntarcticanikan:A8Qantaux:Ito|precedeAformerEbeforehand/formerly/in|frontajx:Oantecedentant:Opredecessorbrak:Oforearmcxambr:Oantechamberdank:Othanks|in|advancedatum:Ito|antedatedestin:Opredestinationdestinism:O9tiondiluv:Aantediluviandir:Ito|foretellec:Opriorityen:Fforwardenem:Aprogresiveenig:Ito|(forward)|movegxoj:Ito|(forward|to)|lookigx:Ito|(out)|standir:Ito|precedejugx:O2judicekompakt:A2compactleg:Ito|pronouncelong:Elong|agomast:Oforemastnelong:Arecentnelong:Ea|little|while|agonom:Ofirst|namepag:Ito|prepayparol:Oforewordplan:O3groundsign:O3shadowertagmez:Omorningtagmez:Ea.m.temp:Aprematuretraktad:O2processingtraktil:O9ortuk:Oapronul:Opredecessorurb:Osuburbvel:Oforesailven:Ito|precedevid:Ito|foreseeaantem:Oanthemisaanten:O2ennabantibiotik:O2ibioticA9banticip:Ito|anticipateEin|advanceaantidot:Oantidoteaantifon:O3phonyaantifraz:O5raseaantikrez:Oassignment|of|profits/antichresisaantikrist:OAntichristeantikv:OantiquityA1cientajx:O1tiqueajxist:O6|dealerec:O5ityaantilop:O2elopeaantimon:O2imonyaantipartikl:O3particlecantipati:Ito|antipathizeO7yA7eticaantipirin:O4yrinebantipod:O4odeA6alaantiproton:O4rotonaantirin:Osnapdragonbantisemit:Oantisemiteism:O8ismcantiseps:Ito|disinfectOantisepsisA6ticaantisimetri:A4ymmetricaantitez:O3thesisaantologi:O2hologyaantonim:O2onymaantracit:O2hraciteaantraks:O5x/carbuncleaantropoid:A4opoidalcantropolog:O7logisti:O9gyiist:O9gistaantropometri:O7metryaantropomorfism:O8orphismaanuitat:O1nual|instalment/annuityaanunciaci:O3nciationbanus:O1usA1alaaort:Oaortaaapacx:Oapacheaapanagx:Ofee|tail|estatebaparat:Oapparatus/appliancear:Ohardwareiapart:AseparateEapartajx:Ocharacteristicament:Oapartmenten:Ito|belongenajx:Opossessionig:Ito|separateig:A7d/separativeigebl:A5blecapati:OapathyA4etict:O3itedapel:Ito|appealO5aci:Ito|appealaci:O5bapendic:O3ndixit:O6citishaper:Ito|appearO5anceajx:O9/occurrenceitiv:O1éritift:Aopentajx:Oaperture/openingtig:Ito|(up)|opentur:Oaperturecapetit:O1petitedon:A5zingvek:A9bapi:Owild|celeryk:Atiltedaaplanat:Aaplanaticaaplauxd:Ito|applaudaaplik:Ito|applyaaplomb:Oself-assuranceaapofiz:Oapophysis/processfapog:Ito|supportark:Oflying|buttresse:Oapogeeil:Osupportsegx:Oarmchairxatur:Oappoggiaturabapokalips:OBook|of|RevelationAapocalypticaapokop:O3opebapokrif:O3ryphaA3hryphalbapolog:O2loguei:O5yaapopleksi:O2plexyaapostat:O2stateaaposterior:Aa|posterioribapostol:OapostleA4olicbapostrof:Ito|apostrophize/elideO8ebapotek:Opharmacyist:O6istaapotem:Oapothem/slant|heightbapoteoz:Ito|apothrosize/deifyO4eosisbapozici:Ito|juxtaposeOappositioniapr:OEurasian|wild|boaretur:Oappretureez:Ito|appreciateil:OApril'ior:Aintrinsic/standardob:Ito|approveob:O5aloksim:Ito|approximateoksimajx:O9e|valueaapsid:O1se/apsisbapud:AadjacentEnearbypara:Omacawb:OArabb:A3ic'b:Ein|Arabic'bec:AArabianbesk:Oarabesquebi:AArabic'k:Oarrackkid:Opeanutkis:O5ne:Ospiderneajx:O5-webngx:Ito|arrangengx:O6mentngxajx:Odevice/permutationuxkari:OChili|pine/monkey|puzzleqarb:Otreealest:Ocrossbowar:Oññwoodsarstep:Owooded|steppeed:Obush/shrubet:O3etajx:O3itr:Aarbitraryitraci:Ito|arbitrateitraci:O7ionitraciant:O7oritraciist:O9itragx:O6geust:Obushustar:Oshrubberyut:OArbutus|berryutuj:Oarbutus|berry|treeaarcx:Obowhard:Ito|(ardent)|beOpassionAardente:Oheroneed:O4-type|lifeformej:Okilnez:Oslateil:Okilnlare:Oareaajx:O3al:Onatural|habitatn:Oarenaometr:O2ometer/densitometeropag:O3pagest:Ito|arrestst:O5stad:O5stej:Ojailstigx:Oarreststit:O5ee/detaineeaargan:Ooil|well|derrickaargentin:OArgentiniancargil:OclayA3ajx:O3|objectbargon:Oargonauxt:O4autabargument:Ito|argueO3ment/amplitude|of|a|complex|number/independant|variable/indeterminate/operandeargxent:Ito|silver-plateO5A5/silveryan:OGerman|silverist:Osilversmithaargxirol:Ocolloidal|silveraarhxaik:Aarchaicaarhxaism:O5smeaarhxeolog:O4eologistaarhximed:AArchimedeancarhxitekt:Oarchitectur:O8ureurist:O8carhxiv:Ofolder/archiveej:Orecords|officeist:Oarchivistkari:O1iad:A2dergard:Orear-guardst:Obeard/bristle/arista/awnstokrat:Oaristocratstokratar:O8cystokrati:O9ystoloki:Oclematistmetik:Oarithmetictmetik:A9tmetikil:O9|and|logical|unitIark:O1ch/arcad:O2adeaik:A2haicaism:O5smajx:O3ajxar:O2adee:O1kefleks:Ito|archeologi:O3eologyeologiist:O8isteopterik:O5pteryxiduk:O3dukeig:Ito|bend/curveimandrit:Oarchimandriteipelag:O4pelagoitekt:O4tectitektur:O8ureitektur:A9ralitekturist:O8itrav:O5raveiv:Ofolder/archiveivej:Oarchiveivist:O5istkosekant:O2|cosecantkosinus:O6inekotangent:O5tangentlamp:O3lampokosekant:O3cosecantokosinus:O6ineokotangent:O5tangentotangent:O3tangentsekant:O3secantsinus:O4inet:AArctic'tangent:Oarc|tangentaarleken:Ojokerharm:Ito|armOweaponajx:Oarmoratur:Orebare:Oarmyil:Oweaponilar:Oññarmamentsilej:Oarsenalaarnik:O1nica/leopard's|banecarog:Ito|arrogateant:A5ntantec:O6ceaarok:Ito|castlefarom:Ito|smellOaromaA4ticajx:O7herb:O7|herbig:Ito|aromatizeaarorut:O1row-rootaaroteori:Oset|theorybarpegx:Ito|(arpeggios)|singOarpeggiocarsen:O1senical:O4alik:O4icaarsxin:O1chineyart:O1tA2isticefarit:A3ficialeori:Oset|theoryeori:A2-theoreticaleri:Oarteryez:A3sianfajrajx:Ofireworksifik:Otrickifik:Acontrivedik:Ito|articulate/utterik:Ojointikig:Ito|articulate/utterikl:O4leikol:O6ikpiedul:O2hropod|lifeformikulaci:Ito|articulateikulaci:O8ionileri:O3lleryilerian:O8manileriist:O9anist:O3stist:A5icisxok:O3chokerit:O2hritisaarvort:Omass|nounZas:Oaceafetid:Oassa|foetidaar:Ofarthingbest:Oasbestosekur:Ito|insureekur:O4anceekuratest:O8|certificateekurlibr:O9bookembl:Ito|assembleemble:O6yembler:O6eremblil:O8eps:Ito|asepsiseps:O6ert:Ito|stateert:Oassertionesor:Oadvisor/assessorfalt:Ito|(with|asphalt)|pavefalt:Oasphaltfiksi:Ito|asphyxiatefiksi:O7fodel:O3odelign:Ito|assignign:O5mentimil:Ito|assimilateimptot:O1ymptoteist:Ito|assististant:O5antiz:O3ze|courtkalon:Oshalotkarid:Ointestinal|roundwormkarided:Oroundworm-type|lifeformket:Oasceticketism:O6ismkiig:Ito|ASCIIizeklepiad:Omilkweedoci:Oassociationocian:O7eociec:O7ivityociec:A9eociit:O7eonanc:Oalliteration/assonanceonancig:Ito|alliterateparag:Oasparaguspekt:Ito|(to|be)|appearpekt:Oappearancepekt:Ein|appearanceperg:Ito|spraypergil:O4erperul:Oasperulapid:O2pir:Ito|aspireaaspirin:O4inaaspr:Aroughaastak:Ocrawfish/crayfishbastat:Oastatineen:O7aasteni:O2heniaeaster:O2erac:O4aceae|lifeformi:Ostarfishisk:Oasteriskoid:O4oidcastigmat:A2igmaticec:O8smism:O9maastm:O2hmalastr:Oheavenly|bodyagal:Oastragal/milk|vetchakan:O4khan|woolofizik:O3ophysicsolab:O4labeolog:O5ogerologi:O7yologiist:O7istonauxt:O4nautonom:O5omeronomi:O7yonomiist:O7erdatak:Ito|attackO5em:Aaggressivesi:Oataxiaaatasxe:O1tachéaatavism:O1avismcateism:O1heismA5tican:O6bateist:O6A6icaatenc:Ito|assault/violatebatend:Ito|expect/awaitej:Owaiting|roomeatent:Ito|(attention)|payOattentionA6veig:Ito|(out)|pointig:Oindicationdatest:Ito|testifyO4monyant:Owitnessil:Ocertificatecatik:AAtticec:Oatticismism:O7eating:Ito|access/reachOaccess/reachomanier:Oaccess|methodopermes:O6permissionorajt:O6rightaatlant:Otelamonaatlas:Oatlas/Atlas|Mountains/satincatlet:O1hleteA5icism:O7scatm:Fa.mosfer:Oatmosphereosfer:A8icaatol:O1ollfatom:O2mA3icbomb:Onuclear|bombelektrej:O7power|planter:Osub-atomic|particleism:Oatomismaatoni:O2nyaatrepsi:O1hrepsiabatribu:Ito|attributet:O8catrofi:O1rophyig:Ito|atrophyigx:Ito|atrophyaatropin:O4inebatut:Ito|trumpO4Zaux:OOR|conjunction/OR|operatord:Ito|heard:O3ingd:Aaudiodac:Ito|daredac:Oaudacitydac:Abolddantar:Oaudiencedienc:O7dig:Ito|(a|sound)|makedigx:Ito|(heard)|bedigx:Ito|(heard)|beditori:Oaudiencegur:Ito|predictgur:Oaugurygurist:Osoothsayergust:OAugust'k:Orazorbillkci:Ito|auctionkci:O6kci:Eat|an|auctionkciist:Oauctioneerked:O1k-type|lifeforml:O1ditorium/hallreol:O1ra/halorikl:O2iclerikul:Oprimroseror:Odawnskult:Ito|(to)|listenskultej:Oauditoriumskultil:Oearphonespici:Ito|sponsorspici:Oauspicespici:Osponsorshipstralian:OAustralianstran:O4iant:Ito|drivet:Ocartarci:Oeconomic|autarchytarci:Aautarchicaltarki:O6ytarki:A6icaltej:Ogarage/carporttent:Aauthentictentec:O8itytentig:Ito|authenticatetentik:A8tentikec:O8itytentikig:Ito|authenticatetism:O2ismtist:Omotoristtobiografi:Oautobiographybauxtobus:Obushaltej:Ostopaauxtodafe:Oburning|at|the|stakeaauxtodidakt:Oautodidactaauxtogir:O3gyrobauxtograf:O4raphi:Oxerographydauxtokrat:OautocratA7ici:O6cyism:O8aauxtomaci:O3mationdauxtomat:OrobotAautomaticE8allyig:Ito|automatecauxtomobil:Ocarist:Omotoristvoj:Oexpresswayaauxtomorfi:Oautomorphismcauxtonom:A3nomousec:O6yi:O7aauxtopsi:O3psyfauxtor:Ito|authorO5itat:O5ityitat:A7ativeitatul:O7y|figurerajt:Ocopyrightaauxtovoj:Ofreewayaauxtun:OautumnNav:Ograndfatheral:Oguarantee|of|payment|of|a|debt|by|a|bill|of|exchangeangard:Oscout|party/avant-gardeantagx:Oadvantageantagx:A8ousantagx:E9uslyar:Ito|(greedy)|bear:Agreedy/stingyatar:Oavatarel:Ofilbert/hazelnuteluj:Ohazel|treeen:Ooatsentur:Oadventureentur:A7ousenturem:A9senturin:Oaventurineenturist:Ogrifterenturul:Oadventurerenu:Oavenueeragx:O2rageeragx:Eon|averageeri:Ito|(damage)|suffereri:Odamageert:Ito|warnert:O3ingi:Ito|flyi:Oaircrafti:Aaviationaliad:Ito|flyiad:Oaviationiadil:Oaircraftiadist:Oaviator/pilotid:Ito|(eager)|beid:Aeagerin:Ograndmotheris:Ocutteriz:Ito|notifyiz:O4icationokad:Oavocadookaduj:O6aazale:Oazaleaaazar:Ogingeraazen:Odonkeydazi:AAsianan:O4l:Oasylummut:Oazimuthbazot:Onitrogenacid:O3ic|acidcaztek:OAztecO4Aaztecaazulehx:Oglazed|tilefbabil:Ito|chatad:O3em:Otalkativenessemul:Ochatterboxon:ABabylonianul:Ochatterbox/big|mouthababirus:Obabiroussaababord:Oport|sideababusx:Omuleabacil:Obacillusdbagatel:OtrifleAinsignificantem:Afrivolousig:Ito|marginalizeabagn:Olabor|prisonabaham:ABahamiancbahxrajn:A2rainian:O7anin:O7|womanabajader:Obayadèreabajonet:O2onetabajt:Obytenbak:Ito|bakeajx:O3d|goodsalauxr:O1chelor's|degree|holderanal:OBacchus|festivalej:Obakeryelit:O3litefarun:Oflourforn:Oovenist:Obakersod:O2ing|sodateri:O1cteriumuj:Oovenup:Ito|backupup:O5Zbal:O1ll/dancea:Ito|sweepaajx:O4ingsad:Oballadafon:O2aphoneail:Obroomalajk:Obalalaikaanc:Ito|swingancier:Obalance/flyancigx:Ito|balanceancil:O6ast:Ito|ballastast:O6at:O2atabo:O2boabut:Ito|stutterbutul:O6er/stammererdaken:Ocanopydaux:Asoon-to-comeed:Oballetedestr:O5|masteren:Owhaleenbark:O4boatened:O4-type|lifeformenlamen:Obaleen/whaleboneenost:O9leboneensxark:Owhale|sharket:Oballetetist:O5|danceretistin:O4rinag:Obellowsi:ABalineseian:O7ist:Ocatapultistik:Oballisticskon:O2conyon:O2loonot:Ito|voteot:Oballototad:Ovoting|by|ballototej:Opolling-placeotil:Oballototrajt:Oright|to|voteotuj:Oballot|boxsalon:O3-roomt:OBaltt:A3ictaslav:A3o-Slavicte:Oshoulder|beltustr:Obalusterustrad:O1nister/railingustrar:O1lustradefbalzam:Ito|embalmObalm/balsamA3y/balsamicin:O2saminac:OBalsaminaceae|lifeformiz:Ito|embalmbbambu:Obamboosxos:O5|shootZban:Ito|batheO3ahx:ABanachsal:Acommonplace/tritealajx:Oplatitudealec:Obanality/platitudean:O3naanuj:O5|plantanujac:Omusaceae|lifeformbud:Obathing|boxcxambr:O3roomd:O1nd/gangdagx:Ito|bandagedagx:O6derol:Owrapperdit:Obanditdoni:O3oneonduri:O3urriaej:O1throomejgardist:O3|superintendantgal:Obungalowgasto:Obathergladesx:ABangladeshgladesxan:O9igladesxanin:O9i|womangx:Obanjoigx:Ito|(a|bath)|takejan:Obanyank:O2kkajut:O1thing|boxkalson:Oswimming|trunkskbilet:Opaper|money/billkdiskont:Obank|discount/rateked:Ito|banquet/feastked:O6kedcxambr:O6|roomkej:O2k|branchkestr:O4managerkier:O3erkism:O3ingkist:O3|employeekiz:Oice|capknot:Obank|note/bill|of|moneykokont:O4accountkostum:O1thing|suitkrot:Ito|(bankrupt)|gokrot:Obankruptcykrot:A7krotint:O7krotul:O7ksald:O3|balanceksekret:O3ing|secretabankuracej:Ohealth|resortabankuv:Obathabanlok:Ospringsabanspong:Obathing-spongeabansxi:O1nsheecbant:Obow/bow-tieu:OBantuuk:Otowelabanuj:Obathtubabanurb:Ospa|cityabaobab:Obaobabhbapt:Ito|baptize/christenO4sm/christeningej:O5teryist:O6ofil:Ogodsononom:OChristian|nameopatr:Ogodfatheropatrin:O2motherZbar:Ito|obstructObarrierajx:O6ak:O3acks/shackakt:Ito|struggle/wrestleakt:O9restlingb:Obeardb:A4edbados:ABarbadianbadosan:O8badosanin:O8|womanbakan:Obarbicanbar:O3arianbar:A6cbarajx:O6tybarec:O8barism:O6smbfisx:O3elbhav:Abeardedbi:Obarbelbir:O4rbist:O5biturat:O3iturateblan:Ofuzzbul:Obearded|manbulin:O7womancx:Oborscht/borstchd:Obardel:O2relelej:O5|factoryelet:O5/chamberelief:O1s-reliefeligx:Ito|(on|weight)|putelist:Obarrel-makerem:Oarithmetic|tablegx:Obargegxestr:O4-masteri:O2iumier:O2rieriergardist:Osignalmanikad:Ito|barricadeikad:O8il:O4er/fenceilpord:Ogateit:Obarite/barium|oxideit:Afenced|off/boundediton:Obaritoneitonul:O7itpaper:Oglossy|paperium:Obariumjon:O2yonk:Oboatbbarok:ObaroqueA6abarometr:O3metercbaron:O3nin:O4essland:O4yabaroskop:O3scopeabart:Obusk/steelzbas:Obass|voiceAdeepbal:Obaseballen:O2in/reservoirflut:O2s|flutei:ONepalese|butter|treeier:Obearigist:O3ist:Obassistk:Ocoattails/dress|trainketbal:Obasketballkul:Olever/seesawkullud:Oteeter-totter/wafflingkulpont:Odrawbridgekulsxalt:Otoggle|switchludant:Obass|playert:Oinner|barktard:Obastardtardec:O6ytion:O3ionton:Ito|clubton:Ocane/sticktonad:Ito|(up)|thrash/beattonet:Olittle|stickul:Obassviolon:O3-violvbat:Ito|hitOblowad:Ito|clatterad:Obeatingal:Ito|fightal:Obattlealej:O5fieldalem:Atruculentalhakil:Obattle-axealil:Oweaponalion:Obattalionalist:Owarrioralsxmink:O2|paintat:Osweet|potatoav:OBatavianeg:Ito|thrasheri:Obatteryik:Ito|batikik:OBatikist:Obatiste/cambricmakul:Obruiserak:Ofrog-type|or|toad-type|lifeform");
  prefix = fillDictionary(prefix, "ebaux:Obowd:Obauddrucx:Ogoldbeater's|skinksit:Obauxitem:Ito|(up)|rearbbavar:OBavarianA7lbaz:Ito|baseO3/basisA2icalt:O2altar:Odepartment|store/mall/bazaarigx:Ito|(based)|beili:Obasililik:O4icailisk:OAmerican|basiliskopilklud:Obaseballuk:O1zookavektor:O1se|vectorcbeat:Abeatifiedig:O6cationul:O3usdbeb:Obabyofon:O3|intercomovartant:O3-sitterovartantin:O9ribed:Obed/plotauxr:Ito|(sorry|about)|regret/beauxr:Oregretauxr:E5fullyauxrant:Asorryauxrig:Amiserableauxrind:Aregrettableauxrind:Eunfortunatelyuen:OBedouinbbegin:Obeguineej:O5agebbegoni:O2oniaac:O6-type|lifeformebek:Ito|peckObeakerel:O1cquerelflut:Orecordervadrat:Onatural|symboltbel:ObelAgood-lookingEbeautifullyadon:O1lladonnaec:O1autyeg:Alovelyet:Aprettyetagx:Oground|flooretr:Oliteratureetrajx:O5ry|worketrist:Oauthor/writeretristik:Obelles-lettresfrid:O2fry/bell|towerg:OBelgiang:A6gin:O6|womaniz:A2izeanson:Aeuphoniousulin:Obeautiful|womanveder:Oscenic|viewing-placeabemol:Oflatyben:Ito|blessO4ing/boond:Ito|taped:O3/stripediktan:OBenedictine|monkefic:Obenefit|performancegal:ABengalign:Abenignin:ABenineseinan:O7inanin:O7|womank:Obenchket:Osmall|bench/stoolzen:Obenzenezin:Ogasolinezinbomb:OMolotov|cocktailzincistern:Ogas|tankzinej:O2oline|stationzinkrucx:O8canzinmezuril:O8gaugezinmotor:O8enginezinstaci:O8stationzinuj:O2|tankzo:Obenzoatezol:Oheating|oilrber:Oberryar:Obunchber:OBerberberis:Obarberrygamot:Obergamotgamotole:O7iber:O2iberiil:O2ylili:O4liumilsxton:O4keli:O2keliumlin:ABerlinlinan:O5erlinanin:O7|womanm:Oroad|shouldern:ABernesenan:O6serk:Oberserkerfbest:OanimalAbeastlyacx:Omonsterec:Abeastlyej:Oanimal|penkuracist:Oveterinariangbet:Obeetel:O1tel|pepperon:Oconcreteonik:Ostachyssuker:Obeet|sugarul:Obirchulac:O4-type|lifeformbbevel:Ito|bevelO4ed|edgeabezoar:O1zoarebezon:Ito|needO3/wantA1cessaryajx:O8|material/requisiteat:A8Zbi:Obiobli:OBiblebliofil:Obibliophilebliograf:O5grapherbliografi:O9hybliotek:Olibrarybliotekist:O5iancikl:Ito|cyclecikl:Obicycleciklosak:Ocycle-bagd:Obeadde:Obideten:Oreal|estate/propertyenetat:Oofficial|land|title|deed|registerenist:Ofarmer/rancherer:Obeerfstek:O2fsteakgami:Obigamygamiul:O4istgot:Ofanaticgot:A6aljekci:Obijection/biunique|correspondence/one-to-one|mappingjekci:A6ve/one-to-onekarbonat:O1carbonatekin:O1kinil:Onegotiable|document|of|value/securitylanc:Ito|balance/reconcilelanc:O6|sheetlard:Obilliardslardej:O8|halllbok:Ocup-and-ball|gameld:Opictureldar:Oimage|set|of|a|mappingldekran:Oscreenlder:Opixelldig:Ito|render/visualizeldig:Omapping/renderingldkart:Opicture|postcardldodetru:Oiconoclasmldolibr:Oalbum/picture|bookldotub:Ocathode|tubeldrakont:Ocomic|book|or|stripldsimbol:Oiconldstri:Ocomic|stripldtub:Ocathode|tubeldvalv:O9beldvortar:Opicture|dictionarylet:Oticket/billletgicxet:Obox|officelgx:Obilgelion:Otrillionlmaklerist:Ostockbrokerabimetalism:Obimetallism/double|standardabinar:A1narydbind:Ito|bindO3ing/coverajx:O9veril:O3er/linkage|editorabing:O2goabinokl:O2ocularsabinom:O3mialabiodizelole:O1odieselabiograf:O2grapherbbiohxemi:O2chemistryist:O9cbiolog:O2logisti:O5yiist:O5istabiomas:O2massabionik:O2nicsabiontologi:O3tologyabiplan:O1planefbird:O1rdajx:Ofowl/poultryar:Oññbirdsej:Oaviaryet:Olittle|birdokort:Obarnyardabiret:Oberetcbirm:AMyanmarianan:O9anin:O9|womanhbis:Fone|more|time/encoreekcant:Obisector/bisectrixkot:O1cuitkvit:Ocookie/biscuitmut:Obismuthtr:O2tre/brown|washtr:A5|brownturi:Olancetdbit:Obitmatric:O2mapok:Obyteum:Obitumencbiv:O1waak:Ito|bivouacak:O6bbizanc:AByzantinean:O8abizar:Aweirdabizon:Obisonbblag:Ito|(kidding)|beOsly|jokehblank:OwhiteAwhiteajx:Owhiteard:Aashenet:Oblank|checkig:Ito|whitenul:O4|manulin:O5womancblasfem:Ito|curse/swearOblasphemyul:O7erablat:Ocockroachcblaz:Oblisteron:Ocoat|of|armsonsxild:Oheraldic|shieldablek:Ito|bellowablend:Ozinc|sulphate/blende/sphaleritedblind:Ablindig:Ito|dazzleul:Oblind|personum:Ito|dazzlebblog:Ito|blogO3eblok:Ito|block/blockadeO5padad:O4adeet:Obitlav:Oblock|lavacblond:A2ndul:O4ulin:O4edblov:Ito|blowekscit:Ito|(up)|stirharmonik:Oharmonicainstrument:Owind|instrumentgblu:OblueA3ajx:O3f:Ito|bluffnderbuz:O2nderbusss:O2esz:O1ousedboa:Oboac:Ocaribou/reindeert:Orow-boattet:Olittle|boatbbobel:Ito|bubbleO5cboben:Ito|windOcoil/spooleg:Oreel/spoolbbofil:Oson-in-lawin:Odaughter-in-lawbbofrat:Obrother-in-lawin:Osister-in-lawbbogepatr:Oparent-in-lawojzz:Oin-lawsabogxi:Obogie/truckabohem:OBohemianeboj:Ito|barkeg:Ito|bark/baykot:Ito|boycottkot:O6minac:Ito|(at)|barkabokal:Ojarcboks:Ito|boxO2ingist:O2erpbol:Ito|boilard:Omooring-postet:Ito|simmerid:Obolideig:Ito|boiligil:O3eril:Okettleivi:ABoliviankrucx:Okettlesxevik:OBolsheviksxevik:A8sxevist:O8t:Ito|boltt:O3ting:Onutus:Oboluskbomb:Ito|bombO3ard:Ito|bombardast:O4stavi:O3erazin:O3asineiks:Osilkwormiksed:OBombycidae|lifeformokanon:Omortaron:Opiece|of|candyopafil:OmortarPbon:OgoodA3Eokayaspekt:Agood-lookingeg:Afine/greateg:Every|wellet:Aniceet:Eso-sofam:Ogood|reputationfam:Awith|a|good|reputationfart:Ito|(well)|befart:Owell-beingfartant:A3gust:Ogood|tastegust:Anice/tastygusteg:Adelicioushav:Awell-to-dohumor:Amerry/jollyifik:Obonuskarakter:Agood-heartedkondut:Asweetkor:Agood-hearted/kindkvalitec:Ovirtuemanier:Apolitemanierec:Orefinementodor:Onice|smellodor:Afragrant/good-smellingord:Awell-orderedstat:O4beingstat:Ain|good|conditionsxanc:Ogood|lucksxanc:Efortunatelyul:Onice|guyven:Owelcomevenig:Ito|welcomevenig:Ogreetingvenon:Fwelcomevol:Ito|(so|good|as)|bevol:Ogood|willvol:Epleasevolu:F5z:Obonzeaboparenc:Oin-lawbbopatr:Ofather-in-lawin:Omother-in-lawlbor:Ito|drillOboronag:O2ageaks:O3xating:Ito|strike/tapd:Oedge/shoredel:Obrothelder:Ito|borderder:O5el:ABorelsil:Obores:Ostock|exchangeabosk:Ocopse/grovebbosn:OBosnianin:O6|womanaboson:Obosonlbot:O1otanik:O1tanyanik:A4icalanikist:O5stauxr:Obitternel:Obottleelmalfermil:O5|openeret:Oshort|bootist:Obootmakersvan:ABotswanansvanan:O8svananin:O8|womanmbov:Obovine|animalAcow/bovineajx:Obeefar:O(of|cattle)|herdedo:Obovid|lifeformej:Ocowshedid:Ocalfidajx:Ovealin:Ocowl:Obowlorabant:Ocattle-thieforabist:O9efostal:Oshedbbrabant:ABrabantinean:O9abracelet:Obraceletabradip:Oslothabragx:Ocharcoalbbrajl:Ito|(up)|haulOBraille'hbrak:OarmA2apogil:O2-resthorlogx:Owatch/wrist-watchring:Obraceletsegx:Oarmchairte:Obractum:Ito|embracebbram:Obream/topgallant|mastvel:Otop-gallantdbrancx:Obranchet:Otwigotrancxil:Opruning-knifevoj:Oside-roadabrand:Obrandybbrank:Ogillard:Ostretcherbbrasik:Ocabbagestump:Ostalk|of|cabbagedbrav:AbraveE3oacx:Oimpudenceacx:A6tcbrazil:ABrazilianan:O8anin:O8|womanbbrecx:Ito|breachOhole/gapcbred:Ito|raisead:O4ingist:O4erbbrems:Ito|brakeO4cbret:Oshelfar:Ocabineton:OBretonbbrid:Ito|bridle/restrainO9traintscbrig:O2gad:O3adex:O2dgebbrik:O2cket:Obarebril:Ito|shineOgloss/sheenAbright/brilliantiant:O2lliantpur:Asparkling|cleancbrit:OBritA3ishujan:O3abriz:Obreezeabrocx:O1oochcbrod:Ito|embroiderajx:O8yteks:Ito|brocadeabrog:Ito|scaldcbrokant:Ito|(second-hand|goods)|sellAsecond-handist:O9d|dealerabrokol:Obroccoliabrom:O2minecbronz:O2nzeA5ajx:O5dbros:Ito|brushO4xur:Opamphlet/brochurexur:A1perbackedabrov:OeyebrowYbru:Ito|(noise)|makeOnoiseA3yl:Ito|burnl:Ocombustionl:Aburning/combustiblelajx:Ofuellalkohol:Omethylated|spiritlavertil:Ofire-alarmlbomb:Oincendiary|bombldifekt:Ito|burnleg:Oinfernolem:Aflammablelestingist:Ofiremanlgluigx:Ito|burnlgust:A3tlig:Ito|burnligajx:Ofuelligebl:Acombustibleligx:O7onligxem:Ainflammablelil:Oburnerlimun:Afire-proofllign:O3woodlmark:Ito|brandlmark:O4lmarkil:O4ing|ironlofer:Oburnt|offeringlstamp:Ito|brandlstamp:O4lstampil:O4ing|ironlsxtipar:Ofaggotlum:Oinflammationlvund:Ito|burnn:Obrownn:A4nalg:O4|alganej:ABruneiannejan:O7nejanin:O7|womannhar:Abrunettenokul:A1owneyedsk:Aabruptst:Ocheststangor:Oangina|pectorist:Ofarm|animal/brutet:Abrutaltal:A5tar:Olivestocktig:Ito|dulltigx:Ito|(dull)|becomeZbu:Obuoyb:Obratbacx:Onaughty|boybal:Obuffalocer:Ohornbillcx:Ito|butchercxej:Oslaughterhousecxist:Obutchercxistbutik:O6's|shopd:Oshed/standdaism:OBuddhismdaist:O6tdgxet:Obudgetdh:OBuddhadhan:Obuddhistdhism:O6mdhist:O6tduar:Oboudoirf:Otoadfed:Obuffetfr:O4r/bumpergr:Ito|sodomizegr:Oanal|sexgxet:Obudgetk:Ito|bucklek:O5kanist:O2caneerkdorn:O2kle|pinked:Obouquetkl:Ito|curlkl:O3kl:A3y/loopyks:Obox-treel:Ochunk/lumplb:Obulbldog:OFrench|bulldogldoz:Obulldozerle:Opapal|bullle:ABooleanlen:Obowlinelet:Osmall|balllgar:OBulgarianlgarin:O8|womanljon:Obouillonlk:Orolllten:Obulletinlvard:Oboulevardlvolv:Ito|(up)|windm:Oboommbramvel:Oroyalmerang:Oboomerangnkr:Obunker/shelterabunrak:O2rakuabunt:Amulticoloredtbur:OBoerd:Obumblebeee:Obourréegund:OBurgundiangx:Omiddle-class|persongx:A9ssgxar:Obourgeoisiegxon:Ito|budgxon:O2gxonbrasik:OBrussels|sproutjat:OBuryatjat:A5ianlesk:Aburlesquenus:O2nousokrat:O2eaucratokratar:O8cyokratism:O9yundi:ABurundianundian:O8undianin:O8|womanpbus:Obus/omnibushaltej:O2|stopprit:Obowspritstacidom:Obus|stationt:O2t/torsox:Omouthx:Aoralxeg:Ojaws/mouthxel:Obushelxharmonik:Oharmonicaxman:OBushmanxplen:Omorsel/mouthfulxpren:Obitextuk:Onapkinxum:Ito|muzzlexum:O5qbut:Ito|(up)|hillan:ABhutaneseanan:O8ananin:O8|womane:Obuzzarder:O1ttererig:Ito|churnerpan:Obread|and|buttereruj:Obutter|disherum:Ito|butterik:Oshopikist:O3keeperikum:Ito|shopler:Obutleron:Ito|buttonon:O5onum:Ito|buttonabv:Fpleasebcar:Oczarin:O3inagced:Ito|(up)|giveOabandonmentem:Oaccommodationem:A9ingig:Ito|(up)|softenr:Ocedarr:A4bcejan:OcornflowerAcyanbcejlon:ACeylonesean:O8acekum:Ocecumpcel:Ito|aimOpurpose/aimebr:Ito|celebrateebrad:O7ioneri:O3rygrajn:Ofront|sightil:Ogunsightlingv:Otarget|languagemodul:Oobject|moduleoar:Ocodomainofan:Ocellophaneprogram:Oobject|or|target|programsi:ACelsiustusx:Ito|finishulit:Ocelluliteuloz:O5osebcement:Ito|carburize/case-hardenOcementacend:O1ntlcent:Ohundredauxr:Ocentaurav:O4voi:F3iigram:O4gramilitr:O4litreim:O4meimetr:O6treon:Aone|hundredthr:Ocenterr:A3ralral:Oexchange/power|stationccenzur:Ito|censorO5ist:O5acep:Oonioncceramik:Oceramicsajx:O6|objectist:O7artistacerast:Ohorned|vipergcerb:Obrainajx:O4set:Ocerebellumlaborist:Obrain|workeruj:Ocraniumum:Ito|(puzzled)|beumajx:Oworryacereal:Ocerealacerefoli:Ohemlockcceremoni:OceremonyAformalec:Oceremonyaceri:O2iumbcerkopitek:Omeercated:Oold|world|monkey|lifeformfcert:AcertainE6lyagrad:Eto|a|certain|degreeec:Ocertaintygrad:Eto|a|certain|degreeig:Ito|(sure)|makeacerumen:Oear|waxfcerv:Odeerid:Ofawnik:Ocervixin:Ohindopark:Odeer-parkoskarab:Ostag|beetlecceter:OremainderA5ingEbesides|thatacezi:Ocesiumacezur:O2uraacian:Ocyanogenacibernetik:O1berneticsbcic:Onippleum:O5acidoni:Oquinceacidr:Ocidergcifer:Ito|figureOdigit/numeralA4alec:A6/numericalecig:Ito|digitizeecigil:O7r/analog-to-digital|converterplat:O1albcigan:OGypsyin:O4|womangcigar:Ocigared:O4etteedstump:O8-buttet:O4illoing:O4|holderstump:O4-buttuj:O4|boxacign:Oswanacikad:Ocicadabcikatr:Oscarigx:Ito|(a|scar)|formdcikl:OcycleA3icoid:Ocommon|cycloidon:Ocycloneacikoni:Ostorkacikori:Ochicorybcili:Ociliandr:Ocylinder/rollerdcim:Obedbugati:Opicture|rail/cymabal:Ocymbalbalist:O5istbcinam:Ocinnamonuj:O7|treefcindr:Oashig:Ito|incinerateoblond:Aash-blondogriz:A2enuj:O2trayulin:OCinderelladcinik:Acynicalism:O4ismist:O4ul:O4acionism:OZionismacionist:O5tecipr:ACypriotan:O6anin:O4an|womanes:Ocypressin:Ocarprcir:Ito|polishOshoe-polishk:Ocircuskel:Ocompasseskl:Ocirclekl:A3ularkleg:Ogreat|circlekonferenc:Ocircumferencekonstanc:O5stancekul:Ito|circulatekulad:O7ion/traffickulant:A8ngkuler:O6rkumcid:Ito|circumcisekumcid:O8ionkumfleks:O5flexkvit:O4itkvitkart:O6|boardacisoid:O1ssoidacistern:O2tern/tankmcit:Ito|quoteadel:Ocitadelajx:Oquotationar:Ocitharil:Oquotation|markr:Ozitherrol:Owatermelonron:Olemonronarb:O4-treeronmelis:O4|balmronsuk:O5juiceronuj:O4-treerus:Ocitrushcivil:A1vil/civilianiz:Ito|civilizeiz:O6ationizaci:O9onizad:O9onizec:O9onizit:A6edul:O5anfcivit:OnationAcivican:O1tizenanec:O6shipanig:Ito|naturalizeism:Obeing|a|good|citizenacm:Fcmacol:Oinchbcom:Fcomprehensiv:Einsurancexxacunam:Otsunamiacxabrak:Osaddle|blanketccxagren:Ito|annoy/worryO4ance/disappointmentAdeplorableacxajot:Ochayote/chochoacxak:Oshakoicxam:Ochamoisbelan:O3berlainbr:Oroombrist:Obutlerbristin:Omaidpan:Ochampagnepanj:O8pinjon:Omushroompion:Ochampionbcxan:Otriggertagx:Ito|blackmaildcxap:Ocapel:Ohatitr:Ochapterobek:Ovisorncxar:Ocart/chariotet:Opushcartlatan:Ito|cheatlatan:O1arlatan/imposterm:Ito|charmm:O4m:A4ingmeg:Amost|charmingnir:Ohingepent:Ito|buildpentajx:Ocarpentry/structurepentist:O6ert:Ocharterum:Owheelbarrowkcxas:Ito|chase/huntavi:Ofighterhund:Ohunting|dogi:Ochassisist:Ohunterkorn:O3ing|hornkur:Ito|chaset:A3tetec:O4ity/puritytig:Ito|chasten/expurgatetrancxileg:Ocutlassacxatni:Ochutneyacxatri:O1atriacxecxen:OChechendcxeest:Ito|(present)|attend/beOpresenceant:O5t|oneant:A6Ccxef:Oboss/chiefAmainakcent:O3|accentangxel:Oarchangelartikol:Oleading|articlecirkl:Ogreat|circleduk:Oarchdukedukland:O5chyepiskop:O3bishopepiskopland:O9ricgeneral:Osupreme|commanderherezul:Oarch-hereticideal:Aprincipal|idealkonsul:Oconsul|generalkuirist:Ochefmast:Omainmastministr:Oprime-minister/premierpart:Efor|the|greater|partpastr:Ohigh|priestpresbiter:Oarchpriestprinc:Ogrand|prince/dukeprocesor:Ocentral|processorpuls:Odownbeatredaktor:Oeditor|in|chiefretregion:Otop|level|domainter:Omainlandurb:Ocapital|cityvel:Omain|sailvoj:O1jor|roadecxehx:OCzechA4in:O4|womanoslovak:O4oslovakianoslovakin:O9akian|womanbcxek:Ocheckar:O4-bookacxel:Ocellacxeman:Eat|hand/handyacxemiz:Oshirtccxen:Ochainer:Olinkfrakci:Ocontinued|fractionccxeriz:Ocherryarb:O5-treeuj:O9eccxerk:OcoffinAfunerealveturil:Ohearseacxerp:Ito|(out)|takebcxes:Ito|stopig:Ito|stopbcxetabl:Eat|the|tableigx:Ito|(down|at|the|table)|sitmcxeval:Ohorseajx:O4meatblek:Ito|neighbredej:Ostudfarmej:Ocorral/stableet:Oponyfort:Ohorsepowerid:Ocolt/fillyin:Omareist:Ogroom/stablemanpied:Ocoltsfootpov:Ohorsepowertri:O(of|three|horses)|teamacxevron:Ochevronbcxiam:Aeverlastingverd:A3greenacxiaspec:Aall|kinds|ofacxicxeron:Otour|guideacxieest:Aomnipresentfcxiel:Oheaven/skyA5lyark:Orainbowblu:Osky|blueglor:Aheavenlyosfer:Ocoelospherebcxiesul:Oprostitutein:O9acxiesvocx:Aunanimoushcxif:Ito|crease/crumbleon:Oragoner:O2-pieceonfigur:Oscarecrowonist:Oragpickeronul:O2amuffinr:Ito|encryptr:Ocodeacxigong:Ochi|gongecxikan:Ito|quibblead:Ohair-splittingem:Ocensoriousnessem:A9ul:Onit-pickeracxikun:Eherewithdcxil:Ochylei:AChileanian:O6ianin:O6|womanccxim:Ochymusoment:Eat|this|momentpanz:Ochimpanzeeccxin:OChineseA6ujan:O6acxiokapabl:Aall-capableacxionpov:Aomnipotentacxionsciad:O3sciencebcxiopov:O3potenceAall-powerfulacxiosci:A3knowingacxiovendej:Obazaarccxip:Acheap/inexpensiveE4lys:Opotato|chipwcxir:Otendrilkaux:Ito|surroundkaux:Anearbykaux:Earoundkauxajx:Oenvironment/surroundingskauxbar:Ito|(off)|surround/fencekauxbarej:Ocorral/enclosurekauxbrak:Ito|embrace/hugkauxbrak:Ohugkauxcxiz:Ito|(off)|chipkauxferm:Ito|enclosekauxfraz:Operiphrasiskauxir:Ito|(around)|gokauxkol:Ocollarkauxman:Obraceletkauxpalp:Ito|fumblekauxprem:Ito|hugkauxpren:Ito|embracekauxskrib:Ito|circumscribekauxskribit:A9bedkauxum:Ito|(up)|encircle/roundkauxum:Oencirclement/round-upp:Ito|chirpacxisupr:Eaboveacxiuflank:Eon|every|sideacxiufoj:Eevery|time");
  prefix = fillDictionary(prefix, "acxiuhor:E5hourbcxiujar:AannualEyearlyacxiuliterajx:Opangramacxiulok:Eeverywhereacxiumoment:Eany|timeacxiumonat:Emonthlyacxiurilat:Ein|every|wayacxiurisk:Aall-riskacxiusemajn:Eweeklybcxiutag:AdailyE4acxiuvocx:Aunanimousccxiz:Ito|carve/chiselil:Ochiselilet:Omini-chiselbcxokolad:Ochocolatebriket:O8|baracxonmag:O2nmageacxukcx:OChukchi|manbcxur:Ospermask:Ochurrascoadadaism:Odadaismadafn:O1phneadagestan:ADaghestanadajmon:Odemonadakot:OSiouxcdaktil:Odatearb:O3|palmuj:O3-palmadalajlama:ODalai|Lamaadali:Odahliabdalmat:ODalmatianik:Odalmaticadaltonism:Ocolor|blindnessmdam:Ocheckera:Ofallow|deeragx:Ito|damageagx:O5ask:Ito|damaskask:O5asken:Ito|damascenelud:Ocheckersn:Ito|damnn:O3ationn:E3p:Ito|dampenpil:O5erudan:ODaneA2ishc:Ito|dancec:O4cej:O4|hallcist:O4rcistin:O5d:Osharp-dressed|man/metrosexualgxer:Odangergxer:A5ousgxerec:O5in:ODanish|womank:Ito|thankk:O4sk:Agratefulk:Ethankskec:Ogratitudekem:O8kem:Athankfulkemec:Ogratitudekon:Fthanksadarm:Odharmaadartr:Oacneqdat:Ito|dateO3en:O2a/datumigx:Ito|dateiv:Odativereven:Oanniversaryum:Odataumbank:O3|bankumbaz:O3-baseumbazmanipulil:O8|management|systemumportil:O3|medium/volumeumprilabor:O4processingumstruktur:O4structureumtip:O4typeumtraktad:O4processingumtraktil:Oprocessorur:Ojimson|weed/thorn|appleadauxb:Ostavekdauxr:Ito|lastOdurationAlastingEcontinuouslyad:Ito|lastec:Oenduranceem:Adurableemec:O4ilityig:Ito|continueig:O6ationigot:Ato|(continued)|beadazip:Oarmadilloadeadmon:Ito|dissuadebdebat:Ito|debateO5bdebet:Ito|debitO4bdebit:O1mand/saleor:Oaccount|receivable/debtorbdebut:Ito|debutant:A4anterdec:Ito|(fitting)|beAdecent/suitableE5lyembr:ODecember'id:Ito|decideid:O3sionid:A5veidec:O7nessidig:A7idigx:Ito|decideidigx:O3sion-makingigram:O3gramilitr:O3litreimal:O3mal/digit|after|the|radix|pointimal:A6imetr:O4etrexevaligx:Ito|dismountxifr:Ito|decipheradedekind:ADedekind'sadedicx:Ito|dedicateadedukt:Ito|deduceadeerig:Ito|(off)|splitcdefal:Ito|(down)|fallajx:Otrash/wasteajxej:Odumpbdefend:Ito|defendO4sehdefi:Ito|challenge/defyO8cit:Odeficitl:Ito|(past)|marchnitaxx:Farticlexxnitiv:Adefinite/definitivenitiv:E7lynitivig:Ito|confirm/ratifyadeflaci:Odeflationadeflankigx:Ito|(astray)|digress/goadefor:Aremotebdegel:Ito|melt/thawO3ing/thawbdegener:Ito|degenerateit:A9adegrad:Ito|degradeadegrat:Ito|(off)|scrapeadegut:Ito|(down)|dripadehak:Ito|(off)|cutcdehisk:Ito|dehisceO6ncead:O9adeirpunkt:Ostarting|pointadeism:Odeismadejxet:Ito|(off)|throwcdejxor:Ito|(on|duty)|beOshiftdauxr:Oworkshift|lengthZdek:Otenadenc:Ito|(decadent)|beadenc:Odecadence/declineadencig:Ito|(decadent)|makeagram:Odecagramalitr:O3litrealkul:Ito|deductalkulebl:A5ibleametr:O1cametrean:O1andu:Odozenduedr:O1decahedrondulater:O5gonedr:Odecahedronlam:Ito|recitelar:Ito|declarelar:O5ation/statementlaraci:O9nlaril:Otax|formlater:Odecagonlinaci:Ito|declinelinaci:O3ensionlinigx:Ito|deviatelinigx:O1flection/deviationliv:Ito|(down)|slopeliv:Oslopeliv:A3ingodig:Ito|decodeokt:Ito|boilokt:Odecoctionolt:Ito|(her|neck|and|shoulders)|exposeoltajx:Ocleavageoltit:Alow-cuton:Atenthonduk:Ito|(away)|leadonsil:Ito|(against)|adviseontig:Ito|transferor:Ito|decorateor:O4/decorationoraci:Ito|decorateoraci:Odécor/decorationret:Ito|decreeret:O5rocx:Ito|unhooksesum:Ahexadecimalstr:Aright-handstr:Eon|the|rightstren:Fto|the|rightstrul:Oright-handerstrum:Apositively|orientedstrum:Eclockwiseum:Adecimaladekunulater:Ohendecagonbdekutimig:Ito|(break|a|habit|of)|helpx:Ito|(a|habit)|breakadelas:Ito|abandonfdeleg:Ito|delegateaci:O6ionad:O9at:O6e/representativeit:O7itar:O6ionadelfen:Odolphinadelfini:Olarkspuradelft:ADelftbdelikat:Atactful/delicateec:O3/delicatenessddelir:Ito|(delirious)|beOdeliriumA5ousajx:Oabracadabraadelkreder:Odelcredereadelog:Ito|entice/seduceadelokig:Oproper|motion/movement/displacementadelong:Efor|a|long|time|nowcdelt:Odeltaaplan:Ohang|glideroid:Okite/deltoidbdemagog:Odemagoguei:O8ryademamig:Ito|weanddemand:Ito|askOquestionar:O7naireosign:O7|markademenc:Odementiaademet:Ito|(off)|takeademisi:Ito|resignbdemografi:Odemographyist:O8erfdemokrat:O3cratA7icec:O6cyi:O8i:A6ticiigx:O8zationhdemon:O3nA4icstr:Ito|demonstrate/provestr:O9ionstraci:Ito|demonstratestraci:O9ionstrativ:O9ivestrebl:Aprovableademord:Ito|(off)|biteadenask:Acongenital/innate/nativeadendrit:Odendriteadenombrad:Oennumerationadenominator:Odenominatoradenov:Eagainadens:Adense/thickpdent:OtoothAdentalar:Oññteethbros:Otoothbrushdolor:O4acheeg:Otusking:Otooth|socketist:Odentistkarn:Ogumopikil:Otoothpickpast:O5astepikil:O5ickpingl:O8rad:Ogear/cogskrap:Ito|(off)|gnawum:Ito|toothcdenunc:I1|(to|the|authorities)|denounce/reportOaccusationant:O4eradepartement:Odepartmentcdepend:Ito|dependA5entec:O7cebdepesx:Ito|dispatchO7/urgent|written|messagebdepon:Ito|depositej:O6oryadeport:Ito|deportadepost:Eever|sinceadeprem:Ito|(down|on)|pressbdepren:Ito|(away)|deduct/takeOdemand/saleadepresajx:Oprint/imprintadeprez:Ito|(off)|writecdeprim:Ito|depressO6ionitec:O9adeprunt:Ito|borrowedeput:Ito|deputead:O1legationat:O6e/representative/deputyilar:O6ionit:O6e/representative/deputyaderaz:Ito|(off)|shavecderiv:Ito|deriveajx:O4ationebl:Adifferentiableaderm:Odermusbderomp:Ito|(off)|breakigx:Ito|(off)|breakbderul:Ito|(off)|rolligx:Ito|(off)|rolladervisx:Odervishadesalt:Ito|(down)|jumpbdescend:Ito|descendO5tddesegn:Ito|design/drawO9wingajx:O9wingopaper:Odrawing-paperadesert:Odessertadesinfekt:Ito|disinfectadeskvamigx:Ito|(off)|flakecdespot:OdespotA5icism:O6smcdestin:Ito|assign/destineOdestiny/fateprojekt:O1velopment|planadesucxil:Osuction|apparatusadesxir:Ito|(off)|tearadesxov:Ito|(away)|pushddetal:OdetailA5edEin|detailist:Oretaileradetektiv:Odetectivebdetemigx:Ito|(from|the|subject)|strayOstraying|from|the|subject/digressionadeten:Ito|restraincdetermin:Ito|determineant:O7antil:O7eradetond:Ito|(off)|cutadetrancx:Ito|(off)|cutadetrik:Ito|(off)|castadetronig:Ito|deposecdetru:Ito|destroyO4uctionad:O9nbdeturn:Ito|(away)|turnigx:Ito|turnwdev:Ito|hazzveOduty/obligationanc:Ito|overtake/passen:Ito|come/resulten:Ito|deriveen:O4ationen:Olineageen:Acomingenig:Ito|deriveenig:O4ationersx:Ito|(off)|pouri:Ito|turni:Oaberrationiaci:Odeviationiant:Aaberrantig:Ito|coerce/forceig:O4ion/forceig:A1mpulsoryiz:Omottoojigx:Ito|(astray)|goojigx:Oaberranceojigxant:A6tontig:Ito|compelddezert:OdesertAdreary/desertec:Oabandonmentig:Ito|devastatecdezir:Ito|desireO5/wishind:A4ableZdi:OgodAdivineabet:O1abetesabl:Odevilabl:Adiabolical/devilishabl:Edarnablajx:Odevilryablet:Olittle|devilabol:Odiaboloafan:Atranslucentafilm:Ofilm|stripafragm:Odiaphragmagnoz:Ito|diagnoseagnoz:O6isagonal:O3onalagonal:A7agonalig:Ito|diagonalizeagonoz:I3nosexxagonoz:O6isxxakon:Odeaconakrit:Ito|(a|diacritic|to)|addakrit:Adiacriticalakritajx:Oaccented|letterakritil:O5/diacritic|markalekt:Odialectalektik:O6icalog:O3oguealoguj:O5|boxamant:O2mondamant:A6ametr:O3eterant:Ocarnationare:Odiarrheaaspor:O2sporabocx:Ito|debauchbocx:O6erydaktik:Odidactics/pedagogydaktik:A7al/pedagogicaldelf:Oopossumes:Onumber|or|pound|sign/grid/sharpet:Ito|dietet:O3et:A3aryfekt:Ito|damage/ruinfekt:O5fekt:Abroken/out|of|orderfektigx:Ito|(down)|breakfektigxem:Aperishablefektigxint:Abroken|downfektit:A5/damagedferenc:Ito|differferenc:O5encegdiferenc:A7tial:Ito|differentiateial:O9alial:A9alialad:O9ationialebl:A9ableig:Ito|differentiateddifin:Ito|defineO4itionA5ngit:A5teadifrakt:Odiffractionadiftong:O1phthongidig:Ito|(up)|make|an|embankment/damOdike/embankmentest:Ito|digestest:O5ionestad:O8ital:Ofoxgloven:Odignityn:A4fiednec:O4tyadihxotomi:O1chotomyjdik:OthicknessA4/fatec:O4nessfingr:O1umbigx:Ito|thickent:Ito|dictatetator:O5ortatur:O7shiptatur:A7ialventr:Afatadilem:Odilemmaediletant:Oamateur/dabblerA6ishec:O8mec:A8h/small-timeism:O8mbdiligent:Ahardworkingec:Oindustryadiluv:Ofloodadimancx:OSunday'bdimensi:Odimensionnombr:O8alityddinam:Odynamoik:O4icsik:A6it:O5teadinasti:O3styadine:ONavajoadinosauxr:Odinosaurgdiplom:O1plomaat:O6tati:O6cyati:A6ticatiist:O7igx:Ito|graduateit:Acertificated/graduateodir:Ito|sayOstatementad:Ito|(saying)|keepajx:Osayingak:ADiracsat:Ito|(said)|beekci:Odirectorateekt:Ito|guide/steerekt:Odirectionektad:Osteeringektant:Aleadingektil:Ohandlebars/steering-wheel/rudderektilist:Odriverektilstang:Otillerektor:Odirector/managerZdis:Ascattered/disjointaux:Oexclusive|disjunction/XOR|operatorauxdig:Ito|broadcastbar:Ito|segregatebat:Ito|smashbrancxig:Ito|branchbrancxig:O5ingbrancxigx:Ito|(off)|branchcentrec:Oeccentricityciplin:Ito|disciplineciplin:O9ciplinem:Oobediencecxipl:Odiscipledon:Ito|distributedon:O8ionerigebl:Abiodegradableert:Ito|discuss/dissertateertaci:O2sertationertajx:O9onerv:Oworship|servicefadenig:Ito|unravelfal:Ito|collapsehak:Ito|(up)|chopig:Ito|divideigx:Ito|separateigxem:Aloose/crumblyip:Ito|wasteir:Ito|(up)|separate/breakjunkci:Odisjunctionjxet:Ito|scatterjxet:Oinjectionjxet:A6vek:Ito|dialk:O1sk/dial/recordkaparat:Ohard|diskket:Odiskettekil:O3|driveking:O9komb:Ito|cardkont:Ito|discountkont:O7kotek:O4thèquekredit:Ito|discreditkret:A5etkretec:O5tionkriminaci:Ito|discriminatekriminaci:O9tionkriminant:O9ntkturnil:O2k|unitkurs:O2coursekut:Ito|discusskut:O6ionadiskutad:O9adisonanc:O2sonancebdisparcel:Ito|(into|lots)|divideig:Ito|(into|lots)|dividebdispartig:Ito|partitionOset|partitionbdispecig:Ito|fragmentx:Ito|fragmentadispel:Ito|disperseadispepsi:Oindigestionedispon:Ito|(available)|haveOdispositionajx:Odeviceebl:Aavailableig:Ito|(available)|makeadispozici:Opredisposition/tendencyadisprem:Ito|pulverizeadisprozi:Odysprosiumbdisput:Ito|disputeO6/quarreladisradi:Ito|emitadisrevigx:Odisappointment/disillusionmentadissalt:Ito|(apart)|flybdissem:Ito|disseminateig:Ito|disseminate/sowcdissend:Ito|(out)|transmit/sendil:Otransmitterolist:Omailing|listadisskvamigx:Ito|(off)|flakebdissurjxet:Obijection/biunique|correspondence/one-to-one|mappingA6ve/one-to-onebdissxir:Ito|tearit:Atatteredadistanc:Odistanceadistil:Ito|distillddisting:Ito|distinguishO5ction/renownA8veigx:A9epdistr:Ito|distract/entertainO7ion/entertainmentad:O9n/entertainmentajx:O9n/entertainmentibu:Ito|distributeibu:O8ionibuci:O9on/generalized|functionibuec:O9vityibuec:A9veibuil:O8origx:Oabsence|of|mindigxem:O4t-mindednessigxem:A9dedikt:Odistrictit:Aabsent-minded/distracteditec:O9dedness/distractioncdisvastig:Ito|spreadIto|spreadx:Ito|spreadadisversx:Ito|spilladisvolvig:Ito|unrolladiurn:O(of|24|hours)|day/periodadivan:Oottoman/divanadivastig:Ito|spreadadiven:Ito|guesscdivergx:Ito|divergeA6ntenc:O7cebdivers:Avariousec:Odiversityhdivid:Ito|divideO3sionant:O4orat:O3dendebl:O3sibilityebl:A6leend:O3dend/share|profitsstrek:Ohyphenadivizi:Odivision/military|divisioncdivizor:Ito|(by|dividing|into)|goOdivisorhav:Anon-primeadivorc:Odivorcecdizajn:Ito|designO5ist:O5eradizel:Odieseladizert:Ito|run|away|from/desertadocent:Ouniversity|teacher/docentjdog:Obulldog/mastiffan:Ocustomsanej:O5-houseanist:O5s|officerm:Odogmam:A4ticmar:O1ctrine/dogmamem:O1gmatismmism:O6csx:O2eedok:O1ckist:O3worker/longshoremantor:O2tortrin:O3rineument:O2umentadolar:O1llarhdolcx:Asweetacid:Abittersweetajx:Ocandyamar:Asweet-and-sourec:O4nessodor:A4-smellingul:O4heartulin:O9edolor:Ito|hurtOpainA3fulgxem:Ito|groanig:Ito|hurtsdom:Ohomeacx:O1velagx:Ito|pity/saveagx:O3agx:Ethat's|too|badan:Ohousemate/roommatebest:Odomestic|animaleg:Omansionen:Odominoes/cloaket:Ocottageicil:Oresidenceini:Odominioniniki:ADominicaninikian:O8kolomb:Opigeon/squabkolorigist:Ohousepaintermastr:O4husbandmastrin:O4wifepaser:O4-sparrowjdon:Ito|giveac:Ito|donate/giveac:O4ion/giftac:Eas|a|gift/for|freeacem:Agenerousacet:Olittle|presentajx:Ogiftitajx:O1ven/datumjxuan:Owoman-chaserkihxot:ODon|Quixoteadorik:A1ricadorlot:Ito|pamper/petldorm:Ito|sleepO4cxambr:Obedroomcxemiz:Onight-shirtej:Osleeping-placeem:A4yet:Ito|(a|nap)|takeetem:Adrowsyig:Ito|(to|sleep)|putigil:Osleep-inducer/soporificinklin:Adrowsyrob:Onight-gownbdorn:Othornarbust:O4-bushedors:ObackEat|the|backen:Fto|the|backflank:Oback/reverse|sideosak:Orucksackcdosier:Ofilesistem:O3|systemuj:Ofolderbdot:Ito|endowOdowryadoubl:Ebedxxbdoz:Ito|(out)|measureOdoseadragon:Odragoonadrahxm:O2chmaadrak:O2gonadram:O2macdrap:Oclothir:Ito|drapeirajx:O4ryadrast:A2sticddrasx:Ito|threshej:O5ing|flooril:Oflailmasxin:Othreshing|machine");
  prefix = fillDictionary(prefix, "edrat:Ito|wireO3ar:O2ingprovizad:O5tondil:O2e-shearsadrednauxt:Odreadnoughtadrelik:Odenimedren:Ito|drainad:O4ingigx:Ito|drainil:O4kran:O4-cockadres:Ito|tame/trainedrink:Ito|(alcohol)|drinkajx:Oalcoholic|beverageej:Obaremul:Oalcoholicul:O8bdriv:Ito|driftO4bdrog:O1ugekscitit:Ahighadromedar:Odromedarycdron:Ito|drownig:Ito|drownmarcxej:Oquicksandadrup:Ostone|fruitZdu:Opairakanon:Adeuterocanonicalal:Odual|spaceal:A3arang:Asecondaryb:Ito|doubtb:O4b:A4fulbemol:O3le-flat|symbolbind:A3tfulcenton:Atwo|hundredthdekedr:Oicosahedrondekon:Atwentiethdies:Odouble|sharpdirekt:Atwo-waydual:Odouble|dualedr:Odihedronel:Oduelelant:O3istelbird:Ofighting|cockenj:Ochaperoneet:Oduetfoj:Etwicehuf:Acloven-footedjar:Atwo-year/two-year-oldk:Odukekat:O1catkin:O2hesskland:O3ykolor:Atwo-coloredkotiledon:Adicotyledonouskt:Oduct/pipelinekuj:O2hylinear:Abilinearliterajx:Odigraphlok:Abinary/dyadiclornet:O2ocularsmiliardon:Atwo|billionthmilion:A3millionthmilionon:A9nthmilon:A3thousandthmnokt:Eat|nightmping:Odumpingmtag:E1ring|the|daymtemp:Atemporarymtemp:E7ilyn:Odunenaskit:Otwinng:Ito|employ/hirengant:O5erngint:O7ngit:O6eadungokontrakt:Olabor|contractadungolist:Omuster-rolladungperej:Oemployment|officebduobl:Adoubleig:Ito|doubleaduoden:Oduodenumzduon:Ahalfdi:Odemigoddiin:O6essdir:Ito|insinuate/suggesteben:Ohalf-planeebri:Atipsyfal:Ito|stumblefil:O1epsonfilin:O3daughterfrat:Ohalf-brotherfratin:O4sisterglob:Ohemispheregrup:Osemigrouphor:Ohalf-hourigant:Obisector/bisectrixinsul:Openinsulalinear:Aantilinear/semilinearlum:Odusklum:Adimnorm:Opseudonorm/semi-normpalt:Oshort|coatpatr:Ostep-fatherpatrin:O4motherrekt:Ohalf-line/raysfer:O3|spherevokal:Osemivoweladuopol:Oduopolyaduopsoni:O3sony/buyer's|duopolyaduperson:Alitobdupied:Atwo-footedul:Obipedadupleks:Afull|duplexbduplikat:Ito|duplicateO8adupunkt:Ocolonbdur:Ahardamatr:Odura|materbdusekc:Ito|bisectant:O5or/bisectrixadusenc:Aambiguousadusignif:A8ddusx:Ito|showerO5ej:O5stallil:O5headaduterm:Obinomialaduum:A2aryaduvalvul:O1valvedeben:Ogeometric|planeAlevel/smoothajx:Oplainig:Ito|even/levelaeblec:Opossibilityaeblig:Ito|(possible)|makeeebon:OebonyA4arb:O4it:O3iteuj:O3yiebri:OdrunkennessA4ec:O4ennesset:Atipsygajx:Ointoxicating|liquorig:Ito|intoxicateig:A8ingigx:Ito|(drunk)|getul:Odrunkaebul:Odanewort/dwarf|elderbebur:OivoryA4aedelvejs:Oedelweissaedem:O2maaeden:Oparadiseaedif:Ito|edifyaedr:Ohedron/facededuk:Ito|educateO5ionad:O8igx:Ito|(educated)|beoedz:Ohusbandec:Omarriageec:A2italig:Ito|marryigx:Ito|(married)|getigx:Omatrimonyigxint:A1rriedigxofest:Oweddingigxpet:Omarriage|proposaligxpropon:O9roposalin:Owifeinec:Omarriageinig:Ito|marryinigx:Ito|(married)|getinigxint:Amarriediefekt:Oeffectigx:Ito|(true)|comeiv:Arealiv:E3ly/in|factivajx:Ofactivec:Orealityivig:Ito|accomplishivigit:Acompletedivigx:Ito|(true)|be|accomplished/comecefemer:OmayflyAephemeraled:Omayflycefervesk:Ito|bubble/fizzOfizziness/effervescenceA3y/effervescentcefik:Ito|effectO5A5iveaefluv:Oglow|dischargekegal:Ito|(equal|to)|beAequal/evenEall|the|same/equallyajx:Oequationanim:A3nimousanimec:O6ityec:O3lityig:Ito|even/levellater:Aequilateralpez:O4ibriumvenk:Odrawaegid:Oprotectioncegipt:OEgyptianA7ujan:O7aeglefin:Ohaddockiego:Oegocentr:A2centriccentrism:O8smism:Oselfishnessism:A6ismul:Oegotistist:O6ist:Aselfishpodi:Obishop's|weedaegx:Oedgecehx:Ito|echoO3in:Osea|urchinaejestr:Omasteraejl:Oaleaejnstejni:Oeinsteiniumaejnsxtejni:O9maekart:Odeviationaekauxd:Ito|suddenly|hearaekboj:Ito|verbally|abuseaekbril:Ito|flashbekbrul:Ito|(on|fire)|catchig:Ito|(on|fire)|lightaekcel:Ito|(aim|at)|takeaekcept:Eexcept|foraekdiskut:Ito|(up)|bringaekest:Ito|ariseaekflagr:Ito|(into|flames)|burstaekflam:Ito|(on|fire)|catchaekflor:Ito|(into|bloom)|comeaekfunkciig:Ito|(on)|turnaekglit:Ito|skid/slipaekgxem:Ito|sighaekhav:Ito|getbekin:Osea|urchinsult:Ito|(insulting)|becomecekip:Ito|equipO4mentajx:O8aekir:Ito|(out)|startaekkant:Ito|intoneaekkapt:Ito|grab/graspaekkoler:Ito|(angry)|getaekkonsum:Ito|(into)|eataekkonteori:O(of|knowledge)|epistemology/theoryaekkri:Ito|(out)|callbekkur:Ito|(to|run)|startOrunbekkusx:Ito|(down)|layigx:Ito|(down)|liebeklektik:Aeclecticism:O7ismdeklezi:OchurchAecclesiastican:Ochurch|memberul:Oclergymanaekliptik:Oeclipticaeklogx:Ito|settlebeklud:Ito|(off)|kickOkick-offaeklumig:Ito|lightaekmalsat:Ito|(hungry)|getaekmank:Ito|(short|of)|fallbekmontrigx:Ito|appearO5ancedekologi:OecologyA5icalism:Oenvironmentalismist:O9talistdekonomi:OeconomyA5ick:O7sk:A7alaekpaf:Ito|(off)|fireaekpag:Odown|payment/first|installmentaekparol:Ito|(up)|bringbekpren:Ito|graspO4aekpusx:Ito|nudge/jogcekran:Oscreenblok:Omonitorum:Ito|screenaekrigard:Ito|glanceaekrimark:Ito|noticeaeksalt:Ito|startaekscelenc:Oexcellencyceksces:O3ssA5iveE8lyheksci:Ito|(out)|findt:Ito|excitet:O5mentt:A4ingtec:O4ementtigx:O9tit:Aagitatedtitec:Oexcitementceksedzigx:Ito|(divorced)|getOdivorceint:A6dbeksedzinigx:Ito|(divorced)|getint:Adivorcedaeksent:Oemotionaeksid:Ito|(down)|sitceksig:Ito|(go)|fire/letx:Ito|quit/resignx:Oresignationaeksklud:Ito|excludecekskluziv:Ito|excludeA4siveE8lybekskomunik:Ito|excommunicateOban/excommunicationcekskreci:Ito|secreteOexcretionA5albekskrement:O4mentA8aleeksku:Ito|jerk/joltrs:Ito|(a|little|trip)|takers:Oexcursionz:Ito|excusez:O5aeksmembrigx:Ito|(the|membership|or|subscription)|cancelaeksmod:Aold-fashioned/out-of-dateaekspansi:Oexpansioneeksped:Ito|(off)|sendOdispatchdat:Oshipping-dateici:Oexpeditionint:Osenderaekspekt:Oexpectation|of|a|random|variableeeksperiment:Ito|experimentO9A9alajx:O9ej:O9|laboratorycekspert:O4t/specialistA5ist:O5beksplik:Ito|explainO4nationeeksplod:Ito|explodeO4sionig:Ito|(up)|blowil:Oexplosive|devicemotor:Ointernal|combustion|engineaekspluat:Ito|exploit/usegekspon:Ito|demonstrate/exhibit/exposeOexposureAtempoencial:Oexponential/exponential|functionent:O7ent:A7ialmezuril:O3sure|meterfeksport:Ito|exportO5ationad:O9najx:O5ist:O5ermonopol:O5|monopolybekspozici:Ito|exhibitO6ion/expositioncekspres:Ito|expressO6A6aeksprezidant:O1-presidentaekstar:Ito|(up)|standcekstaz:Ito|(ecstatic)|beOecstasyA4ticpekster:OexteriorA4nal/outsideEabroad/on|the|outsideajx:Oexteriordangxer:Aout|of|dangeren:F2side/outwardland:Oforeign|countryland:A6land:Eabroadlandan:Oforeignerlandanin:O8/foreign|womanm:Ito|exterminateordinar:A2raordinaryordinar:E9arilyparti:Aimpartial/neutralpol:Ito|extrapolatemekstr:A4akt:Ito|extractakt:O6aktad:Oabstractionapol:Ito|extrapolateavaganc:O4vaganceavaganc:A9tem:Oendem:Aextremeem:E6lyemajx:Oend/tipemum:Oextreme|value/extremumemumigant:Oposition|of|an|extremumaekten:Ito|grabaektimigit:Astartledaektimint:A7aektir:Ito|jerk/tugaektrancx:Ito|(into)|cutbektusx:Ito|(upon)|touchmanier:Otouchbekumen:Aecumenicalism:O9ismcekvaci:Oequationar:O(of|equations)|systemig:Ito|(into|the|equation)|putaekvador:AEcuadorianaekvator:Oequatoraekvetur:Ito|depart/leaveaekvid:Ito|noticedekvilibr:Ito|(in|balance)|beObalanceig:Ito|balance/stabilizeist:Oequilibristaekvinoks:O3noxaekvipolent:A3pollentfekvivalent:O3valentA9klas:O8ce|classoklas:O9e|classorilat:O9e|relationrilat:O9e|relationaekvojagx:Ito|leaveEekz:Ffor|exampleF9eakt:Aexactakt:E4lyaktec:Oaccuracy/precisionamen:Ito|examineamen:O5ationantem:O2nthema/rashekut:Ito|executeekut:O5ionekutist:O8erem:Oeczemaempl:Oexampleempl:Efor|exampleempler:Ocopyerc:Ito|exercise/practiceerc:O9racticeercit:A1perienced/skillfulercitec:O9/skillil:Ito|exileil:O4ilit:O4ist:Ito|existist:O4enceistad:O8ot:O1oticnessot:A5otajx:O5otik:O5nessotik:A5otikajx:O5Zel:Oaleacxet:Ito|ransom/redeemacxetsum:O9emption|moneyartikig:Ito|dislocateartikigx:Ito|(dislocated)|becomeast:Aelasticastan:Olycra/spandexauxtigx:Ito|(out|of|the|car)|getbarelig:Ito|decantbat:Ito|(out)|knockburgxonigx:Ito|sproutcxerpit:Aexhausted/used|updevig:Ito|extortdevig:O5iondon:Ito|publishdon:Oeditiondonajx:Opublicationdonej:O4shing|housedonist:O6erefant:Oelephantefant:A7ineegant:A2gantegi:O3yegi:A3iacekt:Ito|choose/electekt:O2ice/electionektit:A2sen/electedektr:Oelectricityektr:A7ektrod:O5odeektroekzekut:Ito|electrocuteektrolit:O6lyteektroliz:Ito|electrolyzeektromotor:O5ic|motorektron:O5onektron:A7icektronik:O9sektronik:A9ektronikist:O9s|engineerektronmehxanik:O6mechanicsektronmehxanik:A9hanicalektronmekanik:O9hanicsektronmekanik:A9hanicalektronradi:O6n-beamektrostatik:O6staticektrostatik:Astatic|electricityement:Oelementement:A6aryevator:O2vatorf:O1ffar:Ito|accomplish/achievefarit:Acompletedaelfin:Ito|finishbelfos:Ito|(up)|digad:Oexcavationaelgutigil:Ocolander/strainerdelig:Ito|removeOoutputajx:O5|datail:O7eviceaeliksir:Oelixircelimin:Ito|eliminateO7ionigx:Ito|(out)|dropaelimplikaciig:Omodus|ponensbelips:Oellipseoid:O5oiddelir:Ito|(out)|goej:Oexitig:Ito|dismissmalpermes:Ocurfewaelize:Oparadise/Edenbelizi:Ito|elideO2sionbeljxet:Ito|(out)|spew/spitajx:Otrash/wasteaelkov:Ito|(out)|hatchaelkran:Ito|tapbellabor:Ito|(out)|workajx:Oarrangementaellacig:Ito|(out)|tirebellas:Ito|releaseit:A6daellern:Ito|masteraellitigx:Ito|(up)|getaelmergigx:Ito|emergecelmigr:Ito|emigrateIto|emigratead:O6ionaelmovigx:Ito|(out)|moveaelnodigx:Odenouementaelokvent:Aeloquentaelovigx:Ito|hatchaelpag:Ito|(off)|payaelpak:Ito|unpackaelparol:Ito|pronounceaelpel:Ito|(out)|driveaelpens:Ito|inventaelpetig:Ito|implore/invokeaelpoent:Ito|gain/winaelport:Ito|(out)|carrybelprem:Ito|(out)|extort/squeezeOexaction/extortionaelprovit:Atried|and|trueaelpurig:Ito|(out)|cleanaelrab:Ito|ravageaelradikig:Ito|eradicateaelregistr:Ito|(out)|logcelrevig:Ito|disappointx:Ito|(disappointed)|bex:Odisappointment/disillusionmentbelsalt:Ito|(out)|jumpul:Oupstartcelsalvador:ASalvadorianan:O9nanin:O9n|womanaelsekigx:Ito|(out)|dryaelselig:Ito|buckaelsend:Ito|transmitbelspez:Ito|spendOexpensecelspir:Ito|exhaleajx:Obreathtest:O5|testaelstakig:Ito|popbelstar:Ito|(prominent)|beAprominentaelstrek:Ito|(out)|crossaelsucx:Ito|(out)|deplete/suckaelsxalt:Ito|(off)|turnaelsxipigx:Ito|disembarkaelsxov:Ito|(out)|thrustdelsxut:Ito|downloadIto|downloadO7ad:O7aelten:Ito|endureaelterig:Ito|(up)|digceltir:Ito|extractO6ionO9celtrov:Ito|discoverO7yajx:O8aeltrud:Ito|extortaelturnigx:Ito|escapeceluz:Ito|(out)|wearigx:Ito|(out)|wearit:Aworn-outaelvagonigx:Ito|(out)|getaelven:Ito|(out)|comeaelversx:Ito|(out)|pouraelvid:Oviewaelvok:Ito|evokefelvolv:Ito|expandajx:O4sionant:Oevolvent/involuteat:O3uteigx:Ito|expandigx:O4sionHem:Ito|tendajl:Ito|enamelajl:O5ancip:Ito|emancipateancip:O8ionbaras:Ito|hinder/hamperbaras:Oawkwardnessbaras:A6barasit:Ahinderedbarg:Ito|embargobarg:O6blem:O2lembri:O2ryobusk:Ito|ambushbusk:O5erit:Oretired|personerit:A6eritigx:Ito|retirefaz:Ito|emphasize/accentuatefaz:O6sfaz:A4ticinent:Adistinguishedinent:Every|wellinentul:Ocelebrity/V.I.P.oci:Ito|emotionally|moveoci:O6oci:Atouchingociigx:I1|(emotion)|feelociit:Aseized|with|emotionpiri:Oempirypiri:A4ical/objectivepiriism:O6ism/objectivismpiriist:O8t/objectivistpiriul:O5kus/gyakorlatias|emberZen:OyenAinternalE1sidead:Ito|(in)|beamigx:Ito|(in|love)|fallamigxint:Ain|lovearhxivig:Ito|archivearkivig:Ito|archiveauxtigx:Ito|(into|the|car)|getbalzamig:Ito|embalmbarelig:Ito|(into|the|barrel)|loadbat:Ito|(in)|drivebotelig:Ito|bottlebrakig:Ito|hugbusxajx:Obitcefalopati:Oencephalopathyciklopedi:O2yclopediacxifr:Ito|encipherdangxerig:Ito|endangerdivi:O2ivedokarp:O2ocarpdomorfi:O3morphismdoplasm:O3plasmdormigx:Ito|(to|sleep)|godormigx:Ogoing|to|sleep/Assumptiondoskopi:Oendoscopyergi:O1ergyergi:A4eticergiemul:Ohustlerest:Ito|occupyestant:O4antferm:Ito|(away)|putfluej:Omouthfos:Ito|buryglut:Ito|(up)|swallowgrauxl:Oanchovyhav:Ito|contain/includehav:O3entsig:Ito|enter/insertig:Oinputigajx:O4|dataigil:O6eviceigm:Opuzzle/riddleigm:Aenigmaticigmec:Omysteriousnessigx:Ito|(in)|getir:Ito|enterir:O2ranceirbilet:Oadmission|ticketirej:Oentrancejekci:Oinjectionjekci:A6veaenkadrig:Ito|frameaenkanonig:Ito|canonizecenkarnig:Ito|embodyO4imentx:Oincarnationbenkasig:Ito|(in)|payist:Obank|messengeraenkatenig:Ito|handcuff/chainaenkavigx:Ito|(in)|cavecenket:Ito|investigate/surveyO9ion/surveyist:O9or/surveyor/magistrateaenklasig:Ito|classifyaenklitik:Oencliticaenkodig:Ito|encodebenkonduk:Ito|introduceO7tion/prefacebenkorpig:Ito|embodyO4imentaenkrust:Ito|incrustaenkudrilig:Ito|threadaenkursigil:Orouteraenladig:Ito|canaenland:Adomestic/aboriginalcenlitig:Ito|(to|bed)|putx:Ito|(to|bed)|goxtemp:Obedtimedenlogx:Ito|inhabitant:O6antig:Oaccommodationigx:Ito|settleaenmanig:Ito|(over)|handaenmarcxigx:Ito|sinkaenmet:Ito|put|away/insertcenmigr:Ito|immigrateIto|immigratead:O7iondenmiksigx:Ito|interfereem:Omeddlesomenessem:A9emul:Obusybody/meddlercenoficig:Ito|appointO6ment|to|officex:Oaccessionaenorm:Eenormouslyaenoter:Oevening|primroseaenpak:Ito|pack/packageaenposxtig:Ito|postaenprem:Ito|(in)|pushcenradik:Ito|(root)|takeigx:Ito|rootit:Adeep-rootedbenregistr:Ito|(in)|logig:Ito|registeraenrigard:Ito|(in)|lookaenscenig:Ito|present/stagedenskrib:Ito|enterig:Ito|registerig:Oentryit:Ainscribedcensorb:Ito|absorbO4ptionad:Oassimilation/digestioncensorcx:Ito|bewitch/deludeOspell/delusionig:Aenchantingaenspac:Ito|containcenspez:Ito|(in)|takeOincomeimpost:O5|taxaenspir:Ito|inhaleaensxalt:Ito|(on)|turncensxip:Eon|boardigx:Ito|embarkigxint:Aaboardaensxlos:Ito|(up)|lockaensxov:Ito|insertaensxprucigil:Osyringeuent:Oentityablement:O2ablatureen:Ito|include/containenajx:Ocontentserig:Ito|buryerig:O2ialir:Ito|pulljer:Ointegerjer:A6/integralombig:Ito|buryombig:O2ial/funeralomologi:Oentomologyrepren:Ito|undertakerepren:Obusinessreprenar:Oññtrade|and|industryreprenem:Aenterprisingreprenist:Obusinesspersonrudigx:Ito|intrudeut:Ealtogether/on|the|wholeuziasm:Oenthusiasmuziasm:A8ticgenu:Ito|(bored)|beOboredomA2ingig:Ito|boreig:A2ingigx:Ito|(bored)|getrez:Obed-wettingaenvelop:Oenvelopeaenven:Ito|enteraenvergur:Owing-spanaenversx:Ito|(in)|poureenvi:Ito|envyO3A2iouscigx:Ito|(up)|lineem:Aenvious/jealousbenvolv:Ito|envelopajx:O6eaenzim:O1zymeaeon:Oeonaepakt:Oepactaependim:O1endymaaepicikloid:O1icycloidbepidemi:O2demicA7aepiderm:O4rmisaepifit:O2phyteaepiglot:O2glottisaepigon:O3on/Epigonusaepigram:O3ramcepikur:A2cureanan:O8ism:O8ismaepilepsi:O2lepsyaepilog:O3ogcepiskop:ObishopAepiscopaluj:Obishopric/dioceseaepistol:Oepistle/letteraepitaf:O2taphaepiteli:O3heliumaepitrohxoid:O3rochoidbepizod:O2sodeA5al/incidentalaepok:O1och/periodaepolet:O1auletbepope:O1icA3aepos:Oprimitive|narrative|poetryiera:Oerar:Ito|(a|mistake)|maker:Omistaker:A6n/wrongr:Eby|mistakerig:Ito|deceiverkred:Ito|fancyrpasx:Oaberrationrsercxil:Odebuggerberbi:Oerbiumn:O3a/erbium|oxideaerc:Ooreberektigx:Ito|(an|erection)|getOerectionaergot:O1gotberig:Ito|fragmentx:Ito|fragmentberik:Oheatherej:O4berinac:O1dgehoged:O7-type|lifeformaeriofor:Ocotton|grassaerizipel:Oerysipelasaermen:O1minecermit:Ohermitej:O5agelud:Osolitaireaerod:Ito|(away)|erode/wearaerotik:Aeroticaerp:Ito|harrowberudici:Oerudition/scholarlinessul:O5e|person/scholarberupci:Ito|eruptO4iondescept:Ito|excludeO2eptionA8alEapartcese:Oessaync:O2encenc:A4tialaeskadr:Osquadrondeskal:Ito|scaleOladderator:Oescalatorop:Oscallopbeskap:Ito|escapeO5aeskim:OEskimobeskort:Ito|escortO5aeskud:O2udo");
  prefix = fillDictionary(prefix, "hesper:Ito|hopeO3anglajx:Oesperanglaant:OEsperantoant:Ein|Esperantoantan:OEsperantistantist:O9tebl:Ehopefullydesplor:Ito|explore/investigateO5ation/investigation/researchad:O9n/investigation/researchdemand:Ito|interrogate/questiondesprim:Ito|expressO6ionil:O7ve|meanskapabl:O6abilityEest:Ito|beabl:Ito|establishabl:O8mentajx:Oentityantec:Opresentetik:Oaestheticsetik:A8ig:Ito|produceigx:Ito|ariseim:Ito|(highly|of)|thinkim:Oesteem/regardimat:Adearimind:Arespectableing:Ito|extinguishint:Opastint:Aformerintec:Opaston:OEstonianon:A7onin:O7|womanont:Ofutureontec:O5ontec:Ein|the|futurer:Ito|govern/controlrad:Oplatform/stagerar:O(of|directors)|boardrec:Oauthorityrem:Abossy/commandingrin:Omistressuar:Oestuaryul:Ocreatureaesxafod:Oscaffoldaetagx:Ofloor/storeycetan:Oethaneim:Apetty/small-mindedimec:O3iness/small-mindednessaetap:Ostageaetat:O2tement/registeraetburgx:Alower|middleclassbetend:Ito|extendigx:Ito|extendeeter:Oethern:O1ernityn:A4aln:Eforevernec:Oeternityaetig:Ito|shrinkdetik:OethicsA4aled:Olabelet:Oetiquettebetimolog:O1ymologisti:O7ybetiop:OEthiopianin:O8|womanfetn:Oethnic|groupA5ogenez:O3ogenesisografi:O5raphyologi:O4logyologiist:O7istbetos:Oatmosphere/moodplen:A8icaetrusk:OEtruscanaetskal:Asmall-scaleaetspirit:Apetty/small-mindedbetul:Olittle|onelernej:Onursery|schoolbeuxfemism:OeuphemismA7ticaeuxfoni:O3onyaeuxhxaristi:O1charistaeuxkalipt:O2alyptusaeuxkaristi:O2haristaeuxklid:AEuclideanaeuxler:A1lerianaeuxnuk:Oeunuchdeuxr:O1roop:AEuropeanopan:O7opi:Oeuropiumbeuxsk:OBasqueA5bevaku:Ito|evacuateO6ionbevangeli:OgospelAevangelicdevent:O1entual:Ocontingencyual:A8tual:Eif|the|occasion|arisescevident:Aevident/obviousEobviouslyec:O6nessaevikci:Ito|evictaevit:Ito|avoidkevolu:Ito|evolveOevolutionad:Oevolutionci:Ito|evolveci:O3utionig:Ito|developigx:Ito|evolve/developism:O3utionism/theory|of|evolutionist:O9stland:Odeveloping|countryt:Oevoluteaevolvent:O3vent/involuteaexposur:Etimexxaezofag:Oesophagusaezok:Opikehfab:Obroad|beanel:Ofairy|taleel:A1bulousl:O2lerik:Ito|manufacturerik:Ofactoryrikad:Omanufacturerikej:Ofactorymfac:O2eet:O3til:Aeasyil:E2ilyilanim:Aflighty/impulsiveilanimajx:Ofrivolityilanimec:Oflippancy/frivolityilec:Oeaseilig:Ito|facilitateiligajx:Oaccommodationilkomprenebl:Eunderstandablyilpied:Aeasy-goingilromp:Afragilegfad:Ofadingen:Othreadenbul:Oball|of|thread|or|yarnener:Ostrand/plyenfask:Ohank/skeinenig:Ito|(into|a|thread)|drawenpup:Omarionetteafaeton:Ophaetondfag:Obeechocit:Ophagocyteopir:Obuckwheatot:Obassoonbfajenc:Opotteryajx:Ochinacfajf:Ito|whistleil:O6ileg:Ofog|horncfajl:Ito|fileajx:O2ingil:O2enfajr:Ito|burn/flameOfireAburning/fieryajx:Ofireworksej:Ohearther:Osparkestingist:Ofiremanil:Olighterobrigad:Ofire|brigadeobrigadist:O3fighteroprenil:O3|tongsostang:Opokerosxirmil:Ofenderuj:Ofireboxsfak:Ospecialty/sectionestr:Ohead|of|departmentir:Ofakirocxer:Owarthogs:Ito|faxs:O2|messagesil:O4achinesimil:O1csimilet:O2tt:A3ual/realt:Ein|facttor:Oagent/steward/factortorec:Afactorial/unique|factorizationtorgrup:O5|or|quotient|grouptorial:O5ialtur:Ito|invoicetur:O6/billul:Ospecialistultat:Ofacultyxfal:Ito|fallO3akv:Owaterfallang:Ophalanxarop:O4ropebal:Ofrill/trimmingcx:Ito|cut/mowcxil:Oscythecxilet:Osickled:Ito|foldd:O3et:Ito|stumbleig:Ito|drop/topple/overthrowig:Ooverthrow/topplingil:Osnare/stumbling|blockk:Ofalcons:Ito|falsifys:A3esajx:Ocounterfeitsem:Afalse/insinceresig:Ito|falsifysxanceligx:Ito|stumblet:Ocrease/wrinkleus:Ophallusifam:Ofame/reputeA2ousec:O2e/renownili:O2ilyili:Adomesticiliar:Ainformalilinom:Ofamily|namekonat:A2ousul:Ocelebrityafanatik:Afanaticalcfand:Ito|meltigx:Ito|meltvaz:Ocruciblebfanfar:Ofanfare/flourishon:Ito|bragefant:Ojack/knaveazi:Ofantasy/imaginationazi:A6om:Ito|hauntom:Oghost/phantomzfar:Ito|do/makeOactionad:Omakingaon:Opharaohb:Ito|paintb:Odye/paintbist:Opainterboplat:O1lettecx:Ito|stuffcx:O4ingendajx:Othing|to|be|doneenhejt:Afahrenheitigx:Ito|becomeigx:Oeventing:Opharynxise:OPhariseem:Ito|farm/leasem:O3maci:Opharmacymaciajx:Omedicinemaciist:Opharmacistmig:Ito|(out)|farmmist:Ofarmers:O2cet:Ito|fareun:Oflourafasad:Ofaçadecfascin:Ito|fascinateA7ingit:A7edafask:Obundle/bunchbfason:Ito|cutO2afast:Ito|fastafasxism:O2cismafasxist:O5tdfatal:Oill|fateA2-fatedajx:Ocalamityism:Ofatalismbfauxk:Ito|yawn/gapeOjawsifav:Oringworm/scabiesAinfected|with|ringworm|or|scabiesor:Ito|favoror:O4or:Aadvantageous/favorableorant:Opatronorat:Afavoriteoratin:O7ul:Oscurvy|rascalcfaz:Ophasean:O1easanteol:ObeanZfe:Ofairy/spiritbr:Ito|(a|fever)|havebr:Ofeverbr:A4ishbruar:OFebruary'cx:Osludgeder:Ito|federateder:O6ionderaci:Ito|federatederaci:O6ionderaci:A5lderal:A6derism:O6ismin:Ofairy/spiritk:Ito|defecatek:Oexcrementkad:Odefecationkajx:Odung/excrementkajxput:Ocesspoolkund:Afertilel:Ofur/hidelicx:Ohappinesslicx:A3ylicx:Efortunatelylicxec:Ohappinesslieton:Oseriallt:Ofeltmal:O1maleminism:O2inismminist:O6tmur:Othighnd:Ito|splitnd:Ocrackndajx:O4/crevicendigx:Ito|burst/splitndigxint:Acrackednestr:Owindownestrajx:O1dgetnestrobret:O1ndow-sillnestrokadr:O6framenestrokovril:Oblindnestrum:Oshutternikopter:Oflamingoniks:Ophoenixnkol:Ofennelnomen:Ophenomenonnomen:A7alr:Oironr:A3rbeton:Oreinforced|concreterdek:Odeckrdrat:Oiron|wireaferi:O(off)|dayaferl:Ito|(up)|furl/rolllferm:Ito|closeajx:O3ureat:Ofermata/holdent:Ito|fermentent:Oenzyme/fermententad:Ofermentationentem:A7bleentil:Oleavening/yeasti:Ofermiumigx:Ito|closeion:Ofermionit:Aclosedaferoc:Afierceaferol:Ogiant|fennel/stinking|gumaferum:Ito|shoeafervoj:Orailroadbfervor:OzealA3oushfest:Ito|celebrateOpartyad:Ocelebrationen:Ito|(a|banquet)|haveen:Obanquet/feastival:Ofestivallibr:Ocommemorative|publicationon:Ofestoongfet:O1tusicx:O2ishicxism:O5ismor:Ito|stinkor:O1enchor:A1inkyorant:A5ffeuxd:OfiefAfeudalestr:O5|lordism:O5ismocxef:O5|lordul:Ovassalafez:OfezZfi:Adisgustingakr:Ocabancx:Ofiancé/groomancx:Aengagedancxig:Ito|betrothancxigx:Ito|(engaged)|getancxigxint:Aengagedancxin:Ofiancée/brideancxinig:Ito|betrothancxinigx:Ito|(engaged)|getancxinigxint:Aengagedask:Ito|failask:O3ureask:A3edaskig:Ito|abort/quashber:Omuskratbest:Overminbol:Osafety-pinbr:Ofiberbret:O2rilbrigx:Ito|fraybul:Osafety|pin/fibulabusx:Odirty|mouthd:Ito|trustd:O4/confidence/faithdel:Afaithfuldelul:Obelieverdind:Areliable/trustworthyer:Ito|(proud)|beer:Oprideer:A1ouderajx:O1ideerec:O4erul:O1oud|personfam:Aof|ill|reputeg:Ofiggarb:O2-treeguj:O7gur:Ito|depict/representgur:Ofigure/diagram/representationgur:A4ativegurant:Oextrainsekt:Overmin/pestk:Ito|fuckkci:Ofictionkci:A6al/fictitiouskomerc:Oshady|businesskopi:Ito|cribks:Ito|attach/fasten/fixks:Ofixingks:A2edksban:O2ing|agentafiksil:O2erafikskom:A3d-pointafikspunkt:A9tafikstemp:OdeadlineIfil:Osonamentec:Afilamentantrop:Ophilanthropistantropi:O9pyatel:Ostamp-collectingateli:O9ectingi:Oaffiliate/branchig:Ito|adoptigran:Ito|filigreeigran:Owatermark/filigreeiig:Ito|affiliateiigx:Ito|affiliateik:Ofernikoplant:O3in:Odaughteripin:APhilippineipinan:OFilipinoipinanin:OPhilippine|womanistr:Ophilistineisxt:OPhilistinem:Ito|filmm:Omoviemaktor:Ofilm|actormkaset:O4cartridgemrulet:O3ologi:Ophilologyologiist:O7istozof:Ito|philosophizeozof:O8erozofi:O8yozofi:A8ictr:Ito|filtertr:O5tril:O5um:OphylumJfin:Ito|finish/endOendAfinalajx:Oendingal:Ofinaleanc:Ito|financeanc:O6anc:A5ialarangx:Ito|conclude/settledecid:Ito|conclude/settlefar:Ito|(off)|finishfin:Eat|long|lastgr:Ofingergring:Othimblegrofrap:Otouchgropremajx:Ofingerprintgrospur:O9tgrum:Ito|finger/handlei:O2ite|objecti:A5idimensi:A5-dimensionaligx:Ito|(up)|end/endigx:Oendit:Afinishedlabor:Ito|finishleg:Ito|(out)|readn:OFinnn:A3ishnin:O6|womanpag:Ito|(off)|paypag:Ofull|paymentpretig:Ito|finishstaci:Oend-of-the-linestud:Ito|(studying)|finishuzitajx:Ocast-offven:Ito|(up)|endbfipetol:Awantonem:O5nessafirakont:Odirty|storygfirm:OcompanyAfirm/stableE3lya:Ocompanyajx:Ofirmamentet:Osmall|businessig:Ito|fastenafirst:Ocopingbfisk:Ogovernment|treasuryAfiscal/public|revenue|or|treasuryjfisx:Ito|fishO3agl:Oospreyfaden:Ofishing|linehok:O3hookist:O3ermankapt:Ito|fishkaptism:O3ingkaptist:O3ermanverg:O3ing|rodcfizik:OphysicsA5alist:O5istcfiziolog:O4ologisti:O8yiist:O8istafizionomi:O5gnomyafjord:Ofjord/inletcflag:Oflagr:Ito|(up)|flareret:Ito|flickerbflak:Opuddleon:Oflaconjflam:Ito|flameO4Afervent/flamingant:Aablazeennng:Oflamingoig:Ito|inflame/lightigx:Ito|(on|fire)|catchigxem:Aflammableing:Oburnerkap:Ahot-headedmflan:Opancakedr:OFlemmingdr:A5shel:Oflannelk:Osidekafer:Oaccessorykajx:Oside|issue/sideshowken:Fto|the|sidekenigx:Ito|(off)|diverge/wanderkigx:Ito|(astray)|gokokup:Osidelinekvel:Ostudding-sailkvoj:Oside-roadeflar:Ito|smellO4esplor:Ito|(at)|sniffsent:Osmellum:Ito|snuffleeflat:Ito|flatterO6yEcoaxinglyad:Oflatteryul:O6erhflav:OyellowA5bekul:Ogreenhornet:Ayellowishgriz:Abeigeigx:Ojaundicemalsan:Oacute|hepatitis|Aul:Oyellow|manaflebit:Ophlebitisffleg:Ito|nurseist:O4istin:O4m:Ocalmnessm:A3/impassivemul:O3|personhfleks:Ito|bendebl:Aflexiblei:Ito|inflecti:O4xioniajx:O8igx:Ito|bendiil:Oinflexionit:Abentbflik:Ito|mendajx:Opatchaflirt:Ito|flirt/flutteraflok:O1ake/wispgflor:O1owerajx:Oblossomant:Aabloombed:Oflower|bedbrasik:Ocauliflowergxarden:Oflower|gardenpot:O5potbflos:Ito|floatOraftaflot:Ofleetxflu:Ito|flowOcurrent/flowAfluentajx:O2idej:Oriverbed/watercourseg:Ito|flyg:O1ightgaparat:O1ying|machinegarme:Oair|forcegfoli:Oflierghaven:Oairportgil:Owinggludil:Okitegmasxin:Oaircraftid:Ofluidid:A4/liquididajx:O4lini:Astreamlinedor:Ofluorines:Ohigh|tides:A8str:Ito|whisperstrad:O6t:Ofluteafobi:Ophobiacfoir:Ofair/marketej:O3groundskomercist:Omarket|traderefoj:OtimeAoccasionalEtimesn:Ohaynamas:O2stackefok:Osealed:Oearless|seal-type|lifeformus:Ofocususdis:Aeccentricusdisec:O8ityafold:Oslotffoli:Ito|browseOleaf/sheetar:Ofoliagebet:OChardum:Ito|(through)|leafumil:Obrowserbfolklor:OfolkloreA6icrfon:Obackgroundd:Ito|establishdajx:Ofoundationdus:Ofundetik:Ophoneticsetik:A7ofor:Ohearing|aidograf:Orecord-playerologi:Ophonologyologiist:O7istt:Ito|(up)|spring/wellt:Osource/springtan:Ofountaintanel:O1ntanelletoar:Odomaintolingv:Osource|languagetplum:Ofountain-pentprogram:Osource|programZfor:Adistantbat:Ito|(back)|beatbrul:Ito|(down)|burnbrulig:Ito|(down)|burncej:Ogreenhousedon:Ito|abandondrink:Ito|(up)|drinkdriv:Ito|(away)|driftest:Ito|(away|or|absent)|beest:Oabsenceest:A4test:Ein|the|absenceestant:Oabsenteeestant:A5estantec:O5eeismestantlist:O7|registerestec:O4ce/non-attendancefikul:Oearwigflankigx:Ito|(astray)|goflu:Ito|(away)|flowflug:Ito|(away)|flyfos:Ito|(away)|digges:Ito|forgetgesem:A5fulgx:Ito|forgegxist:Osmithig:Ito|(rid|of)|remove/getig:Oabolitionir:Ito|(away)|goir:Odeparturejxet:Ito|(away)|throwjxetajx:Otrash/wastejxetindajx:O9ek:Oforkkeg:Opitch-forkkigx:Ito|(off)|split/branchklin:Ito|(off)|wardkoment:Ito|(out)|commentkomuniig:Ito|excommunicatekonduk:Ito|divertkonduk:Ocarrying|off/dischargekondukad:O9ff/dischargekonfes:Ito|(up)|renounce/givekonsent:Ito|relinquish/waivekonsum:Ito|(up)|usekur:Ito|(away)|runlas:Ito|abandonlas:O6mentlasitec:O9tlav:Ito|(off)|washlesiv:Ito|(off)|washlog:Ito|seduceuform:Ito|form/shapeOshapeA4dE5al:Aformalalajx:O5ityalism:O6smangx:Ito|(away)|eatat:Oformatet:Ito|(away)|putetej:Oshedik:Oantikej:O2hillikmangxul:O2eaterikurs:O7ol:Oformalinorekon:Opattern|rekognitionort:Ito|(away)|fail/dieul:Ito|formulateul:O6ular:Oblank/formcforn:Ostove/furnaceagx:Ito|(away)|swimom:Ito|disownaforpas:Ito|(away)|passaforpel:Ito|(away)|chaseaforpermes:Ofurlough/leave/passaforport:Ito|(off)|carrybforpren:Ito|(away)|takeebl:Adetachableaforrab:Oabstractionaforreag:Ito|abreactaforregal:Ito|(off)|brushaforrest:Ito|(away)|stayaforrev:Ito|(away)|dreamaforsalt:Ito|(away)|bound|off/jumpaforsend:Ito|(away)|dismiss/sendaforsiti:Oforsythiaaforsku:Ito|(off)|shakebforst:Ocultivated|forestrek:Ito|(out)|crosscforsxov:Ito|moveOshiftigx:O4ufort:Ostrength/forceA2ongE5lyec:Oforce/strengthempigx:Ito|(out)|expire/runen:Ito|(away)|keepepian:Ogrand|pianoig:Ito|fortifyik:Asturdy/robustikajx:Ofortificationikec:Osturdinessikig:Ito|fortifyimig:Ito|(away)|discourage/scareimig:Odeterrenceimig:A7t/forbiddingostrecx:Oexertionrancx:Ito|(off)|cutrans:Ito|(away)|passres:Ofortressun:O3uneurn:Ito|(away)|turnaforum:Oforumbforuz:Ito|(away)|wearit:Aworn|awayaforvelk:Ito|(away)|witherbforvetur:Ito|(away)|driveOdepartureaforvisx:Ito|deleteaforvojagx:Ito|leavelfos:Ito|digO1tchad:O1ggingajx:Ohole/pit/ditchfor:Ophosphorusforesk:Ito|(in|the|dark)|glowforesk:Ophosphorescenceforesk:A9centil:Ospadeili:Ofossililiigx:Ito|fossilizet:Opost/poletfot:Ito|photographO9ad:O9yajx:O4/photographaparat:Ocamerael:Oarm-chairil:Ocameraist:Ophotographerograf:Ito|photographograf:O9ingografad:O9yografajx:O9ografart:O9yografi:O9yografil:Ocameraografist:Ophotographerokopi:O4printon:O4nosfer:O4sphereosintez:O5ynthesisefrag:Ostrawberryil:Afragilement:O3ment/piecement:A7arymit:Oreedcfraj:Ito|spawnO4t:Ito|freightgfrak:Oevening|clothesas:Ito|shatter/crushci:Ofractioncikorp:O7|or|quotient|fieldcistrek:Oforward|slash/fraction|barsen:Oashtur:Ofractureefram:O2mework/substructureason:O1eemasonason:Amasonicb:Oraspberrybuj:O8|bushffranc:OFrench|manA5i:Ofranciumin:OFrench|womanium:Ofranciumlingvan:OFrench|speakerdfrand:Ito|relishAattractive/enticingajx:Odelicacy/tidbitem:Asweet-toothedcfrangx:Ito|fringeO5ipan:Oalmond|pastecfrank:OFrancA3kisholin:Ofrancolin");
  prefix = fillDictionary(prefix, "dfrap:Ito|hit/knockOknocket:Ito|pat/tapinstrument:Opercussion|instrumentcfrat:Obrothererkul:Opuffinin:Osisterafrauxd:Ito|defraud/swindledfrauxl:Obachelor/Mr.Asingle/unmarriedec:Obachelorhood/being|unmarriedin:O7ette/Misscfraz:Osentenceeologi:Ophraseologyist:Oflatterer/coaxerafregatkapitan:Ocaptainafrekvent:Ito|frequentcfremd:Aunfamiliarul:Ostrangerulin:Ofemale|strangerifrenez:Ito|(crazy)|actOcraziness/insanityA3yec:O3iness/insanityet:Aloopy/nuttyig:Ito|maddenigx:Ito|(crazy)|goul:Olunaticulej:Oinsane|asylumafresk:Ofrescodfresx:A3h/recentdat:Arecentdat:E5lyigant:A1freshingcfrid:Acold/frigidig:Ito|refrigerateuj:O9orafrikativ:Ofricativebfring:Ofinchel:Osiskinefripon:Ito|cheat/swindleOcrookAcheatingajx:Oscam/swindleet:Olittle|rascalbfris:OFrisianin:O6|womandfrit:Ito|fryOFrench|fryil:Ofrying-panilari:O1itillarybfrivol:O2volityA5ousffriz:Ito|styleOhair-doist:Obarber/hairdresseristin:Ofemale|hairdresseron:OFrisianonin:O6|womanafromagx:Ocheeseefront:Ito|confront/faceOfrontEoppositemast:Oforemaston:Opedimenthfrost:Ito|freezeO1ostig:Ito|freezeigil:O5rigit:A1ozenigxint:A5vund:O2stbitevundit:A7tengfrot:Ito|rubOfrictionad:O7et:Ito|grazepurig:Ito|scrubpurig:Aabrasivepurigil:O7qfru:Ito|(early)|beAearlyE4gileg:Orookkt:Ito|(fruit)|bearkt:Ofruitktarb:O4-treektarbej:Oorchardktodon:Afertile/fruitfulktoport:Afruitfulmaten:Eearly|in|the|morningnt:Oforeheadntajx:Opedimentntost:Ofrontal|bonestr:Ito|frustratestr:O7iontemp:Eearly/soonbftiz:Otuberculosisul:Operson|with|tuberculosisbfuel:Ito|fuelO3bfugx:Ito|(away)|runOrunning|away/fleeingafuksi:Ofuchsiabfulg:Osootor:Ofireflyafuligul:Otufted|duckafulik:Ocootcfulm:Ito|lightenO4ningkoton:Oguncotton/nitrocelluloseffum:Ito|smokeO4ajxit:A4dkupe:O3ing|cartabak:O7tobaccotub:Ochimney/smokestackefund:Obottom/foundation/backgroundament:Ito|establish/foundament:Ofoundationament:Afundamentalamentism:O9lismdfunebr:Ito|mournO4ingA4fulajx:Ofuneral|serviceafunel:O2nelafung:O2gus/mushroomhfunkci:Ito|functionO7ig:Ito|control/operate/workonal:Ofunctionalpret:Ain|working|orderseri:Ofunction|seriesul:O7aryvic:O7|sequenceafunt:Opoundbfuragx:Ito|forageO1dderdfurioz:Ito|(furious)|rage/beAfuriousec:O2y/rageegigx:Ito|(amuck)|runefuror:Ito|(a|big|hit)|beOhit/crazeAvery|popularkant:Ohit|songlibr:Obest-sellerafurunk:Oboil/furunclebfurz:Ito|fartO3afusil:Orifleafusten:Ofustiandfusx:Ito|botchit:A4edkontakt:Oshort|circuitpalp:Ito|fumbleefut:Ofootbal:Osoccerur:Ofuture|tenseurism:O4ismurist:O6tafuzelagx:O1selage/hullafuzilier:O2ilieragabardin:Ogaberdineagabi:O2ionagadolini:O1doliniumagael:AGaelicagaf:Ogaff/sparagagat:Ojethgaj:Afun/happyak:Olignum|vitaeakol:Oguaiacolig:Afunl:Ogall/oak-applelard:O3iardn:Ito|earn/gain/winn:Obenefit/profitBgal:Obileaksi:Ogalaxyaksi:A3cticant:A2lantanteri:Otoilet|accessoriesantin:Ogallantinebuled:Ojacamar-type|lifeformdukt:Obile|ducteas:Ogalleassen:O2enaeopitek:Oflying|lemurer:Ogalleyeri:O4ryez:AGaloissic:A2icianicism:Ogallicismimati:Ogibberish/nonsensein:Ofowlinol:Omoorheninul:O6ium:Ogalliumjon:Ogold|braid/stripeon:Oribbon/tinselop:Ito|gallopop:O5op:E5ingosx:O2oshvan:A2vanicdgam:O1mut/key/scaleasx:O1iterb:Olegel:Omess|kithgan:AGhanaan:O4iandarv:Ogandharvagli:O2gliongren:O3renegster:O3stert:Oglovetpup:Ohand|puppetbgap:Ito|gapeul:Oloaferbgaragx:Ito|(away)|putOgaragedgaranti:Ito|guaranteeO8ajx:Opledge/securityul:Ohostageagarb:Osheaffgard:Ito|guardOguardangxel:O4ian|angeleni:Ogardeniaist:Oguardostarant:Osentryagargar:Ito|gargleagargojl:O3oylebgarn:Ito|garnishizon:O2risonagarol:Ojayrgas:Ogasbotel:O2|cannister/cylinderdukt:O3pipelinekon:OGasconmuf:Omantlepedal:Oaccelerator|pedalt:Ito|(a|guest)|bet:Oguesttam:Ohospitalitytam:A6bletamec:O6litytej:O2tel/inntejestr:Olandlord/innkeepertejestrin:O4ady/innkeepertig:Ito|(up)|accommodate/puttigantin:Ohostesstlogx:Ito|staytrostomi:Ogastrostomyagauxl:AGaulishagauxs:A2ssianhgaz:Ogauzeel:O1zelleet:Operiodicaletar:Opressetist:Ojournalistetistin:Ofemale|journaliston:Olawnoner:Oturf/sodageamant:Oloverageauxskultant:Olistenerageav:Ograndparentdgeedz:Ospouseec:Omarriageigx:Ito|(married)|getigxint:Amarriedbgefiancx:Oengaged|personigx:Ito|(engaged)|getagefil:Ooffspringagefrat:Osiblingagehen:Ohellbgej:Ogay/homosexualsx:Ogeishabgek:O1ckoed:O4-type|lifeformbgel:Ofrostaten:Ogelatinebgem:O1mist:Ojewellerzgen:OgeneA3ticar:O2omecian:O2tianealog:O2ealogistealogi:Ofamily|tree/genealogyealogi:Agenealogicalep:Ograndchilder:Ito|beget/generateer:Agenitaleraci:O2erationerad:O9eral:O5letik:O3ticsi:O2iusi:Aingeniousist:Obroomitiv:Ogenitiveiul:O3usocid:O2ocideot:O2etr:O2der/genust:Oethnic|groupu:Ito|kneelu:O3uigx:Ito|kneelageodezi:Ogeodesydgeograf:O2grapheri:O7yi:A7iciist:O7ercgeolog:O2logisti:O5yiist:O5istdgeometr:O2metrician/geometer|mothi:O6yi:A6iciist:O8ianageotrup:Oearth-boring|dung|beetlecgepatr:OparentA5alE7lyagepraav:Ogreat-grandparentagepranep:O9dchildagerani:Ogeraniumagerbil:O2bilbgeril:Oguerilla|waran:O7egerman:OGerman|manA5em:Apro-Germanin:OGerman|womanium:Ogermaniumcgest:Ito|gestureO6lingv:Osign|languagebgib:Ito|jibeon:Ogibbonagicxet:Oticket|windowbgigant:OgiantA1gantic/hugeagigatun:O3tonagilotin:Oguillotinedgimnastik:Ito|do|gymnastics/exerciseOgymnasticsej:O2ist:O2nastbgimnazi:Ohigh|schoolan:Ostudentbgine:Oguineace:Owomen's|quarters/gynaeceumagingiv:Ogumaginostem:Ogynostemiumbgips:Ito|plasterO6|of|Parisagirland:Ogarlandagiroskop:Ogyroscopeagist:Oyeastagitar:Oguitarrglac:Oplate|glasse:Oicingi:O1ei:A1yiajx:O1e|creamiar:Oglacieribalaist:Osweeperiej:Oglacieriig:Ito|freezeiigx:Ito|freezeiinsul:Oicebergimont:O6ipluv:Osleetirompil:Oicebreakeris:Oglacisisxrank:Ofreezer/ice|boxitenej:Ocold|storage/freezeriuj:Ofreezer/ice|chestcglad:Ito|ironil:O3otabul:O3ing|boardaglan:Oacornaglareol:Opratincoleaglas:Oglasscglat:Asmoothig:Ito|smoothigx:Ito|(smooth)|becomebglav:Oswording:Oscabbardbglazur:Ito|glazeO4bgliciriz:Olicoriceajx:O7bglim:Omicabril:Ito|gleamaglired:Odormouse-type|lifeformbglis:Ito|glideil:O4rjglit:Ito|slip/glideA3peryboben:Oshuttleig:Aslipperyil:Oskatekur:Ito|skatekuril:O4pilk:Ohockeypunkt:Afloating-pointveturil:Osleighiglob:Oglobeet:Ocorpuscle/marblekrajon:Oballpoint|penlud:Obowlingludad:O6skribil:Oball-point|pentavol:Ospherical|layertrotul:Oglobe-trotterus:O4fglor:Ito|glorifyIto|glorifyO3yAfamous/gloriousig:Ito|celebratekant:Opaeanbglos:Oglossar:O4aryaglot:A2ttalkglu:Ito|glueO3ajx:O3bend:Oadhesive|tapeec:Astickygl:Ito|gurgleigx:Ito|stickmark:O4ert:Ito|swallowte:Obuttockteg:Ito|(down)|gulpcgnom:Ognome/goblinA3ishon:O3onagnu:Owildebeestqgo:Ogolej:O1allf:Ogulflfet:Obaylflud:Ogolfmb:Ookrang:Ogongnore:O2orrheard:AGordianrgx:Othroatrgxdolor:Osore|throatrgxnod:OAdam's|applergxotrancx:Ito|(the|throat|of)|cutril:Ogorillat:OGothtik:Ogothic|styletik:AGothicegrac:Ogracei:O4fulnessi:A7i:E7lyiec:O7nessdgrad:Odegree/gradeAquantitative/degreeient:Ogradientus:Ogon/nine-tenth|degreemgraf:Ocount/earle:Ograph/graph|of|a|relationeik:O4|theoryeteori:O9ryik:O4icsik:A6ikajx:O4it:O4iteland:Ocountyolog:Ohandwriting|analystologi:O9g|analysisologiist:O9g|analystuj:Ocounty/earldomagrajl:Osleetagrajn:Ograinagrak:Ito|croak/caw/raspegram:Ogramatik:O3maratik:A5ticalofon:Orecord-playerofondisk:Ophonograph|recordagranat:Opomegranatepgrand:OsizeAlargeagx:Aelderlyagxul:Osenior|citizenanim:Amagnanimousanimec:O7ityec:Osizeeg:Aenormous/hugeeg:E7lyig:Ito|increaseigx:Ito|growioz:Amagnificentmast:O1inmastpart:Efor|the|most|partskal:Alarge-scalevalor:Acostly/valuablebgranit:OgraniteA6agrapfrukt:O2pefruitagrapl:O3pling|ironagrapol:Oclustercgras:Ito|greaseOfat/greaseA2ty/greasydgrat:Ito|scratchad:O3bbleul:Ito|congratulateul:O9tionjgrav:Ito|(important)|beAimportant/seriousec:Oconcern/importanceed:Apregnantedig:Ito|impregnateedigx:Ito|conceiveit:Ogravityur:Ito|engraveurajx:O5inguril:O8|tool/gravercgreg:Oflock/herdAherdej:Opastureagrejs:Osandstonebgrek:OGreekin:O4|womanegren:Ograinad:O1enadeadist:O5ierat:Ogarnetskarab:Ocorn|weevilagres:Ograssogri:Omealajx:Oporridgef:Ovulture/griffinfel:Ostylusl:Ocricketmac:Ito|grimacemac:O6mp:Ito|climbmpmast:Opolenc:Ito|grind/gratencad:O1atingp:Oinfluenzaz:Ograyz:A3zu:Ofire-dampbgroenland:AGreenlandan:O8erbgros:Ogooseberryx:Ocoinbgrot:Ocaveesk:Agrotesqueogru:Ocraneed:O4-type|lifeformm:Ogroom/stablemanmbl:Ito|grumblemblul:O6rnd:Ito|strandnd:Oground/soilndoscienc:Osoil|sciencendtavol:Olayer|of|earthnt:Ito|gruntp:O1ouppig:Ito|grouppigx:Ito|(a|group)|formpoid:Ogroupoid/set|with|an|internal|composition|lawz:O1avel/gritaguan:Oguanoagubernator:Ogovernorbguberni:Oprovinceestr:Ogovernorbgudr:Ito|tarO2aguf:Oeagle-owlbgujav:Oguavaarb:O4agulasx:Ogoulash/stewagulden:Oguilderbgum:Ito|eraseO4r/gumagupi:Oguppiedgurd:Ito|(out)|grindOorgan-grinder's|organist:O9derit:Ahackneyedagurnard:Ogrey|gurnardegust:Ito|tasteO4ig:Ito|flavor/seasonum:Ito|tasteum:Osense|of|tasteegut:Ito|dripO3/dropaperk:Ogutta-perchaet:Odropletmalsekig:Ito|bastecguvern:Ito|tutorist:O4istin:Ogovernessagvardi:Oguarddgvat:Ito|(an|eye|on)|keepemal:AGuatemalanemalan:O9sekv:Ito|tailggvid:Ito|guideO4il:O4-bookist:O4libr:O4bookmark:Ito|beaconmarkil:O5agvine:AGuineaagxangal:Ojunglefgxarden:Ogardenbrasik:Ocabbageist:Ogardenerkobold:O5|gnomekultur:Ohorticultureumad:Ogardeningagxazband:Ojazz|banddgxem:Ito|groanO4/moanel:Otwineldu:Opair|of|twinsugxen:Ito|disturbOtroubleAbothersomeajx:Oinconvenience/troubledarm:Opolice|officereral:Ageneraleral:E6lyeralec:O6ity/universalityeralig:Ito|generalizer:O2retil:Apolitetilajx:Ocourtesytilec:Opolitenesstilhom:Ogentlemantilhomec:A8like/ladyliketilhomin:Oladytilhomin:A3-liketleman:Ogentlemantlemanec:A8liketlemanin:Oladytlemaninec:A3likedgxerm:Ito|germinateO3an:OTeutonan:A5icagxet:Ojetty/pieregxib:OhumpA1nch-backedajx:Obump/humphav:Ahunch-backedul:O4backagxig:Ojigagxihad:O1hadbgxin:Oginz:Ojeanshgxir:Ito|endorseO6mentaf:Ogiraffeafed:OGiraffidae|lifeformant:Oendorserat:O6eebl:A5ableil:Ocommercial|paper/negotiable|instrumentagxisatend:Ito|(for)|waitagxisdatig:Ito|updatebgxisfund:AthoroughgoingE7lyagxisost:Adiehardagxisviv:Ito|(through)|goagxog:Ito|jogfgxoj:Ito|(glad)|beOjoyAhappyec:Ojoyig:Ito|(glad)|makeig:Ajoyfulagxonk:Ojunkjgxu:Ito|enjoyO4mentad:O8am:Ohedonismst:Aexactst:Eaccuratelystatemp:Eat|the|right|time/in|timestec:Oaccuracystig:Ito|(right)|adjust/putstokaz:Ein|that|caseahacx:Ito|cross-hatch/shadeahadis:Ohadithahadron:O2ronahafni:O1fniumahag:AHaguianahajk:Ohaikuchajl:Ito|hailO3er:O3stonedhak:Ito|chopet:Ito|diceil:Oaxeviand:Oground|meatphal:Ohall/large|roomadz:Ito|stinkadz:O1enchadz:A1inkyebard:Ohalberdeluja:F2lelujahiot:Oabaloneiotis:O6o:Ohalot:Ito|stoptej:O3ter:Odumbbelltereg:Obarbelltig:Ito|stoptostrek:Obreaktstrek:O4ahamak:Ohammockahamamelid:Owitch-hazelahamburger:Ohamburgerbhamstr:Ito|hoardOhamsterahandbal:O1ndballahangar:O2garahant:Ito|hauntahapaks:O1pax|legomenonzhar:O1irar:O3arzon:O3|ribbonbros:O3brushd:Ito|hardeneg:Obristleem:Oharemfask:Oponytailfendad:Ohair-splittingfendemul:Onit-pickering:Oherringkovrit:Ahairylig:Oplaitmon:Aharmonicmoni:Ito|(together)|harmonize/fitmoni:Oharmonymoni:A5iousmonik:O6canis:O2nessp:Ito|(the|harp)|playp:Oharppi:O3ysap:Oshampoostarig:Ahair-raising/gruesometuber:Obuntuf:Olock|of|hairchast:OhasteAhurriedE6lyahasxisx:Ohashishahauxs:Oboomchauxt:Oskinmakul:Oblemishveziket:O1isterfhav:Ito|haveaj:AHawaiianebl:Aavailableen:Oport/harborenimpost:Oanchorage/harbor|feesig:Ito|(hold|of)|getehazard:Ito|gamble/riskOchance/accidentAaccidental/randomEby|chancelud:O(of|chance)|gameahebre:OHebrewaheder:Oivybhegemoni:Ito|dominateO5ncedhegx:Ohedgead:O3ingant:O3ertondil:O4-clippersohej:F1ym:Ohomem:Adomesticm:Eat|homemec:Ahomeymen:F3menklav:O3|keympagx:O4pagemsidem:Astay-at-homemve:Ohomesicknessmvest:Odressing-gownt:Ito|heat/stoketad:O3ingtajx:Ofueltil:Oheateraheksaedr:O1xahedronahektar:O1ctareahektogram:O3ogramahektolitr:O4litreahektometr:O4metrethel:Abright/lightblu:A5|blueebor:Ohelleboreen:OGreeken:AHellenicer:Ohelleriant:Osunfloweric:Ohelix/propellerigx:Ito|clearik:Osnailikopter:Ohelicopteriotrop:O3otropeium:O3ump:Ito|helpp:O3p:Aauxiliarypantin:Ofemale|assistantpem:Ohelpfulnesspem:A6vet:OHelvetianahematit:Ohematiteahemeralopi:Onight-blindnessahemikrani:Omigraineahemisfer:Ohemisphereahemoroid:O2orrhoidahen:Ito|whinnydhepat:Oliverajx:O4it:Ohepatitiskolbas:Oliver|sausageaherakle:Ocow|parsnip/hogweedaheraldik:Oheraldrydherb:Ograss/herbej:Omeadowobed:Olawnoverd:Agrass-greenghered:Ito|inheritO6ance/heritageAhereditaryajx:Oinheritance/heirloomant:Oheirec:O1redityig:Ito|bequeath/leavedherez:Ito|(heresy)|commitOheresyA3ticalul:O6ahermit:A2mitian/self-adjointaherni:O2niahhero:O2oA3icajx:O5|actec:O4smen:O4nin:O5/heroineld:Ito|heraldld:O5aherpat:O2pesaherpet:O5ahetman:O1tmanahevisid:AHeavisidesehezit:Ito|hesitate/waverO6ionad:O9/waveringant:A5ntem:Aindecisiveahiacint:Ohyacinthahiat:Ogapahibacx:Ohibachiahibisk:O2iscusbhibrid:OhybridA5ihidr:O1draarg:Oquicksilverofobi:Ohydrophobiaogen:O4genogenbomb:O7|bombokarbid:O4carbonolog:O4logistoplan:Oseaplaneops:Odropsyahien:Ohyenaahierarhxi:Ohierarchyahierarki:O8ahieraux:Ayesterday'sbhigien:OhygieneA5icahik:Ito|hiccupahilbert:AHilbertsahimen:Ohymenahimn:Oanthem/hymnihin:Ohinnyd:OEast|Indiandeuxrop:AIndo-Europeandin:OEast|Indian|womandoeuxrop:AIndo-Europeandoeuxropan:O9eandogxerman:A9eandu:OHindudu:A4bhiperbol:Ohyperbolaoid:O7oidahipereben:O4planeahiperon:O4onahipertekst:O4textahipi:Ohippiedhipnot:OhypnosisA4ticig:Ito|hypnotizeist:O6stahipocikloid:O2ocycloidahipoglos:Ohalibutahipokasxtan:Ohorse|chestnutchipokrit:Ito|dissembleAhypocriticalul:O7ebhipopotam:Ohippopotamused:O9us-type|lifeformahipostaz:Ohypostasisbhipotek:Ito|mortgageO7ahipotenuz:Ohypotenusechipotez:Ito|hypothesizeO8sA6ticalahipotrohxoid:O4rochoidchirt:Ito|bristleA5yig:Ito|tousleahirud:Oleechahirund:Oswallowohis:Ito|(up)|hoistil:Ohalyardop:Ohyssoppan:OSpaniardpan:A4shpanin:O6|womant:Otissueteri:Ohysteriateri:A6calteri:E9lytologi:Ohistologytori:O4ry/storytori:A5icaltoriist:O6antrik:Oporcupineahobi:Ohobbyahoboj:Ooboeahodiaux:Atoday'sahoj:Fahoyghok:Ohooke:O1ckeyfaden:Olinefisx:Ito|(with|a|hook)|fishfisxil:Ofishing|rodfisxkapt:Ito|(with|a|hook)|fishfisxkaptant:Oanglerihol:Aheyandan:ODutchmanandan:A4d:Oholdmi:O2miumografi:O2ographyografiajx:O6mokauxst:O3caustomorf:A3morphicAhom:OpersonAhumanam:Ocharity/loving|one's|neighborsamas:Ocrowdar:O(of|people)|groupbucxad:Omassacreec:Ohumannessekip:Ito|manekip:Ocreweomorfi:Ohomeomorphismeomorfi:A9iceomorfiec:O9ismeopat:O4patheopati:O8yeopatiist:O8ogen:A2ogeneousomorfi:O3morphismomorfi:A9coteti:O3thetyoteti:A7icotetiajx:O9|figureotop:A4opicotopec:O6yportil:Ostretcherrab:Ito|abductrab:O5ionrabant:O5orchonduras:AHonduranan:O7anin:O7|womanahonest:Ahonestfhonor:Ito|honorO4A4aryari:Ito|(a|fee)|payari:Ofeeindec:Orespectabilityghont:Ito|(ashamed)|beOshameAashamedig:Ito|shameig:Ahumiliatingigit:Aashamedind:Ashamefulbhop:FjumpIto|hoprhor:O1ur/timeA3'sE3ly/per|hourar:Oscheduled:Oband/horde/troopde:O1rleyizont:Ohorizonizontal:O6talizontal:A9/levellogx:Oclocklogxet:Owatchlogxist:O4makermon:Ohormonemontril:O1ur|handor:Ito|(horrified)|beor:Ohorroroskop:O2oscopetikultur:O2ticulture");
  prefix = fillDictionary(prefix, "ahospital:O1spitalchosti:O2tmontril:Omonstranceuj:Opyxahotel:Ohotelbhttp:Fhttps:F3sPhu:Fboof:Ohoofffer:Ito|shoeffer:Ohorseshoefofer:Ito|shoel:Ohullligan:Opunkm:Ohumusman:A2anemanec:O4itymanig:Ito|humanizemanism:O5smmanist:O6tmer:O2erusmid:Odampnessmid:Ahumid/dampmidec:Odampnessmil:Ahumblemilec:O2ilitymilig:Ito|abasemilig:O4mentmilig:Ahumiliatingmiligx:Ito|(humbled)|bemiligx:Oabasementmor:Omoodmur:Ohumormur:A4ousnd:Odognd:Acaninendacx:Omonsterngar:OHungarianngar:A8ngarin:O8|womanp:Ohooterra:Fhurrayra:Ito|cheerra:O4ri:Ohourirl:Ito|howlrl:O3sar:Olight|cavalry|soldierz:Obeluga|sturgeonahxaldean:OChaldeanahxalif:Ocaliphahxalkogen:Ochalcogenahxameleon:O2meleonahxamemor:Ocloudberrychxan:Okhant:OKhanty/Ostiakuj:Okhanatedhxaos:Ochaos/tangleA3ticE6allyig:Ito|(chaotic)|makebhxaradri:Oplovered:O5-type|lifeformahxartum:AKhartoumianchxasid:OHassidA5icism:O6mahxazar:OKhazarahxeloni:Ogreen|sea|turtlechxemi:Ochemistryajx:O4calist:O4stahxil:O1ylechxim:O2me/chymuser:O1imeraer:A5icalchxin:OChineseA6in:O6|womandhxirurg:OsurgeonA3icali:O3eryiist:O4onahxitin:Ochitinahxolecistit:O1olecystitisahxoler:O4raahxolesterol:O4steroljhxor:O2rus/choirajx:Ocarolal:Ochoralan:O2ir|singerd:Onotochorddul:Ochordatee:OSaint|Vitus's|danceej:Ochoir|loftestr:O5directorjamb:O2riambahz:Fhzbia:Ito|braygrad:Eto|some|extentaibeks:Oibexaiber:AIberianaibis:Oibisaidar:Ooffspringoide:Oideaal:O3lal:A4alist:O4istkonfuz:Oconfusion|of|ideasnt:Oidentitynt:A5calntajx:O5tyntec:O7ntig:Ito|identifyntobildig:O5ty|mappingografi:Opicture|writingologi:Oideologyologi:A7ologiist:O6ueaidili:O1yllaidiom:Olanguagedidiot:OidiotA4icec:O3cyism:O3meidol:O1olan:O3atorfigur:O3kult:O3|worshipserv:O9ipaidu:O1esaif:Ito|izeaignam:Osweet|potato/yamaignor:Ito|ignorebigumen:Ohegumen/igumenin:O6e/hegumeniaaigvan:Oiguanaaigx:Ito|becomeeikon:Oiconoklast:O3oclastostaz:O4stasisrompad:O4clasmrompist:O8tdiks:OXkrur:Oknock-kneed|legod:Otickradi:OX-rayaikter:Ojaundicebile:Oileumks:Ohollyailici:Ostar|aniseailium:Oiliumailprogram:Otool|programailumin:I1|enlighten/illuminatebilustr:Ito|illustrateajx:O8iondiluzi:Ito|deludeOillusionAmisleadingist:Omagicianhimag:Ito|imagineO5ationA6ryajx:Omental|imageebl:Aimaginableem:A6tiveinar:Ocomplex|or|imaginary|numberinar:Aimaginaryaimam:O2maimanent:A1manent/intrinsicfimit:Ito|imitateO5ionad:O8ajx:O8il:Oemulatorit:Acounterfeit/fakeaimpedanc:Oimpedancebimperativ:O3rativeA9iimperi:Ito|ruleOempireAimperialal:Otop|deck|of|vehiclealism:Oimperialismestr:Oemperorestrin:O2ressism:Oimperialismist:O9tdimpertinent:A4tinentajx:O9ceec:O9ceul:Oboorcimpet:Ito|rushOimpetusA5ouscimplic:Ito|implyO3icationA8ve/impliciteimplik:Ito|entangleaci:Oimplicationaci:A8veajx:Otangleant:Aconfusingdimpon:Ito|impressA6iveajx:O7onec:O7venessgimport:Ito|importO5ationA5ad:O5ationajx:O5ist:O5ermonopol:O5|monopolypimpost:Ito|taxO2Afiscal/taxdeklar:Otax|returndepren:O3deductionebl:Asubject|to|taxevitul:Otax|dodgerist:O2-collectorkonsilist:O2|consultantkvot:Oassessmentmalplialtig:Otax|reductionoficej:O2-collector's|officepagant:O2payerplialtig:O2|increaseprem:O3burdensistem:Oftax|systemaimpotent:Aimpotentfimpres:Ito|impressO6ionebl:A9able/sensitiveigxem:A9able/sensitiveionism:O9ismionist:O9istdimproviz:Ito|improviseEextemporaneouslyajx:Oimprovisationist:O7ereimpuls:Ito|impelO2ulseA5iveem:A8igxem:A8bimput:Ito|attribute/imputeO7ion/imputationcimun:Aimmuneec:O4ityig:Ito|immunizedinauxgur:Ito|inaugurateO8ionA7laci:Ito|inauguratebincendi:OfireAincendiarycincens:Ito|(incense)|burnOincenseuj:Ocenseraincest:Oincestbincid:Ito|(on|a|surface)|fallAincidentbincit:Ito|provokeet:Ito|teaseainciziv:OincisorVind:Ito|(worthy|of)|beeks:Ito|indexeks:O4i:O2iumian:OAmerican|Indianian:AIndianic:Oindexien:Ocalico/chintziferent:Aimmaterial/indifferentiferent:Eindifferentlyiferentec:O9ceig:O3goig:A5igesti:O4estionign:Ito|(offended)|beign:Ooffense/scandalign:Aindignantignig:Ito|annoyigokolor:Aindigoiguj:O5igxen:Onativeigxen:Aaboriginal/nativeigxenauxstrali:A9igxenauxstralian:O9|Australianik:Ito|indicateik:O6ionikajx:Ocircumstantial|evidenceikativ:Oindicative|moodikil:Ogaugeividu:Oindividualividu:A9ividuec:O9ityividuism:O9ismividuist:O9istonezi:AIndonesianonezian:O9onezianin:O9|womanukt:Oinductionulg:Ito|(lenient|with)|indulge/beulg:Oindulgenceulg:Alenientulgem:A6/mercifululgenc:Oindulgenceulgigx:Ito|indulgeustri:O3stryustri:A6ialustriist:O9istustriul:O9istcinerci:O1ertiaA6lum:A7dinert:O6A4ec:O4iaec:A6liinfan:OchildA4ishagx:O4hoodec:A4ishet:Otoddler/babylit:Ochild's|bedprostituad:O4|prostitutionteri:Oinfantryterian:O7maneinfekt:Ito|infectO5ionAcontagiousad:O4mination/infectionit:A9ed/infectedbinfer:OhellAinfernalbinfest:Ito|infestO5ationainfim:Ogreatest|lower|boundeinfinit:OinfinityA6eezim:O7simaligx:Ito|(infinity)|approachiv:Oinfinitiveainflaci:O2lationainflam:O4mmationainfleks:A3ectiondinflu:Ito|influence/affectO8A6tialigx:Ito|(influenced)|becomeginform:Ito|inform/reportO5ationajx:O9nej:O1quiry-officeigx:Ito|(out)|findleter:Onews|lettermend:Oinquirybinfuz:Ito|infuseajx:Oextract/infusionaingenr:Ofeminine|genderaingot:Oingotaingredienc:O2redient/componentaingusx:OIngushaingven:Ogroinaingxenier:Oengineeriinic:Ito|initiateIto|initiateial:O5liat:Ito|startiat:Ito|startiat:Ainitiatediatem:Oenterprisingiatint:Ooriginatoriatint:O9dinjekt:Ito|injectO5ionajx:O8il:Osyringevink:Oinkandesk:A1candescentlin:Ito|(inclined)|belin:Otendency/inclinationlin:Ainclinedlinig:Ito|inducelinigx:Ito|(inclined)|beluziv:Ito|includeluziv:A4siveluziv:E4ding/inclusivelyluzivec:O4sionognit:O2ognitorustajx:O1lay|workub:Onightmareub:A7ishubaci:Oincubationubator:O6orubsongx:Onightmareuj:Oink-wellus:Oanvilvizici:Oinquisitionvizitor:O7orbinokul:Ito|inoculateOvaccinationbinsekt:Oinsectforpelil:O5|repellenteinsid:Ito|(a|trap)|setOtrapAinsidiousant:Oattackerem:Ainsidious/treacherousainsign:Obadge/insigniaginsist:Ito|insistO5ence/pressureAemphaticEinsistentlyad:Ito|persevere/persistad:Oinsistence/pressureem:A7tainskripci:O2criptionainsolent:Aimpertinent/insolenteinspekt:Ito|inspectO6ionad:O9ist:O6oror:Osupervisor/inspectordinspir:Ito|inspireO5ationA5ingajx:O5ationcinstal:Ito|installajx:O6ationil:O6erainstanc:Oauthority/courtcinstig:Ito|encourage/urgeO8ment/urgingil:Oincentiveainstinkt:O1stinctainstituci:O4tutionainstitut:O7ekinstru:Ito|teachOinstructionAeducationalad:O8ej:Oschoolist:Oteacheristin:Ofemale|teacherkci:Ito|instructkci:O7ionment:O5mentmentist:O9alisthinsul:Oislandan:O5erar:Oarchipelagoin:Oinsulint:Ito|insultt:O5t:A5ingtad:Oabusekintegr:Ito|integrateA6lal:Ito|integrateal:O6lal:A7alad:O6tionalat:O6ndalebl:A6blealhav:A9alsign:O6l|signig:Ito|integratecintelekt:O3llectA8ualul:O9alcinteligent:O5igenceA9tec:O9cedintenc:Ito|intendO4tion/planA8alEdeliberatelybintendant:Osteward/superintendantin:Omatronaintens:Aintense/intensiveZinter:E1|the|middleag:O1teractionag:E8velyakt:O4missionali:Eamong|othersbatad:Ofightbatal:Ito|(at|loggerheads)|bebatigx:Ito|fightbatigx:Oscuffledigig:Ito|(up)|dames:Ito|interestes:O7es:A7ingeseg:Aabsorbingesigx:Ito|(interested)|beesigx:Ointerestesigxant:O7ed|oneesit:A9eskomunum:Ocommunity|of|interestsetagx:Omezzanineez:Ointerestfac:O4facejekci:O4jectionkompren:Omutual|understandingkomprenebl:A5ly|understandablekonsent:Ito|agreekonsent:O4mentkonsiligx:Ito|deliberatekonsiligx:Oconsultation/deliberationkrampig:Ito|parenthesizekrutej:Odefilekverel:Ito|(at|loggerheads)|belig:Ito|connectlig:O1venantligitec:O1nnectionlingvistik:OInterlinguisticsmit:Ito|(intermittently)|occurmit:Ointermissionmit:A6ttentmit:E9ntlymont:Omountain|passn:Oinside/interiorn:A9ernaln:E9ernallynaci:A1ternationalnaciism:O9nalismnajx:O1sidenen:F5/inwardsnig:Ito|confine/insertnul:Oboarding|studentnulej:O9choolokazajx:Oincidentcinterparol:Ito|converseO6ationad:O9onainterpelaci:Ito|(a|question|in|parlament)|askainterpol:Ito|interpolateainterprem:Ito|(together)|squeezedinterpret:Ito|interpretO8ationil:O8erist:O9rbinterpunkci:Ito|punctuateO7ionainterret:Ointernetbinterrilat:Ito|associateOrelationainterrim:Ito|rhymebinterromp:Ito|interruptO8ionaintersekc:O4sectionaintersezon:Ooff-seasonbintersxangx:Ito|exchange/swapO7aintersxtat:Ainternationalaintertemp:Emeanwhileainterval:Ointervalainterven:Ito|intervenebintervju:Ito|interviewO8bintest:O3stinear:Oññintestinesaintim:Aintimatebintrig:Ito|plotO3binund:Ito|floodO4binvad:Ito|invadeO3sionbinvalid:Odisabled|personA7cinvariant:OinvariantAdistinguished/invariant/normal/self-conjugateokorp:Ofixed|fieldeinvent:Ito|inventO5ionajx:O8ar:O5oryist:O7hinvers:O3rse|or|reciprocal|element|or|figure/point|or|multiplicative|inverseAreversedEvice-versahav:Ainversiblei:Ogrammatical|inversionig:Ito|turn/invertig:(with|respect|to|a|circle)|inversionigebl:Ainvertiblefinvest:Ito|investO5mentad:O9ajx:O9ant:O5oritur:O5iturebinvit:Ito|inviteO4ationbinvoluci:O2olutionA6orialaiomet:Ea|littlebioni:AIoniank:A5aiperit:Omustard-gasaipsilon:OYaiqzxuqq:Eiqzxuqqetir:Ito|goak:AIraqiakan:O4an:A2niananan:O6ananin:O6|womandauxr:Otravel|timeebl:Apassableej:O1th/roadidi:Oiridiumis:O2sit:Ito|irritateit:O6ionitigx:Ito|(irritated)|getland:AIrishlandan:O4manlandanin:O4womanoni:Oirony/sarcasmoni:A3ic/sarcasticpren:Ito|geteislam:OIslamA4ican:OMuslimism:Oislamismist:O6tbisland:AIcelandican:O6erdisrael:AIsraelian:O6anin:O6|womanid:O6teaistm:Oisthmusbital:OItalianin:O6|womanaiterbi:Oytterbiumaitiner:Oitineraryaitri:Oyttriumaiusenc:Ein|some|senseaizocel:Aisosceleshizol:Ito|isolate/insulateA6d/secludedad:Oinsulation/isolationec:Oisolation/separationil:Oinsulatorit:Aisolatedit:E7ly/out|of|the|wayitec:O5ion/separationbizometri:O2metryA6icbizomorfi:O3orphismA8caizoterm:O2thermaizotop:O3opeaizotropec:O3ropybizrael:AIsraelian:O6ajad:Ojadeajaguar:O1guarajahurt:Oyogurtajahxt:Oyachtejak:Ojacketet:O5obi:AJacobianobian:O7|determinantt:Oyachtajamb:Oiambajanuar:OJanuary'cjapan:O1paneseA7in:O7|womanhjar:Oyearcent:Ocenturyd:Oyarddek:Odecadegon:Ogibberish/jargonkvaron:Oquarterlibr:Oyear-bookmil:Omilleniumajasmen:Ojasminedjav:AJavanesea:O3an:O3neseanin:O7|womanajejxur:Ito|conspirecjemen:AYemenian:O5anin:O5|womanajen:Ethis|wayejes:AaffirmativeFyesIto|(yes)|sayOaffirmativeig:Ito|confirmdjet:Ito|jetO2|planeavi:O8motor:O3engineajezuit:OJesuitajid:AYiddishbjod:Oiodinel:Ito|yodelbjog:O1gaurt:O2hurtbjoker:Owild|cardsign:O8ajoniz:Ito|ionizeajonkvil:Ojonquildjor:Ito|skiddangxer:Odanger|of|skiddingdani:Ajordaniandanian:OJordanianajot:Oiotaejubil:Ito|(joyfully)|expressOjubilationA5nte:Ito|solemnly|celebrate/observee:Ojubileedjud:OJewA2ishar:O2ryism:OJudaismojug:Ito|yokeO3land:Owalnutlandarb:O5-treelanduj:O9eoslav:OYugoslavianoslav:A9noslavin:O9n|womanx:Ito|judgex:O3mentxad:Otrialxalvok:Osummonsxantar:Ojuryxej:Ocourtroomxist:Ojudgebjuk:Ito|itchO3ajuli:OJuly'njun:Ayoungagx:O2thec:O4g:Ito|harnessgajx:O6gilar:O6gitar:Oteami:OJune'iper:Ojuniperiperbrand:Ogint:Ojoint/seamul:Oyoung|personulargastej:O2th|hostelulin:O2ng|womanajup:Oskirtejur:OlawAlegalE4lyist:Olawyeroscienc:Olegal|sciencedjust:Ojustice/fairnessAfairec:Ojustice/fairnessic:O6|systemajut:O1tedjuvel:Ojewelej:O4ry|shopist:O4leruj:O4ry|boxajxabot:Ojabotbjxak:Opluget:Ojacketcjxaluz:Ito|(jealous)|beOjealousyA6ajxambore:Ojamboreebjxar:Ostone|jargon:Ojargonajxauxd:OThursday'bjxaz:Ojazzist:O3|musicianajxele:Ojellyajxerz:OJerseykjxet:Ito|throwOpitch/toss/mappingdisk:Odiscuseg:Ito|hurlet:Ito|tossigx:I1|(thrown)|getigxad:Ito|fidgetkovr:Ito|sprinklekub:Odielanc:Ojavelinon:Otoken/chipajxib:Ojibajxinz:Ojeansajxip:O1epbjxoke:Ojockeyr:O1ker/wildcardbjxongl:Ito|juggleist:O5rajxos:Ito|(up)|hillbjxud:Ojudoist:O3|wrestlerajxul:Ojouleajxun:OJuneaumjxur:Ito|swearOoathAswornas:OJurassici:Ojuryig:Ito|(in)|swearint:Ojurorintar:O2ynal:Onewspapernalist:Ojournalistnalistin:Ofemale|journalistpet:Ito|petitionromp:Ito|(perjury)|commitajxus:Arecentlkab:Ocapean:O1bin/hutared:O2aretaret:O6inet:Ostudyinetul:Ocabinet|secretaryl:O2leler:Ostrandlet:Owirelogram:Ocablegramlotram:Ofunicularriolet:Oconvertiblebkac:O1ck/dickx:Omush/messckadavr:Ocorpseajx:Ocarrionogrif:Ovultureakadenc:Ocadenceakadet:O3takadi:Okadeeakadmi:Ocadmiumbkadr:Ito|frameO4workakaduce:Ocaduceusgkaduk:Adecrepitajx:Oailment/sign|of|decayeg:Asenileegec:O4ityigx:Ito|(on|the|decline)|beigx:Odecayul:Oelderlyikaf:Ocoffeeein:Ocaffeineej:O2éeteri:O2etariakrucx:Ocoffee-potpulvor:Oground|coffeeskatol:Ocoffee|cantan:Ocaftanuj:Ocoffee-potakagx:Ocageakahel:Otile/flagstoneakainsign:Omark|of|Caingkaj:Oplatform/wharfaux:Cand/oraux:Odisjunction/OR|operatorer:Onotebook/foldersign:Oampersandt:Okiteut:Ocabinfkaka:Ococoaarb:O4|treeoarb:O9pulvor:O5powdertu:O2katoouj:O2oa|treeakakofoni:Ocacophonyakakt:O2tusZkal:OcornAcallousabas:Osquash/gourdabaset:Ozucchiniambak:Oagarwood/aloeswood/eagle|woodandr:Ito|mangleandr:Olark/corn|weevil/mangleandra:Ocorn|weevilandril:Omangleci:Ocalciumciig:Ito|calcifycin:Ito|calcinecit:Otiffdron:Okettle/cauldrondroneg:Osteam-boilerdronist:Otinkerejdoskop:Okaleidoscopeembur:Opunendar:Ocalendarendul:Omarigoldesx:Ocarriageesxajx:Ochassisesxist:Ocoachmanfatr:Ito|caulki:Opotassiumibr:Ito|calibrateibr:O4eribrig:Ito|recalibrateif:Ocaliphiforni:OCalifornia/californiumiforni:A9nifornian:O9nifornium:Ocaliforniumifuj:O3phateik:Ogobletikot:Ocalicoistef:Ochina|asterk:Ito|white-washk:Olimekajx:Owhite-washkan:Oheelkane:O3|bonekansid:Ito|squatkanum:Oshoe-heelkargil:Omarlkosxton:Olimestonekotof:OTravertineksxmir:Ito|plasterkul:Ito|calculatekul:Obill/calculationkulad:Ocalculationkulil:O7orakalkulism:Oaccountingakalkulist:O6antakalkum:Ito|limeakalomel:Ocalomelakalori:O3rieakmulte:Ospherical|capakalpak:Obearskin|capbkalson:Ounderpants/trunkset:Obriefsbkalumni:Ito|slander/libelO9belckalv:Abaldigx:Ito|(balding)|beinism:OCalvinismbkamarad:Ito|(chummy)|beOpal/companionakambi:Obill|of|exchangeckambogx:ACambodianan:O8anin:O8|womanakambri:O3rian|periodnkame:Ocameol:O3lleon:Ochameleonli:Ocamellian:Ofireplacenbret:Omantelpiecenfajr:Ohearth|firenskrapist:Ochimney-sweepntub:O6/smokestackr:Osmall|room/camerara:Ito|filmra:Ocameraraist:O5|operatorrun:ACameroonckamfor:Ocamphorarb:O6|treeuj:O9eebkamion:Otrucket:Ovanakamizol:Oundershirt/camisoleakamlot:Ocamletakamomil:Ochamomiletkamp:Ito|(out)|campOfieldad:Ito|(out)|campadej:Ocampground/siteanil:Obell|toweranj:Ito|campaignanj:O7anol:Obellfloweranul:O9ar:Ocountrysidear:Aruralaran:O4|person/peasantecx:Ocampeachy/logwood|treelaborist:Oagricultural|workerlogx:Ito|(out)|campomus:Ograss|voleucxe:ACambodianucxean:O8ul:Ofarmerum:Ito|(out)|camp");
  prefix = fillDictionary(prefix, "ckamufl:Ito|camouflageajx:O9il:O9|materialZkan:O1ne/reedab:Ohempaben:Olinnetad:ACanadianadan:O7adanin:O7|womanadi:A7adian:O7adianin:O7|womanajl:Oscoundrelajlar:Oriff-raffal:Ochannel/canalaliz:Ito|canalizeap:Ocouchari:Ocanarycelari:Opublic|records|office/waiting|roomcelier:Ochancellorcer:Ocancerdel:O2dledelabr:O3elabrumdeling:O3lestickdidat:Ito|(for|election)|rundidat:Ocandidatedidatpropon:Orecommendationej:Ocane-fieldel:Ogroove/slotguru:Okangarooibal:Ocannibalin:Oeye|toothistr:Ofuel|tankjon:Ocanyonkr:Ocrawfish/crayfishon:Ocannonon:A2onicalonig:O5zationonik:O4ot:Orowboatt:Ito|singt:Osongtabr:ACantabriantad:Osingingtajx:Osongtar:O3booktarel:Ochanterelletarid:OSpanish|flytat:Ocantatatbird:Osong-birdti:AKantiantin:Ocafeteria/inntist:Osingertistin:Ofemale|singerton:Ocountyakantor:Ocantor/choir|memberakanul:O2nulaakanvas:O2vasakanzon:Ochansonakaolin:Okaolinckaos:Ochaos/tangleA3ticE6allyZkap:Oheadablec:Ocapabilitydolor:Oheadacheel:Ochapeler:Ito|(over)|assimilate/hijack/takeerant:Ohijacker/pirateerist:Opirate/hijackeret:Olittle|headharar:O(of|the|head)|hairhauxter:Odandruffilar:Ocapillaryilar:A8ilarec:O8|actionital:O3talitalism:O6ismitalist:O8titan:O2tainitel:O2italitul:O4ulumitulac:Ito|surrenderitulac:O8jes:Ito|nodkusen:Opillowne:Ito|(one's|head|no)|shakenead:Ito|(one's|head|no)|shakeok:Okapokokuj:O4|treeol:Ocabochonon:O1pon/castrated|roosteropied:Ehead-to-toeopiedul:Ocephalopodor:Ocaper/caper|bushoral:Ocorporalot:Ocar|hoodr:Ogoatreol:Oroebuckreolid:Ofawnric:Owhimric:Acapriciousrid:Okidrimulg:Onightjarrin:Oshe-goatriol:Ito|frolicriol:Ocaperromp:Afatalsik:Ochillisiket:O3istan:Ocapstan/winding|gearsul:O3ule/firing-capt:Ito|catcht:O1pturetajx:Opreyakaptil:Osnare/trapakaptit:Oprisonerakaptuk:Okerchiefdkapturn:OvertigoAdizzyig:A4ingigx:Overtigoakapucen:OCapuchin|monkakapucx:Ohood");
  prefix = fillDictionary(prefix, "Zkar:Adear/expensiveaben:Ocarbineaf:Ito|decanteraf:Ocarafeaib:ACaribbeanakol:Ito|caracoleakter:Ocharacter/personalityakter:A8isticakteranaliz:Oprofileakteristik:Ocharacteristic|of|a|logarithm|or|a|ringakteriz:Ito|characterizeakteriz:Oprofileakteriz:Acharacteristicakterizad:O9zationakterizajx:O9sticambol:Ito|collideambol:O4sionambolfrukt:Ocarambola/star-fruitamel:O4elapac:Oshellas:Ocrucian|carpat:Ocaratate:Okarateavan:Ocaravanavanej:O6asaryavel:O4elleb:Ocoalbardajx:Ocharcoalbon:Ocarbonbopaper:O5-paperboskori:Ocinderbunkl:Oboil/carbunclebur:Ocarburationburil:O5etorcer:Ocellcinom:Ocancerd:Ito|cardd:Othisledamin:Obittercressdan:Ouniversal|jointdar:Othisle-fielddel:Ogoldfinchdinal:Ocardinal|number/cardinality/powerdioid:O4oiddon:Oartichoke|thistlee:Ocurryec:Olove/valueen:Ohulles:Ito|caresses:O5esem:Aaffectionate/cuddlyesprem:Ito|cuddle/hugckarg:Ocargoant:Oshipper/consignorboat:Ofreighterckarier:Ocareerism:O5ismist:O7tckarik:Opapayaatur:Ito|caricatureatur:O9bkariljon:Ochimesist:O5-playerbkariofil:Ocloveuj:O4/clove|treeakariol:Odog|cart/trapdkarit:Ocharity/brotherly|lovead:O9otherly|loveat:O6at:A5ablefkarm:Okarmaelan:OCarmeliteelanin:O8ezin:Ocrimsonezin:A6in:Ocarminefkarn:OfleshAcarnalaval:O3ivalomangx:A5orousovor:A9sul:Omortal|personfkaro:Odiamondb:Ocarobbuj:O4|treel:O3lseri:O2|bodyt:O2rotckarp:O2pel:O3elen:Ohornbeampkart:Ocard/map/menuag:ACarthaginianagan:O9anar:Ocard|deckav:Ito|(a|uvular|R)|pronounceel:Ocartelezi:ACartesianilag:Ocartilagelud:O2d|gameocx:O2tridgeocxeg:Oshellografi:Ocartographyon:O2dboardun:O2toonusx:O4uchevel:AGeorgianbkarul:Ohoneyin:O4akarusel:Omerry-go-roundakarvi:OcarawayJkas:Ocheckstand/cashier's|standaci:Ito|overturnav:Ocassavaed:O3etteej:O2hier's|officeerol:Osaucepanet:Ocassetteist:O2hierk:Ohelmetkad:Owaterfallked:Ocapt:O1stetanjet:O3anettel:O3letil:OCastiliantil:A5liantism:Ocaste|systemtor:Obeavertored:O5-type|lifeformtr:Ito|castrateuar:O2sowaryx:Ito|hidex:Asecretx:E5lyxauxskult:Ito|(on)|bug/eavesdropxgard:Ito|withholdxir:Ito|stealxit:Ahiddenxit:Ebehind|someone's|back/underhandedlyxlud:Ohide-and-seekxnom:Opseudonymxobserv:Ito|(on)|spyxtan:Ochestnutxtanarb:O7-treextanuj:O9reextanurb:O9reexxLkat:OcatAfelineafalk:Oopen|hearseaklism:Ocatastropheakomb:O3combalepsi:O3lepsyalog:Ito|catalogalog:O6aplasm:Oplaster/poulticeapult:Ocatapultar:Ohead-coldarakt:Ocataractarted:ONew|World|vulture-type|lifeformastr:Oofficial|real|estate|or|title|deed|registerastrof:Ocatastropheastrof:A9icedr:Opulpitedral:Ocathedralegori:O2egoryegori:Afirm/resoluteehxism:Ocatechismehxist:O7tehxiz:Ito|catechizeehxizist:O6stekism:O7mekist:O7tekiz:Ito|catechizeekizist:O6sten:Ito|shackleen:O6et:Oside|of|the|right|angleid:Okittenin:Ofemale|catiz:Ito|glazeod:Ocathode/negative|electrodeolik:OCatholicolikism:O6sismun:Ocotton|clothbkauxci:Ito|bailO3bkauxcxuk:Orubberarb:O5|treebkauxr:Ito|crouch/squatigx:Ito|crouch/squatckauxstik:Acorrosive/burningajx:O8|substanceec:Ocausticityckauxteriz:Ito|cauterizeajx:O5yil:O6ckauxz:Ito|causeO4/reasonEbecausepkav:Ocave/cavityAconcave/hollowajx:Ocavity/hollowaleri:O2alryalir:Oknightalir:Achivalrousalirajx:Ogallant|deedalirec:Ochivalry/knighthoodalirec:A6ousalkad:Ocavalcadeec:Ahollowern:Ocaveern:Ahollowi:Oguinea-pigiar:Ocaviarokul:Ahollow-eyedkkaz:Ocaseahx:AKazakhe:Ocurdeigajx:Orenneteigx:Ito|curdleein:Ocaseinemat:O3mateern:Obarracksin:Ocasinouist:O1usistuistik:O6ryakecal:Oquetzalakecxap:Oketchupakefir:O1firbkegl:Obowling|pinar:Oññbowling|pinsakeirant:Owallflowerbkejl:Ito|pin/pegOcotter|pin/pegakeks:O1okie/biscuitnkel:Obasement/cellaretagx:O9ellaridoni:Ogreater|celandineist:Ocellarmank:Nsomek:E3kfoj:E3timeskmanier:Ein|some|wayskop:Eseveral|togetherktemp:Etemporarilyner:Owaiternerin:O3resst:OCeltt:A3icbkemi:Ochemistryist:O6fken:Oresinous|woodj:AKenyanjan:O5janin:O5|womanopodiac:Ogoosefootozoik:Ocenozoicckep:Okepiler:AKeplersr:Otwilleker:Oheartmes:Ofairn:Ocore/kernel/pitosen:Okeroseneub:Ocherubakest:Oboxakg:Fkgakiagrad:Eto|what|extentakial:Oreasonakiamanier:Ein|what|wayakibic:Omeddlerbkibuc:Okibbutzan:O6nikakiel:Owayikil:Okeelogram:Okilogramometr:O3metreoparsek:O3parsecotun:O3tonovat:O3wattovathor:O7-hourovolt:O3voltt:O2takimon:O1monobkimr:OWelshmanA4ikin:Ocinemaej:Omovie|theaterematik:Okinematicsematograf:Omovie|projectoreskop:Okinescopein:Oquininekon:Ocinchona|bark|or|treeofilm:Omovieoteatr:O4|theaterakiosk:Okiosk/gazeboakipcxak:OKipchakckiras:Ito|armorO4auxt:O4ed|carakirgiz:AKyrgyzakirk:Ochurchdkirl:Ito|stir/whipOcurl|or|rotor|of|a|vector|fieldigx:Ito|swirlovent:Owhirlwindakirsx:Ocherry|brandyckirurg:OsurgeonA3icali:O3erybkis:Ito|kissO3akitel:Ooveralls/smockakiv:Okiwibklab:Oclubfung:O3|fungusbklacx:Ito|gossipO5aklaft:Ofathomfklak:Ito|clickcxapel:Otop|hatdanc:Otap|danceferm:Ito|slamfermigx:Ito|(shut)|slamilet:Ocastanetbklan:Oclangul:Olong-tailed|duckaklap:Ovalvejklar:AclearE4lyig:Ito|explainig:O4nationigx:Ito|clearion:Ito|soundion:Oclarionion:A6net:O4netvid:A2irvoyantgklas:O2ssifik:Ito|(out)|classify/sortifik:Oclassificationik:A5c/classicalikajx:O6ikism:O6ismikul:O6al|composer/authoraklauxn:O1ownaklauxstrofobi:O1austrophobiaaklauxz:O4ehklav:Ito|typeOkeyar:O2boardcen:Oharpsichordicen:O9dicenet:Oottavino/spinetikl:Ocollar|boneikord:Oclavichordhkle:O1efmat:O2matismatid:O7/old|man's|beardr:Acultured/educatedrig:Ito|educaterik:Oclergypersonrism:OEnlightenmentrul:Oscholarbklient:Ocustomerar:Oclienteleaklif:O2ffaklik:O2queeklimat:O2mateA5iciz:Oair-conditioningizil:O9ionerizit:A9ionedfklin:Ito|bend/inclineg:Obladeigx:Ito|stoopik:Oclinick:Olatchrand:Obeveled|edgeaklister:Oenemabklisx:Ocliché/photo|negativeajx:O9to|negativeaklitor:O2torisakliv:Ito|splitakloak:Osewercklon:Ito|cloneO4ik:A3icbklopod:Ito|attemptO6/effortfklor:Ochlorineofil:O4ophylloform:Ito|chloroformoform:O9oz:Oiron-deficiency|anemiaoz:Aanemicbklostr:Ocloisterofobi:O1austrophobiaaklosx:Obell|jarbklub:Ocluban:O3|membereklucx:Ito|clutchil:O5opedal:O5|pedalorisort:O6return|springstang:O6arm|or|leverbkluk:Ito|cluckkluk:Ito|glug/gurgleaklus:Ohawse|hole|or|pipeakluz:Osluice/lockakm:Fkmdknab:OboyA2ishec:A5in:Ogirlcknar:Ito|creak/grateO4il:Oclackckned:Ito|kneadpast:Oplasticineuj:Okneading|bowl|or|troughakoagul:Ito|coagulateakoaks:O1keakoalici:O1alitionakobaj:Oguinea-pigakobalt:Ocobaltakobitided:Oloach-type|lifeformakobold:Ogoblinakobr:Ocobraakocxenil:O1chinealakocxer:O1achmanhkod:Ito|encodeOcodeeks:O3x/pharmacopiaicil:O2icilig:Ito|encodeoprezent:O4ingrant:Oquadransrompist:Ocrackerakoeficient:Ocoefficient|or|element|or|entry|of|a|matrixakofaktor:O1factorbkofr:Otrunkuj:O4akognici:Ocognitionakoher:A1nsistent/coherent/connectedakohort:O1hortckoincid:Ito|coincide/concurA7ntigebl:Asuperposablebkoit:Ito|(sex)|haveOsexual|intercourseakojl:Ocolonckojn:Ito|wedgeO4odent:Ocanine|toothakojon:Otesticleakojot:OcoyoteBkok:Orooster/chickenAchickena:Ococaain:O3ineajx:Ochickenard:Obow/cockadebatal:Ocockfightcig:O2cyccinel:Oladybugej:Ocooperik:Ito|crowerik:Ocock-a-doodle-dooet:Ito|flirtet:Acoquettishetec:O5ryid:Ochickin:Ohenlusx:Owhooping|cough/pertussison:Ococoonos:O3nutosarb:O6|palmosnuks:O6ospulp:O6|pulposuj:O8almr:Ito|(unfaithful|to)|berit:Ocheated-on|husband/cuckolds:Ohiptel:OcocktailZkol:Oneckaps:Ocollapseb:Ogun|grip/stock/buttbas:Osausagecxen:Onecklacecxikin:Ocolchicineedok:Obile|ducteg:Ocolleagueegi:O4geegian:O6|memberekt:Ito|(up)|collect/pickekt:Ocollectionektad:O9ektigx:Oassemblyektiv:Ocollectiveektiv:A9/jointektivism:O8ismeopter:Obeetleer:Ito|(angry)|beer:Oangerer:A2ryereg:Afuriouserig:Ito|angererigx:Ito|(angry)|geterik:Acholericesterol:O4sterolhar:Omane-hairharar:O3ibr:Ohummingbirdier:Onecklaceik:Ocolicimb:Olooniri:Oeye|dropsizi:Ito|crash/collideizi:Ocollisionodi:O3odionofon:Oresin/rosinoid:Ocolloidoid:A6al/glueyomb:Odove/pigeonombi:AColombianombian:O8ombianin:O8|womanombin:Ofemale|dove/pigeonombum:Ito|bill|and|cooon:Ocolumnonar:O2onnadeonel:O4eloni:Ito|colonizeoni:O4y/settlementoni:A4ialonian:O5stakoloniig:Ito|colonizeakoloniism:O5alismjkolor:Ito|colorO4A4edatur:O4aturaig:Ito|color/paintigil:Opaintil:O4ist:Ocoloristnuanc:Ohue/dyependint:Apaleckolos:OcolossusA5al/hugetr:O4trumbkolport:Ito|peddleist:O5rakolrimen:Ocollarakolromp:Afatalakoltuk:Oscarfbkolum:Ocollarn:O2umnakoluzi:O2lusionakolz:O2za/winter|rapeZkom:O1mmaand:Ito|(in|command)|command/beand:Ocommandandant:Ain|chargeandar:O1struction|setandej:Obridgeandit:Olimited|partnershipanditant:Osilent|partnerandor:Ocommanderat:O2aat:A3toseatul:Ofeather|starb:Ito|combbil:O3bin:Ito|combinebinajx:O5ationbinatorik:O7orial|analysisbinatorikajx:Ochoicebinigx:Ito|combineedi:O2edyedi:A4icediist:O5anedon:Oacneenc:Ito|startenc:Obeginningenc:Ainitialenc:E1|the|beginningencant:Obeginnerencigx:Ito|startencigx:Obeginningencliter:Oinitialenclok:Ostarting|pointencrapid:Oinitial|velocityent:Ito|commentent:O6entar:O6aryentari:Ito|(on)|commententari:Onote/annotationerc:Ito|(business)|doerc:Ocommerce/tradeercad:Otradingercajx:Omerchandiseercist:O6tet:Ocometfort:O2fortfort:A6ablefortig:Ito|(comfortable)|makeik:Afunnyikec:Ocomedy/humoriks:O2ic|book|or|stripisar:O2missarisi:Ito|entrustdkomisi:Ocommission/errandit:O9erknab:Oerrand-boyon:Ocommission/subcommitteeakomitat:O4tteeakomiz:Oclerkbkomod:Odresser/chestor:Ocommodorebkompakt:A2pactig:Ito|compressckompani:O3anyan:Oassociateul:Ocompaniongkompar:Ito|compareO5isonE5ativelyaci:O5isonad:O9ativ:O9timent:O5tmentakompas:O4ssfkompat:Ito|pityOcompassion/pityem:Ocharity/mercyem:A5able/mercifulig:Ito|(to|pity)|moveind:Amiserable/pitifulakompendi:Oabridgment/compendiumdkompens:Ito|compensateO8ion/reparationajx:O9on/reparationil:O8ordkompetent:Oskill/competence/qualificationAcompetentec:Oabilityul:Oexpertekompil:Ito|compileO5ationajx:O9ner:O5eril:O7bkompleks:O3lexA6bkomplement:O5mentA9ary/complementedgkomplet:Ooutfit/setAcompleteE7lyig:Ito|completeig:Oreplacement/supplementig:Acomplementary/supplementaryigx:Ito|(complete)|becomedkomplez:Ito|(a|favor|for)|doOfavorAkind/obligingem:A4nicebkomplic:Oaccompliceec:Oabetmentbkomplik:Ito|complicateA9dbkompliment:Ito|complimentO9bkomplot:Ito|conspire/plotO6acy/plotdkompon:Ito|composeajx:O5itionant:O4nentist:O4serakompost:Ito|typesetakompot:Ocompoteakompozici:O4sitionakompozit:O7e|materialjkompren:Ito|understandO9ingajx:Oidea/conceptebl:Ounderstandabilityebl:A9ableebl:Eof|courseeblec:Ointelligibilityig:Ito|explainit:Aunderstoodpov:O6andingakompres:Ocompressakompromis:O4omiseakompromit:Ito|jeopardize/compromisegkomput:Ito|computeO5ation/calculationer:O5erik:O7|science/information|technologyil:O7ileg:Omainframe|computerist:Oprogrammermkomun:Acommonajx:Ointersection|of|setsi:Ito|(Holy|Communion)|administeri:Ocommunioniigx:Ito|(Holy|Communion)|receiveik:Ito|communicateik:O9ionikad:O9ionikajx:O9ionikil:Omeans|of|communicationism:Ocommunismist:O7tum:O6tygkomut:Ito|commuteA5ativeebl:A5ingec:O5ativityec:A9eigx:Ito|(permutable)|commute/beigxant:AcommutingZkon:Ito|(familiar|with)|beOfamiliarityat:Oacquaintanceat:Aknownatec:Oacquaintance/familiarityatigx:Ito|(known)|becomeced:Ito|admitcentr:Ito|concentratecentrej:O9ion|campcentrigx:Ito|concentratecentrit:A9edcept:O4ptcern:Ito|concerncern:O6cern:Ain|questioncern:Econcerningcert:Ito|(a|concert)|givecert:Oconcertcertej:O6-roomcertin:O6inacesi:Ito|concede/franchise/licensecesi:O4ssion/franchisecesiul:Olicenseecili:Ocouncilcip:Ito|conceiveciz:Abrief/concisecizec:O4ness/concisenesscxert:Oconcertodamn:Ito|(guilty)|sentence/finddensajx:Omoisturedensator:Ocapacitor/condenser|lensdenskovrigx:Ito|(blurry/dim)|getdensor:Ocondenser/jardicional:O3itional|tensedicx:Ito|stipulatedicx:Ocondition/termsdolenc:Ito|(condolences)|expressdolenc:Ocondolencesdom:O4mdor:O4rduk:Ito|bring/conductdukist:Odriverduklernej:O3ing|schooldukpermesil:O3er's|licenseduktanc:Oconductanceduktor:Oguarddut:Ito|behavedut:O4iordutmanier:Opolicyeks:Aconnectedekseg:Astrongly|connectedekt:Ito|connectdkonekt:O6ionej:Oportil:Oconnectorit:Eon-lineckonfederaci:Ito|confederateO9ionigx:Ito|confederateakonfekci:Oready-made|clothingakonferenc:Oconferencegkonfes:Ito|confessO6ionEadmittedlyej:Oconfessionali:O9int:O6orpren:Ito|(the|confession|of)|receiveekonfid:Ito|confide/entrustO6nceenc:Ito|confideenc:Osecretenc:Aconfidentialdkonfirm:Ito|confirmO6ationaci:Ito|confirmaci:O6ationakonfisk:Ito|confiscatebkonfit:Ito|preserveajx:Ojam/preservesbkonflikt:Ito|clash/conflictOconflictekonform:Ito|(in)|conform/fitAconforming/fitting|inEin|accordance|withig:Ito|fitigx:Ito|conformbkonfucean:OConfucianism:O8ismgkonfuz:Ito|confuseO5ionAjumbled|upajx:Ohodge-podge/medleyant:Aconfusingeg:Ito|puzzleit:Adazed/perplexedakongan:OCongoleseckongest:Ito|(with|blood)|overchargeOcongestionA7veakonglomerat:O3lomerateakongregaci:O3regationdkongres:Ito|(congress)|attendOcongress/conventionan:O2ventionerej:O2ference|hall/convention|centerckongru:Ito|(compatible)|coincide/beAcompatible/congruentec:O1ngruence|of|numbersakonhxoid:O2choidekoni:Ohemlockfer:Oconiferg:Ito|(know)|reveal/letgx:Ito|(acquainted)|getk:Oconic|sectionakonjak:Obrandy/cognacckonjekt:Ito|guessO4ebl:Apresumable/supposablefkonjug:Oconjugationaci:Ito|conjugateaci:O7ionit:O7e|complex|number|or|subgroupit:A8linear:Aantilinear/semilinearakonjunkci:Oconjunctionbkonjunktiv:Osubjunctive|moodit:Oconjunctivitisakonjunktur:O7ureskonk:Oshellav:Aconcaveer:Ito|conquerlav:O2clavelud:Ito|conclude/inferlud:O5sion/inferenceludig:A7veoid:O3hoidord:O3ordordanc:O6anceordat:O7tret:A3reteretig:Ito|(into|concrete|form)|putubin:Oconcubineur:Ito|competeur:O5ition/rivalryurad:O9n/rivalryurenc:O9nurs:O9n/contestakonoid:O1noidakonosament:Obill|of|lading/consignment|noteekonsci:Ito|(conscious/aware|of)|beOawareness/consciousnessA4/consciousenc:Oconscienceenc:A7tiousakonsekr:Ito|coronate/decicate/ordain/sanctifyckonsekvenc:O1nsequenceA3istentE3equently/consistentlyfkonsent:Ito|agreeO4ment/consentebl:Aadmissible/that|one|can|agree|withem:Oaccommodationem:Agood-heartedit:Eagreed/okaymkonserv:Ito|keep/conserveOconservation/preservation/maintenancead:O9on/preservation/maintenanceativ:A9veativism:O9smativul:O9veatori:Oacademy|of|musicej:Ostorage-roomem:Aconservativeemul:O9veism:O9smism:A9veul:O9vefkonsider:Ito|considerO7ationad:O9ionem:Athoughtfulind:Aconsiderableind:E9lyikonsil:Ito|adviseO3ceant:Ocounsellorantar:O3cilej:Oboardroomet:Ohint/tipigx:Ito|consultigx:O6ationind:Aadvisableekonsist:Ito|consistO1mpositionig:Ito|constituteigajx:Oingredient/partori:Oconsistoryckonsol:Ito|comfort/consoleO1nsolationigx:Ito|(consoled)|beakonsonanc:Ochordakonsonant:Oconsonantbkonspir:Ito|conspireO6acyckonstant:O3tantA7/permanentE7lyakonstat:Ito|recognizeekonstern:Ito|upsetObeing|upsetant:Aupsettingigxint:A4it:A4dkonstip:Ito|constipateO8ionil:Oastringentit:Aconstipatedbkonstituci:O5tutionA9onalikonstru:Ito|constructO8ionad:Obuildingajx:O7art:Oarchitectureentreprenist:Obuilding|contractorist:O4erkt:Oconstructplan:Ospecificationsekonsul:Oconsulej:O5atet:Ito|consultt:O6ationtigx:Aadvisorybkonsum:Ito|(up)|useant:Oconsumer");
  prefix = fillDictionary(prefix, "Zkont:Oaccountagx:Ito|infectagx:O5ion/contaminationagx:Acontagiousakt:Ito|contactakt:O6aktigx:Ito|(in|contact)|getaktlok:Opoint|of|contactaktoskatol:Ooutletaktpunkt:Opoint|of|contactaktskatol:Ooutletant:Ocashant:Ein|cashekspertizist:Oaccountantempl:Ito|considerempl:A2templativeener:O3ainerent:Osatisfactionent:A5ied/pleasedentig:Ito|satisfyentig:A5actoryest:Ito|contest/questionestebl:Adebatable/questionableinent:Ocontinentinentodriv:O8al|driftingent:O5gentinu:Ito|continue/lastinu:A6ousinuec:O6ityinueg:Auniformly|continousinuig:Ocontinuance/perpetuationist:Oaccountantor:Oofficeorad:Oclerical|workorbezonajxbutik:Ostationery|storeorist:Oclerkoscienc:Oaccountancyraband:Ito|smuggleraband:Ocontrabandrabandist:Osmugglerrabas:Obass|violradanc:Ocontradanceradmiral:O1mmander/rear|admiralrakt:Ito|(a|contract)|makerakt:Ocontractraktit:Ajobralt:Ocontraltorapunkt:O1unterpointrast:Ito|contrastrast:O7rastig:Ito|compareraux:Ito|opposeJkontraux:Aopposite/contraryEon|the|contrary/otherwiseargument:Oobjectionbatal:Ito|(against)|fightdir:Ito|contradictegal:Oadditive|inverse/opposite|elementegal:Aoppositeegaligebl:A7-havingekzempl:Ocounter-examplefrostajx:Oanti-freezeigebl:Aopposiblejudism:Oantisemitismkoloniism:O3colonialismkoncip:Acontraceptivelater:Aopposite-sidelegx:Aillegallinear:Aantilinear/semilinearlogaritm:O4ogarithmmend:Ito|cancel/countermandmin:Ito|underminepap:Oantipopepartikl:O4articlepozici:Ocontraposition/contrapositiveproton:Oantiprotonseps:A3septicsign:Aopposite-signedsklavecist:Oabolitionistsoci:Aantisocial/unsocialstar:Ito|opposestar:Oresistancestarem:Astubborn/obstinatetank:Aanti-tankul:Oopponentvenen:Oantidotevol:Aagainst|one's|willvol:E9e's|willakontrevizor:Oaccountantdkontribu:Ito|contributeO8ionajx:O9onci:Oreparationsakontrici:O1morse/repentanceckontrol:Ito|check/verifyist:O4er/controllersum:O4sumbkontrovers:OcontroversyA9ialakontumac:Ein|one's|absencebkontur:Ito|draw/delineateOoutline/contourbkontuz:Ito|bruiseajx:O5akonur:Oconuresbkonus:O2etrunk:Ofrustum|of|coneakonval:Olilly|of|the|valleyakonveks:Aconvexekonven:Ito|(suitable)|beAsuitableEappropriatelyci:Oconventionci:A9alfkonvergx:Ito|convergeA7ntinterval:Ointerval|of|convergenceocirkl:Ocircle|of|convergenceoradius:Oradius|of|convergenceradius:O9convergencebkonversaci:Ito|converseO6ationekonvert:Ito|convertO5sionigx:Ito|convertigx:O5sionit:O5t/proselyteakonvikt:Ito|convictckonvink:Ito|convinceObelief/convictionigx:Ito|(convinced)|beakonvolvul:Obindweed/convolvulusbkonvulsi:Ito|convulseO6ionakonzol:O2soleakooperativ:O1operativeckoordinat:O2rdinateaks:O9|axissistem:O9|systemakopek:Okopekekopi:Ito|copyO3ajx:O3il:O2ierrajt:O2yrightakopr:O2raZkor:OheartA4/heartyak:Oravenakl:Ocoracleal:O3lal:A4alinsul:Oatollb:Obasketbel:Ocorbelbet:Osmall|basketbopilk:Obasketballd:Ostring/corddinstrument:O5|instrumentdob:Ocordobadon:O4ne:OKoreanegidor:OSpanish|mayoregon:Owhitefishein:OKorean|womanekt:Ito|correctekt:A6elaci:O4lation|coefficientelativ:O8veespond:Ito|correspondespondajx:O9encefavor:Ocharity/mercyfavor:A5able/mercifuliandr:Ocorianderidor:O2ridorife:Ochorus|leaderimb:Ocorymbinklin:Oaffectionint:OCorinthianintik:A9k:Ito|(up)|corkk:Ocorkkokverk:O3|oakktiril:O3screwligit:Aclose/dear|to|the|heartmoran:Ocormorantn:Ohornnar:Oññantlersnbrut:Ohorned|animalne:Ocorneanec:Ahornynet:Ocornetnic:O3icenik:Ocrownobrancxar:Oññantlersnus:Ocornel/dogberryod:Ito|corrodeol:O2ollaakorolari:O6ryakoron:O3namkorp:ObodyA2ily/physicalig:Ito|embodylingv:Obody|languageodor:O4smellogardist:O3guardoraci:Ocorporation/trade-unionrem:Oheartacheremit:Adepressedremitec:O6ionulent:Afat/stoutus:Ocorpsuskl:O3uscleakorsajx:Obodice/corsageakorsar:Ocorsair/privateerakorset:O3etfkorsik:ACorsicanan:O7anin:O7|womani:A7ian:O7ianin:O7|womanlkort:Oyardbird:Ofarm|birdeg:Oroyal|household/courtegan:Ocourtiereganar:Oroyal|householdeganin:Olady-in-waitingik:Ocortexobird:Ofarm|birdum:Ocourtusx:Ito|(emotionally)|moveusx:Aemotionally|moving/touchingusxit:Aovercome|with|emotionakorund:Ocorundumckorupt:Ito|bribeec:Ocorruptionil:Obribeckorv:Ocrowet:Ocorvette/jackdawetkapitan:Olieutenant|commanderwkos:OXhosaekant:Ocosecantin:OXhosa|womaninus:Ocosinem:Oouter|spacemetik:Ocosmeticmodrom:Ospace|centremogoni:Ocosmogonymografi:O5raphymologi:O4logymopolit:O4politanmopolitec:O9anismmopolitism:O9anismt:Ito|costt:O3t:Aexpensivetarik:ACosta|Ricantarikan:O9ntum:Oclothingx:Othimblexer:Akosherxi:ACauchysxmar:Onightmareqkot:OmudAdirty/muddyangent:Ocotangentanimul:Olow-minded|personeri:Oexculsive|group/cliqueiledon:Ocotyledoniljon:O2illioniz:Ito|contributeiz:Oquota/contributionkovrit:Amuddylet:Ocutleto:Okotoon:Ocottononarb:O5|plantonuj:O9ntsxirmil:Omudguardurn:Oquailkkov:Ito|incubatearianc:Ocovarianceej:Onestert:Oenvelopeil:Oincubatorr:Ito|coverr:O4ingrajx:O7ril:O4/lidrit:A4edropaper:Owrapping-paperakozak:OCossackbkrab:Ocrabr:Ohornetbkracx:Ito|spituj:O3toonfkrad:Ito|(off)|fenceOgrid/gratingit:Aplaidxrost:Ito|barbecuerostad:O7rostil:O7bkrajon:Opencilpintigil:O5-sharpenerfkrak:Ito|crackO4en:O4eret:Ito|crackleet:Abrittle/crunchyetad:Ogratingakramb:Osea|kaleakramf:Ocrampckramp:Ito|clampOparenthesis/bracket/staple/clamp/braceil:Ostaplerckran:Ofauceti:Oskullk:Ocrankakratag:Ohawthornakrater:Ocraterakravat:OnecktieZkre:Ito|createajx:O4iond:Ito|believed:O4fdebl:Aplausibledebl:Eprobablydem:Acredulousdind:Aplausibledit:Ito|(credit|for)|credit/arrangedit:Ocreditdit:Eon|creditditig:Ito|accreditditkart:Ocredit|cardditleter:Oletter|of|creditditor:Oaccount|payable/creditordkonfes:Ocreedit:O2atureit:A4editajx:O4urem:O3mmaci:Ito|crematemaci:O5ionmajx:O2amn:Ohorse-radishnel:Ito|crenellatenel:O8ionnel:Anotched/toothed/crenellatedol:Ocreoleol:ACreoleozot:Ocreosotep:O2pepid:Ohawksbeardppaper:Ocrepe|paperpusk:Otwilightpusk:Adims:Ocressscent:O3centscxend:O6dosk:Ito|growsk:O3thskad:O5skajx:Oplantskajxbaril:Ohedgeskant:Aincreasingskig:Ito|grow/raisesp:Opancake/crepest:Ocreststomati:Ochrestomathyt:O1alktace:OCretaceoustan:O4nten:Ocretinakreton:O3onneekrev:Ito|burst/popOpopajx:Ocrackint:A4ed/poppedmaiz:OpopcornYkri:Ito|shoutO4br:Ito|siftbril:O1eveeg:Ito|yelleg:Oscreamf:Oclaw/talonk:Ojackket:Ocricketm:Ito|(a|crime)|commitm:Ocrimem:A3inalmeg:Oatrocity/outragemet:Omisdemeanourminal:Acriminalmroman:O3e|novelmul:O3inalnolin:O2nolinepl:Adisabledplig:Ito|cripple/handicappligx:Ito|(handicapped)|becomept:Ocrypt/underground|cellpton:Okriptonosign:Oexclamation|marksol:Ocruciblesp:Ofrillsp:Acrimped/crinkled/wavyspig:Ito|crimp/curlstal:O1ystalstalig:Ito|crystalizestaligx:Ito|crystalizestalografi:O6lographystalografi:A9raphicstan:OChristianstanec:O8itystanigx:Ito|(Christian)|becomestanism:OChristianitystism:Ochristianitystnask:OChristmas'stnaskarb:O8|treeteri:Ocriterion/ruletik:Ito|criticizetik:Ito|criticizetik:O6smtikant:O5tikant:O5z:O2sisz:A2ticalzalid:Ochrysaliszantem:O5nthemumzokal:Opinchbeckbkroat:OCroatA4ianbkrocx:Ito|hookil:O3akroket:Ocroquetbkrokodil:Ito|(with|Esperantists|not|in|Esperanto)|speakOcrocodileakrokosmi:Omontbretiaakrokus:Ocrocusqkrom:Ito|chrome-plateO4iumAadditionalEbesidesaltarej:Oaisle/sacrarium/side-chapelartikul:OXenarthra|lifeformat:Achromaticcxar:Osidecari:Ochromiummargxen:Oindentationnom:Onicknameofotografi:Ocolor|photographyosom:Ochromosomeprocesor:Ocoprocessorprodukt:Owaste|producttub:Ospare|tirevirin:Oconcubinejkron:Ito|crownO4ad:Ocoronationik:Ochronicleik:A6/lingeringikist:O6ler/historianologi:O4ologyometr:Ostopwatch/chronometerometri:Ochronometryometri:A9icakrop:Ocraw/pouch/goiterakrotal:Orattlesnakedkroz:Ito|cruiseant:O2sierist:O6sxip:O6okruc:Ito|crossO4A4-shapedbekul:O4billifiks:O1ucifixig:Ito|crossigx:Ito|crossist:O1usadermark:Ito|(with|an|X)|markmast:Omizenmastosign:Ito|(the|sign|of|the|cross)|makereferenc:Ocross-referenceum:Ito|crucifyvortenigm:O1ossword|puzzlex:Ojug/pitcherbkrud:Araw/crudelansxtof:Obaizebkruel:Acrueleg:Ahorribleakrupier:Ocroupierckrur:Olegromp:Ofracture|of|the|legvind:Oputteebkrust:Ocrustul:O4aceanbkrut:Asteepajx:Ocliffakruzer:Ocruzeiroaksenon:Oxenonfkser:O1rographyA8icograf:Ito|photocopyografi:O8ingografi:A8okopi:O8aksifi:Oswordfishaksilofon:Oxylophoneaktp:Fetcfkub:Ocube/dieA2ican:OCubanform:Acube-shapedut:Oelbowutliberec:O4-roommkudr:Ito|sewad:Oneedleworkajx:O9er:Ostitchil:Oneedleilar:Osewing|equipmentilarkorb:O5-basketilaruj:O7oxist:Otailoristin:Oseamstressofaden:Othreadokurs:Osewing|classomasxin:O5-machineakuf:Ocap/bonnetbkugl:Obulleting:O5|casingikuir:Ito|cookart:Aculinaryej:Okitchenejstabl:Odresserigx:Ito|cookist:O3istin:Ofemale|cookit:Acookedpot:O3ing|potnkuk:Ocakeabur:Okookaburrabakej:Opastry|shopbakist:O6cookej:O6shopet:Ocupcakeetuj:O6|panol:O1ckooolhorlogx:O5|clockum:O2umberumet:Ogherkinurb:Opumpkin/squash/gourdurbac:Osquash-type|lifeformurbet:OzucchiniBkul:Omosquitoer:Ospoonercxerp:Ito|(up)|dishereg:Olarge|spooninar:Aculinaryis:Oflat/piece|of|stage|scenerym:Oblade/stalkmin:Opeak/acmeomb:Ocoulombot:Oshort|pantsp:Oblame/fault/guiltp:Aguiltypig:Ito|accuse/blamepig:O4ation/charge/indictmentpig:A6orypigit:O4ed/defendantpik:Omosquito-bitepul:Oculpritsxirmil:Omosquito-nett:Ito|worshipt:O6/culttiv:Ito|cultivatetivad:O7iontur:Ito|cultivate/growtur:O3ureturej:Oplantationturkamp:Ofarmlandvual:Omosquito-netakuman:OCumanakumin:Ocuminakumis:Okoumissakumulus:Ocumulus|cloudZkun:Etogetherag:I1|cooperateajx:Ounion|of|setsali:Ewith|othersauxtor:Oco-authorbat:Ito|(together)|beatbekigx:Ito|squabblefand:Ito|merge/collatefand:Ofusionfandajx:Oalloyfripon:Oaccompliceig:Ito|uniteigx:Ito|(together)|associate/comeigx:Ojoining/junctionikl:Orabbitir:Ito|participatejxur:Ito|conspirekudr:Ito|(together)|sewkudr:Oseamkudrajx:O3kulp:Aaccessorykulpul:O2omplicelabor:Ito|(together)|worklaborad:Ito|cooperatelaborad:O7ionlig:Ito|connect/joinlig:O6ionligajx:O1mposition|or|relative|product/product|mapping|or|pathludant:Ofellow|playermet:Ito|(together)|putmezurebl:Acommensurablemunt:Ito|assemblenaskit:Acongentital/innateokazec:O1incidenceordig:Ito|coordinateport:Ito|(along)|bringprem:Ito|compresspremil:O7orpusxigx:Ito|colliderespond:Ito|correspondrespond:O1nnectionrim:Ito|rhymerul:Oconcurrencysenc:O2notationsendajx:Oattachmentsent:Osympathysid:Omeetingsidantar:Oassemblysxov:Ito|kerntekst:Ocontexttir:O3raction/contractive|mappingtirigx:Ito|cowerbkunul:O1mpanionar:O5yakunvarianc:O1varianceckunven:Ito|(together)|getOgathering/meetingig:Ito|(along)|takeakunviv:Ito|huddlebkunvok:Ito|convokeOroll-callmkup:Ocupping|glasse:Ocompartmentl:Ito|couplelet:O5tlil:O4ingol:Odome/cupolaon:Ocouponr:Ito|copperplater:O5r:A5rist:O5smithroepok:O5|ageropirit:OchalcopyriteZkur:Ito|runac:Ito|(medically)|treatac:Amedicalacad:Otreatmentacej:Ohealth|resortacil:Omedicineacist:Ophysicianagx:Ito|(bold|enough)|beagx:Ocourageagx:Abraveagxig:Ito|encourageagxig:O8mentagxigx:Ito|(encouraged)|becomeagxigx:Obecoming|encouragedatak:Ito|assault/stormatak:O9ormingator:Oguardian/trustee/conservatorb:Obend/curveb:A2t/curvedbec:Ocurvaturebecocentr:Ocenter|of|curvaturebecocirkl:Ocircle|of|curvature/osculating|circlebecoradius:Oradius|of|curvaturebecradius:O9curvaturebig:Ito|bendbigx:Ito|bendbigx:O3/curvebigxad:Ito|twistcxatovi:Okurchatoviumd:OKurdd:A3isheg:Ito|race/runegist:Orunnerej:Orace-course/trackent:Ocurrenti:O2iaier:Ocourieriersxip:Otransporterioz:Acurious/interestingiozajx:Ooddity/curioium:Ocuriumkuli:O2culiokum:Oturmerics:Oclass/coursesil:Oroutersiv:Ocursive/italicsor:O3ort:Ashorttagx:Obroker|feeten:Ocurtaintig:Ito|shorten/abbreviatez:Oexchange|ratedkusen:Ocushionsak:Opillowcase/cushion|coverteg:O9/cushion|covertegil:O9/cushion|coverckusx:Ito|lieig:Ito|layigx:Ito|(down)|lieekutim:Ito|(in|the|habit|of)|beOhabit/customAusualE4lyigx:Ito|(accustomed)|getakutr:Ocutterakuv:Otub/vatbkuz:Omale|cousinin:Ofemale|cousinakvadrant:Oquadrantgkvadrat:OsquareAquadratic/squareegal:Aidempotentig:Ito|squareit:Acheckeredmejl:Osquare|mileur:Oquadratureakvadrig:O4igaakvadrik:O5cakvadril:O5llebkvak:Ito|croak/quacker:OQuakerdkvalif:Ito|qualifyik:Ito|qualifyik:Oskill/qualificationikit:A4fulakvalit:Oproperty/qualityckvant:Oquantityum:O4umummehxanik:O6|mechanicsbkvarangul:O2drangleA7ularbkvarc:O2rtzenton:Afour|hundredthakvardekon:A1rtiethakvaredr:Otetrahedronakvark:Oquarkakvarlater:O2drilateralakvarliterajx:Otetragraphakvarmiliardon:Afour|billionthbkvarmilion:A4millionthon:A9onthakvarmilon:A4thousandthbkvarobl:Aquadrupleig:Ito|quadrupledkvaron:O2rterAfourthhor:Oquarter|of|an|hourjar:A6lyakvarpiedul:O2drupedekvart:Ofourthal:Ocity|districtalacx:Oslumerm:Oquadrinomialet:O2rtetbkvas:Okvasst:Otasselakvazar:Oquasarakvazauxcxast:Ademureakvazauxdecmor:A5akvazauxdir:Ito|insinuate/suggestakvazauxkompakt:Aquasicompactakvazauxprud:Ademureakvazauxvokal:Osemivowelhkver:Ito|cooel:Ito|quarrelel:O6elem:Acantankerous/quarrelsomek:Ooakk:A2kej:O2-woodkolign:O7akvestist:Omendicant|friarakvestor:Otreasuror/quaestorgkviet:Ocalm/quietA3Equietlyec:Ocalmness/quietnessigx:Ito|subsidemas:Orest|masstemperament:Astaidakvincenton:Afive|hundredthakvindekon:A1ftiethakvinedr:Opentahedronakvinjamb:Oiambic|pentameterakvinlater:Opentagonakvinmiliardon:Afive|billionthbkvinmilion:A4millionthon:A9onthakvinmilon:A4thousandthdkvino:Oquinoabl:A3tupleblig:Ito|quintuplen:Afifthckvint:O4esenc:Oquintessenceet:O5tfkvit:Apaid-up/out|of|debtanc:Ito|receiptanc:O6ig:Ito|(from|debt)|releaseigx:Ito|(off)|payigx:Osettlementakvocient:Oquotient/ratioakvodlibet:Omedley/potpourriakvorum:Oquorumakvot:O2ta/sharealabial:Olabialalabirint:Omaze");
  prefix = fillDictionary(prefix, "Blabor:Ito|workOjob/workabel:Oworker|beeatori:Olaboratorybors:Oemployment|officedivid:Odivision|of|labordonant:Oemployereg:Ito|(hard)|workej:Oworkplaceem:Ahard-workingestr:Osupervisorestrin:Owoman|supervisoret:Otrifleil:Otoolintensiv:Alabor-intensiveist:Oworkeristin:Ofemale|workerkapital:Oworking|capitalkondicx:Oterm|of|employmentkonflikt:Olabor|disputelok:Oplace|of|employmentmaltauxg:Adisabled/unfit|for|workmerkat:Olabor|marketnekapabl:Adisabled/unfit|for|workposten:Ojobpret:Ain|working|ordertabl:Odesk/desktopul:Oworkerhlac:Atiredeg:Aexhausted/tired|outegig:Ito|(out)|tireert:Olizardig:Ito|tireigx:Ito|tirex:Ito|lacex:O3dlad:Osheet-metalbotel:Oflaskskatol:Otin|canurb:Oslumalaf:Olavadlag:O1keet:Opondr:Obearingun:Olagoonblaik:O1ymanA2rlak:Ito|lacquer/varnishO9rnishe:O2keymus:Olitmuson:Abrief/concises:Odiarrheas:Aloosesigil:Olaxativet:Ito|lactatet:Omilkt:A3ytad:Olactationtajxfabrik:Odairytec:Amilkytol:Ooilclothtoz:Olactosetuk:Olettucetum:Oroenlam:Ito|limpOllamaAlamea:O2abaston:Ocrutchen:Othin|plateenig:Ito|laminateent:Ito|lamenti:Odead-nettleinari:Obrown|seaweedp:Olamppion:Ofairy|lamppir:Ofirefly/glow-wormpsxaltil:Olight-switchulan:Owoolc:Olance/spearcet:O4t/skalpelcx:Ito|launchd:Ocountrydan:Oinhabitantdgraf:Olandgravedintern:Ohinterlanddlim:Oborderdstrat:Ohighwayfaden:Oworstedg:Otongueget:Otabgtrink:Ito|lapgust:Olobstergvor:Ito|languishgvor:O4ort:Aslowtan:Olanthanumtern:O3ernug:Ofluff/downblaos:ALaotianan:O6hlap:Oburris:Olunar|causticlac:ALaplaceslacoperator:O5ianon:O2pon:A3ishonin:O6|womansan:Onipplewortblard:Ito|lardObaconflargx:OwidthA2eE3lyanim:Aopen-mindedanimec:O9dnessec:Owidthalarik:Olarchblaring:O2ynxit:O4gitisblarm:Ito|weep/cryOtearalarv:Olarvaelas:Ito|leave/allower:Olasert:A2t/latesttatemp:Arecenttatemp:E5lyslat:Oslat/latheks:Olatexent:Ahidden/latent/dormanter:Opolygon|side/angle|armin:OLatininid:ORomance|languageinid:A6ir:Omeadow|pea/vetchlingis:Olatticeitud:O2itudekrad:Otrelliskurten:OVenetian|blindrin:Olatrineun:Obrassv:OLatvianv:A6vin:O6|womanvuj:A6vujan:O6alauxb:Oarborelauxd:Ito|praiseO5an:Olaudanumind:Apraiseworthyir:Eallegedlyalauxebl:Eas|possiblealauxgrad:Egraduallyalauxkarakter:Ein|characteralauxlargx:Ecrosswaysalauxlegend:Alegendaryalauxlegx:A2alalauxliniig:Ito|(up)|align/linealauxliter:Eto|the|letteralauxlong:Elengthwisealauxmod:Afashionablealauxnominal:Aat|paralauxofic:Eofficiallyalauxplacx:Eas|one|pleasesdlauxr:Olaureleat:O4ate/winneregul:Aregularenci:Olawrenciumalauxsistem:Asystematicblauxt:AloudE3lyalauxvic:Ein|turnalauxvid:Eby|sightalauxvol:Eas|you|wish/at|willblauxvort:AliteralEword-for-word/verbatimmlav:Ito|washajxpincxil:Oclothespinang:Oavalancheej:Owashroomend:Olavenderistin:O1undresskuv:Owashing-up|bowlmasxin:O6|machinepulvor:Odetergent/soap|powderpurigebl:Awashabler:Olavrasod:Owashing|sodaurs:Oraccoonblaz:Olassour:Osky|bluealebeg:ALebesgue'salecion:Olessonalecitin:O1cithinbled:O1atherajx:O6|goodrleg:Ito|readaci:Olegationad:Oreadingajx:O6|matterant:O3erat:Olegateebl:A2ibleend:O2endend:A5aryi:O2ionil:Oreaderind:Aworth|readingitim:Ito|legitimizeitimil:OI.D.om:Ovegetableomgxarden:O8|gardenx:Olawxer:Alightjlek:Ito|lickant:Omargueriteantet:Odaisyci:Ito|lectureci:O6sik:Ovocabularysikologi:Olexicologysikon:O5ntor:O1cturerum:Ito|(cunnilingus|on)|performelem:Olemmaing:O3ingniskat:O2niscatepir:O2piraur:O2uralens:O1nsblent:O2tilug:Ofrecklecleon:Olionfauxk:Osnapdragontod:Odandelionaleopard:Oleopardblepor:Oharehund:Ogreyhoundblepr:Oleprosyul:O2eralepton:O2tonglern:Ito|learnej:Oschoolejan:Opupil/scholarejestr:Oprincipalig:Ito|teachit:Alearnedolibr:Otextbookblert:Askillfulec:O4elesiv:Ito|washOlyeakv:Olatherej:O1undryistin:O5essaletargi:Olethargyfleter:O2terblok:Onotepadkest:Omailboxkolomb:Ocarrier|pigeonpaper:Owriting-paperportist:Opostmanaleuxkemi:Oleukemiaaleuxkocit:Owhite|blood|cell/leukocytealeuxtenant:Olieutenantilev:Ito|liftant:ALevantineantan:O8id:O2iteigx:Ito|(up)|rise/getil:Ocrow-barjatan:Oleviathankoj:Ogilliflower/stockstang:Ocrow-barblez:Ito|harmO3alian:Otropical|vinealias:Oblue|limestonebliban:ALebanesean:O7alibel:Odragonflynliber:Ofreedom/libertyA3E3lyal:Aliberalalism:O6ismec:Ofreedomi:ALiberianian:O7ianin:O7|womanig:Ito|release/freeigx:Ito|(free)|gettemp:Ospare|time/vacation|timevol:Avoluntaryvol:E7ilydlibi:ALibyanan:O5anin:O5|womand:Olibido/sex|drivejlibr:Obookar:O3|collectionej:Olibraryet:Obookletobretar:O3caseobutik:O3storeosxrank:O3caseotenad:O3-keepingotenist:O8erovendist:O3sellerdlice:Ohigh|school/secondary|schoolan:Ostudentnc:Olicensencplat:O6|platedlici:OboxthornALycianan:O5anin:O5|womanclicxi:Olycheearb:O5|treeuj:O5blidi:ALydianan:O5alien:Ospleenalift:Oelevatorulig:Ito|tie/linkOlink/leagueajx:Obraid/stringament:Oligamentferm:Ito|(up)|tieil:Obond/tieillist:Olinked|listn:Owoodn:A3enner:Osplinternit:Obrown|coal/lignitenogarn:Ito|(wainscotting|on)|putnokarb:Ocharcoalnolaborist:Owood-workernopec:Opiece|of|woodnoskarab:Owood-boring|beetleul:Oligula/liguleur:OLigurianur:A7ustr:Oprivetverb:Ocopula|verbalihxtenstejnan:OLiechtensteinermlik:Ito|leakO3en:Olichennid:Oragged|robinopodioplant:Oclub-mossv:Oliquidv:A5vajx:O5vid:Ito|liquidatevid:O7ionvid:A5vig:Ito|liquefyvor:O4uralilak:O1lacblili:O2yput:Adwarf/tinyulim:Ito|boundO4ary/limitak:Oslugaked:O3-type|lifeformand:Odabb:Olimbdifin:Ito|(out)|tracees:Olimitesinfim:Oinferior|or|lower|limitesosuprem:Osuperior|or|upper|limitf:Olymphf:A4aticig:Ito|limitig:O4ation/restrictionig:Arestrictiveigit:Aconfined/limited/restrictedokaz:Oborderline|caseonad:Olemonadeonit:Olimonitetusx:Ito|adjointusxant:A2acentvlin:Oflaxagx:Olinencx:Ito|lynche:Oline|of|communicationear:A3argv:Olanguagegv:Alinguisticgvan:Ospeakergvist:Olinguistgvistik:A7icgvoklasif:Olanguage|classificationgvoscienc:Olinguisticsi:Ito|linei:O3i:A3ariar:Ostaff/staveifald:Oline|or|word|wrapiil:Oruler/straight-edgek:Olynxole:Olinseed|oiloleum:O2oleumtel:O2teldlip:O1phar:Omoustache-hairharar:O8id:Olipidflir:Olyre/liraik:O2ic/lyric|poetryik:A4alikec:O4ismikist:O4|poetl:Ito|murmuralisp:Ito|lispblist:O2tig:Ito|listzlit:ObedEin|bedajx:Obeddingani:Olitanycim:Obedbuger:Olettereratur:Oliteratureeratur:A5ryerum:Ito|spellerumil:O4-checkerervalor:Oletter|valuei:Olithiumkadr:Obedsteadkovril:Oblanketkusen:Opillowmalsan:Abedridden/confined|to|bedorin:Operiwinkleotuk:Osheetov:OLithuanianovin:O9|womanr:Olitresxrank:Ocupboard-bedtuk:Osheeturgi:Oliturgyurinad:Obed-wettingvagon:Osleeping-caraliut:Olutegliv:Alefter:Ito|deliver/supplyer:O6yerauxt:O7|vanerauxtomobil:O9anon:OLivonianre:Oliveryelob:Olobeeli:O3liai:Ito|lobbyi:O4iad:O4ingblod:O1tikl:O1diculealof:Ito|luffwlog:Ito|lureOattraction/logajx:Obaitaritm:Ologarithmik:O2icik:A4alikec:O6nessil:Obaitistik:Omathematical|logicotip:Ologox:Ito|(in)|livexad:Ohabitationxant:Oinhabitantxant:Ahousedxantar:Opopulationxebl:Ahabitablexej:Odwellingxi:Otheater|boxxig:Ito|(up)|accomodate/putxig:Oaccommodationxistik:Ologisticsxlok:Oresidence/dwelling-placexocxambr:Oliving-roomblojal:Afaithful/loyalec:Oloyaltyalojt:Obourbot/eel|poutolok:Ito|locate/placeOplaceAlocaladverb:O4|adverbajx:O4e|categoryajxar:O5alizil:O3torar:Ogeometric|locusauxt:Olock-outkaz:O2ative|casenombr:Oadicity/arityomobil:Otraction|engineomotiv:Oenginesi:Ocrossbillust:Ograsshopper/locustalol:Orye|grassdlombard:Ito|pawnO3ingej:O3shopist:O3brokerilong:OlengthAlongE3an:O3anec:Olengthetemp:Along-time/prolongedetemp:Efor|a|long|timeitud:Olongitudetemp:Efor|a|long|timealonicer:Ohoneysucklealorantac:Omistletoe-type|lifeformalord:Olordalorn:Obinocularsflot:Ito|(lots)|drawOlotec:Arandomeri:Olottery/raffleum:Ito|allotus:Olotusbloz:A1oseangx:O1zange/rhombusZlu:Ito|rentant:O3er/tenantbrik:Ito|lubricatebrik:O7ionbrikajx:O6ntbrikil:Ooilcancern:Ohanging|lampd:Ito|playd:Ogamedej:Oplaygrounddil:Otoydkart:Oplaying|carddon:Ito|(out)|rentebl:Afor|rentf:Ochinese|okra/luffagr:Oluggergrovel:O2sailig:Ito|(out)|rentigit:Arented|outk:Oskylight/porthole/Lukekan:Ostag|beetlekontrakt:Oleaseks:Oluxuryks:A4iousksajx:O4yksec:O5ksemburgan:OLuxembourgerksemburgi:A9erksemburgian:O9erkt:Ito|struggle/wrestlektist:Owrestlerkum:OTurkish|delightl:Ito|lull/rocklil:Ocradlelkant:Olullabym:Ito|shinem:Olightm:Abright/lightmb:Oloinmbajx:O3mbild:Oslide/transparencymbrik:Oearthwormmdisk:OCD/compact|diskmdiskeg:ODVDmgxen:Ito|dazzlemhor:Olight-hourmig:Ito|(up)|illuminate/lightmig:Olightingminesk:Ito|luminesceminesk:O8nceminesk:A9tmjar:Olight-yearalumminut:O5minutealumpuls:Ito|blinkalumrapid:Ospeed|of|lightblumsekund:Olight-secondO9ndalumsensil:O7nsoralumsensiv:A9itivealumsxirmil:Olamp-shadealumtag:Olight-dayalumtub:Ofluorescent|lampalumtur:Olighthouseflun:OmoonAlunarari:O4ia/money|plantatik:O3tic/sleepwalkercx:O2ch/snackd:OMonday'glup:Owolfag:Orente:Omagnifying|glassid:Owolf-cub/young|scoutin:Oshe-wolfol:Ohoprez:Orent|moneyalustr:Ochandelierflut:Ito|solderajx:O5eran:OLutheraneranism:O7ismerism:O9mr:Ootteramaat:Omatefmac:O2zo/unleavened|breadedon:AMacedonianer:Ito|maceratex:Ito|chewx:Omatchxgum:Ochewing-gumamadagaskar:AMadagascanamadjar:O1gyaramadon:O1donnaumag:Omagusazen:Ostoreazeneg:Odepartment|storeazin:Omagazinei:O2ici:A4alistr:O1ster's|degreeistrat:Ocity|council/town|councilm:Omagmanat:O2natenet:O3etnet:A5icnetig:Ito|magnetizenetism:O6smnetit:O6tenetofon:Otape-recordernetoskop:Ovideo|recordernez:Omagnesia/magnesium|oxidenezi:O6umnoli:O3oliar:Ameager/skimpy/skinnyamahagon:Omahoganyamahometan:OMuslimamahx:Omachbmaiz:O1ize/cornflok:Ocorn|flakermaj:OMay'a:O2aest:Omajestyest:A5icestec:O5yolik:O2olicaonez:O1yonnaiseor:O1jororan:O4amoritat:O4ityskarab:Ojunebugstr:Ito|masterstr:O1estro/masterstrajx:O1sterpiecestroverk:O9euskl:Ocapital|letteruskl:A6/uppercaseusklig:Ito|capitalizeamakabr:Amacabreamakadam:O3damamakak:O3quebmakaron:O3rooni:O5niamakedon:OMacedonianamakiavel:A2hiavelliandmakler:Ito|brokerO5ingajx:O5age/commissionist:O5dmakro:Omacrocefaled:Osperm|whale-type|lifeformp:Okangarooped:O7-type|lifeformemaksim:Oprinciple/maximum:Omaximumum:A4alum:Eat|mostumigant:Opoint|of|maximumcmakul:Ito|stainO4et:Ospotamakzel:OjawZmal:OoppositeA7Eon|the|contraryabon:Ito|unsubscribeabund:Ascarceafabl:Aharshafableg:Agrimagrabl:Ahorribleagraf:Ito|unclampaj:OMalayajzi:A4sianajzian:O8akcept:Ito|rejectakcept:O5ionakit:Omalachiteakr:Abluntakrig:Ito|bluntakut:Aobtusealt:Alowalteg:Arock-bottomaltgerman:ALow|Germanaltig:Ito|decrease/loweraltig:Olowering/reductionaltigx:Ito|(low)|becomealtmar:Olow|tidealtrelief:Obas-reliefaltvalor:Ainferioram:Ito|hateam:O3amik:Oenemyamik:Ahostileamikec:Oenmityamind:Ameanantaux:Abackantaux:Ein|backantauxen:Fbackwardsantauxplan:O3groundaper:Ito|disappearaper:O8anceaperig:Ito|liquidateaprob:Ito|disapproveaprob:O8alaprobeg:Ito|(greatly|of)|flunk/disapproveaprobind:Aobjectionable/blameworthyari:Omalariaatent:Ito|neglectaux:Oantialternative/Nicod|or|Peirce|function/NOR|operatorauxtokrat:Anon-autocraticavantagx:Odisadvantageavantagx:Adetrimental/disadvantageousavantagx:E9lly/disadvantageouslyavar:Agenerousbmalavi:AMalawianan:O7bmalbel:Auglyeg:Avery|ugly/horribleamalben:Ito|curseamalblindig:Ito|(the|eyes|of)|openbmalboben:Ito|unroll/unwindad:O5ing/unwindingkmalbon:Abadajx:Oabusefar:Ooutragefartant:Anot|wellhumor:Acrankyig:Ito|spoiligx:Ito|(bad)|goigx:Ocorruption/decay/depravationkvalit:Ainferiorsxanc:Obad|lucksxanc:Eunfortunatelyamalbrav:Acowardlyamalced:Ito|confrontdmalcxast:ApromiscuousElewdlyul:Oslutulin:O3amaldauxr:Afleetingamaldec:Aindecentemaldekstr:AleftEon|the|leften:Fto|the|leftum:Anegatively|orientedum:Ecounter-clockwisebmaldelikat:Acrude/harshul:O4|or|vulgar|personamaldens:Asparseamalderivajx:Oantiderivative/back-formation/indefinite|integral/primitiveamaldetal:Ageneral/vaguebmaldik:Athinigx:Ito|(thin)|becomebmaldiligent:Alazyec:O2inessamaldiskret:Aindiscreetamaldolcx:Abitterbmaldorm:Ito|(awake)|beAawakebmaldung:Ito|(off)|fire/layOfiring/laying|offbmaleben:Aunevenajx:Obumpamaleblig:Ito|inhibit/preventbmalebri:Asoberigx:Ito|(up)|soberbmalediv:AMaldivianan:O8amalegal:Adifferentamalekvilibrig:Ito|destabilize/unbalanceamalelegant:Acrude/vulgaramalembaras:Ito|ridamaleol:Oankledmalesper:Ito|despairO6A3erateE3airinglyemalest:Ito|not|existim:Ito|despiseim:Ocontemptimec:Oabjectionimind:A5amaletern:Atemporaryhmalfacil:Ito|(difficult)|beAdifficultEwith|difficultyajx:Odifficulty/troubleec:O9ig:Ito|(difficult)|makeig:Ito|(difficult)|makeigx:Ito|(difficult)|becomeamalfald:Ito|(out)|spreadamalfamiliar:Aformalamalfavor:Adisadvantageousamalfaz:Aout|of|phase/phase-delayedamalfekund:Ainfertile/barrendmalfelicx:AunhappyE1fortunatelyig:Amiserableul:Ounfortunategmalferm:Ito|openO3ingajx:O3|spaceeg:Ito|(wide)|openetit:Aajarigx:Ito|openit:A3amalfervor:Ahalf-heartedgmalfid:OsuspicionA7usel:Aunfaithfuleligx:Ito|betray/defecteligx:O5al/defectionelul:Odeserter/renegade/betrayer/defectorem:Asuspiciousamalfierigx:Ito|(down)|backcmalfini:OinfinityA6edimensi:A7-dimensionalamalfirm:Ashakeycmalflu:Onon-flows:Olow|tides:A2-tide/ebbamalfon:Oforegroundfmalfort:AweakElightly/weaklyajx:Oweaknessig:Ito|weakenigx:Ito|weakenik:Afragile/frailamalfremd:Afamiliaramalfrenez:Aprudentbmalfresx:Astaleaer:A1uffyamalfrivol:Aseriousjmalfru:Ito|(late)|beOdelayAlate/slowE3ig:Ito|delayigx:Ito|(late)|getigx:Odelaymaten:Elate|in|the|morningnokt:E4at|nightposttagmez:E4in|the|afternoonbmalfunkciig:Ito|(off)|turnx:Ito|(not|working|right)|becmalgaj:Adreary/sadec:Osadnessn:Ito|loseamalglat:Aroughamalgraci:Aawkwardgmalgrand:Asmallanim:Apetty/small-mindedanimec:O3iness/small-mindednesseg:Atinyig:Ito|reduceigx:Ito|decrease/declineioz:Apettyamalgras:Athin/gauntamalgraux:Enonethelessamalgrav:Atrivialbmalgxentil:Arudeeg:Avery|rude/shamelessemalgxoj:Ito|(sad)|beOsadnessA2ig:Ito|saddenig:Adismal/miserableamalgxust:Ainaccurateamalhard:Ito|annealingamalhav:Ito|lackhmalhel:AdarkE3lyblu:A3|blueigx:Ito|darkenp:Ito|hinder/inhibitp:O3rancep:A3eringpajx:Ohandicap/obstacleamalhis:Ito|loweramalhonest:Adishonestamalhonor:O2graceamalhuman:Ainhumaneamalhumid:Adryamalhumil:Aarrogantqmali:AMaliananin:O5|womanc:Ocraftiness/cunningc:Amalicious/mischievouscet:Aill-naturedgn:Aviciousmpotent:Apotentmun:Aliablendiferent:Acaringnflaci:Odeflationnhibici:Oabandonnklin:Aaversenkluziv:Aexclusivenstalil:Ouninstallernteligent:A3telligentntim:Acasualnvalid:Aable-bodiedamaljes:Ito|(no)|sayfmaljun:Aoldec:O2|ageg:Ito|unharnessul:Oold|manulej:O3people's|homeulin:O3womancmaljust:Ainiquitousajx:O1justiceec:O8amalkaj:ONAND|function/nonconjunction/Sheffer|strokeamalkapabl:Aincapableamalkapric:Astablebmalkar:AinexpensiveEcheaplydmalkasx:Ito|revealAabove-boardEfrankly/openlyigx:Ito|(revealed)|beamalkaten:Ito|free/unshackleamalkav:Asolidamalkiel:Punlikebmalklar:Aindistinctigx:Ito|blur/fadeamalkler:Auneducatedamalkod:Ito|decodeamalkoket:Abashfulamalkolektiv:Aindividualamalkomb:Ito|dishevel/tousleamalkoment:Ito|uncommentbmalkomfort:OdiscomfortAuncomfortableamalkomik:Atragicamalkompakt:Aloose/sandyamalkompatem:Aharsh/ruthlessamalkompetent:Aincompetentamalkompleks:Asimpleamalkomplet:Apartialamalkomplik:Auncomplicateddmalkompon:Ito|decompose/decompound/dissect/resolveajx:O7itionebl:A7ableigx:Ito|decomposeamalkomun:Arareamalkoncentr:Ito|dilute/disperse");
  prefix = fillDictionary(prefix, "amalkonciz:Awordyamalkondamn:Ito|(not|guilty)|acquit/findamalkonekt:Ito|disconnectamalkonfes:Ito|deny/disownamalkonkret:Aimaginaryamalkonsekvenc:Ainconsistentamalkonsent:Ito|disagree/refuseamalkonservativ:Aliberalamalkonsil:Ito|(against)|adviseamalkonstant:Atemporarydmalkonstru:Ito|(apart)|demolish/takeOdemolitionad:O9igebl:A1structiblebmalkontent:Adissatisfiedul:Omalcontentamalkontraux:Ahelpfulamalkonven:Ainappropriate/unfittingbmalkonvergx:Ito|divergeA6ntamalkorekt:Aincorrectamalkork:Ito|uncorkbmalkovr:Ito|discover/uncoverO7ycmalkresk:Ito|decreaseO7ant:A6ingamalkripl:Aable-bodiedamalkulp:Ainnocentamalkupl:Ito|uncouplefmalkuragx:OcowardiceA5lyEunbravelyec:Ocowardiceigx:Ito|(discouraged)|beul:Ocowardamalkviet:Aupsetamalkvit:Aindebtedamallaborem:Alazyamallac:Awell-restedcmallaks:OconstipationA8edigil:Oadstringentamallam:Aable-bodiedamallargx:Anarrowamallastatemp:Aold-timecmallauxd:Ito|scoldO4ingind:A2rnworthyamallauxlegx:Aillegalamallauxregul:Airregularamallauxt:Aquietamallauxvort:Aparaphrasedamallern:Ito|unlearnamallert:Aawkwardbmallev:Ito|lowerigx:Ito|(down)|descend/goemalliber:Aunfree/occupiedej:Oprison/jailig:Ito|imprisonul:Oprisonerulej:O5/jailamallig:Ito|untieamallog:Arepulsiveamallojal:Adisloyalamallok:A2tantemallong:Ashortdauxr:A4-livedig:Ito|abbreviate/shortenig:O8ionigajx:O9on/abridgementamalloz:Atightamalluks:Acheapbmallum:OdarknessA3amalmasiv:Ahollowamalmatur:Aunripe/immatureamalmemstar:Adependentamalmend:Ito|cancel/countermandamalmild:Aroughamalmiop:Afar-sightedamalmobilizigx:Ito|(demobilized)|bebmalmoder:Aimmoderaten:Aold-timeamalmodest:Aimmodestbmalmol:Ahardnuk:Astubbornbmalmoral:AimmoralE6lyemalmult:Aa|small|amount|ofE1littleekost:Ainexpensiveekost:Echeaplynombr:Afewamalmunt:Ito|(apart)|takeamalnaiv:Ashrewdamalneces:Aunnecessaryamalnervoz:Aconfidentbmalnet:Orough|draftAunclearamalneuxtral:Ainterestedcmalnobl:Avile/ignobleec:Oabjectionul:Ocreepamalnormal:Aunusualamalnov:Aoldamalnud:Acoveredbmalobe:Adisobedient/insubordinateem:A9t/insubordinateamalobstin:Atractablecmaloft:ArareEseldomajx:Orarityamaloportun:Ainconvenientcmalord:Oconfusion/disorderig:Ito|(into|disorder)|throwinar:Aunusualamaloriginal:Aderivativeemalpac:Ito|quarrelO6ienc:Oimpatienceienc:A7tigx:Ito|(into|a|quarrel)|getamalpak:Ito|unpackamalpal:Aflushedamalpar:Aoddamalperfekt:Aimperfectamalpermanent:Atemporarydmalpermes:Ito|forbid/prohibitat:A5denigx:Ito|(forbidden)|beit:Aforbiddenbmalpez:Alight-weightig:Ito|lightenamalplacx:Aunpleasantamalplat:Abumpyamalplej:Eat|least/least|oftenemalplen:Aemptyagxul:Ominorec:Oemptinessig:Ito|emptykreskul:Ominorqmalpli:Alessaltig:Ito|decrease/loweraltigx:Ito|(down)|gobonigx:Ito|worsenfortigx:Ito|weakengravig:Ito|(less|important)|makeig:Ito|decreaseig:O7igebl:A6ableigx:Ito|decreaseigx:O7longig:Ito|abbreviate/shortenmult:Ominoritypezigx:Ito|(weight)|losevarmig:Ito|(down)|coolvarmigx:Ito|(cold)|getvarmigx:Ocoolingamalpolurit:Afrostedamalpopular:Aunpopularamalpraktik:Aimpracticalbmalprav:Ito|(wrong)|beAincorrectamalpreciz:Aimprecisebmalprefer:Ito|subordinateO9ionamalprem:Ito|releasebmalpret:Aunreadyend:Odisclaimeramalprimitiv:Aadvancedamalprivat:Apublic-ownedamalprobabl:Aimprobablebmalprofit:OlossAdisadvantageousamalprofund:Ashallow/superficialbmalprogres:Ito|decline/recedeem:Areactionaryemalproksim:Ito|(far|away)|beAdistantEfar|away/remotelyec:Odistanceigx:Ito|(away)|goamalpropr:Asomeone|else'sbmalprosper:Ito|decline/recedeO2ayamalprotest:Obeing|resigned/submissionbmalprud:Apromiscuousent:Aunreasonableemalpur:Adirtyec:O3inesseg:Afilthyig:Ito|soiligx:Ito|(dirty)|getdmalrapid:AslowE3lytrajn:O3|trainvagonar:O9amalreal:Aimaginaryamalreciprok:Aone-sidedamalrefleksiv:Aantireflexiveamalregul:Airregularamalrekt:Aindirectbmalrespektig:Ito|demoteO4ionfmalricx:Apoorec:O1vertyul:O1or|personulej:O3houseulprizorgad:Otaking|care|of|the|needyulprizorgist:Operson|who|takes|care|of|the|needybmalrig:Ito|dismantleid:Afloppyemalsag:Afoolishac:Anaivex:Ofoolishnessx:A6xul:O3bmalsam:Adifferentkred:A1ssentinghmalsan:Ito|(ill)|beOdisease/illnessAsick/illej:Ohospitalet:Anot|welligx:Ito|(sick)|getul:Opatientulej:Ohospitalfmalsat:Ito|(hungry)|beOhungerA3ryeg:Ofamineostrik:Ohunger|strikeul:O3ry|persongmalsek:Awetajx:Omoistureec:Owetnesset:Amoistetig:Ito|dampenigx:Ito|(wet)|getur:Aunsafeamalseren:Aupsetamalseriozajx:Oold|wives'|taleamalserv:Ito|harmamalsever:Alooseamalsilentem:Atalkativebmalsimetri:OasymmetryA7icalamalsimil:Adifferentcmalsimpati:Ito|antipathizeO7yAunlikableamalsimpl:Acomplicatedamalsincer:Ainsincereamalsingard:Acarelessbmalsoifig:Ito|(thirst)|quenchx:Ito|(thirst)|quenchbmalsovagx:Acivilized/tameig:Ito|tameamalspecif:Ageneralamalspert:Ainexperiencedamalsprit:Adull/stupidbmalstrecx:Odétanteigx:Ito|relaxamalsubstanc:Alight/insubstantialamalsubtil:Agrossamalsuficx:Ainsufficientemalsukces:Ito|failO3ureA3edeg:O3ureig:Ito|abort/quashbmalsuper:AlowerEunderneathhmalsupr:Odownstairs/bottomEunderneath/downstairsen:Fdownenir:Ito|(off)|descend/getenir:Odescentenirej:Oslopeenpend:Ito|(down)|hangensalt:Ito|(down)|jumpamalsxalt:Ito|(off)|turncmalsxarg:Ito|(off)|discharge/fireigx:Ito|(off)|gox:Ito|unloadamalsxat:Ito|dislikeamalsxlos:Ito|unlockamalsxmink:Ito|(off|the|make-up)|takecmalsxpar:Ito|wasteO4it:A4d/spoiledomalt:OmaltAMaltesean:O6auxg:Ainappropriateen:Ito|releaseimem:Aboldraf:Ito|missrankvil:Ito|(upset)|berankvil:Aupsetrankvil:Eanxiouslyrankvilig:Ito|upsetrankvilig:Ito|upsetrankvilig:A4rankviligx:Ito|(upset)|getroig:Ounderstatementdmalutil:Ito|harmO3A3fulEdetrimentallyDmalv:Omallowalor:Acheapant:Aseriousarm:Ocoldarm:A3armec:O3armeg:A3armet:O1olarmet:A3armetigx:Ito|(down)|coolarmig:Ito|coolarmigx:Ito|coolarmsang:O1mposure/presence|of|mindarmsang:A1ld-blooded/ectothermic/haematocryalarmum:O3ast:Acramped/unspaciousastej:Onarrow|spaceastigajx:Opartial|mapping/restriction|of|a|mappingazi:Omalmseyenk:Odefeater:Afalseigl:Adistractedirt:Oviceirt:A2iousiv:Adeadol:Aunwillingol:E8lyolont:E9yolv:Ito|unrollolvad:O1windingamalzip:Ito|unzipdmalzorg:Ito|neglectAcareless/neglectfulec:O7ness/negligenceem:A7lmam:Obreastbest:Omammaleg:Oudderet:Onipplenutr:Ito|suckleon:Omammonpint:Onipplesucx:Ito|suckleul:Omammalut:O3othut:A6zon:ObraZman:Ohanda:Omannaartik:Owristat:Omanateecinel:O2chineelcxu:OManchuriancxur:A9daren:Omandarindarin:Otangerinedarin:Amandarin'dat:O4tedibl:O3ibledolin:O3olindors:O(of|the|hand)|backdragor:Omandrakeegx:O2egefaritajx:Ohandiworkg:Omangogan:O3anesegostan:O3osteenguj:O4|treegx:Ito|eatgx:Omealgxajx:Ofoodgxajxosxrank:Opantry/cupboardgxebl:Aediblegxej:Odining-roomgxig:Ito|feedgxilar:Oññeating|utensilsgxobastonet:Ochopstickgxocxambr:Odining-roomgxokart:Omenugxoprovizej:Opantryier:Owayifest:Ito|demonstrate/showifest:Omanifestifestaci:Ito|demonstrateifestaci:O9ionifestajx:Omanifestationik:Osleeveikur:Ito|manicureiok:Ocassaveipul:Ito|handle/manipulateipulad:Otreatmentis:Opangolink:Ito|(missing)|bek:Olackk:Ein|the|absencekant:Alackingkantlist:Oabsentee|listkaten:Ohandcuffkig:Ito|drop/omitamanlabor:Omanual|laborbmanovr:Ito|maneuverO7amanpilklud:Oball|gameamanplat:Opalmamanplen:Ohandfulbmanprem:Ito|(hands)|shakeOhandshakeamanradik:Owristbmansak:Ohandbaget:O6amansard:Oatticamansign:Ito|waveamansupr:O(of|the|hand)|backamantel:Ocoat/capeamanten:Ito|(hold|of)|haveamantis:Omantissaamantr:O3raamantuk:Otowelamanufaktur:Ofactory/worksamanum:Ocuffamanuskript:Omanuscriptamanuz:Ito|handle/manipulateamaori:OMaoricmap:Omapar:Oatlaspra:Afuture-generationZmar:OseaA2abu:Omarabou|storkagl:Owhite-tailed|eaglearane:Ospider|crabarme:Onavybord:Ocoast/shorebord:A4albrancx:Oarm|of|the|sea/estuarycipan:Omarzipancx:Oswamp/marshcxand:Ito|bargain/hagglecxandad:O6ing/hagglingd:OTuesday'erinac:Osea|urchinfund:Obottom|of|the|seagarin:Omargarinegarit:Odaisygxen:Omarginihxuan:O2ijuanain:Ito|marinateionet:O3onette/puppetiskarab:Oladybugist:Osailork:Ito|markk:Obrand/markkasxtan:Osea|urchinkez:Oawningkiz:Omarquiskol:Ostraitkot:Ito|layerkot:O4ksism:OMarxismmalsan:Oseasicknessmelad:Ojammit:Ocasserole|dishmonstr:Osea-monstermor:Omarblemot:O2mot/woodchuckn:Ito|marln:O3nivel:Osea-levelok:AMoroccanokan:O7okanin:O7|womanoken:O8leatheronarb:Ochestnut-treeonuj:O9reeroz:Osea|anemones:AMartiansan:O6stel:Ostarfishamarsupiul:Omarsupialcmarsx:Ito|march/walkOwalkal:Omarshalgmart:OMarch'agon:Omartagon|lilyel:Ito|hammerel:O5elad:O5ingir:Omartyririn:Ofemale|martyrKmas:Olump/massagx:Ito|massageagx:O6akr:Ito|massacreakr:O7iv:A3ivek:Ito|maskk:O3kad:O2queradekerad:O9kl:O1lekobal:O1sked|ballon:Ito|(masonry)|constructonajx:Omasonryonist:O4or:OMasorahorist:Omasoretet:O2ttar:Ospartik:Oputtytodont:Omastodontr:Ito|(the|boss|of)|dominate/betr:Oboss/mastertrin:Omistresstrostrik:Olock-outtrum:Ito|(house)|manage/keeptrumist:Ohousekeepertrumistin:O9rturb:Ito|masturbateturb:O8ionx:Oloop/meshxar:Omesh/netxin:Omachinexinar:O6ryxinlingv:O6|languagexinpafil:O6-gunxkiras:Ochainmailwmat:F1eckmateOmatcx:Ogame/matche:Oyerba|mate/Matthewematik:Omathematicsematik:A9alematikist:O9ianen:Omorningen:Ein|the|morningenhor:Omorning|timeenkoncert:Oaubadeenmangx:Obreakfastenrugx:Ored|of|dawnenstel:Omorning|stareri:Omattereri:A2erialerial:O7/dataeriigx:Ito|materializerac:O2tressric:O2rixur:A2ure/ripeurec:O4ity/ripenessurigx:Ito|ripenamauxzole:Omausoleumamav:Abadamazurk:Omazurkadmebl:Ito|furnishOpiece|of|furniturear:Ofurnitureit:A4shedcmecenat:Ito|supportOpatron/supporterec:O5age/supportamecx:Ofuse/wickbmedal:Omedalion:Olocket/medallionnmedi:Oenvironmentaci:Ito|mediateaci:O5ionan:O4ncin:O3cal|practicecin:A6cinajx:O4inekament:O7t:Ito|meditatet:O6iontad:O9tem:Athoughtful/pensiveterane:AMediterraneanum:Omediumamedol:Omarrow/medullaamefit:Oskunkamegafon:Omegaphoneamegalomani:O3lomaniaamegaom:O2ohmamegatun:O2atonbmeger:OshrewAbitchy/shrewishdmehxanik:OmechanicsA7alajx:O6smist:O6camehxanism:O6smbmejl:Omileosxton:Olandmark/milestonecmekanik:OmechanicsA7alist:O7amekanism:O6smcmeksiki:AMexicanan:O6anin:O6|womanumel:Obadgerampir:Ocow|wheatanezi:AMelanesiananezian:O9ankoli:Omelancholyankoli:Adreary/melancholyas:Omolasseseagr:Oturkeyhund:Odachshundilot:Omelilotinit:O3nitek:Ito|milkodi:Omelodyodi:Atunefulodram:Omelodramaodram:A8ticolont:Omay|bugon:Omelonongen:Oaubergineopep:Osummer|or|yellow|squashopsitak:Obudgerigardmembr:Omemberan:O3raneec:O3ershipigx:Ito|(a|member)|becomeamemdign:Oself-respectamemevident:A4evidentamemfarit:A4madeamemfid:Aconfident/self-assuredameminstruit:Aself-taughtamemkomprenebl:Eof|courseamemkonjugit:Adistinguished/invariant/normal/self-conjugateamemlernint:Aself-taughtamemmov:A4movingjmemor:Ito|rememberOmemoryajx:O2ento/souvenirand:O2orandumcxel:O4y|cellig:Ito|remindigajx:Okeepsake/souvenirind:Amemorablelikad:O4y|leaktag:Oanniversaryamemserv:Oself-serviceamemstar:Aindependentamemsxaltil:Oautomatic|switchamemvol:Awillingamenagxeri:Omenagerie/zoobmenci:Ito|mentionO6dmend:Ito|reserve/orderOorderelevi:Omendeleviumil:Oorder-formamenhir:Omenhirbmening:O2ingesit:O5itisgmens:OmindAmentalog:Ito|lieog:O2ogist:Ocheater/impostertru:Ito|menstruatetru:O8ioncment:Ominton:Ochinor:Omentorcmenu:O2uet:Ominuetr:Olyrebirdbmerg:Ito|immersex:Omerganserameridian:O2idian|linecmerin:O3noA5olan:O5|woolbmerit:Ito|deserveOmeritamerizarb:Obird-cherryamerkantilism:Omercantilismamerkat:Omarketamerkred:OWednesday'bmerl:Oblackbirdang:Owhitingameromorf:Ameromorphicjmes:Ochurch|massagx:Ito|(a|message)|sendagx:Omessagei:OMessiahianism:Omessianismiism:O9pil:O1dlarpilarb:O5piluj:O5tiz:O1stizoMmet:Ito|putabol:Ometabolismafizik:O3physicsafor:O5oraforricx:Afull|of|imagesakarpe:Ometacarpalal:O3lal:A4licalfaden:O4|wirealgarnajx:Omounting/ironwork/studsaloid:Ometalloidaloid:A8alurgi:O5urgyamorf:A3morphicamorfoz:Ito|transformamorfoz:O8ation/metamorphosisatars:Ometatarsalatez:O4hesise:Oatmospheric|phenomenoneor:Ometeoreorit:O5iteeorologi:O5ologyeorsxton:O5itei:Otrade/craftiej:Oworkshopiist:Oartisanod:Omethodod:A5icalodar:O5ologyodist:OMethodistonimi:Ometonymyop:O3per:O2rer:A3icrik:O5ro:Osubwayronom:Ometronomeropol:O4polisropolit:Oarchbishopamev:Oseagullumez:Omiddle/average/meanA5Ein|the|middleagx:Amiddle-agedagxul:O9d|personarangx:Oaccommodationmalnovnederland:AMiddle|Dutchnederland:A9chnokt:Omidnightnombr:Oaveragenombr:A6/meanon:Omeson/mesotrononombr:Oaverage/meanortant:Omid-perpendicular|of|the|segmentozoik:Omesozoictagmangx:Ito|lunchur:Ito|measureur:O6menturad:O9turebl:A5ableurit:A5edamg:Fmgamiaopini:Ein|my|opinionamiaux:Ito|meowamiddl:Eofxxamidsxipman:Omidshipman/naval|cadetfmiel:OhoneyA4cxelar:O4comblun:O4moonmonat:O8trinkajx:Omeadbmien:Ofacial|expressionet:Osmileydmigdal:Oalmondarb:O5|treekukajx:O6pastryokul:A5-eyedbmigr:Ito|migrateem:A4ntamikad:O1kadoamikoz:Omycosisjmikr:Omicroob:Ogerm/microbeobiologi:Omicrobiologyofarad:O4faradofilm:O5ilmofon:O4phoneometr:O4metreoskop:O4scopeoskop:A8icot:Ograss|voleemiks:Ito|mixajx:O2tureigx:Ito|mixomatoz:Omyxomatosispot:Opot-pourriEmil:Othousandard:O(of|millions)|thousandd:Agentle/milddec:O5ness/leniency/mildnessdig:Ito|softeni:Omilletiardon:Abillionthibar:Omillibaric:O2itiaici:O6igram:O2ligramimetr:O2imetreion:O2lionion:A6thionon:A8ionul:O6aireit:Ito|(war)|makeit:Owarit:Amilitaryitakir:Obooty/plunderitem:Awarlike/martialitir:Ito|(to|war)|goitist:Owarrioritist:Amilitaryitistar:Oarmyitkaptit:Oprisoner|of|waritpastr:Ochaplain/padreitpauxz:Otrucejar:Omillenniumon:Athousandthv:Okiteamimik:Omimeamimoz:O2osaPmin:Ito|mineO3ac:Ito|threatenac:O5ac:A5eningacant:A9gacordon:O9g|warningajx:Oorearet:Ominaretej:O2eejolign:Opitwoodekspluatad:Ominingeral:O2eraleralogi:O6ogygaleri:O3|gallerygas:Ofire-damp/mine|gasi:Otriplumbic|or|lead|tetroxide/minium/red|leadiatur:Ominiatureimum:O3mumimum:A6/minimal|elementimum:Eat|leastimumej:Opoint|of|minimumimumigant:O9inimumimumism:Ominimalismingxenier:O3ng-engineerist:O2eristeri:O2istryistr:O5eristr:A7ialistrar:Ocabinet/ministryistrej:Oministrylamp:O2er's|safety-lampor:O2or|subdeterminantoritat:O4itysercxil:O2e-detectorus:O2us|signus:P4uskl:Olowercase|letteruskl:A8usklig:Ito|(lowercase)|makeussign:Ominus|signut:O3teamiogal:Odesmanamiop:Anear-sightedamiozot:Oforget-me-notsmir:Ito|(amazed)|beOamazement/wonderabel:Omirabelleagx:O3geakl:O3cleakl:A4ulouseg:Ito|(stupefied)|beeg:Ostupefactionh:Omyrrhiad:O2iadiapod:Ocentipedeig:Ito|amazeig:A3ingind:Awonderfulmekofag:Oanteatermeleon:O2|lion/doodle|bugrakont:Ofairy-talet:Omyrtletel:OblueberryLmis:Awrongagord:Aout|of|tuneaplik:Omisapplicationauxd:Ito|mishearcit:Ito|misquotedecid:Ito|(a|bad|decision)|makedigest:Oindigestionform:Ito|misformformit:Adeformedgvid:Ito|misguidei:O2sioniist:O6aryinform:Ito|misinformkalkul:Ito|miscalculatekalkul:O9tionkompren:Ito|misunderstandkompren:O9andingkondut:O2conductlok:Ito|mislocatenom:Ito|misnameortografi:Ito|misspellpasx:Oaberration/false|stepprezent:Ito|misrepresentprononc:Ito|mispronounceter:Omysteryter:A5ioustifik:Ito|trick/hoaxtifik:Omystificationtifik:Atrickytifikacx:Ito|cheat/swindletik:Omysticism/mystiquetik:A5altikism:O5ismtikist:O5tikul:O5traduk:Ito|mistranslateuz:Ito|misuseuz:Oabuseimit:OmythA3icalar:O3ologying:Opolitical|rally|or|meetingologi:Omythologyologiist:O7istr:Omitreul:Omusselulej:O5-bed");
  prefix = fillDictionary(prefix, "gmizer:Ito|(miserable)|beOmisery/povertyAlousyEmiserablyigx:Ito|(miserable)|becomeikord:Omercyul:Opoor|personamjel:Ospinal|cordaml:Fmlamm:Fmmamnemonik:Amnemonicamobiliz:Ito|mobilizeCmod:Ofashional:Omodalityal:A4el:Ito|modelel:O4elfoli:Opatternelil:Omoldem:O1demer:O3rationer:A6eer:E3stlyerig:Ito|moderateerkost:Areasonableern:Amodernernig:Ito|modernizeerprez:Areasonableest:Omodestyest:A5estec:O5yif:Ito|modifyif:O4icationist:Omillineristin:O7kant:Ohit|songl:Ito|model/moldlopast:Oplasticinelur:Omoldingul:O1dule/modulusul:E4ogmok:Ito|mockO3eryad:O6/ridiculeajx:O6imit:Ito|(mockingly)|imitateinsult:Ito|(at)|taunt/jeerrid:Ito|(at)|laughmmol:Asoftanas:OEider-duckdav:OMoldaviane:Owaterfront/breakwaterekul:Omoleculeibden:O2ybdenumig:Ito|(up)|softenkor:Atendermatur:Aoverripeotovkoktel:OMolotov|cocktailuk:A2uccanukan:O7usk:Omolluskamomant:O1mentbmoment:O5A5aryamomordik:Obalsam|pear/bitter|gourdZmon:Omoneyahx:O2kahxej:O2asteryahxejestr:OFather|Superiorahxestr:O9eriorahxin:Onunahxinej:Oconvent/nunneryahxinejestrin:OMother|Superiorahxism:Omonasticism/living|as|a|monkak:O2kak:AMonacanakan:O6al:Omonalarhx:O3rcharhxi:O6yarhxism:O6ismarhxist:O8tark:O6at:O2that:A4lyavidul:O2ey-grubberbilet:Obank-notebiletuj:Owalletd:Oworldd:A4widedagx:Ogeological|period/epochdcivitan:Ocosmopolitan|person/world|citizendcivitanec:O9anism/world|citizenshipdmilit:Oworld|wardocean:O5oceandum:Ohigh|societydvarmigx:Oglobal|warminged:Ojackdawer:Ocoinerfigur:Oeffigyfar:Ito|coin/mintfarej:Omintfarejestr:O3-mastergol:OMongoliangol:A8goled:A8help:Ito|(financially)|helphelp:Ofinancial|helplud:Ito|gambleogami:Omonogamyografi:O4raphogram:O6moid:O3idokl:O3cleolit:O3litholog:Ito|(a|monologue)|performolog:Omonologue/soliloquyamonom:O3mialamonoplan:O3planeamonopol:O4olyamonopsoni:O4sony/buyer's|monopolyamonoteism:O3theismamonoton:A4onousamonpaperuj:Owalletamonperd:Olossbmonpun:Ito|fineO3amonrimed:O2ancial|resourceamonsinjor:Omonsignoramonsistem:O2etary|systemcmonstr:O2sterA4rousec:O6sityamonsxrank:Ostrong-box");
  prefix = fillDictionary(prefix, "zmont:Omountainar:O7|chainbreti:O1ntbretiaenegr:AMontenegrinenegran:O9net:Ohillfend:Ochasm/gorgegrimpant:Omountain|climberkaban:O8hutkrest:O8ridgeocxen:O9angeodekliv:O8slopeodors:O8ridgeopredik:OSermon|on|the|Mountpasej:Opassr:Ito|showrebl:Aapparentricx:Amountainousrigx:Ito|appearrofenestr:Oshop|windowspin:Omountain|ridgesuben:Fdownhillsupr:Omountain|peaksupren:Fuphillsxu:Omountaineering|bootvojet:O7|pathamonuj:Owallet/pursebmonument:OmonumentA7alamonuni:O2etary|unionamonunu:O9nitamoped:O1pedamops:Opug-dogYmor:Ohabit/customal:Omoralsal:A4alajx:O4alec:O4ityalinstru:O4alist:O4istatori:O3toriumbil:Omeaslesd:Ito|bited:O3dajx:Owood-staindet:Ito|nibbledpec:Omorselen:O2ainefem:O2phemefemscienc:O4ologyfin:O4inefinmaniul:O7|addictfologi:O4ologyganat:A2ganaticalgaux:Atomorrow'shxel:Omorelkel:O4mon:OMormonn:Agloomyoz:Asullens:Ito|(in|Morse|code)|sends:AMorse|codet:Ito|diet:Odeatht:A2dtanoncist:Oundertaker's|mantbat:Ito|(to|death)|beattem:Amortalter:O3erteruj:Ohodtig:Ito|killtig:Adeadlytigil:Omurder|weapontint:Adeadtokvot:O2th-ratetotuk:Oshroudtpaf:Ito|(dead)|shoottpal:Aghastlytsciigist:Oundertaker's|manu:Ocodfishuole:O6-oilus:Omulberryusarb:O7-treeusuj:O9reeimosk:O1skatel:O2catele:Omosqueit:O4itoitforpelil:O7|repellantodor:Omusky|smellul:O3ratv:AMuscovitevan:O8amost:Omustcmosxt:OYour|HonorAhonoraryin:OYour|Honoromot:Omottoacil:Owagtailel:Omotelet:O3tiv:Oreason/motiveivad:Omotivationivigx:O9ivitec:O9or:O2ororboat:O4-boatorcikl:O4cycleorciklist:O4-cyclistorist:O4istoriz:Ito|motorizeorveturil:O4|vehiclelmov:Ito|moveO3mentA7/motorialad:O7bild:Ovideoebl:Amobileet:Ito|(slightly)|nudge/moveigx:Ito|moveil:O3ment|mechanismkapabl:Acapable|of|movementliber:Oelbow-roomsabl:Oquicksandbmozaik:Omosaicplank:O5|floorbmozambik:AMozambicanan:O9amozelvin:Omoselleams:FmsZmu:Omucid:Amoldy/mustyel:Ito|grindelej:Omillelist:O3erezin:Omuezzinf:Omitten/muff/gas|mantlefl:Ogas|mantlefti:Omuftigil:O1lletgiled:O5-type|lifeformgx:Ito|roar/howlgx:O8k:Omucusk:A2ouskoz:O5|membranel:O1lela:O2lahlat:O2attolatin:Ofemale|mulattold:Ito|moldldajx:Ocastldil:Omoldlpelist:Omuleteerlt:Olarge|quantitylt:Alots|oflt:Ea|lotltampleks:Aextensiveltampleks:Ecomprehensivelyltekost:Aexpensiveltemov:Abusy/animatedltfoj:Emany|timesltig:Ito|multiply/propagateltigx:Ito|multiply/swarmltiplik:Ito|multiplyltiplik:O6icationltiplikat:O9ndltnaci:A4nationalltnombr:Anumerousltoblig:Ito|duplicate/multiplyltokupit:Abusyltpaperuj:Oring|binderltpez:Aweightyltpiedul:Omyriapod|lifeformltsignif:Asignificantltvojagxint:Awidely-traveledmi:Omummymiig:O3ificationng:Omongoosengot:O7nici:Oammunitionnicip:Ocountygmunt:Ito|assemblead:O6y/composingadohal:O7|hall|or|shopej:O8roomil:Olinkerist:Oassembler/fitterum:Osettingamuon:Omuonrmur:Owallapogil:Oabutmentbal:Osquashd:Ito|murderd:O5dem:Obloodthirstinessdem:A9tydil:Omurderous|weapondint:O5erdintin:O6ssdist:O6rkahel:Owall-tilekolorigist:Ohousepainterkramp:Obrace/cramp-ironmur:Ito|murmurmur:O5paper:Owall-paperpentrajx:Omural/wall-paintingxmus:Omousebuton:O4|buttonk:O1ssk:A3ykaptil:O1use-trapkatvin:Omuscatelked:O2ketkedist:O5eerket:O5keter:O5eerketist:O8kol:O2clekol:A3ularkoplant:Omosskverd:A3-greenli:Omueslilin:O1slinmat:Omousepadtard:Omustardtarduj:O6|jartel:Oweasel/martenvenen:Orat-poisonx:Oflyxbird:Ohumming|birdfmut:Amuteaci:Ito|mutateaci:O4ionig:Ito|muteigx:Ito|(left|speechless)|beul:OmuteBmuz:O1see:O3umel:Osnouteling:Omuzzleik:Ito|(music)|makeik:Omusicik:A4alikajx:Opiece|of|musicikamant:Omusic-loverikem:O4alityikem:A6ikgrup:Obandikil:Omusical|instrumentikinstruad:O9structionikinstrument:O9strumentikist:O4ianikistar:Obandikkest:Omusic-boxikkiosk:Obandstandiklecion:Omusic-lessoniklernej:O4|schooliklibr:O4-bookikologi:O4ologyikportil:O4-standikteatrajx:O4alikteori:Otheory|of|musicikverk:Opiece|of|musiculman:Omuslimcnab:Ohubab:Onabobocxap:Ohubcapinaci:OnationA5alajx:O7|idioman:O7anig:Ito|nationalizeec:O8tyism:O8smist:O9tonalism:O9manadir:O1diranadl:Oneedlefnaft:Onaphthaalin:O6leneodukt:Ooil|pipelineol:Onaphtholoput:Ooil|wellosxip:O3tankerfnagx:Ito|float/swimbarel:Obuoybasen:Oswimming-poolej:O9oolil:Ofinobarel:Obuoycnaiv:Anaiveec:Oconfidenceeg:Avery|naiveanajad:Onaiaddnajbar:OneighborA7ing/adjacentajx:O7hood/vicinityec:O9oddnajl:Ito|nailO3ofiksit:Afixed|with|nailsotiril:Opincersanajtingal:Onightingalecnamibi:ANamibianan:O7anin:O7|womancnan:Odwarfken:Onankeenplaned:Odwarf|planetdnap:Oturnipalm:Onapalmol:ANeapolitanolan:O9anarcis:Odaffodil/narcissusdnarkot:Ito|drugajx:O3ik:Onarcoticiul:Odrug|addictanarval:Onarwhaleqnask:Ito|(birth|to)|giveOchild-birthant:Ogenerator/generatrixantin:Owoman|giving|birthdolor:Olabor|painsig:Ito|begetigx:Ito|(born)|beigx:Obirthigxej:O4placeigxtag:O4dayint:O4-giverint:A8ingit:Abornlabor:Olaborokvot:Obirth-rateotag:O4dayotajx:Oone|to|be|bornbnatr:Olye/nitre/caustic|sodai:Osodiuminatur:OnatureA4alE6lyalism:O6ismdot:Otalent/aptitudedotit:Agifted/talentedec:Oabandonmentkurac:Onatural|healerlegx:O7lawanauxcenton:Anine|hundredthanauxdekon:A3tiethanauxlater:Ononagonanauxmiliardon:Anine|billionthbnauxmilion:A4millionthon:A9onthanauxmilon:A4thousandthanauxn:O2thanauxon:A4bnauxt:O4il:Onautiluscnauxz:Ito|nauseateO5Adisgusting/nauseatinghnav:Onaveed:Oshuttleig:Ito|navigateigaci:Ito|navigateigaci:O6ionigaciad:O9igad:O9ighaltej:Opiernnaz:OnoseAnasalal:O4|consonanti:ONazii:A3iism:O3smkatar:Ocoldlob:Onostrilmuk:Osnotmukbul:Oboogerradik:Onasal|bridgetru:Onostriltuk:Ohandkerchiefum:Opince-nezandebel:ONdebeleZne:Ito|denyAnegativeE7lyakcentit:Aunstressedatendit:A1expectedatendit:E9lyatent:Acareless/negligentauxdit:Ainaudiblebarit:Aunboundedbril:Adimbul:Ofogbul:Afuzzy/mistybulig:Ito|cloudbuligx:Ito|(blurry)|getbuloz:Onebulacert:Auncertainces:Anecessarycesajx:Orequired/materialcesec:Onecessitycesej:Otoiletcessegx:O5|seatcivilizit:Auncivilizedcivilizitec:Olack|of|civilizationckep:ONetscape|browserdankind:Eyou're|welcomedauxr:Atemporarydepend:Aindependentderland:Othe|Netherlandsderland:ADutchderlandan:O4manderlandanec:O4|nationalityderlandanin:O5womandevig:Aoptionaldigestebl:Aindigestibledividebl:A3visibleebl:Aimpossibleebl:E8yegalajx:Oinequality/inequationekvaci:O9esprimebl:E2xpressiblyest:Onon-existencefar:Ito|failfermit:Aopenfiksit:Aloosefiksitec:Oimprecisionfini:Oinfinityfini:A6eforgesebl:Aunforgettablefruktodon:Ainfertile/barreng:Ito|denyg:Onegationg:A5veanegaci:O5onanegad:O7bnegativ:O5veA7/improperanegaton:O4on/negatronanegatron:O9gatroneneglekt:Ito|neglectO6em:Ocarelessness/negligenceem:A7/negligentind:Anegligableanegligx:Ohouse-clothesenegoc:Ito|(business|with)|negotiate/doObusinessA7ad:Otradingist:Obusinessmandnegr:Oblack|personANegroav:Aunimportantavajx:Oaccessoryinegx:Ito|(snowing)|beO3blank:A3|whitebul:Ito|(snowballs|at)|throwbul:Osnowballer:O3flakehom:O3mankovrit:A3ytabul:O3-boardaneig:Ito|negateaneimagebl:Ainconceivableaneintim:Adetachedaneinvershav:Anon-inversibleaneinversigebl:A9ibleanekartografit:Aunchartedaneklarigebl:Ainexplicableanekombit:Aunkemptanekomplet:Aincompleteanekomprenebl:Aunintelligiblebnekonat:O1knownA6bnekonsekvenc:OinconsistencyA9ntanekonvergx:Adivergentanekredebl:Aincredibleanekrolog:Oobituaryanekropol:Ocatacombanekropsi:Oautopsyanektar:Onectaranekuirit:Araw/uncookedanekulturit:Aunculturedanekunmezurebl:Aincommensurableanekutim:Aunusualanelacigebl:Atireless/untiringanelimigit:Aabsoluteanelogxat:Agauntanelong:Ebrieflyanemalhavebl:Aindispensableanemalplilongigit:Aunabbreviatedanematod:Onematode/eelwormanematur:Aunripeanemetiist:Oamateuranemetiul:O6anemoveblajx:O(of|real|estate)|pieceanenatur:Aartificialaneneces:Aneedlessanenegativ:Anon-negativeaneniesland:O1|man's|landanenombrebl:Acountlesscnenormal:Aabnormalajx:O7ityec:O9yaneodim:Oneodymiumaneokupit:Aunoccupied/vacantaneolitik:OLate|Stone|Age/Neolithicaneologism:Oneologismaneon:O2naneordinar:Aunordinaryaneorganik:Ainorganicsnep:Ograndsonagit:Aunpaid/overdueal:ANepalesealan:O7ar:Aoddarhuful:Operissodactyl|lifeformarti:Aneutralenetrebl:Aimpenetrableer:ANapierianin:Ogranddaughterlenagx:Aminor/underagelenagxul:O4otism:Onepotismozitiv:Anon-positiver:Aimperativeriskribebl:Eindescribablyrofitem:Adisinterestedtuni:Oneptuniumublik:Aprivateaneracional:Oirrational|numberanereduktebl:A2educiblebneregul:A3gularec:O8ityanerezistebl:A3sistiblednerv:OnerveA3ousoz:A6ur:Orib/veininganesatigebl:Ainsatiableanesignif:A2ignificantanesimetri:Aasymmetrical/dissymmetricanesondebl:Aabysmalbnest:Ito|nestO3anesxangxigxem:Aconstant/continual/steadyfnet:Aneat/netF1tOclean|copyaksebl:Apricelessig:Ito|(in|finished|form)|finalize/putransitiv:Aintransitiveaneuxralgi:Oneuralgiaaneuxrenberg:ANurembergcneuxrolog:Oneurologisti:O7yiist:O7istaneuxron:O4naneuxroz:O4sisgneuxtr:A2tralajx:O6|elemental:A6igant:Oreciprocal|elementigebl:Ainvertiblein:Oneutrinoon:O4onfnev:O1phewenkebl:Ainvincibleer:Afalseidat:Aunseenin:Onieceol:Ainvoluntaryanguni:ONgunianicx:Onicheaniel:O1elloanif:OUFOcnigeri:ANigerianan:O7anin:O7|womanfnigr:OblackA4ajx:O4|parteg:Apitch|blackig:Ito|blackenul:O4|personcnigxeri:ANigerianan:O7anin:O7|womananihilism:Onihilismanihilist:O6tbnikaragv:ANicaraguanan:O9bnikel:Ito|nickel-plateO5anikotin:O2otineaniktereuxt:Oraccoon|doganilon:Onylonanilpotent:Anilpotentbnimb:Ohalous:Orain|cloudbnimf:Onymphe:Owaterlilyaniob:Oniobiumhnit:Ito|rivetO4junt:O4|jointrat:Onitraterid:O3iterit:O6rogen:O3ogenroglicerin:O5lycerinbnivel:Ito|levelO4aniz:Osparrow-hawkenobel:OnoblemanA4ar:O2ilityec:O7i:O2eliumanobl:A2lecnoc:Aharmfuli:Onotionx:O2chbnod:Ito|knotO3/nodewnokt:Ito|(night-time)|beOnightEat|nightblind:Anight-blindfesten:Ito|(an|evening|banquet)|havegard:Onight-watchgardist:Owatchmanigx:Ito|(getting|dark)|beigx:Oevening|twilightmez:Omidnightocxemiz:Onight-shirtogard:O4watchoklub:O4clubomez:Omidnightosxrank:Opedestal|cupboardotarif:Onight|rateovaz:Ochamber|potpapili:Onight-mothserur:Odouble|locksxrank:Opedestal|cupboardu:Onight-moth/athene|noctua|owlvaz:Ochamber|potvestajx:Onight-clothesvnom:Ito|callOnameE3lyad:Onomadad:A4icadism:O5smbr:Ito|countbr:Onumberbrebl:Acountable/discretebril:O4er/meterbrosistem:Onumber|systemenklatur:Onomenclaturefest:Oname-day/saint's|dayigx:Ito|(called)|beinalvalor:Aat|parinativ:Onominativekart:Obusiness|cardplat:Oname-platesxild:O4tag/badgeum:Ito|appoint/nominateum:O6ment/nominationuskl:Atitle|caseinord:OnorthA4ernafrik:ANorth|Africanafrikan:O9canamerik:A6mericanamerikan:O9icankore:O5Koreankorean:O9anlum:Oaurora|borealis/northern|lightsknorm:Ito|normOstandard/normAnormalal:A5al:Eordinarilyan:ONorsemanand:O2manhav:Anormedigit:A5it:A5ohav:A5bnorveg:ONorwegianin:O8|womancnostalgi:OnostalgiaA7cE8allyfnot:Ito|(down)|writeOnote/gradeari:O2aryblok:O2epadfoliar:O6libr:O3bookpnov:Anewa:Onovaajx:Onews/noveltyajxleter:O3|letteredz:Obridegroomedzin:O4el:Oshort|storyelet:O6hortembr:ONovember'ic:Onovicejar:ANew|Year'skaledon:O3Caledonianplatonism:O1oplatonismzeland:A1w|Zealandzelandan:O9derzelandanin:O9d|womanXnu:Fwellanc:Onuance/shadeb:Ocloudb:A4ybi:ANubianbian:O5d:Anakeddajx:Onudedel:Onoodledism:Onudismdist:O4tdpied:Abarefootdpied:E7gat:Onougatk:O(of|the|neck)|napekle:Onucleuskle:A4arkleon:O4onks:O1tl:O1ll|element/zeroldivizor:Ozero|divisorlig:Ito|cancel/annul/abolishlig:O5ation/annulance/abolitionligant:Ofunction|null|or|zeroligx:Ito|vanishlmatric:Onull|matrixlmezur:A4setlpolinom:O4polynomiallpotenc:Anilpotentlvektor:Onull|vectormeni:Ocurlewmer:Ito|numbermer:O5meral:O2eral/number|denotation/manifest|constantmerator:O5tormerebl:Acountable/discretemerplat:Onumberplatemismat:O2ismatistmismatik:O8csmismatikist:O8stn:Acurrentnci:Onunciontemp:Ocurrent|or|modern|timesntemp:A6pt:Oweddingr:Amererlegebl:Aread-onlytr:Ito|nourish/feedtrajx:Ofood/nourishmenttroblok:Opower|supply|unitaoaz:Ooasiseobe:Ito|obeyA2dientem:A7ig:Ito|breaklisk:Oobeliskcobjekt:Othingiv:Aobjectiveivec:O7itybobjxet:Ito|objectO5ionhobl:OmultipleAfoldat:Ostarch|capsuleec:Omultiplicityig:Ito|multiplyigaci:Obondikv:Odiagonal/slash/fraction|bar/separatrix/slantikv:Aslantingaobscen:Aobscenebobsed:Ito|obsessO5ioncobserv:Ito|watchOobservationatori:O7oryaobsidian:O2idianaobskur:A2cureaobstakl:O2tacledobstin:Ito|(stubborn)|beOstubbornnessA7ec:O7nesscobstrukc:Ito|hinder/obstructOcongestion/obstruction/filibusteri:Oobstruction/impedimentbobtuz:Adull/obtuseangul:Aobtuse-angledaobus:Oartillery|shellcocean:OoceanA4icnivel:Osea|leveleod:Oodeekolon:Ocologneor:Ito|smellor:Oodor/scentoracx:Ito|stinkeofend:Ito|offendO4seA5iveigx:Ito|(offense)|takeit:Aoffendedbofensiv:O4siveAaggressive/offensivehofer:Ito|sacrificead:O8/offeringajx:O9offeringbucx:Ito|immolateem:Agenerous/self-sacrificingt:Ito|offert:O4tori:O4torylofic:Ito|(office)|holdOemployment/jobAofficialdon:Oappointment/nominationefal:Osnake-head|fishej:Obureau/officeial:Aofficialialul:O7ir:O4erist:O6/officialjxur:Ooath|of|officesekret:Oofficial|secretaofset:O2set|printingeoft:OfrequencyA6tEoftenalmologi:Oophthalmologyec:Ofrequencybogr:Oogrein:O3ssaoguz:OOguzaojstr:Obot|flyZok:Onumber|eightangul:Ooctagonangul:A6alapi:Ookapiaz:Ito|happenaz:Oeventaz:Aaccidental/chanceaz:Ein|that|case/by|chanceazajx:Oeventazalgebr:O(of|events)|algebra/fieldazantajx:Oeventazig:Ito|causeazintajx:Opast|eventazontajx:Ofuture|eventcenton:Aeight|hundredthcident:Owestcident:A3erncidentan:OWesternercidenteuxrop:A6|Europeancidentgerman:A3|Germancidentindi:A4Indiancipit:O(of|the|head)|occiput/backcipital:Ooccipital|bonedekon:Aeightiethedr:Ooctahedronej:Fokaylater:Ooctagonmiliardon:Aeight|billionthmilion:A5millionmilionon:A9ionthmilon:A5thousandthobl:A4foldon:A4hr:Oochres:Ooxsid:Ito|oxidizesid:O3esidig:Ito|oxidizesigen:Ito|oxigenatesigen:O1ygensikok:Ocranberrytant:Ooctanttav:O3ve/octavotobr:OOctober'topus:Ooctopusul:Ito|ogleul:Oeyeul:Aocularulari:Oeyepieceulglob:O2ballulhar:O2lashulist:Oophtalmologist/oculistaokulkav:O(of|the|eye)|cavityaokullens:Olenscokult:Aoccultism:O5ismist:O7taokulum:Ito|(at)|stareaokulvitr:Oglassaokum:Aoctalgokup:Ito|occupyO4ationaci:Ito|occupyaci:O4ationad:O9at:Abusy/occupiedit:Apreviously|busy/occupiedbold:Aoldul:O2|manbole:Ooilac:OOleacea-type|treeaoliban:Ofrankincenseaoligarhxi:Ooligarchyaoligarki:O8aoligopol:O3opolyaoligopsoni:O5sony/buyer's|oligopolyaolimpik:A1ympicdoliv:O1ivearb:O4-treeole:O5oiluj:O5treemom:OOhmagx:Ito|(homage|to)|payagx:Ohomagear:Olobsterbr:Ito|(a|shadow|on)|castbr:Oshadow/shadebrajx:O3ebrel:Oumbrellabreloportant:O7-bearerbrostrek:Ohatchingbrum:Ito|(shading|on)|makelet:Oomelettenibus:O1nibusoon:Afractionalagr:Oonageran:Ito|masturbatean:O8iond:Ito|undulate/fluctuated:Owavedatr:Omusk-ratdeg:Obillowdum:Ito|(wavy)|corrugate/makeidir:Orumoriks:Oonyxkl:Ouncleklin:Oauntkom:Oradix|pointpunkt:O9tDop:Eat|a|timeal:Oopalci:O1tionci:A5aler:O1eraeraci:Ito|(on)|operateeraci:Ooperationeraciat:O8|patient/operanderaciesplor:O8al|researcheracium:O6ng|systemeracosistem:O9systemerator:O5ori:O1iumiajx:O2ateini:Ito|thinkini:Oopinioninienket:O6|surveyon:Ito|opposeonul:O3nentortun:Aconvenientortunist:Oopportunistozici:Ito|opposeozici:O4itiontik:O1ticstik:A4altikist:O4iantimism:O3mismtimism:A6tictimist:O7ul:Oguelder-rose");
  prefix = fillDictionary(prefix, "Zor:OgoldA3enaci:Oorationajxist:Ogoldsmithakl:Ooracleakol:O5/revelationangx:O2ngeangxarb:O5-treeangxkolor:A6coloredangxosuk:O6juiceangxuj:O6treeator:Ito|(an|oration)|deliverator:Ooratorator:A5icalatorajx:Ospeechbit:Oorbitblond:Agoldend:Oorderd:Aorderlydem:Aneat/orderlyden:Ito|decorateden:Oorderdig:Ito|(in|order)|arrange/putdinaci:Ito|ordaindinaci:O2inationdinar:A5rydinar:Eusuallydinat:Oordinatedon:Ito|order/commanddon:Ocommand/orderdorilat:Oorder|relationel:Oearelpendajx:O2ringelring:O6elstrig:Olong-eared|owlf:Oorphanfej:O5agefig:Ito|orphanfisx:Ogoldfishflav:A3en|yellowg:Forggan:O2angan:A4icganik:A6ganism:O5smganiz:Ito|organizeganiz:O6ationganizaci:O9onganizajx:O9ongasm:O3smgen:O3ngi:O2yaorgi:A2iasticborgojl:Oarrogance/prideA6t/proudgorient:Ito|orientOeastA3ernen:F3wardgerman:AEast|Germanhind:A3-Indianigx:Oorientationhorig:Ito|(into|gold)|turnami:Oorigamiin:Ito|originatein:O5in:A5alin:E7lyinal:O7inal:A7aorikterop:Oaardvarkboriol:Oorioleed:O5-type|lifeformborkestr:O1chestraum:Ito|orchestrateborkid:O3id/testiclee:O5aorkolor:Agold-coloredaorminej:O4mineeornam:Ito|decorateOornamentA7alajx:Odecoration/ornamentit:Aadornedaornat:Orobes|of|officebornitologi:Oornithologyist:O9istaorografi:O1ographyjort:Oright-angleA9edangul:Orectangleangul:Aright-angledant:Operpendicular/normalil:OT-squareocentr:Oorthocenterodoks:A4doxodoksism:O7yografi:Ospellingaorum:Ito|gildbosced:Ito|yawnO3doscil:Ito|oscillateO7orad:O7ionograf:O5oscopeaoset:OOssetianaosmi:Oosmiumkost:OboneA3/big-bonedagx:Ohostagear:Oskeletonec:Abonyocerb:Omarrowohist:Obone|tissuepulvor:O3-dustr:Ooysterracism:Oostracismrogot:OOstrogothaotoman:AOttomanlov:Oeggaci:Oovationajx:Oomelette/scrambled|eggsal:Oovalari:O2ryibov:Omusk-oxing:Oeggcupobrand:O2|nogocxel:Oovum/ovuleoflav:Oyolkoflavajx:O3uj:Oovaryaozon:Oozonempac:OpeaceA4fulam:A4-lovingemul:O8erienc:Ito|(patient)|beienc:Opatienceienc:A5tient:O6ifism:O1cifismifist:O6tkontrakt:Opeace|treatyxj:Odadxul:Opatchoulibpadel:Ito|paddleO5apaelj:O1ellanpaf:Ito|shootO2tad:Ofiringark:Obowating:Ito|shoot/hitcxesig:Oceasefireej:Oshooting|rangeforig:Ito|(off)|shootil:Ogunileg:Ocannonist:Omarksman/Sagittariusmortig:Ito|(dead)|shootvund:Ito|shootvundit:A2t|with|a|gunlpag:Ito|payO2mentadmon:Ito|(annoying|by|demanding|payment|from)|beaj:Opaddlean:O1gananism:O4ismend:A1yableig:Ito|chargeprokrast:Omoratoriumum:Omasked|palm|civetx:Opagexi:O3apajac:Oclown/jesterapajl:Ostrawjpak:Ito|packO3ageajx:Oluggage/packageajxbilet:O6|ticketajxospac:Obaggage|areaeg:O1leet:Olittle|package/parcelistanan:OPakistaniistananin:O8|womanvagon:Oluggage-vanxpal:Apaleac:O2aceacet:Omansionadi:Opalladiumat:O2ateat:A4alatal:O6ed:O2letestin:APalestinianestinan:O9netr:Opaletteigx:Ito|(pale)|fade/turnis:Ostakeisar:Ofenceisum:Ito|impalem:Opalmtreemobrancx:O3|frondmofest:OPalm|Sundaymopied:Aweb-footedp:Ito|touch/feelpebr:Oeyelidpebrum:Ito|blinkt:Ocoatumb:Opigeonapamflet:Opamphlet/lampoonbpampelm:Ograpefruitus:O9/pomeloHpan:Obread/loaface:Opanaceaakirant:Obreadwinneram:APanamanianaman:O9amanin:O9|womanbutik:Obaker's|shopdion:Oospreye:Ito|(down)|malfunction/breake:Obreak-down/mechanical|failureegir:Opanegyricegir:A8alel:Odash-board/paneler:Ocrumbik:Opanicist:Obakerj:Omomkreas:Opancreasoram:Oviewrostil:Otoasters:I1|dresssajx:Obandagesbend:O6talon:Otrousers/pantstalonet:Oshort|pantstalonportant:Atrousers-wearingteism:Opantheismteist:O7tter:O5rterin:Ofemale|panthertofl:Oslippertomim:Ito|pantomimetomim:O8tomimist:Omime|artistrpap:Opopeag:Oparrotagum:Ito|parrotaj:O1payaarac:O3razzoav:Opoppyavet:O4er:Opapererkorb:Owaste-paper|basketeropec:Opiece|of|papererpremil:Opaperweightertapet:Owallpapereruj:Ofolderili:Obutterflyirus:Opapyrusist:O2istrik:O2rikau:OPapuanZpar:OpairAevenabol:Oparable/parabolaaboloid:O4oloidad:Ito|paradead:O5ad:Apretentiousadigm:Oparadigmadigm:A7aticadiz:O5seadizlud:Ohopscotchadoks:Oparadoxadoks:A6icalaf:Oflourish/paraphafin:Oparaffinagraf:O3graphagvaj:AParaguayanagvajan:O9agvajanin:O9|womanalel:Oparallelalel:A7alelepiped:O7epipedalelogram:O7ogramalelprojekci:O7|projectionaliz:Ito|paralysealiz:O6isalizigxint:A6edametr:O3meterametropasig:O8|passing|or|substitutionanoj:O3noiaanoj:A6dasxut:O3chuteazit:Ito|(off|of)|freeload/leechazit:Oparasitec:OParca/Fatecel:Olot/land|parcelcelig:Ito|(out)|parceldon:Ito|forgive/excusedon:O6nessdonpet:Ito|(for|forgiveness)|excuse|himself¯¯¯herself¯¯¯itself¯¯¯themselves/askdonpet:Oapologyec:Oparityenc:Orelativeenc:A4edencar:Oññrelativesencec:Orelatednessencin:Ofemale|relativeentez:Oparenthesisentez:Eby|the|wayfum:Ito|perfumefum:O6huful:Oartiodactyl|lifeformepari:Ooutcaste/pariahg:Ito|couple/matchgx:Ito|matez:AParisianzan:O7hpark:Ito|parkO3adgaragx:O3ing|garageej:O7lot/placeer:Ito|memorizeer:Eby|hearterig:Ito|memorizepag:Ocost|of|parkingcparlament:OparliamentA9aryan:Omember|of|parliamentbparodi:Ito|parodyO5fparohx:O2ishA2ochialan:O2ishioneranar:O9rshipestr:O1stor/vicarism:O1rochialismeparok:O2ishA2ochialan:O2ishionerestr:O1stor/vicarsism:Ofit/seizuregparol:Ito|speakO2echad:O5element:Opart|of|speechem:Atalkativekapabl:Ospeechmanier:O5aparsek:Oparsecppart:O2tA3ialE6lyer:Oground|floor/parterrei:Oparty/sidei:Abiased/partialian:Omember/partizenianigx:Ito|sideicip:Oparticipleiec:A4sanikl:O4cleizan:O4sanizan:A7opag:Oinstallment|paymentopren:Ito|participate/shareopren:O9ionaparu:Otitmouseaparvol:OwrenMpas:Ito|passagxer:Ito|(as|a|passenger)|travelagxer:Opassengeragxerig:Ito|(a|passenger)|transportament:Ito|braid/trimament:Otrimmingej:Opassagewayer:Osparrowi:Opassioni:A6ateig:Ito|spendint:Opastint:A3intec:O3iv:A2sivek:OEaster'kal:APascalskvil:Olampoon/satirelogxant:Otemporary|dwellerport:Opassportt:Odoughtecx:Opietel:Olozengetor:Opastortr:Opriest/clergymantrad:Opastorshiptrar:Opriesthoodtromonahx:Ohieromonk/monk-presbytervort:Opasswordx:Ito|stepx:Opace/stepxeg:Ito|stridext:Ito|feedxtabul:Ogangwayxtej:Omeadowxtel:Opastelxtelajx:O5xtigx:Ito|grazextist:Oshepherdypat:Ofrying-panel:Okneecap/limpetent:Ito|patentent:O5ent:O5kuk:O1ncakeos:Ofervor/passionr:Ofatherrec:O5hoodriark:Opatriarchric:Odie/stamprin:Ito|motherrin:O5rinec:O5hoodrinoflank:Amaternalriot:Opatriotriot:A6icriotism:O7smriotism:A7croflank:A2ernalrol:Ito|patrolrol:O5ron:Ito|sponsorron:Opatronruj:Ohomeland/fatherlandapauxt:Adismalbpauxz:Ito|(a|break)|pause/takeObreak/recess/intermissionipav:Ito|(off)|showOpeacockez:Obulwarks/topsidesian:Obaboonilon:Opavilionim:Ito|paveim:O3mentimad:O2ingimer:O5|stoneapean:O1eancpec:Opiece/partetigx:Ito|crumblex:Opitchepedagog:OpedagogueA6icali:O6yi:A6icaliist:O6uecpedal:Ito|pedalO4taksi:O2icab/tricycle|taxicpedant:Ito|(pedantic)|beOpedantA5icdpedi:OPedik:Olousek:A3ykov:O3e|nitapedologi:Opaedologybpeg:Owoodpeckered:O9-type|lifeformbpejzagx:Olandscape/sceneryist:O8|painterdpek:Ito|sinO2A2full:Ito|picklejpel:Ito|(away)|drive/chaseajx:Opropellantargoni:Ogeraniumerin:Ocape/pelerine/tippetikan:Opelicanil:Odrivermen:Oravioli/meat|dumplingt:Ofurtocxap:Obearskin|capv:Obasin/bowl/pelvisLpen:Ito|tryOeffortEwith|effortad:Oeffortsc:Opennyd:Ito|hangdglisil:O3-gliderdig:Ito|hangdkolum:Obandsdol:Ito|swingdol:Opendulumdum:Ito|hangetr:Ito|penetratei:O2nyicilin:O2icillinigajx:Ofussik:Ito|paintik:O4brushis:Openisiset:Odick/willys:Ito|thinks:O1oughtsi:Ito|pensionsi:O6/retirementsig:Ito|suggestsiigx:Ito|(on|a|pension)|retiresion:Oboarding-housesiul:Opensioner/retireet:Ito|repentt:O5ancetagon:Opentagontant:Arepentanttig:Ito|regrettofar:Ito|(penance)|dotr:Ito|painttrajx:O4ing/picturetrajxkadr:Opicture-frametrist:Opainterbpeon:O1wni:Opeonybpep:Ito|chirpsin:OpepsinZper:Ito|(as|an|agent|of)|actAmeans-usingad:O1diationant:Oagentbusx:Ooral|sayingcept:Ito|notice/perceivecept:Operceptioncx:Oruffe|fishd:Ito|losed:O2sdigx:Ito|(lost)|getdit:Alostdrik:Opartridgee:Ito|perisheig:Ito|destroy/ruineig:O4uctionfekt:Aperfectfektec:O6ionfektig:Ito|perfectfid:Ito|betrayfid:O5al/treacheryfid:Atreacherousfidem:A9sfidul:O1aitorfort:Ito|assault/forcefort:Oviolencefort:A5tfort:Eby|force/violentlygajn:Ito|earngamen:Oparchmentidot:Operidotiferi:Ooutskirts/peripheryiferi:Aperipheralige:O3geeiheli:O3helionikard:O3cardiumikarp:Oseed-caseimetr:Ocircumference/perimeterine:Operineumiod:O3odiod:A5ic/periodicaliodajx:O7aliodec:O9ityiost:O4steumiskop:O3scopeitone:O3toneumk:O2chkal:O3alel:O1arll:A4ylabor:Ito|earnlamot:Omother|of|pearlepermes:Ito|allowOpermissionat:Aallowedigx:Ito|(allowed)|beil:Olicense/permitcpermut:Ito|permuteO5ationajx:O9naperon:Osteps/stoopbperpendikular:OperpendicularA9laraperpleks:A3lexedApers:OPersianA6ekut:Ito|persecute/prosecute/chaseekut:O7ion/prosecution/pursuitekutad:O9n/prosecution/pursuitekutist:Oprosecutorik:Opeach/nectarineimon:O1rsimmon/date-plumin:OPersian|womanist:Ito|persist/persevereist:A6entistad:O3everanceistem:O9ceon:O3onon:A5alon:E7lyonajx:O7|traitonar:O5nelonec:O5alityonicx:Omale|persononig:Ito|personalize/personifyonig:O9ation/personificationonin:Ofemale|personontrajn:Opassenger|trainpektiv:Operspectivevad:Ito|persuadevad:O5sionbperturb:Ito|(with)|disturb/interfereOdisturbance/interferencedperu:APeruvianan:O7anin:O7|womank:Owigapervers:Aperverseipes:Ito|(the|weight|of)|weigh/findOpesoari:O2saryet:O2etail:Oscalesimism:Opessimismimism:A7ticimist:O8t:Oplaguexpet:Ito|(for)|askOrequestal:Opetalant:Oapplicantard:Odetonator/firecrackereg:Ito|begeg:O2gingformular:Oapplication|formici:Opetitionil:Oapplication|formiol:Opetioleol:Ito|frolicol:A5someolem:Aplayfulrol:Opetroleumrolgaso:O8|gasrolhxemi:O4chemistryrolhxemi:A9calrolkemi:O9stryrolkemi:A9calromiz:Olampreyrosel:Oparsleyskrib:Opetitionskribint:Oapplicant/petitionerfpez:Ito|weighO4tAheavyig:Ito|(down)|weighil:Oweightocentr:O(of|gravity/centroid|of|n|points)|centerapfenig:OpfennigZpi:Apiousamatr:O1a|materan:O2noanist:O3istc:O1zzacej:O3eriacx:Ocunt/pussyed:Ofooted:Eon|footedbat:Ito|kickedbat:O3edestal:Opedestaledfingr:Otoeedfrapad:Otrampingeding:Ostirrupedir:Ito|walkedirant:Opedestrianednot:Ofootnoteedpas:Ito|treadedpilk:Osoccer|balledplat:O1leedprem:Ito|(on)|stepedvarmigil:Ofootwarmeredvestajx:O4earetism:Opietismg:Omagpiegme:Opygmygr:Olazinessgr:A2yjxam:Opyjamask:Ito|prick/stingk:O9gk:Astingingkbaston:Oskewerkdrat:Obarbed-wireked:Osentry|detachmentkem:Apointy/sharpkfosil:Opick-axekil:Ostingkildrat:Obarbed|wirekkalkanum:Ostiletto|heelknik:Ito|picnicknik:O5kstang:Ospearktogram:Oicon/pictograml:Obatterylaf:Opilawlar:Obatterylgrim:Ito|(on|a|pilgrimage)|golgrim:Opilgrimagelgrimad:O9lgrimant:O6apilgrimul:O6apilk:Oballapilol:Opillapilori:O3orycpilot:Ito|pilotO4ad:Osteeringapiment:Oallspice/pimentappin:Opine|treecx:Ito|pinchcxeg:Ito|pinchcxil:Otongs/pincerscxpren:Opinchcxtenajl:O3ersd:O2tgl:O2glarb:Oconifergloarb:O6gven:Openguingvin:O6i:Opinet:Otip/point/peakt:Apointy/spikedtark:Oogiveapiocx:Opick-axeapionir:O1oneerfpip:O1per:Ito|pepperr:O5roment:O5mintruj:O5|shaker|or|trees:Opip/roupmpir:Opearamid:Opyramidarb:Opear-treeat:Opirateatestr:O5-chiefene:APyreneanik:Odibrach/pyrrhicit:Opyriteog:Opieol:Obullfinchoteknikajx:Ofireworksoz:Oheartburnuj:Opear-treeipis:Ito|urinatepot:Ochamber|pott:Ito|crushtak:Opistachiotakuj:O8til:Opestle/pistiltol:Opistoltuj:Omortarxt:Opistoncpitagor:Apythagoreanan:O9nism:O9nismapitoresk:Apicturesquebpivot:Ito|pivotO4bpiz:Opeaang:Obananaeplac:Opublic|squareent:Oplacentax:Ito|(pleasing)|bex:Opleasurex:A4ingaplad:Ocourse/platteraplafon:Oceilingcplag:Ito|plagueOcalamityx:Obeachbplak:Ito|veneerOplateqplan:Ito|planO3d:Osoledum:Oshoe-soleed:Oplaneted:A5aryil:Oorganizer/plannerimetri:Oplanimetryiz:Ito|plank:Ofloort:Ito|plantt:O4tad:O4ingtag:O4aintajx:O5tiontar:O9/plantingtej:O9aplasm:O2smadplast:O3ticik:O6|artik:A6r:O4erkplat:Oboard/plate/sheet/slabAflatajx:Oplateauan:O2ne-treeen:O2tinumes:O2iceform:O2tformfosil:Ospadeig:Ito|flattennaz:Opug-noseonism:OPlatonismbplauxd:Ito|splashet:Ito|gurglebpleb:Ocommon|peoplean:O5erbpled:Ito|pleadO3fplej:Eat|mostagxul:Oelderd:Oplaidx|wrap/travel|shawlmult:Emostlypart:Omajoritypart:Emostlybplekt:Ito|weave/braidobaril:Ohedgerowtplen:AfullEcompletelyagx:Aadultagxul:O4blov:Ito|inflatebrak:Oarmfulbusx:Omouthfuld:Ito|complaind:O7tig:Ito|(up)|filligx:Ito|(up)|fillkresk:Aadultkreskul:O4lun:Ofull|moonman:Ohandfulplen:Achock-fullum:Ito|fullfilumit:Acompletedumkomitat:Oexecutive|committeezorg:Eanxiouslyapleonasm:Oredundancy/pleonasmaplet:Otraycpleuxr:Opleuraonekt:Oflatfish/flounderonektoform:A7cplezur:OpleasureA4antig:A4urableTpli:Aanother/some|moreEas|wellagxul:Oelderaltig:Ito|increasealtigx:Ito|(higher)|goam:Ito|preferampleksig:Ito|extendbelig:Ito|embellishbeligx:Ito|(more|beautiful)|getbonig:Ito|improvebonigx:Ito|improvebonigx:Oprogressbonstatigx:O7dikig:Ito|thickenetigx:Ito|decreasefacilig:Ito|facilitatefervorig:Ito|cheer/inspirefortig:Ito|fortifyfortigx:Ito|(stronger)|increase/getfruig:Ito|accelerategrandig:Ito|enlargegrandig:O6ment/increasegrandigx:Ito|increasegrandigx:Oenlargement/increasegravig:Ito|heightenig:Ito|increaseigx:Ito|grow/increaselauxtigx:Ito|(louder)|getlongig:Ito|lengthenmalgrandig:Ito|decreasemalgrandigx:Ito|decreasemalpli:Fmore|or|lessmult:Omajoritymultig:Ito|enhancemultig:O6mentmultigx:Oincreasepez:Oexcess|weight/overloadpezigx:Ito|(weight)|gainpost:Elater|onproksimigx:Ito|(closer)|comerapidig:Ito|acceleraterapidig:O8ionrapidigx:Ito|acceleraterapidigx:O8ionstrecx:Ito|tightenviglig:Ito|stimulateaploceid:Oweaver-birdbplongx:Ito|dive/plungeist:O3rcplor:Ito|cry/weepgxem:Ito|sobsingult:Ito|sobaplosiv:OplosiveTplu:Ito|continueAadditionalEfurthermoredauxrig:Ito|extendg:Ito|plowgebl:Aarablegil:Oplowgoskribad:Oboustrophedon/back-and-forth|writingk:Ito|pick/pluckm:Open/feathermb:Oleadmbofaden:Oplumb|linemtuf:Ocrestr:Aseveralral:Opluralredr:Opolyhedronrfoj:Erepeatedlyrgrafe:Omultigraphrlater:Opolygonrlinear:Amultilinearrnaci:A4nationalrobl:A4plersenc:Aambiguousrtaskad:Omultitaskingrtaskplenumad:O9ngs:Ppluss:Osurplussend:Ito|forwardskvamperfekt:Opluperfectsx:O2shtokrat:O2tocrattokrati:O7cytoni:O4niumtonian:OPlutonianv:Ito|(raining)|bev:Orainvalidig:Ito|extendvark:Orainbowvban:Oshowerveg:Ito|(raining|in|bucketfuls)|beveg:Odownpourvet:Ito|drizzlevet:O5ing|rainvmantel:Oraincoatvombrel:Oumbrellavsezon:Orainy|seasondpneux:Otirem:O3matik:O3/pneumaticsmoni:Opneumoniacpob:Opoopdeck/sternEabaften:F4apodagr:Ogoutapodajr:Opedalapodetalist:Oretailerbpodi:Oplatform/podiumcip:Ogrebeapoem:Opoemcpoent:Ito|scoreOpointvalor:O4|value");
  prefix = fillDictionary(prefix, "apoet:O1etbpoezi:O3ryA3icapogoniul:Owoodpeckerapogrand:Ewholesaleapogrom:Opogromapojn:Owristapokal:Ogobletapoker:OpokerZpol:OPoleA2isheks:Othumbemik:Ito|(in|controversy)|engageemik:Ocontroversyen:Ito|pollinateen:O3enenad:O3inationener:Ograin|of|pollenic:Opoliceican:O5manicej:O5-stationicestr:Ochief|of|policeicist:Opolicemanicpatrol:Osquadiglot:Opolyglotigon:O4on/knotgrassihxet:O3chaete|lifeformimer:O3merin:OPolish|womaninezi:A2ynesianinezian:O9inezianin:O9|womaninom:Opolynomialinom:A9inomring:O9|ringip:O3pipol:O4olyipsoni:O4sony/buyer's|polypolyis:O2icyiteism:O2ytheismitik:O2icy/politicsitik:A3ticalitikist:O6ianivinilklorid:O2yvinyl|chloridek:O2kaoni:O2oniump:Ooctopusu:Ito|polluteuad:O5ionuci:O8/nocturnal|emissionur:Ito|polishur:Oshineus:Opoleus:A2arusdistanc:O4|radius/radius|vectorv:Odustv:A3yvig:Ito|dustvobros:Obrushvokovr:Ito|(with|dust)|covervosucx:Ito|vacuumapolvosucxil:O5-cleanerapolvosxovelil:Odustpanapolvotuk:O3|clothapolvovisxil:O9lpom:Oapplealgrand:Eat|retailarb:Oapple-treefritpastajx:O4|fritterkacx:O4-saucekompot:O9ep:Osplenderp:Aresplendantpastecx:Oapple|turnoversuk:O5juicetort:O4-tartuj:O6reebponard:Ito|stabOdaggerapone:Oponydpont:Obridgeifik:Opontifexolingv:Obridge|languageon:Opontoonkpop:O1pel:O2larlin:O3inol:Opeopleoldir:Opopular|sayingolkant:Ofolk|songollevigx:Ouprisingolrakont:Ofolk|taleolribel:Oinsurgency/insurrectionular:Apopularularec:O6ityGpor:O1recelan:O2celaincelan:A8celanajx:O8ci:O2tion/shared:Odoordapertur:O3waydeg:Ogate/gatewaydist:Oporterdistin:Odoorwomane:Oleekk:Opigk:A2kajx:Oporkkej:Ostykid:Opigletkin:Osowkostal:Ostynografajx:Opornographynografi:O9ynografi:A9ict:Ito|carry/weartal:Oportaltebl:A4bletik:O2ch/porticotil:Ostretchertist:Oportertosegx:Olitter/sedan|chairtret:Oportraittugal:OPortuguesetugalin:O9|womantulak:Opurslaneviv:Osustenanceeposed:Ito|own/possessOpossessionajx:O9em:A7vekaz:O9|caseaposesiv:O9|pronounaposign:Oat|signZpost:Alater/latterEthen/afterwordsajx:Obackside/rumpant:Osuccessorebri:Ohangoveren:Fbackwardsen:Ito|(on|duty)|been:Opositionenir:Ito|(back)|goeul:Odescendant/successoreular:Ooffspringfakt:Eafter|the|factgvardi:Odefense/rearguardir:Ito|followkri:Ito|(after)|shoutkrop:Ogizzardkur:Ito|chaselas:Ito|(behind)|leavelasajx:Oestatemangxajx:Odessertmast:Odriver/mizenmastmet:Ito|affix/addnaskajx:O1terbirth/placentanep:Ogreat-grandsonpalat:Osoft|palate/velumpozici:Opostpositionregion:Ohinterlandrest:Ito|remainrestant:Ostragglerrestant:Aleftoverrestantajx:O7srestig:Ito|(behind)|leaverigard:Ito|(from|behind|at)|lookrikolt:Ito|gleansekv:Ito|followskrib:Opostscriptsoif:Othirst|after|excessive|drinkingson:Ito|resoundson:Oecho/resonancestri:Otrack/waketagmez:Oafternoontagmez:Ein|the|afternoontemp:Alate/overdue/expired/out|of|datetraktad:Opostprocessingtraktil:O9sorul:Ito|requireulat:Opostulateulat:Arequiredvang:Obuttockvenint:Oafterthoughtvenint:Asubsequentveturil:Otrailerqposx:Opocketkomputil:OPDA/pocket|computerlantern:Oflashlight/torcht:Omailt:Apostaltajx:Opiece|of|mailtej:Opost|officetelefon:Ocell|phonetil:Oemailertist:Omailmantkart:Opostcardtmandat:Omoney|ordertmark:Opostage-stamptoficej:O3|officetrancxil:Open-knifetrestant:Eas|general|delivery|mailtuk:Ohandkerchiefnpot:Opot/containerajx:O2teryas:Ocaustic|potash/potassium|hydroxideenc:Opowerenc:A4fulencial:O1tentialencialhav:A8encig:Ito|(to|the|power)|raiseencig:Oexponentiation/raising|to|a|powerencigant:O7encigat:O(of|an|exponential)|baseencoseri:Oentire|or|power|seriesfarist:Opotterist:O5apouxp:O1opdeck/sternapovec:Oabilitybpovig:Ito|enablex:Ito|(able)|becomeapovosci:Ito|(how)|knowapovr:Apoorjpoz:Ito|poseO3ici:O2itionicidetermin:Oreckoningist:Omodelistin:O4itiv:Opositiveitiv:A7/realiton:O4ronitron:O7apraarbar:Oprimeval|forestbpraav:Ogreat-grandfatherin:O9dmotheraprabulgar:OProto-Bulgarianapraeksplod:OBig|Bangaprahistori:Oprehistoryapraknal:OBig|Bangepraktik:Ito|practiceO7A6alad:O6eant:O5tioneraprakuz:Osecond|cousinbpralogxant:OnativeAindigenous/nativeapram:Oferryapranep:Ogreatgrandsonapranev:O1and-nephewbpraonkl:O1eat-unclein:O5auntbprapatr:Oforefatherin:O3motheraprapranep:Ogreatgrandchildapratip:Oprototypeapraul:Oancestordprav:Ito|(right)|beAcorrectig:Ito|justifyig:O5icationaprazEONoLdim:Opraseodymiumaprebend:O1ebendaprecedenc:O2cedentaprecesi:O4ssionbprecip:AmainEespecially/mainlycpreciz:Aprecise/accurateEexactlyec:O4ness/precisionfpred:Opreyik:Ito|preachik:Osermonikat:Opredicateikist:O2acherikofic:Obeneficeaprefektuj:Oprefecturecprefer:Ito|preferE5ably/ratherind:A8eaprefiks:O3ixdpregx:Ito|prayO3erej:Ochurcholibr:Oprayer-bookaprelat:O1elatebpreleg:Ito|lectureO6aprelud:Ooverture/preludewprem:Ito|press/squeezeO4ureAburdensomead:Opressureajx:Otabletatec:Opressurebuton:Opush-buttondevig:Ito|pressureej:Ofruit|pressfiks:Ito|(firmly)|pressgrup:Olobbyi:Ito|awardi:O4/prizeier:Oprime|minister/premiereil:O1essis:O2miseit:Aoppresseditec:Opressuremasxin:O4necesig:Ito|pressuresign:O1int/imprintsongx:Onightmaretrud:Ito|pressurecpren:Ito|(up)|pickOgraspil:Otongseprepar:I1|prepareO5ationA7oryad:O7ionmanier:O(of|preparation)|methodaprepozici:Oprepositionaprepuci:Oforeskinapreri:Oprairieaprerogativ:O1erogativeupres:Ito|printO4A1ess/printajx:O1inted|matterart:O4ingbiter:O1esbyterbiterian:O8ianbiterianism:O9anismej:O1intshoperar:Omisprintig:Ito|(printed)|haveil:Opressist:O1interkaux:Anearkrib:Ito|prescribekrib:Oregulation/prescriptionliter:Otypeprov:Oproofprovajx:O4tigx:Oglamor/prestigetigx:A5ous/prestigioustpret:Afinished/readyec:Oreadinessekst:Ito|(as|an|excuse)|giveekst:Opretextekst:Ewith|some|excuseend:Ito|claimend:O4/pretenceendem:Ooverbearingness/pretenceendem:Aarroganteratent:Ito|overlookerir:Ito|(by)|passerirant:Opasser-byerit:Opreterit|tenseerlas:Ito|(out)|omit/leaveerlasem:Acareless/neglectfulerlasit:Aleft|out/omittederpas:Ito|(by)|passervetur:Ito|overtake/passig:Ito|prepareigx:Ito|(ready)|getbprevent:Ito|preventil:O2servativepprez:O1iceenc:O1esent|tenseent:Ito|presentent:O6ationentad:O9onentigx:Ito|checkid:Ito|presideidant:O6ntkonjekt:Obudget/estimatekonkur:Opublic|tenderkonkurad:Otenderlist:Oprice|listtromp:Ito|fleecetromp:Oswindlingtrompist:O5ertrompit:A6dapridemand:Ito|interrogateapridir:Ito|(of)|speakapridub:Ito|doubtaprifripon:Ito|cheat/swindleaprijugx:Ito|judgeaprilabor:Oprocessaprilogx:Ito|inhabitaprilum:Ito|(up)|lighthprim:Oprime|numberA4/relatively|primear:A3aryat:O4teitiv:A3itiveitivul:O8|personok:Ito|mock/ridiculeol:Oprimrosehprinc:O2nceid:O5's|sonin:O5ssip:O4ipleip:A8dip:Ein|principleland:Oprincipalityuj:O9tyaprinot:Ito|annotateeprint:Ito|printO4ajx:O4out/hard|copyemp:Ospringil:Oprinterbprioritat:O2orityig:Ito|prioritisebpriparol:Ito|discussad:O6ionbpripens:Ito|(about)|thinktemp:O(to|consider)|timeapriplant:Ito|plantapriplor:Ito|mournapripropriet:Aproprietarybprirab:Ito|robO2berybprirespond:Ito|(liable|or|responsible)|beec:Oresponsibilitycpriskrib:Ito|describeO5ptionA8veaprism:Oprismbpristud:Ito|studyO4aprisxtel:Ito|robapritond:Ito|prunedpritrakt:Ito|(with)|dealad:Otreatmentat:Apendingig:Ito|(up)|bringbprivat:Aprivateul:O6|personapriversx:Ito|waterbprivetur:Ito|(over)|travelebl:Apassablecprivilegi:Ito|favorOprivilegeA8daprizon:Ojail/prisonbprizorg:Ito|(after)|lookOcarehprobabl:Oprobability/probability|measureA5leE6yec:O5ilityodens:O9y|densityodistribu:O9y|distributionokalkul:O9y|theoryospac:O9y|spacebproblem:O3lemA6aticcproced:Ito|proceedO4dure/processur:O8bprocent:Opercentageajx:Ocommissioneproces:Ito|sue/prosecuteOprocess/lawsuiti:Ito|(in|a|procession)|goi:Oprocessionor:O6oraprocez:O6aprocion:Oraccoonhprodukt:Ito|produceO5tad:O6ionajx:O6ebl:Ito|(producible)|beej:Ofactoryem:Aproductiveoprocez:O7on|processaprodut:Omathematical|productaproedzigx:Arelated|by|marriageeprofan:Ito|defileOlaymanAprofanead:O5ationul:Olaymanfprofesi:Ito|practiceO1ofessionA9alec:O9alnessist:O9alul:O9alaprofesor:O6ordprofet:Ito|predict/prophesyO1ophetajx:O1ediction/prophecyin:Ofemale|prophetaprofil:Oprofilegprofit:Ito|profit/useO5/advantageA5able/advantageousdon:A9em:Agreedy|for|profitodon:Aprofitablepart:Osharehprofund:OdepthA1ep/profoundagx:Aaged/very|oldagxul:Oelderly|personajx:Odepthec:O4egajx:Oabyss/precipicesenc:A1strusebprognoz:Ito|forecastO7/prognosishprogram:Ito|programO6ad:O6ming/software|engineeringar:Osoftwareer:Oprogram|itemet:Oappletist:Oprogrammerlingv:O7ing|languagedprogres:Ito|progress/proceedO7em:A7ivei:O8oneprojekci:Ito|projectO6ionajx:O9il:O6orist:O6ionistbprojekt:Ito|planO3/projectdproklam:Ito|issue/proclaimOproclamationad:O9onajx:O9oncprokrast:Ito|delay/procrastinateem:Oprocrastinationit:Ain|abeyancejproksim:OproximityAnearbyE5ajx:Ovicinityec:Onearnessig:Ito|(close)|bringigx:Ito|approachigx:O7ul:Ofellow|human-being/neighborum:Aapproximatecprokur:O(of|attorney)|powerist:O(in|fact)|attorneyor:Opublic|prosecutorcprolet:Oproletarianar:O9tari:O9naprolog:O3oguedpromen:Ito|(for|a|walk)|goad:Owalk/strollant:Ostrollerej:Opromenadebpromes:Ito|promiseO6aprometi:O3ethiumbpromoci:Ito|promoteO5ionapromontor:Ocape/pointapromulg:Ito|promulgateapronom:O2nouncprononc:Ito|pronounceO3unciationmanier:Oaccentcpropagand:Ito|promote/advertiseOpublicity/ad/propagandaajx:O8|materialapropet:Ito|(for)|intercede/pleadcpropon:Ito|propose/suggestO5al/suggestionad:Oofferbproporci:Orate/proportionAproportionalapropozici:Oclauseipropr:Aownajx:Opropertyamov:Espontaneously/of|one's|own|accordavocx:Ein|one's|own|voiceavol:Aof|one's|own|willavol:Evoluntarilyiet:Oownershipietul:O4ul:O4cpropuls:Ito|driveO4aks:O4|shaftaproskripciul:Obanished|exilebprospekt:Oprospectusor:O7orbprosper:Ito|(successful)|beOprosperity/successaprostat:O3tate|glandeprostitu:Ito|prostitutead:O8ionej:Obrothelit:Oprostituteitin:O9aprotagonist:O2tagonistaprotaktini:O4ctiniumaprotein:O3einiprotekt:Ito|protectO6ionA7vead:O7onant:Opatron/protectorat:Oprotégéatin:O6eism:A3ectionistspirit:Oguardian|angelaproterozoik:Oproterozoiccprotest:Ito|protestO6ant:OProtestantbprotokol:Ito|report/ticketOofficial|report/minutesaproton:Oprotonaprototip:O4typeaprotrud:A3uberantAprov:Ito|(out)|tryOattempt/testajx:Otest/trialenc:AProvençalerb:Oproverberb:A6ialerbar:O(of|proverbs)|collectioniant:Ito|supplyiant:O4ies/rationsiantad:Ocateringiantist:Osupply|officeridenc:Oprovidenceinc:O4nceinc:A6ialincestr:O9|governoriz:Ito|supplyiz:O5izad:O5izajx:Oprovision/supplyizajxestr:Opurserizej:Opantryizor:Atemporaryizor:E7ilyizum:Ito|provisionizumad:Ocateringok:Ito|provoketemp:Otrial|perioddproz:OproseA3aic/proseelit:Oconvertelitism:Oproselytismxpru:Obow/prowd:Aprudishdec:O6nessdent:Ocommon|sensedent:Areasonabledul:Oprudedulin:O4jn:Ofrostjn:A4edn:Oplumnel:Oblackthorn/sloenelarb:O9/sloent:Ito|borrow/lendnt:Oloannt:Eas|a|loanntedon:Ito|lendntepren:Ito|borrows:OPrussiansacid:Oprussic|acidsblu:OPrussian|bluev:Ito|provev:O2of/signvebl:A2vablevigx:Ito|(proven)|beapsalm:Opsalmbpseuxd:Afalseonim:Opseudonymkpsihx:O1ycheA4iciatr:O5atristiatr:A9ciatri:O8yolog:O4ologistolog:A9calologi:O8yologi:A8icalologiist:O9stopatologi:Oabnormal|psychologykpsik:OpsycheA4iciatr:O5atristiatr:A9ciatri:O8yolog:O4ologistolog:A9calologi:O8yologi:A8icalologiist:O9stopatologi:Oabnormal|psychologynpub:Opubic|regionert:O2ertyert:A3scentlic:Ito|publicizelicist:Ocorrespondent/journalist/reporter/publicistlik:Ito|publishlik:O4clik:Eopenlylikajx:Opublicationlikajx:O9nlikec:O5itylikig:Ito|publish/reveallikig:O4cationost:O2ic|bonefpud:Opoodel:O3leing:Opuddingor:Omodesty/chaste|behaviorr:Ito|powderr:O5bpuebl:OPuebloApueblocpuf:O1ffing|out/swellingig:Ito|(out)|puffigx:Ito|(up)|puffdpug:Obottom/buttocksn:Ofistnobat:Ito|punchnobatalant:Oboxertpul:Ofleabazar:O3|marketi:Opulleyk:O2quem:Olungm:Apulmonarymonari:Olungwort/pulmonariaover:Osweaterp:Opulps:Ito|pulsate/throbs:O3esar:O3arsostel:O5v:Ogunpowdervopafil:Ofirearmvor:Opowdervor:A5yvorig:Ito|pulverizevorsuker:Opowdered|sugarvr:O5cpum:Ocougar/mountain|lionp:Ito|pumppil:O3lpun:Ito|punishO5mentad:O9cx:O2chd:Opoundik:Apunicind:Aworthy|of|punishmentkt:Ito|dotkt:O2/period/pointktokom:Osemicolonktopar:Obound|vectort:Olacecpup:Odoll/puppetil:Opupilitr:Odeskkpur:Aclean/pureec:O4liness/purityem:Atidygatori:Opurgatoryig:Ito|cleanigxej:Opurgatoryism:O2ismitan:O3tanitanism:O6ismpur:O2pleum:Apotty-trainedgpus:Ito|(pus)|dischargeOpusx:Ito|pushx:O3xekfunkciig:Ito|pushxigx:Ito|collidexveturil:Owheelbarrowhput:Owellin:Owhoreor:Opolecatr:Ito|rotr:A2tenrem:Aperishablerigx:Ito|rotrigx:Odecayprab:Ito|stealOtheftajx:O(property)|loot/stolenarb:Orhubarbat:Ito|discount/rebateat:O9ebatebest:Opredatoren:Orabbii:O2iesi:A3dist:Orobberobest:Opredatorobird:O(of|prey)|birdot:Ito|planeot:Oabrasionotil:Oplanejraci:Oreason/logicArationalec:O7ity/reasonablenessig:Ito|rationalizeism:O8smon:O7|numberonal:O9umberonal:A7onalism:O7ismonalist:O9tDrad:Owheelar:Oradari:Ito|radiatei:O3o/beamiad:O3ationian:O4niator:O4torik:Orootikal:Oradicalikal:A6ikal:E6ly/thoroughlyikalism:O6ismikalul:O6ikig:Ito|(the|root|of)|takeikigat:Oradicandikil:O5l|or|root|signiksign:O9|root|signilokalizil:O2ar|setioaktiv:A2ioactiveioaktivec:O9ityiofoni:Owireless|telegraphiografi:Oradiographyioterapi:O3ationistaci:O3o-stationium:O3umius:O4siusvektor:Oposition|or|radius|vectoron:Oradonring:Otirerond:Orim/fellybrafan:Oradishet:O5crafin:Ito|refineej:O5ryit:A5daragu:Oragout/stewbragx:O1jahab:ORajabiraj:Ostingrayd:Ito|rided:Amounteddant:A6on:Orayont:Ito|(entitled|to)|bet:Oauthority/righttig:Ito|authorizetig:O7ationaraked:Oracketaraket:Orocketdrakont:Ito|tellOstoryintrig:Oplotist:Ostorytelleraral:Owater-railaramadan:ORamadanarambutan:Orambutanaramfast:Otoucanaramp:I1|crawlkran:Ofrogblek:Ito|croakc:Arancidcx:O3hd:Oedge/brimd:Aborder/boundaryed:Ofrog-type|lifeformfemur:O3's|legg:Orank/gradeid:Otadpoleunkol:Obuttercuprrap:Oturnipid:Ito|hurryid:Ospeedid:Afast/quickidec:Ospeedidem:Ohasteidlim:Ospeed|limitidrespond:Ato|the|pointidtrajn:Ofast|trainidum:Ogearidumskatol:O3-boxidumuj:O7idvagonar:Ofast|trainir:Osmall|sword/rapierort:Ito|reportort:O5ortist:O5ersodi:Orapsodyarar:A1re/preciousiras:Obreed/raceism:Oracismp:Ito|gratet:Ito|raketil:O3tr:Ohoetrum:Obitmap/rastertrumer:Opixeltrumigil:Oraster|processor/rasterizerdrat:O1tif:Ito|ratifyif:O4icationifik:Ito|ratifyarauxk:Ahoarsearauxnd:Oroundarauxp:Ocaterpillargrav:Ito|delightO6A6fulelin:Oravelinigxint:Adelightedin:Oravineiol:O3oligraz:Ito|shaveen:Olawnil:Orazorist:Obarberkling:Orazor-bladekrem:Oshaving|creampenik:O6-brushbreag:Ito|react/respondO4ionereakci:Ito|reactO4ionA7aryil:O2gentul:O2ctionaryareakir:Ito|recoverareaktor:O1actorjreal:O2lityA3E3lyajx:O3ityig:Ito|produceig:Oimplementationigx:Ito|(true)|comeism:Arealisticist:O6temp:A3-timearebat:Ito|(back)|counterattack/hitarebonig:Ito|repaircrecenz:Ito|reviewO5ist:O5erarecept:O1cipe/prescriptionareciklig:Ito|recyclecreciprok:Ito|reciprocateO8lAmutual/reciprocalarecit:Ito|recitearedakci:Oeditorial|officeeredakt:Ito|editej:O3ing-roomil:O3orist:O5or:O5aredingot:Ofrock|coataredir:Ito|repeataredon:Ito|(back)|givecredukt:Ito|reduceebl:A4ibleigx:Ito|decreasecredund:OredundancyA7tanc:O7ce");
  prefix = fillDictionary(prefix, "aredut:O2oubtcreel:O1al|numberA3ekt:Ito|re-electareen:Fbackzref:Ito|(the|reef|sail)|foldOreef|sailal:Ito|lapseer:Ito|(a|scholarly|report)|makeerajx:Oscholarly|reporterenc:Ito|referenceerenc:O8erenc:Ein|referenceerendum:Oreferendumleksiv:A2lexivelekt:Ito|reflectlekt:O6ionlektor:Oheadlight/spotlightlor:Ito|(again)|bloomlu:Ito|ebblu:Olow|tideoj:Arepeatedoj:Eagainorm:Ito|reformorm:O5ormit:A5edortigx:Ito|recuperaterakt:O1fractionresxig:Ito|refreshugx:Ito|(back)|fleeut:Ito|refuteRreg:Ito|govern/controlad:Ocontrol/reign/ruleajn:Ito|(back)|regain/winal:Ito|entertain/treatal:Otreatant:Oruleril:Ocontrolleriment:Oregimention:O3onion:A5alist:Oruleristar:Ogovernmentistr:Ito|record/registeristr:O5istrad:O1gistrationistrist:O7ristrit:A5eredistrolibr:O1cord/registerlament:O1gulations/rulesn:Onationnestr:O(of|state)|headol:Ogoldcrestres:Ito|declineres:O6ul:Oruleul:Aregularul:Eregularlyular:Oññregulations/rulesulesprim:Oregular|expressionulig:Ito|regulatex:Ito|(over)|reign/rulex:Okingx:Aroyalxad:Oreignxec:Oroyaltyxid:Oprincexidin:O5ssxim:Oregimexin:Oqueenxisor:Ostage-managerxistr:Oregisterxland:Okingdomxuj:O6xustig:Ito|readjustareir:Ito|returnarejnbargx:ORhine|bargearejnland:A4landarejnsxip:ObargeFrek:Ohorizontal|barlam:Ito|advertiselam:O8mentomenc:Ito|resumeomend:Ito|recommend/registeromend:O8ationomendind:A9bleomendit:A8ed/registeredompenc:Ito|rewardompenc:O5on:Ito|recognizeonebl:A7ableonker:Ito|recaptureord:O2ordre:Ito|re-createrement:Otrash/wasterut:Ito|recruitrut:O6rutig:Ito|recruitt:Ostraight|linet:A7/directt:Edirectlytangul:Oright-angletar:Aruledtifebl:Arectifiabletig:Ito|straighten/aligntigil:Orectifiertil:Orulertor:Orectortum:O3umviem:O1quiemvizici:Ito|seize/requisitionkrel:Orailativ:Arelativeativ:E7lyev:Ito|raise/resurrectief:Orelief/projecting|artworkiefigx:Ito|beveliefstri:Omoldingigi:Oreligionigi:A6usikv:O3cikvuj:Oshrine/casketprem:Ito|rowacx:Ito|(its|or|their|cud)|chewacxul:Oruminantboat:Orow-boatbur:Ito|pad/upholster/stuffbur:O2ding/upholstery/stuffingemor:Ito|rememberemor:O1collectionemorig:Ito|remindemorig:O5ingend:Ito|reorderet:Ito|(back)|putil:Ooarist:Oroweriz:Ogaragepar:Orampartrren:Okidneydevu:Ito|meetdevu:Oappointment/datediment:Operformance/efficiencyegat:Odeserter/renegadeesanc:Orenaissancei:Orheniumkont:Ito|meet/encounterkont:Oencounterkontigx:Ito|meetom:Ofame/renownom:A2ousovig:Ito|renewt:Oincometum:O1terestvers:Ito|(down)|overthrow/knockversajx:O(in|a|permutation)|inversionversigx:Ito|(over)|turnarepacig:Ito|(friends|again)|becomearepag:Ito|repayarepertuar:O2ertoirebreplik:Ito|retortO5/replyarepren:Ito|(back)|takedrepres:Ito|reprintO6ajx:O6i:Opolitical|repressionbreprezali:Ito|retaliateO7ionareprezent:Ito|representbreprodukt:Ito|reproduceO7tionareptili:O2tilearepusx:Ito|repulseareputaci:O3tationaresalt:Ito|reboundbresanig:Ito|heal/remedyx:Ito|recoverdreson:Ito|echo/resoundO8nancead:Oresonanceil:O5tor/resonating|chamberbrespegul:Ito|mirror/reflectigx:Oreflectionfrespekt:Ito|respectO6atest:Oaccoladeind:Arespectableindec:O8ilityiv:A6ivebrespirig:Ito|respirateO7ionkrespond:Ito|answerO5Aresponsiblead:Oansweringaparat:O8|machineec:Oresponsibilityec:A8leecasekur:Oliability|insuranceig:Ito|(responsible)|holdil:Oanswering|machinekupon:Oreply|couponcrespublik:O2ublicA7anan:O9krest:Ito|remainO5derad:Ito|abidead:Ostayadej:Oabodeajx:Orest/remainderajxej:Ogarbage-dumpant:Aleft/remainingoklas:Oclassoraci:Orestaurantrikt:Ito|confine/limit/restrictbresum:Ito|summarizeO5y/résumé");
  prefix = fillDictionary(prefix, "Kret:Onet/networkadres:Oemail|addressajx:Onetworkan:OInternet|userej:Owebsiteen:Ito|(back)|keep/holdin:Oretinair:Ito|withdrawirigx:Ito|retreatirigx:O6kamera:Owebcamkomerc:Oe-commerceleter:Oemailor:Orhetoricianorik:O7ort:Oretort|vesselotaglibr:Oblogposxt:Oemailregion:Odomainret:Oretreatro:Ebackwardsroir:A7-moving/retrograderokupl:Ofeedbackropasx:Ito|(backwards)|walkropasx:Obackspaceroprojekciil:Ooverhead|projectorrospegul:Orear-view|mirrorrospektiv:A1trospectiverov:Ito|rediscoverrov:O9yrovajx:O9yum:Ito|(the|web)|surfumad:Oweb-surfingumil:Obrowserurn:Ebackurnit:Areversedusx:Ito|(up)|touchareunuig:Ito|reuniteareuxmatism:Orheumatismtrev:Ito|(of)|wish/dreamOdream/wishAday-dreaming/lost|in|thoughtad:Oreverieelaci:O3lationen:Ito|returnen:O5id:Ito|(again)|seeivigx:Ito|reviveizi:Ito|reviseizi:O4ionizor:Ogovernment|inspector/auditoroland:Odreamlandoluci:Ito|revoltoluci:O4utionoluci:A9aryolver:O4veru:Ito|reviewu:Omagazine/reviewul:Odreamer/day-dreamerarezed:Omignonette/resedaerezerv:Ito|reserveO6ig:Ito|reserveig:Obookinguj:Otankarezidu:Obreakdown|producterezign:Ito|(up)|resign/giveOresignationaci:Ito|(himself¯¯¯herself¯¯¯itself¯¯¯themselves)|resignaci:Oresignationem:O9n/submissionarezin:O3ndrezist:A3stantIto|resistO5anceA7tarezoluci:O2olution/motionbrezolut:A6eE7lyarezon:Ito|discuss/reasonerezult:Ito|resultO5at:Ito|resultat:O5/effect/conclusionig:Ito|(about)|bringarezum:Osummarynrib:Ocurrantek:Orebecel:Ito|mutiny/rebelel:Orebellion/revolt/mutinyelant:O4/mutineerelem:A4lious/insubordinateelul:O4gxin:Oblack|currant|ginmarmelad:Ocurrant-jamofoli:O7leafokremajx:O6|custardokustard:O9stardsuk:O7juiceuj:O7busharicelant:Ofenceericev:Ito|getant:Orecipient/consigneeatest:O2eiptej:O3ption|roomil:O3iveraricin:Ocastor-oil|plantdricx:Arichec:Oabundance/wealtheg:Afilthy|richul:Orich|manhrid:Ito|laughO4ad:O4tereg:Ito|(with|laughter)|roaret:Ito|smileet:O4ind:Aridiculousindig:Ito|ridiculegrif:Oreefugx:Ito|(shelter|or|refuge)|takeugx:Orefugeugxej:Oshelter/refugeugxint:Orefugeeuz:Ito|refuseuz:O4allrig:Ito|rigard:Ito|(at)|lookard:Olookardacx:Ito|(at)|gapeardad:Oexaminationardant:Ospectatorid:Arigid/stiffidnuk:Astubbornl:Ito|boltlil:O3or:Origoror:A4ousarikan:Ito|sneerarikisx:Orickshawcrikolt:Ito|harvestO6ajx:O6arikord:Orecorddril:O1elat:Ito|concern/relateat:Orelationatat:Oantecedentprim:Ito|rhymeO4an:ARiemannianar:Orhyming|dictionaryarangx:O3e|arrangementark:Ito|noticeark:O5/observationarkig:Ito|(to|the|attention|of)|bringarkig:Oremarkarkind:A5ableed:Omeans/resourceen:Ostrap/beltig:Ito|rhymeigx:Ito|rhymeoid:Oapproximate|or|assonant|rhymevortar:Orhyming|dictionarycring:Oringeg:Ohoopokolomb:Owood-pigeonarinocer:Orhinocerosqrip:Oribar:Ito|repairar:O5arad:O5arpag:O3rationet:Ito|repeatetad:O3titionetfoj:E3atedlyetit:A7oz:Ito|restoz:O3ozej:O3ing|placeozpurig:Ito|decantrocx:Ito|scoldrocx:O4ing/blamerocxadmon:Oreproofrocxind:A3ehensibledrisk:Ito|riskOhazard/riskA5ous/riskyogrup:Orisk|grouparisort:Ospringfrit:OriteA2ualar:O5libr:O(of|devotions|or|ritual)|formulary/bookm:Orhythmm:A5icbrival:Ito|rivalO4arivel:Ito|reveal/developeriver:Oriverdelfen:Omanateeenc:Ito|bowenc:O2/curtsyet:Ostreambrivolu:OrevolutionA9friz:Oricekamp:O3|paddykampul:O9|workerom:Orhizomeoplant:Orice|plantvin:Osake|winecrob:Orobe/dressai:Orubaiyatot:Oroboterod:Ito|gnawOanchorage/mooringi:Orhodiumodendr:O3odendronul:Orodentdroj:Obrook/streamalism:Oroyalismalist:O6tet:Ocreekdrok:Orockkolomb:O3-doveok:O2ocou:Obixindrol:Ito|(a|role)|playOroleant:Ocharacterul:O8wrom:ARomanan:Onovelanc:Oromanceanik:ARomanesqueanist:Ofiction-writer/novelistantik:Oromanticismantik:A7antikism:O7ismantikism:A7antikist:O7antikul:O7b:Orhombusboedr:O4ohedronboid:O5idi:ARomanian:O4katolik:A4|Catholicp:Ito|breakpigx:Ito|breakpigxem:Afragilepigxint:Abrokenpit:A5psxtelist:Oburglargrond:Ocircle/ringAroundbusxul:Ocyclostomeel:Oroundig:Ito|(off)|roundig:Oroundingodanc:O4|dancebrongx:Ito|gnaw/nibbleul:Orodentaronk:Ito|snore/snortbronron:Ito|purrO3ingkros:Odewmar:Owalrusmaren:Orosemaryt:Ito|roast/toasttbef:O4|beeftbif:O4beeftigx:Ito|roasttit:A4edtostang:Ospit/skewertpan:Otoasted|breadtr:Otrunk/probosciserot:Osquad/groupaci:Ito|rotateaci:O4ionaci:A7alond:O2undaeroz:O1seApinkarbust:Orose-bushari:O2arykolor:Apinklrub:Orubble/trashand:Oribbonej:Ogarbage|dumpekol:Orobinen:Orubyeol:OGerman|measlesidi:Orubidiuml:O2lerik:Oheadinguj:Ogarbage|canus:Oblackberry|bushusber:O9arudbeki:Orudbeckiaarudiment:A2imentary/vestigialarudr:O2dererugx:OredA2alg:O2|algaaribgelatenajx:Ocurrant|jellyigx:Ito|blushcruin:Oruinig:Ito|ruinigx:Odecayarukt:Ito|burpnrul:Ito|roll/runO7et:O1ulettefar:Ito|rollig:Ito|rolligx:Ito|rollkurten:O3er-blindprem:Ito|rollsegx:Owheelchairsxtupar:Oescalatorsxu:Orollerskatetemp:Arun-timeum:Ito|scrollumskal:O5|barerum:Oruman:ORomanianancx:A4cheanin:O4ian|womaneks:Osorrelbrun:OruneA2icarupi:O1peekrus:ORussianA6in:O6|womanland:A6landan:O6t:Ito|rustt:O3t:A3ytigx:Ito|rustuj:ARussianujan:O6drut:Orueeni:O1theniumerfordi:O4rfordiumin:Oroutinedruz:Otrick/ruseA4yajx:O4/ruseec:Ocunning/trickinessasabat:OSaturday/Sabbath'esabl:OsandA3er:Ograin|of|sandobenk:Osandbankoplen:A3ybsabot:Ito|sabotageO7asabr:O2rebsacerdot:OpriestA5lybsadism:OsadismA4ticasadist:O5asaduke:OSadduceeasafir:Osapphirehsag:Oarrowac:Ashrewdet:Odartu:Osagox:Owisdomx:A2exec:O2domxum:Ito|(smart)|actasair:Opacific|saurypsak:Osacke:O1kefung:O1c|fungusr:Ito|curse/swearr:Osacrumrament:O3amentrilegi:Ito|(sacrilege)|commitrilegi:Osacrilegerilegi:A7iousrilegiul:O8sts:OSaxonsifragac:Osaxifragesofon:O2ophonestrat:Odead-end|streetsxalm:Obagpipesvoj:Ocul-de-sacIsal:Ito|saltO3A3yajr:Ito|(a|salary|to)|payajr:Osalary/wagesajrul:Opaid|employeeam:Osalamiamandr:O4anderat:O3dd:Ito|balanced:O6er:O(of|salt)|grainik:Owillowikok:Oprawnikoket:Oshrimpimpost:Osalt|dutyiv:Ito|salivateiv:O5ivtuket:Obibivum:Ito|slobberm:Osalmonon:Oliving|room/lounge/salont:Ito|jumpt:O3tatak:Ito|(on)|pouncetet:Ito|hopubr:Ahealthyuj:Osaltshakerut:Ito|greetut:O4ingutad:O7utnom:Ologin|nameuton:Fhellov:Osalvovi:O1geKsam:A1meEthe|sameagxul:O(of|the|same|age)|personare:Asame-areaari:O2ariumari:ASamaritanarian:O8aritan:O8buk:Oeldercentr:Aconcentriceben:A1planaresenc:A1nsubstantialfaz:Ain|phaseidean:Ofellow-thinkerizdat:OSamizdatkiel:Fjust|askiel:R4likelandan:Ocompatriotlater:Aadjacent-anglednomul:Onamesakeopini:Ito|agreeovar:Osamovarpov:Aequipotentprofesian:Ocolleaguerekt:A3inearseksem:Ahomosexualsencajx:Osynonymsign:Asame-signspec:Asimilarteaman:Oteammatetemp:Asimultaneoustemp:Eat|the|same|timetempan:Ocontemporarytempec:Osimultaneousnesstempul:Ocontemporaryuraj:Osamuraivolumen:A2e-volumeQsan:Ito|(well)|beOhealthA5yatori:Osanatoriumdal:O2daldvicx:O3wichg:Ito|bleedg:O1oodg:A4ygadult:Oincestgalflu:Oblood|congestiongellas:Ito|bleedgellas:O1ood-lettinggkolbas:O4|sausagegocirkulad:O5circulationgocxel:O6ellgokolbas:O5sausagegokovrit:A4-stainedgomakulit:A9nedgomank:Oanemiagomank:A4cgorugx:Ablood-redgoversx:O4shedig:Ito|cure/healitar:Asanitary/healthkci:Ito|sanctionkci:O7kciad:O7korp:Aable-bodiedkt:Osaintkt:Aholy/sacredktag:O3|deedktajx:Osacred|objectktec:Oholinessktej:Osanctuary/sanctumktig:Ito|sanctifyktig:A7ingktigx:Ito|(holy)|becomektole:Ito|(the|last|rites|to)|administerktolead:Oadministration|of|the|last|ritesktul:Osaintktulin:O4skrit:OSanskritbsap:Osoapum:Ito|soapesard:OSardinianel:Osardinein:O6ini:ASardinianon:Asarcasticbsari:O2ir:O3raesark:Ito|(out)|weedasm:Osarcasmasm:A5ticil:Ohoeindajx:Otrash/wasteasarong:Osarongmsat:Ito|(full)|beAfull/satisfiedan:Odevil/Satanan:ASatanicdorm:Ito|(plenty|of|sleep)|getelit:Osatelliteen:O2in/sateenig:Ito|satisfyir:O3replor:Ito|(a|good|cry)|haverap:Osatrapur:Ito|saturateure:O1voryasaudarabian:OSaudiasauxc:Osauce/gravyasauxn:O2nahsav:Ito|saveO2ing/salvation/salvagean:O2annaboat:Olife-boatklap:Osafety|valvekopi:Oback-up|copymon:Osalvage|moneyzon:O1fety-beltdscen:Oscenear:O1riptarist:O5writerej:Ostageasceptr:Osceptretsci:Ito|(¯¯how¯¯)|knowOknowledgeavid:Ocuriosityavid:Ainquisitiveenc:Oscienceenc:A4tificencfikci:O4ce|fictionencist:O4tistencul:O1holarig:Ito|(know)|inform/letig:Oannouncement/notice/reportigx:Ito|(out)|findpov:Ito|(how)|knowur:Osquirrelvol:Ito|(to|know)|wantvol:Ocuriosityvol:A4usvol:Einquisitivelyvolem:Ocuriosityvolem:Einquisitivelyaseaborgi:Oseaborgiumaseanc:O1ssion/sitting/séancebseb:Osuet/talloworgi:Oseaborgiumbsecesi:O1cession/breaking|awayA3ding/breakawayeseg:Ito|sawil:O2ment:Osegment/circular|or|spherical|or|line|segment/closed|intervalregaci:O2regationx:Ochair/seatWsek:Adryajx:O2|landal:Oryeant:Osecantc:Ito|dissectc:Osectioncad:Oautopsycant:Osecantci:O2tionciestr:Odepartment|headig:Ito|dryigtuk:Odish|clothigx:Ito|dryreci:Ito|secretereci:O5ionret:O5retari:O5aryretariin:O8s:O1xs:A2ualsard:Oheat/sexual|desireskunigx:Ito|(sex)|haveskunigx:Ocopulationsmatur:Asexually|maturesogapej:Opeepshowsperfort:Ito|rapestant:Osextantsum:Ito|(sex)|havesum:Osext:O1cttan:O(of|a|sect)|membertor:Osectorund:O2ondundant:O5ur:Asafe/secureurec:O3ty/securityurkopi:Ito|backupurkopi:O5urrimen:Oseat-belturzon:O8v:Ito|followv:Oconsequencev:Anextv:Eso/consequentlyvant:Afollowing/nextvantar:Oññfollowers/supportersvinber:Oraisinvint:Anextvont:Afollowingdsel:Ito|saddleO5akt:Owheyen:Oseleniumjsem:Ito|sowOseedafor:Otraffic|lightajn:Oweekajn:A3lyajnfin:O3-endantik:Osemanticsid:OSemiteid:A4icinari:Oseminar/seminarybsenafekt:Asimple/unaffectedec:Oabandonmentasenagad:Oinactionasenakcent:Aunaccented/unstressedasenalkohol:Anon-alcoholicasenamik:Afriendlessbsenarm:Aunarmedig:Ito|disarmcsenat:Osenateent:Acareless/negligententec:O7ness/negligenceasenbalastig:Ito|(ballast)|releaseasenbarb:Abeardlessasenbaz:Abaselessasenbezon:Aneedlessasenbrid:Alawless/riotousasenbru:Anoiselessasenbukl:Aloop-freeesenc:Omeaningerbul:Oair-head/imbecileikl:Acycle-freexes:Aconstant/lastingxes:Econstantlyqsend:Ito|sendajxer:Opackageangxer:Asafeangxerec:O3tyank:Athankless/unsungauxr:Afleetingepend:Aindependentependec:O9ceevig:Ito|exemptifekt:Aflawlessint:Osenderit:Omessenger/ambassador/emissary/envoyit:Asentiul:Oatheistivergxenc:Azero-divergencerogigx:Ito|(the|habit)|kickub:Eundoubtedlyasenegalian:OSenegaleseasenescept:Ewithout|exceptionbsenesper:AdesperateE3airinglyasenfadenig:Ito|unstringasenfam:Aobscureasenfelig:Ito|skin/stripbsenfin:AeverlastingEendlesslyasenfrukt:Abarrenasengust:Atastelessbsengxen:Afree|and|easyec:Oabandonmentasenhalt:Acontinuousasenhar:Abaldasenhauxtig:Ito|skindsenhav:Aneedyec:O3/destitutionig:Ito|depriveul:Opoor|personasenhelp:Ahelplessasenheredig:Ito|(out|of|the|will)|disown/writeasenhom:Adesertedasenhont:Eabandonedlyasenig:Ito|deprivebseniluziig:Ito|disillusionx:Ito|(disillusioned)|becomeasenimpost:Aduty-free/tax-freeasenindulg:Ademanding/strictaseninfan:Achildlessbsenintenc:AunintentionalEby|accidencebseninterromp:AcontinuousEat|a|stretchasenjunt:Aseamlessasenkapig:Ito|decapitateasenkarakter:Acharacterlessasenkatenig:Ito|free/unchainasenkirl:Airrotationalasenkolorigit:Auncoloredbsenkompat:OharshnessAmerciless/ruthlessasenkonekt:Eoff-lineasenkonsci:Aunconsciousasenkonsekvenc:Oinconsistencyasenkonsol:Adesolatebsenkreditig:Ito|discreditO8asenkremig:Ito|(the|cream|off|of)|skimasenkreskajx:Ableakcsenkulp:Ainnocentec:O6ceig:Ito|excuseasenkultur:Acrudeasenkunkudr:Aseamlesscsenlabor:Aunemployedec:O7mentul:O7ed|personasenlac:A1tiring/energeticasenlern:Ewithout|studyingbsenlim:Ito|(limitless)|beAlimitlessasenmakul:Aimmaculateasenmalic:Ainnocentasenmank:Ewithout|failasenmorterig:Ito|(off)|chipbsenmov:Amotionlessig:Ito|paralize/immobilizeasennaciism:Ocosmopolitanismcsennom:Aanonymousbr:Acountlessec:Oanonymityasenofic:Aprivatebsenokupig:Ito|(idle)|makex:Ito|(idle)|becomeasenoriginal:Aunoriginalbsenpag:AfreeEfor|free/without|chargeasenpaneig:Ito|fixasenparti:Aimpartialasenpasi:Edispassionatelyasenpatr:Afatherlessasenpedikig:Ito|delouseasenpen:Ewithout|difficultybsenper:AdirectE5lyasenpez:Aweightlessbsenpint:Abluntig:Ito|truncateasenpolvig:Ito|dustasenposedig:Ito|depriveasenpretendigx:Ito|(down)|backasenprokrast:Eimmediatelyasenrelief:Aeven/flatasenrevigx:Odisappointment/disillusionmentasenrisk:Asafevsens:Osenseaci:O3ationaci:A8al/luridam:A3ual/sensuousang:Abloodlessenc:Asenselessencajx:Ononsenseencec:Oabsurdityentigit:Anumbederif:ADoric/sans|serifignif:Ameaningless/insignificantil:Osensor/transducer/pickupkrupul:Aunscrupulousorgan:Osensepert:Ainexperiencedpir:Abreathlesspirig:A5-takingpur:Ewithout|a|traceuprig:Ito|truncatexauxmig:Ito|skimxelig:Ito|shell/peelxirm:Ableakmsent:Ito|sense/feelOfeeling/sensationauxg:Agood-for-nothing/uselessauxgul:O9othingem:Asensitiveenc:Oproverbil:Osensor/transducer/pickupim:Abold/fearlessiment:Osentimentiment:A8alimental:O9lityimental:A9liv:A2sitiveasenutil:Auselessasenvalor:Aworthlessasenvent:Awindlessasenverv:Adull/lifelessbsenvestig:Ito|undressx:Ito|undressasenviv:Adeadasenvualig:Ito|reveal/unveilasenzorg:Acarefreeasepcenton:Aseven|hundredthasepdekon:A4tiethasepedr:Oheptahedronbsepi:Osepiaajx:O4aseplater:Oheptagonasepmiliardon:Aseven|billionthbsepmilion:A5millionthon:A9ionthasepmilon:A5thousandthasepon:A4thaseps:Ainfectedaseptembr:OSeptember'aseptet:Oseptetasepultentreprenist:Oundertaker/morticianLser:Oserumaf:O2aphajl:O3gliob:OSerbcx:Ito|(for)|lookcxad:Osearchcxfos:Ito|excavatecxil:Osearch|engineen:Ocalmness/serenityen:A3enad:Oserenadegx:O2gegxent:O4anti:O2iesi:A3aliajx:O5if:O3fioz:A3ousp:Osicklepent:Ito|twist/meanderpent:Osnakepent:A4y/twisty/serpentinepentum:Ito|twist/windum:Oserumur:Olockurist:O3smithv:Ito|servev:O3icevad:O6/waiting|on|peoplevic:Ocrockery|setvil:Oservervist:O5/servantvistin:Omaid/servantvitul:Oserfvodauxr:O1niorityvopret:Areadyvut:Oserfdom/involuntary|servitudevutul:O3asesangul:Ohexagonasescenton:Asix|hundredthasesdekon:A2tiethasesdekum:Asexagesimalasesedr:Ohexahedronasesi:Osessionaseskvilinear:A2quilinearaseslater:Ohexagonasesmiliardon:Asix|billionthbsesmilion:A3millionon:A9nthasesmilon:A3thousandthaseson:A2thasetar:O1tarbsever:Astrict/severeec:O5ness/severityasevrug:O1arry|or|stellated|sturgeonasezam:Osesameasezon:O1asoncsfer:OsphereA4icaldisk:O8|layerasfinks:O2inxasfinkter:O4cterasiam:ASiameseasiatemp:Ein|his/her/its/their|own|timebsiberi:ASiberianan:O7asibl:Ito|hisscsicili:ASicilianan:O7anin:O7|womangsid:Ito|sitO2eej:Oseatig:Ito|seatigx:Ito|(down)|sitlok:Oseatvang:Obuttockcsiegx:Ito|besiegeOsiegeant:Obesiegerasiest:Osiestaasifilis:Osyphilisasifon:Osiphonbsigel:Ito|sealO3asigl:Oacronymasigmaalgebr:Osigma-algebra/sigma-fieldmsign:Ito|(out)|indicate/pointOsignal:Ito|signalal:O5/signar:Ocharacter|setif:Ito|meanif:O3ingifoplen:Asignificantobild:Oglyph/typefaceostang:Obeaconosxangx:O(in|sign)|changeovic:Ostringum:Onumber|sign/sign|or|signature|of|a|permutation/signumasihx:OSikhasikh:O3asikism:Osikhismasikomor:Osycamoreasilab:O1llabledsilent:Ito|(silent)|beOsilenceE4tlyem:Ataciturnasilici:Osiliconasilik:Ogravel/flintcsilk:OsilkA3rauxp:O3wormasilogism:Osyllogismasiluet:Ooutline/silhouetteasilvi:Ohedge-sparrowasimbioz:Osymbiosiscsimbol:Ito|symbolizeO5/badgeig:Ito|symbolizefsimetri:O2metryA6icalaks:O(of|symmetry)|axiscentr:O9ry)|centereben:O9ry)|planeec:Osymmetrybsimfoni:O2phonyA6ic");
  prefix = fillDictionary(prefix, "gsimi:Ito|imitateOape/monkeyl:Ito|resemblel:Asimilarlajx:Opicture/imagelec:Osimilarityosimil:Aape-like/monkey-likecsimpati:Ito|sympathizeO6yA6eticbsimpl:Asimpleig:Ito|simplifyasimpozi:Osymposiumasimptom:O3tomcsimul:Ito|pretend/simulatead:Osimulationil:O6orZsin:Obosomagog:Osynagogueam:Oself-loveap:Omustardcer:Osinceritycer:A5ecerec:O5itydefend:Oself-defensedeten:Ito|abstaindeten:O3inence/abstainingdikat:Otrade-uniondon:Odevotiondon:A4eddon:E6ly/selflesslydonec:O4iondonem:O7donem:A4ed/selflessekdohx:Osynecdochegapur:ASingaporeangapuran:O9ngard:Ito|(careful)|begard:Ocautiongard:A1refulgard:E6ly/gentlygardec:O1utiongardem:O6gardem:A1reful/cautiousgular:Osingulargult:Ito|hiccupgult:O5gxen:Oshynessgxen:A2/self-consciousgxenem:A2hal:OSinhalesehumilig:Oabasementjor:Ogentleman/Mr.jorin:Olady/ma'am/Mrs.jorin:Awife'sk:Ito|sinkkig:Ito|sinkkron:Asynchronousofer:Oabnegationonim:Osynonymreg:Aself-controled/composedregec:O9ol/composureretenem:Adetachedsekv:Oordersekv:Asequentialsekv:Econsecutivelysekvig:Ito|(together)|linktagm:Ophrasetaks:Osyntaxasinten:Oattitudecsintez:Ito|synthesizeO7sil:O7zerasintoniz:Ito|tuneasinus:Osineasiren:Omermaid/sireniancsiri:ASyrianan:O5ng:Olilacasirok:Osiroccoasirop:Osyrupbsistem:O1stemA5aticasitar:Ositarasitel:Obucketcsitu:Ito|(situated)|beOsiteaci:O2uationaskaben:Oalderman/magistrateaskadr:Osquadronaskafald:Oscaffoldaskafandr:Ospace-suit/diving-suitgskal:Ito|rescaleOscalear:O3arar:A5ebl:A4bleen:A3enep:O3pgskan:Ito|scand:Ito|scandal:O3daldi:O4iumdinav:OScandinaviandinavin:O9an|womanil:Oscanneraskapol:Oshoulder-bladeaskarab:Obeetlebskarlat:OscarletA6askarp:Osash/sling/scarf/stolecskatol:Obox/canet:Olittle|boxmalfermil:Ocan-openeraskecx:Osketch/skitaskelet:O2letonaskem:Omodel/patterndskeptik:OskepticismA6alism:O6ismul:O6askerc:Oscherzocskerm:Ito|fenceO3ingist:O3erasket:Ito|skatekski:Ito|skiO2ist:O2erkur:Ito|skip:Oteamsm:Oschismt:OScythiant:A7trak:Oski|trackz:Ito|sketchz:O5dsklav:Oslaveig:Ito|enslaveigx:Ito|(enslaved/addicted)|getin:Ofemale|slaveaskler:Oscleragskol:O1hoold:Ito|scoldop:Owoodcockopendr:Ocentipedet:Oscouttavi:Ospy|aircrafttism:Oscoutingaskombr:Omackerelaskorpi:Oscorpionaskorzoner:Oblack|salsifycskot:OScotsmanA3tishin:O3swomancskrap:Ito|erase/scrapegum:O4rvund:Oscratchlskrib:Ito|writeO3ingA3tenEin|writingajx:Owritingerar:Otypoist:Oclerkmanier:Ohandwritingmark:Ocursormasxin:Otypewriteroplum:Opentabl:Owriting-deskbskrupul:Oconscientiousness/scrupulousnessA9ous/scrupulouslsku:Ito|shakeigx:Ito|shakelpt:Ito|carve/sculptlptajx:Osculpturelptil:Ochisellptist:Osculptorlptur:O5uren:O1hoonerrgx:Ito|whiprgx:O3sorbil:Oshock-absorbertil:Oscooteraskvam:O1alecslav:OSlavA3icon:O3onianasled:Osleighbslip:Ofiling|card/slipar:O2ebslovak:OSlovakin:O5|womanbsloven:O3enianA8asmerald:Oemeraldbsmirg:Ito|abradeA3sivebsnob:OsnobA3bishasnuf:Ito|sniffasobr:Asober/temperatejsoci:O1ciety/communityA3alal:A5alism:O5ismalist:O7tet:Ojoint-stock|companyolog:Osociologistologi:O7yologi:A7icalologiist:O8stasod:O1dadsof:O1faist:O1phistt:Aquiettvar:Osoftwarecsoif:Ito|(thirsty)|beOthirstA5ycsoj:Osoykaze:Otofu/bean-curdl:Othreshold/sillbsok:Oplowsharel:Osupporting|baseCsol:Aalone/onlyEonlyan:Onightshaded:Osoudat:O1ldierdatej:Obarrackse:Osoleec:Olonelinessec:A4y/solitaryen:Ito|celebrateen:O1remonyen:Asolemnenad:Ocelebrationenajx:O1remonyenec:Osolemnessid:O2idid:Afirm/solididar:Osolidarityidar:Ainterdependentidarec:Osolidarityidec:Ofirmnessist:Osoloistul:Osinglev:Ito|solve/dissolvev:O2utionvajx:O7vent:A2ventventec:O5cyvigx:Ito|dissolvecsomal:OSomaliA5in:O5an|womanbsomer:Osummerdom:O5-housebsomnambul:Ito|sleepwalkO8erwson:Ito|soundO4at:O1natabend:Oaudio|taped:Ito|fathom/plumb/sounddisk:Orecordet:Osonnetforket:Otuning|forkgx:Ito|dreamgx:O4lokalizil:Osonaror:Ito|ringor:O3ingor:Asonorousorad:Otollingorig:I1|ringoril:Obellorilar:Oññchimes/carillonorilarist:Ocarillonneurorilbuton:Obuzzer|buttonorileg:Obig|bellorilet:Olittle|bellormartel:Oclappercsopir:Ito|(for)|longAlongingant:A6asopran:Osopranobsorb:Ito|absorb/sipA5enthsorcx:Ito|bewitchOsorceryAmagic/bewitchingad:Osorcery/witchcraft/wizardryinflu:Ospellist:Owarlock/wizardistin:Owitchvort:Oabracadabraasordid:Adirty/foulasorg:Osorghumbsorik:Oshrewed:O4-type|lifeformbsorp:Omountain-ash|or|rowan|berryuj:O9sh/rowancsort:Ofate/luckiment:Ito|stockiment:Oassortmentasot:OSothobsovagx:OsavageAwildasovet:OSovietbspac:Oroom/spaceet:Ospacecspad:Orapierfisx:Oswordfishik:Ospadixaspajr:O1ireaspaniel:O1anielcspark:O2rkad:Oignitionil:Ospark-plugbspart:ASpartanan:O6aspasm:Ospasmpspec:Okindi:Ospeciesial:A4alial:Eespeciallyialcel:Aad|hocialig:Ito|specializeialist:O7stif:Ito|specifyif:A5icifik:Ito|specifyifik:A5icimen:Osample/specimenimenar:Ocollectionimenbotelet:Osample-bottleimenkart:O6cardimenlibr:O5|bookbspegul:Ito|reflectOmirrorespekt:Ito|watchakl:Oshowant:Ospectatorantar:Oaudiencer:Ospectrumfspekul:Ito|speculateaci:Ito|speculateativ:Ito|speculateativ:O7ionativ:A8veimpost:Oshort-term|capital|gains|taxaspelt:Ospeltbsperm:O2rmatozo:O4atozoondspert:Ito|(through)|goOexperienceA9d/expertul:O4tcspez:Ito|(business)|doOmoney|turnover/transactionad:Ocash|flowdspic:Ito|spiceO4A3yist:Ogroceraspik:Oearaspil:Ito|tap/broachdspin:Ospine/spinac:O3achet:Oottavino/spinetmomant:Ospinbspion:Ito|spyO2qspir:Ito|breatheO5ad:Orespirational:Ospiralblov:Ito|snufflegxen:O(of|the|chest)|tightnessit:Ospirit/mindit:A5ualitcxeest:O1ontaneityitforest:Aabsent-mindeditism:Ospiritualismitpretec:O1ontaneityitualism:O1iritualismitualist:O9stmank:Odyspneaohxet:Ospirochetepauxz:Obreathing|spacecspit:Ito|defyO2iance/spiteE5tly/in|spiteasplen:O1pressionbsplit:Ito|split/splinterO3nteraspok:O1okeasponde:O2ndeedspong:Ito|(with|a|sponge)|wipeOspongeA4yec:A5cspontan:A3taneouse:A9se:E9slyfspor:O2read:A3adict:O3ttcxemiz:O4s|shirttej:O6groundtist:O5manaspraj:Ito|spraydsprit:OwitAlively/wittyajx:Owitticismrespond:Ato|the|pointbspron:Ito|(up)|spur/stirOspurasprot:O1rataspur:Otrace/trackbsput:Ito|(out)|spitnik:Osatellitecsrilank:ASri|Lankanan:O9anin:O9|womanestab:Ostaffej:Oheadquartersil:Astablel:Oworkbenchlolaborist:Ofittercstaci:Ostationdom:O6-houseestr:O7masterbstadi:O2dium/stageon:O6astafet:Orelay|racerastagn:Ito|stagnateastagx:Ointernship/training|coursebstaj:Obrace/cramp-ironvel:Ostaysailcstak:Ito|stackOpile/stackis:Owoundwortcstal:Oanimal-dwelling/barnfak:Ostallon:O4ionastamen:O2mencstamp:Ito|stampOmark/stampimpost:Ostamp|taxistan:Ito|tin-plateO2d:Obooth/stall/standdard:Obanner/flagg:Opole/rodget:Ostickgopup:Orod|puppetiol:Otin|foilist:O2smithbstapl:Ito|pile/stackO9hstar:Ito|standhimn:Oacathistusig:Ito|(up)|setigx:Ito|(up)|standt:Ito|starttant:O4ertig:Ito|starttigil:O4erhstat:Oconditionik:Ostaticist:Ito|(a|small|part)|playist:Osupporting|actor/bit-playeristik:Ostatisticsu:O3ueur:O4reut:O4teastauxd:Operennial|herbastearin:Ostearinbsteb:Ito|stitchil:Osewing-machinehstel:OstarA3aniz:O3|anisear:Oconstellationet:Oasteriskfigur:Oconstellationul:Ocelebrity/starulin:O9starhsten:Oshorthandcil:Ito|stencilcil:O6ograf:Ito|(in|shorthand)|writeografi:Oshorthand/stenographyografiist:Ostenographerotajpist:O4typistotajpistin:Ofemale|stenotypistastep:Osteppeasteradian:O2radianastereometri:O3eometryastereotip:O5typebsteril:A3ileig:Ito|sterilizeesterk:Ito|fertilizeO8rad:O7ation/manuringakv:Oliquid|manure/muck-wateroskarab:Odung|beetlebsterling:Opound|sterlingfunt:O9lingbstern:Ito|(down)|layum:Osternumastertor:O(in|the|throat)|rattlebstevard:Oattendant/stewardin:Ostewardessasteven:O2m/sternastift:Opinbstil:Ostyleet:O1ilettobstimul:Ito|(up)|stimulate/stirOstimulus/incitementbstipendi:Oscholarshipul:O9p|studentistir:Ito|steerad:O4ingant:Odriverglob:Otrackballil:Osteering-wheelist:Odriverrad:Osteering-wheelsign:Ocontrol|characterstang:Ojoystickbstiv:Ito|stowist:O1evedorebstoik:A1oicul:O4dstok:Ito|stockO4ast:Arandomej:Ostorage/stock|room/warehouseastol:O2lebstomak:O2machdolor:O6|acheastopl:O1ubbleastor:Omemorycstrab:Ito|(askance|at)|squint/lookAcross-eyed/askance-lookingism:Ostrabismus/cross-eyednessbstrand:Obeachsxtelist:O4comberbstrang:Astrangeol:Ito|choke/stranglegstrat:Ostreetangul:O5-corneregi:O2ategyegi:A6icet:Oalley/lanelantern:Ostreetlighttelefon:Opay|phoneastreb:Ito|strivehstrecx:Ito|tighten/tenseOtensionEtightlyant:A4ig:Ito|(out)|stretchigx:Ito|stretchigx:O6ingit:A6ed|outestrek:Ito|(a|stroke)|makeOstroke/lineet:Ohyphenmark:Ito|(a|check|mark)|makemark:Ocheck|markkstri:Ito|stripeO5/stripg:Oowlgl:Ito|curryglil:O4-combit:Astripedk:Ito|strikek:O5knin:O2ychninekt:Atightptiz:Ostrip-teasebstrof:Overseoid:Ostrophoidastronci:O3ntiumbstruktur:Ito|structureO8bstrut:Oostrichoform:Aratiteistud:Ito|studyO4ad:O4ant:O3entent:Ocollege|studententin:Ofemale|college|studentgxarden:Obotanical|gardeni:Ostudioobjekt:O(of|study)|objectbstuf:Ito|simmer/stewajx:Ostewbstuk:Ito|plasterO6fstult:AstupidE5lyajx:O5ityec:O8eg:Abrainlessul:Ofoolastumbl:Ito|stumblebstump:O3p/stubig:Ito|amputateasturg:Osturgeonbsturm:Ito|assault/stormO9ormingasturn:OstarlingZsub:Aloweracxet:Ito|bribeakv:Aunderwaterakvig:Ito|submergeakvigx:Ito|dive/sinkar:Osubsetarb:O2treeauxskult:Ito|eavesdropbildig:Opartial|mapping/restriction|of|a|mappingbrak:Ounderarmcxemiz:O4shirtdisk:Ohard|drive|partitiondosieruj:Osubdirectoryen:Fdownensxargx:Ito|downloadesprim:Osubexpressionetn:Oethnic|subgroupfal:Ito|succumbfos:Ito|undermine/subvertfos:Asubversivegrafe:Opartial|graph/subgraphgrup:Osubgroupig:Ito|subdue/subjugateir:Ito|(down)|goit:Asuddenit:E5lyjekt:O1bjectjektiv:A6ivejugig:Ito|subjugatejunkci:O4nctionjunktiv:O8vejup:Opetticoatkolonel:Olieutenant-colonelkonstruajx:Ofoundationkorp:Osubfieldleuxtenant:Osecond|lieutenantlimat:Ocorrosive|sublimatematric:Osubmatrixmet:Ito|subdue/subjugatemetigx:Ito|submitmodul:O3odulenoci:O2notionoficir:Onon-commissioned|officerombr:Oshadeordig:Ito|subordinateprem:Ito|suppressring:O1bringskrib:Ito|signskrib:O3aturespac:Osubspacespec:O2typestanc:O2stanceasubstantiv:Onounbsubstitu:Ito|substituteO8ion/permutationasubstrecx:Ito|(an|arc)|subtendbsubstrek:Ito|emphasize/underlineOunderscoreasubsxtel:Ito|swipe/pilferasubsxtof:Oliningasubsxtupar:Edownstairsasubtaks:Ito|underestimateasubtas:Osaucerasubtegment:Oatticcsubten:Ito|support/sustainajx:Oabutmentant:O(of|the|function)|carrierbsubter:Aundergroundetagx:Obasement/cellarasubtil:Asubtledsubtrah:Ito|subtractO7ionat:O5hendebl:Adeductibleasubul:Osubordinateasuburb:O2urbbsubvenci:Ito|subsidizeO5ybsubventr:OabdomenA4inalasubvest:Oundergarmentasubvic:Osubsequenceesucx:Ito|suckbotel:Obaby-bottleig:Ito|suckleil:Ovacuum-cleaner/pacifierinfan:Obabyksud:OsouthA4ernafrik:ASouth|Africanafrikan:O9canamerik:A6mericanamerikan:O9icanan:ASudaneseanan:O7ananin:O7|womanazian:OSouth|Asiankore:O5Koreanasufer:Ito|sufferesuficx:Ito|sufficeAenoughE5eg:Oabundanceeg:A6tbsufiks:Osuffixrim:O5|rhymebsuflor:Ito|promptO5ercsufok:Ito|suffocateAstifling/oppressiveigx:Ito|chokedsugest:Ito|suggestO6ioni:Ito|suggesti:Opower|of|suggestionrsuk:OjuiceA3ycen:Oamberces:Ito|succeedces:O4ssces:A6fulces:E9lycesplen:A9er:O1garerkan:O4-caneerpalm:O5palmersciur:O4|glidereruj:O4-bowlub:O1ccubusur:Ofirst-aidurej:O8|stationurism:O8urist:O8erbsulfur:Osulphur/brimstoneA6icdsulk:Ito|wrinkleO6/furrowig:Ito|wrinkleigx:Ito|wrinkleasultan:Osultanesum:Oamount/sumer:OSumerianer:A7ig:Ito|totaligx:I1|amountosun:OsunAsolarban:Osunbathbril:O2shinebrun:O2tanbrunig:Ito|tanflor:Osunflowerigad:O2shinelevigx:O2riselum:O2lightradi:O2beamsekig:Ito|sun-drysubir:O2setum:Ito|sunbathevitr:O2glass");
  prefix = fillDictionary(prefix, "Zsup:Osouper:Ito|exceed/surpasser:Ahigherer:Eaboveerabundec:Ooverabundanceerakv:Ito|flooderakveg:O4erakvigx:Ito|emergeerar:Osuperseteratut:Ito|surpasserbazar:O1permarketerbluf:Ito|disconcerterec:Oupper|hand/superior|positioneretn:Oethnic|supergrouperfantazi:Agreaterfelicx:Aoverjoyederflu:Ito|overflowerflu:A7ing/superfluouserfort:Ito|(stronger|than)|beerfort:Oadvantage/act|of|Godergrafe:Osupergrapherhom:O4humanerjar:Oleap-yearerkorp:Oextension|field/overfielderlativ:Osuperlativeermarkt:O4marketernoci:O4notionernova:O6vaerpunkt:Odiacritic/accenterreg:Ito|overruleerreg:Apredominating/most|importantersign:Oaccent|markersticx:Osuperstitionersticx:A9ousersxtupar:Eupstairsersxut:Ito|swamp/overwhelmertaks:Ito|overestimateertut:O3allserul:Oboss/superiorervendej:Osupermarketervest:Oovercoat/outer|clothinglement:Osupplementlement:A9aryoz:Ito|supposeoz:O5itionoz:E6ngr:Otop/summitr:Aupperr:Eabove/on|top/upstairsrajx:Osurfacerajx:A1perficialrajx:Eshallowlyasuprem:Oleast|upper|bounddsupren:Fupir:Ito|(up)|ascend/climbstrek:Odiagonal/slash/stroke/virgule/separatrixsxargx:Ito|uploadasuprestarant:AaboveZsur:Ocalfa:Osurabazig:Ito|basebendajx:Otape|recordingbendig:Ito|tape-recordbendigil:O3|recorderbordigx:Ito|(the|shore)|reachcxevaligx:Ito|(up)|mountd:Adeafdmut:A3|and|dumbf:Ito|surf/websurff:O3fac:O3acefac:A6/superficialfac:E1perficiallyfadenig:Ito|thread/stringgenu:Ito|kneelgenuigx:Ito|kneelgrat:Ito|(up)|scratchgrimp:Ito|ascend/climbgrimpad:O4t/climbinggrimpebl:Aclimbablehav:Ito|wearinam:ASurinameseinaman:O9inamanin:O9|womanir:Ito|climbirebl:Apassablejekci:Oonto|function/surjectionjekci:Asurjectivejxet:Oonto|function/surjectionjxet:Asurjectivekolonajx:Oentablaturekresk:Ito|overgrowkreskat:A7n/coveredmet:Ito|(on)|putpaperig:Ito|(down)|writepentr:Ito|(over)|paintpiedigx:Ito|(up)|standpres:Ito|printpriz:Ito|surprisepriz:O7priz:Astartling/surprisingpriz:Esurprisingprizigx:Ito|(surprised)|beprov:Ito|(on)|tryradiad:Oirradiationradii:Ito|(on)|irradiate/shinescenig:Ito|present/stagescenig:O6ation/stagingscenigist:Odirectorskrib:Ito|(on)|writeasurskrib:Oinscriptionasurstakig:Ito|pushasursxip:Eon|boardasursxprucig:Ito|splash/sprinkleasurtablig:Ito|servecsurter:Aterrestrialigx:Ito|landigx:O3ingasurtronigx:Oenthronementasurtut:Oovercoatasurversx:Ito|waterasurvetur:Ito|(over)|runesuspekt:Ito|suspectO3icionAshady/suspiciousem:Amistrustfulind:Asuspiciousbsuspend:Ito|suspendit:A6edasuspir:Ito|sighbsusur:Ito|rustleO5/swishasusxi:Osushiasutan:Ocassock/priestly|clothesbsutur:Ito|seam/sutureO9ecsuveren:OsovereignA8ec:O8tyasvag:Avague/fuzzyasvahil:OSwahilibsvarm:Ito|swarm/aboundO4csvat:Ito|(marriage)|match-make/proposeist:Omatch-makeristin:O9rasvazi:ASwazibsved:O1edeA3ishbsvelt:Aslenderigxad:Ito|(slim)|getdsven:Ito|(out)|faint/passOfaintig:Ito|(out)|knockint:Aunconsciousdsving:Ito|wave/swingigx:Ito|sway/swingpend:Ito|swingsalut:Ito|wavebsvis:OSwissA4asvop:Oswapasxaban:OSha'banasxablon:Opattern/stencil/templatejsxaf:Osheepajx:Omuttonblek:Ito|bleatej:Osheep-penhund:O5dogid:Olambid:A3idajx:O3ist:Oshepherdt:O1aft/spindleasxah:O2hfsxajn:Ito|seemOappearanceA2arentE7lyig:Ito|pretendpied:Opseudopodhsxak:Ito|checkO2ssal:Ojackallud:Ochesspec:O4-piecer:Ito|traffic/peddlet:Oshafttabul:Ochessboardfsxal:Oshawlm:Obellows/windbagt:Ito|(on)|turntil:Oswitchup:Oship's|boat/sloopupeg:Olaunch/longboatgsxam:Ochamois|leatheran:Oshamananism:O5ismisen:O3isenpinjon:Omushroompu:Ito|shampoopu:O6fsxanc:Ochanceel:Ito|shakeeligx:Ito|hesitate/wavereligxant:A5nteligxem:Oindecisioneligxem:A7veasxanel:Ochannelgsxangx:Ito|changeO5em:Aunstableemec:Oinstabilityigx:Ito|change/transformigx:Otransformationmon:Ochangeasxarad:O2radejsxarg:Ito|charge/loadil:O5r/loaderomodul:Oload|modulex:Ito|burden/loadx:O9dxant:Acarryingxatest:Obill|of|lading/consignment|note/waybillxauxt:Otruckxavi:Ocargo|aircraftxbicikl:O2rier|bikeasxark:Osharkfsxat:Ito|likeO2ing/appreciationatec:O9reciationeg:Ito|(very|fond|of)|beind:Alikableokup:Ohobbycsxauxm:Ito|foam/frothO3Aeffervescent/foamyasxed:Oshedasxejk:O2ikhcsxel:O2ll/peel/barkak:O4ack:Osuspenderasxenopraz:Ochivedsxerc:Ito|jokeO3ajx:O3/gagem:A1cular/playfulasxere:Osherryasxerif:O3iffasxetlandinsular:OññShetland|Islandsasxijaism:Oshi'iteismasxijaist:O6asxik:Achicdsxil:O1yled:Osign/tag/shielddet:O7ing:Oshillingcsxim:Ito|(moldy)|getOmoldA3yasxind:Oshingleasxink:Ohambsxinto:OShintoismism:O8isxip:OshipEby|shipanar:Ocrewar:Ofleetestr:Ocaptainist:Osailorkonstruej:Oshipyardpere:O3wreckrip:Oframe/timberisxir:Ito|ripajx:Otearigxint:Atornit:A3m:I1|shelter/protectm:O9otectionmej:O6mil:O6mtegajx:Odust-coverasxlagr:Ohit|songbsxlim:Ito|(muddy)|beOmud/slimecsxlos:Ito|lockil:Okeyit:Alockedasxmac:Ito|smackbsxmink:Ito|(on|make-up)|putOmake-upbsxmir:Ito|smear/anointajx:Oointmentdsxnur:Orope/chorddancist:Otightrope|walkersalt:Ito|(rope)|skipsxtupetar:Orope-ladderbsxofor:Ito|chauffeurOdriver/chauffeurasxogun:Oshogunesxok:Ito|shockO4A4ingant:Aoffensiveigx:Ito|(shocked)|bebsxos:Oshoote:Ohighwayfsxov:Ito|shoveel:Ito|shovelelil:O5inism:Ochauvinisminist:O8tsulk:Oslotdsxpar:Ito|saveOeconomizing/saving|moneyad:O9g/saving|moneyem:Athriftyasxpat:Ospadecsxpin:Ito|spinil:O3dlerad:O3ning-wheelgsxpruc:Ito|(out)|spurtakvum:Ito|waterakvum:O4ingfenestr:Opop-up|windowflu:Ojet|streamig:Ito|squirtil:Onozzlebsxrank:Ocupboard/closetlit:OMurphy|bedasxrapnel:Oshrapnelgsxrauxb:Ito|screwO4il:O4-drivering:Onutsxlosil:Owrenchtenil:Oviceturnil:Oscrewdriverasxrump:Ito|(up)|shrivelbsxtal:OsteelA4fsxtat:O1atean:Onationalanec:O7ityestr:O(of|state)|headig:Ito|nationalizeig:O9ationjsxtel:Ito|stealOtheftEstealthilyajx:Oloot/stolen|propertycxas:Ito|poachir:Ito|(stealthily)|goist:Othiefistin:Ofemale|thieframp:Ito|(up)|creeprigard:Ito|cribbsxtip:Oblockar:Owoodpileasxtof:Ocloth/materialgsxton:OstoneA4eg:Oboulderetar:Orubblehakist:Ostone-cutter/stonemasonigxint:Apetrifiedjxetil:Osling-shotcsxtop:Ito|plug/clogil:O4stopper/electric|plugiling:Oelectric|socketasxtorm:Ostormbsxtrump:O2ckinget:Osockdsxtup:Ostairstepar:O4casearlift:Oescalatoretar:Oladdermsxu:Oshoefarist:O3makerist:O8korn:O3-hornlacx:O4laceld:Ito|oweld:Odebtldigx:Ito|(into|debt)|goltr:Oshoulderltrolev:Ito|shrugltrozon:Obandoleer/shoulder-beltt:Ito|(out)|pourtr:Owindow|shutterasxvabrilet:Odish-mopasxveb:Ito|hoverbsxvel:Ito|(up)|swellig:Ito|inflatecsxvit:Ito|sweatO4ban:Osaunabtabak:Otobaccoajxbutik:O6|shopataban:Ohorse-flyatabel:Otable/arrayatabernakl:O2ernacledtabl:O2leomont:Omesaotenis:Oping-pongotuk:Otable-clothdtabu:O2ool:Oboardlbaril:Owooden|fenceret:Ostoolatacxment:Odetachmentataft:Otaffetantag:OdayA2timeEin|the|daytimebilet:Oday-ticketet:OAfrican|marigoldigx:Odawnlibr:Odiarylum:Odaylightmangx:Olunchmez:Onoonnokt:Odaynoktegalec:Oequinoxord:Oagendaxik:OTadzhikotaj:OThaid:Otidefun:Otyphoong:Oboreal|forestin:OThai|womanl:Ito|carvelandan:OThailor:Ito|tailorlor:O5lorin:Ofemale|tailorp:Ito|typepist:O2istpistin:O5van:ATaiwanesevanan:O8gtaks:Ito|rate/appraise/estimatei:Otaxiiej:O3|standiist:O3-driverist:Oappraiseristaci:Ocab-standus:Oyew-treectakt:Orhythm/musical|beatik:Otacticsik:A5alatalant:O1lentatalar:Ogown/robectalent:OtalentA5edplen:Agifted/talentedataler:Otaler/thaleratales:AThalessdtali:Owaistb:OTaliban|membersman:Otalismanum:Othalliumatalp:Omoleatamarik:Otamariskatambon:O2bon/townshipctambur:Odrumin:Otambourineist:Odrummeratampon:Oplug/tamponatamtam:Otamtamqtan:Ito|tandem:O2dem|bicycleej:O2neryg:O2gogent:O3entgx:Ito|(tangent|to)|begx:Atangentgxant:O6gxant:A6il:O2ninin:O5ist:O3erk:O2kka:O3atal:O2talumzani:ATanzanianzanian:O8ctapet:Ito|paperOwallpaperist:O8-hangeratapiok:Otapiocabtapisx:Ito|blanket/carpetOcarpetatarantul:Otarantulaatarif:Oprice|list/tariffatartan:Otartanetas:Ocupk:Ito|assignk:Otask/jobmani:ATasmanianmanian:O8btatar:O1rtarA1tarbtatu:Ito|tattooajx:O5ctauxg:Ito|(suitable)|beAsuitableec:O5ilitybtauxr:Obullobatalej:O3ringatauxz:Ito|dishevelatavern:Oinn/tavernbtavol:Olayer/classkuk:O4|cakeZte:Oteaam:O2matr:Otheateratr:A4ricalatrajx:O4er|playd:Ito|bored:A2ingdajx:Ofussdigx:Ito|(bored)|beej:Otea-houseg:Ito|cover/coatg:O1ating/surfacegajx:Osurface/coating/covering/algebraic|or|linear|closure/convex|hullgil:Oprotective|covergment:Oroofgol:Ito|shingle/tilegol:O7roofing|tilegolist:Oroofer/tilergument:Ocoverhxnik:Otechniquehxnik:A5calhxnikist:O6ianism:Otheismist:O4tk:Obriefcasekil:Otequilakkomputil:Olaptop|computerkneci:Otechnetiumknik:O4iqueknik:A5calknikist:O6ianknologi:O4ologyknologi:A8icalkrucx:O1apotks:Ito|weaveksajx:Ofabric/textileksarangx:Oweaveksasan:OTexanksasanin:O4|womanksil:Oloomkst:Ito|saykst:Otextkstig:Ito|(to|text)|convertkstilajx:Otextilekstprogram:Oword-processorkstum:Ito|textkton:O1ak|treekuler:O2spoonl:O1ll/moundle:F2eleauxtograf:O3autographlefon:Ito|telephoneetelefon:O8Eby|telephonebud:Ophone|boothkart:Otelephone|cardnumer:O9numberatelefunkciig:Oremote|controlatelefunkciil:O9trolbtelegraf:Ito|telegraphO8atelegram:O6matelemetri:O3metryatelepati:O3pathyeteler:Oplateegil:Oremote|controlet:Osaucer/small|platelavil:Odishwashing|brushrak:Odraining|boardateleskop:Otelescopeatelestirad:Oremote|controlctelevid:Ito|(television)|watchOtelevisionil:O9|setatelomer:O2omereatelur:O2luriumltem:Ito|(a|matter|of)|beOsubjectp:Ito|(time)|bep:Otimepagx:Oepoch/geological|periodperament:Otemperamentperatur:O6turepest:Ostormpi:Otemplepl:O5popasigil:Opastimeporal:Otemporal|boneyten:Ito|hold/keepajl:Opinchersar:O(of|the|thumb)|balld:Ito|campd:Otentdar:O3|campden:O2dondenc:O3encydenc:Abiased/tendentiousdr:Otenderdum:Ito|campebr:Odarknessej:Odepositoryer:Atenderi:Otapewormil:Ohandleis:Otennisisej:O5|courton:O2onor:O3rsi:Ovoltaget:Ito|temptt:O4ationt:A4ingtant:O4erateokrati:Otheocracycteolog:O3logiani:O6yiist:O6istateorem:O3remcteori:O4yA4eticalE9llyateozofi:O3sophyatepot:OteapotZter:Oearth/ground/dirtA4api:Otherapyas:Oterracebi:O2biumbul:Odirt-clodcet:Otrioen:Oarea/fieldenregistr:Oofficial|real|estate|register/register|of|title|deedsetagx:Oground|floorgas:Onatural|gasglob:Oglobeglob:A3algrund:Oearthitori:Oterritoryitori:A7ialkap:Ocape/promontorykol:Oisthmuskonekt:Ito|groundkonekt:O5ing|wirekrust:OEarth's|crust'kultivist:Ofarmerkulturist:O5m:Oaddend/coefficient|or|element|or|entry|of|a|matrix/component/member/term|or|member|of|an|equation/summandmik:Athermicmin:Otermminal:O3inalminar:Oglossary/terminologymit:Otermitemometr:Othermometermos:O5s|bottlemostat:O6tatn:Ito|sneezen:O5nivel:Oground-floornuks:O6nutor:Oterrororism:O5ismorist:O7tpecx:Oasphaltpek:O6pir:OJerusalem|artichokepom:Opotatopomfingr:OFrench|frypomflok:Opotato|chippomsxim:O6diseasesku:Oearthquakesxovigx:Olandslidetavol:O1yer|of|earthtestud:O1nd|tortoisetrem:Oearthquakeur:Ito|terrifylterur:O3orA3ibleEawfullyajx:Ohorrorec:Oterriblenesseg:Oabhorrence/horroreg:Ahideous/horribleegajx:Oabominationigxint:Astartledism:Oterrorismist:O7tit:Astartledaterverm:Oearthwormaterzon:Ozonehtest:Ito|testO3ament:Ito|bequeathament:Otestament/willik:O3icleist:O3erofunkci:O3|functionud:Otortoisedtetr:Oblack|grousea:Ohazel|henaedr:Otetrahedronarhx:Ogovernorateuj:Otea-potbtez:Oessay/thesisauxr:Othesaurusatiar:Otiara/papal|crownctibet:ATibetanan:O6anin:O6|womanbtibi:Oshin-bone/tibiaing:Oleggingbtif:Otyphuson:O3oonctig:Ostem/stalkobrasik:Okohlrabir:Otigerftik:O1c/twitchl:Ito|tickleligxem:A4ishtak:F3-tocktak:Ito|ticktak:O3ingatild:O1ldebtili:Olinden-tree/lime-treeA9e/lime-treeptim:Ito|fearO3Aafraidbal:Okettle|drumeg:Ofrightem:Atimidemul:Ocowardian:Othymeid:Ashyig:Ito|frightenig:Ahorribleigit:Aafraidkri:O(of|fear)|screamon:Odrawbarpan:Omiddle|ear/tympanium/timpanitremig:Agruesome/chillingatindr:Otinderbtine:Oclothes-mothdifektit:Amoth-eatendtink:Otenchtur:Ito|dye/tinttur:O2turist:O2rdtint:Ito|jingle/clinkO4ing/clinkig:Ito|jingle/clinkil:O5-bellatinus:Otunafishetip:OtypeA2icalar:Ofontarredaktil:O3|editorografi:Oprinting/typograpyltir:Ito|pullaljor:Osniperan:Ito|tyrannizean:O4tan:A4nicalanec:O5yboj:Ito|howlcxeval:Odraft|horseharmonik:Oaccordionkest:Odrawerkestsxrank:Ocabinetlev:Ito|(up)|hoistctitan:OTitan'Atitanici:O5umbtitol:Ito|titleO4/heading/degreeatiuokaz:Ethenbtjurk:ATurkicobulgar:OProto-Bulgarianatoast:Otoasted|breadatocxemiz:OT-shirtatofu:Otofu/bean|curdatog:O1gabtohu:O1fu/bean|curdvabohu:O1hubohuatokat:O1ccataftol:Olinenajx:O4|gooder:Ito|tolerateerebl:A5bleerem:A5ntmark:Olaundry|markdtomat:Otomatopast:O5|pastesuk:O6juicesup:O6soupetomb:O2b/graveej:Ocemeterymontet:Oburial|moundomontet:O9ndomonument:Omausoleumiton:Otoneakcent:Opitch|accentd:Ito|(off)|cutdil:Oscissorsdr:Ito|thunderdr:O6el:Otonsil:O2silsur:O3uregtop:Ocrow's|nestaz:Otopazmast:O2|mastograf:O2ographerologi:O3logyologi:A6icalvel:O2|sailwtor:O1roid/torusak:Othoraxcx:Otorchd:I1|twisteador:Obullfighterent:Otorrentent:A6ialf:Opeatfej:O3|bogi:Othoriumn:Ito|turnnil:Olathenistr:Obackpacknmasxin:Olatheped:Ito|torpedoped:O6s:O2so/trunkt:Opietur:Ito|torturetur:O6turad:O6turej:O6|chamberturist:O6rbtoskan:OTuscanA5btost:Ito|(a|toast|to)|offerOtoastftotal:Aoverall/totalEaltogetherig:Ito|totalism:O4itarianismism:A9anist:O9anbtotem:O2emism:O4ismatouxfu:O1fu/bean|curdatraakvig:I1|irrigatectrab:Obeam/girderar:Oframework/scaffoldat:Ito|(a|trail)|blazebtradici:OtraditionA8algtraduk:Ito|translateO7ionant:O7oril:O9/compilerint:O9ist:O9temp:Acompile-timegtraf:Ito|hitAstrikingik:Otrafficikcirkl:O6|circleikregul:O7ruleiksxtopigx:O7jamos:Ito|(through)|digbtragedi:OtragedyA3icatragelaf:Obushbuckbtragik:Atragicomedi:O5omedyatrahxe:Owind-pipe/tracheaatrahxom:Otrachomabtrair:Ito|(through)|cover/goej:Opassageatrajektori:Otrajectorybtrajn:O2inbilet:O4|ticketatrajt:Ofeaturektrak:Otracke:Owindpipein:Oweevert:Ito|(with)|treat/dealt:Otreatmenttad:O8tajx:O4isetat:O4ytil:Oprocessor/handlertor:Otractortori:O4rixatralas:Ito|(pass|through)|letctram:Ostreetcarpolin:Otrampolinevoj:Ostreetcar|tracksgtranc:Otrancex:Ito|cutxajx:O2xe:Otrenchxil:Oknifexodent:Oincisorxvund:Ocutdtrankvil:Acalmig:Ito|calm/sootheigx:Ito|(down)|calmsangec:Ocomposure/presence|of|mindbtranokt:Ito|(the|night)|spendej:O1o|spend|the|night)|placeZtrans:Ito|crossAoppositeEacrossakci:Otransactioncend:A4cendentaldir:Ito|(on)|passdon:Ito|pass/deliverdon:Odeliveryept:Otranseptfleksigx:Ainflectionform:Ito|transformform:O8ationformad:O9tionformator:O8erfugxint:Orefugeeig:Ito|transferir:Ito|crossirej:Olevel|crossingistor:Otransistorit:O5titiv:A6iveitivec:O9nesslaci:Omathematical|translationlingvig:Ito|translatelogxig:Ito|movelogxigx:Ito|movelok:Ito|transferlokigx:Ito|movepag:O(of|money)|remittancepas:Ito|(beyond)|gopon:Ito|transposepon:O7itionponajx:O7eport:Ito|transportport:O8portbicikl:Ocarrier|bicycleportist:Otransporter/carrierporttricikl:Ocarrier|tricyclepren:Ito|adoptrugx:Oinfraredrugx:A7salt:Ito|(across)|jumpseks:Atranssexualseksul:O9lsend:Ito|transmitsend:O6ssionsendad:O9onsendajx:O9onskrib:Ito|copy/transcribe/transliterateskrib:Otransliteration/transcriptionsxargx:Ito|shifturani:Otransuranic|elementatransurani:A9catransval:ATransvaalianctransvers:AtransverseEcrosswiseasxip:Eabeambtransviol:OultravioletA9tatrapez:Otrapeze/trapezoid/trapeziumatrapik:Ito|pierceatraprem:Ito|(through)|squeezeatrasercx:Ito|search");
  prefix = fillDictionary(prefix, "atrasorbigx:Ito|(out)|seepatrastrek:Ito|(out)|crossbtrat:Ito|(a|money|transfer)|makeOdraft/bankdraftbtravad:Ito|fordej:O3/dipatraversxil:Ocolander/strainerctravesti:Ito|parodyOtravestyant:O2nsvestiteatravidebl:A4parentctraviv:Ito|surviveO5alajx:Oexperienceatred:Ito|threadbtreeg:AextremeE6lyatref:Oclubbtrejn:Ito|train/coachad:O4inghtrem:Ito|tremble/shiverO5ing/shivering/vibrationa:Odiaeresisatod:Otrematodeer:Ito|(startled)|getig:Aeerie/macabreol:Oaspenp:Ito|dip/immersectren:Ito|drag/towkabl:Otowing-linesxip:Otugboatatret:Ito|tramplectrezor:O1easureej:O6yist:O6orZtri:O1ioangul:O2angleangul:A5ularb:O2beb:A3albord:Ostarboardbrak:Otribrachbun:Ospeaker's|platform/rostrumbunal:Ocourtbunus:Otribunebut:Ito|(tribute)|paybut:Otributecenton:Athree|hundredthcikl:Otricycledekon:Athirtiethdent:Otridentedr:O2hedral/trihedral|anglefoj:Ethree|timesfoli:Oclover/shamrockgl:Ogurnard/sea|robinglif:Otriglyphgonometri:O3onometrygonometri:A9rick:Ito|knitkfaden:Oyarnkil:Oknitting|needlekoloret:Opansykot:Oknitktrak:Obackgammonl:Ito|trilll:O4later:O2anglelion:O2llionliterajx:O2graphlogi:O2logymiliardon:Athree|billionthmilion:A5millionthmilionon:A9ionthmilon:A5thousandthnk:Ito|drinknkajx:Obeveragenkcxokolad:Ohot|chocolate/chocolate|milknkebl:Adrinkablenkej:Obar/pubnkmon:Otipobl:Atripleoblig:Ito|tripleon:Athirdop:Otriop:O2pepied:O3odpkolbas:Ochitterling/tripe|sausageatripunkt:Oellipsisctrist:AsadE2lyig:Ito|sadden/distressatriterm:Otrinomialbtritik:Owheatal:Otriticalebtriumf:Ito|triumphO6atrivial:Avulgaratroabundec:Ooverabundancebtrodorlot:Ito|spoilit:A4edatrofe:Otrophyatrofru:Apremature/untimelyatrog:Otrough/mangeratrohxe:Ochoree/trocheeatrohxoid:Otrochoidbtroig:Ito|exaggerateO8ionatrojan:OTrojanatroke:Otrocheectrol:O1awl/trolle:O1olleyebus:O6-busbtromb:Owaterspout/water-tornadoon:Otrombonejtromp:Ito|trick/cheatO5swindleAdeceitfulant:Ocheater/deceiver/imposteret:Ito|trickit:Odeceived|personit:Acheated/deceivedsxtel:Ito|pilfersxtel:O5ingsxtelist:O5eratron:Othroneetrop:O(of|speech)|figure/tropeagig:Ito|gouge/fleeceeol:Onasturtiumik:Otropicik:A5aldtrot:Ito|trotaks:Ito|overestimateil:Oscooteruar:Osidewalkatrouz:Ito|overusebtrov:Ito|findigx:Ito|bektru:Oholed:Ito|imposek:Otrickmpet:Ito|trumpetmpet:O6nk:O2nknket:Ostem/stalkp:Otroop/troupeplen:Afull|of|holesst:Omonopolizing|business|trustt:Otroutattt:Fweb/WWW'ctualet:Otoilette/toiletry/attireej:Odressing|roomuj:Otoiletry/cosmetic|caseftub:Opipe/tubeer:Olump/bump/knoberceleri:Oturnip-rooted|celeryerkuloz:O1berculosisist:Oplumbermuntist:O6atucx:OIndia|inkdtuf:Otuftalauxd:O3ed|larkanas:O6duckgreb:Ogrebeatujpret:Ainstantbtuk:Oclothan:Otoucanbtuli:Othuliump:Otulipatumor:O1moretumult:Ito|rage/riotOriotem:Owantonnessem:A5sonoril:Oalarm-bellhtun:Ometric|tondr:Otundrael:O2nelik:O2icisian:OTunisianizi:A7izian:O7izianin:O7|womanztur:Otowerb:Ospinning|topban:Oturbanbin:O3ined:Othrushet:Oturretism:Otourismist:O5tistoficej:O6|bureauk:OTurkk:A3ishkin:O6|womankis:Oturquoisekmen:OTurkomanment:Ito|tormentment:O6mentad:Oabuse/tormentn:Ito|turnn:O3ne:Otournigx:I1|turnnigx:O3nigxad:Ito|swirlnir:Otournamentp:Auglyt:Oturtle-dovehtus:Ito|coughO4ilag:O1ltsfootx:Ito|concern/touchx:Otouchxant:Aadjacent/adjoiningxet:Ito|(lightly)|touchxosurfac:Otire|treadltut:OwholeAentireEcompletelyajx:Oentiretyec:Alinear/totalhomar:Ohuman|racekor:Awhole-heartedmond:Aworld-widemond:E9mondig:Oglobalizationmondigx:O9ionslavism:OPanslavismbtvist:Ito|(the|twist)|danceOtwistauest:Owestbugand:AUgandanan:O6augvis:Omanchurian|bush-warbleraukaz:Oukasecukrain:OUkrainianA8in:O8|womanbukrajn:O8A8aukulel:Oukuleleaulan:Oulanaulcer:Osore/ulceraulgenr:Oanimate|genderaulm:Oelmauln:Ocubit/ell/ulnaaultimat:Oultimatumaultramar:O2ramarineaulul:Ito|hoot/howlaumajx:Othingamajigaumbilik:Onavelbume:OJapanese|apricot/plum/umearb:O9pricot/plum/ume|treeaumlauxt:Oumlautaunc:Oouncejung:Onaileg:Oclawobros:Onail-brushokusxej:O5edolak:O4polishotajlil:O4clippersotondil:O4scissorsovernis:O4varnishozon:Ocuticlevent:Oointmentluni:Ounionform:O2formk:A2queksul:OUnix-userson:Ounisont:O2tvers:O2versevers:A6alversal:A8versalec:Ogeneralityversitat:Ouniversityversitat:A9aunkari:Ogambier/gambiraunkt:Ito|annointIunu:Ounitafoj:Efor|the|first|timealok:Eabove|allanim:Aunanimousanim:E8lycikl:O1icycledirekt:Aone-wayec:Ounityec:A2fiedflank:A2lateralfoj:Eonceform:Auniformhav:Awith|unitig:Ito|uniteig:Ocombination/union/junctionigx:Ito|uniteigx:O2onigxint:A2tedkornul:O2cornkotiledon:Amonocotyledonouslok:A2adic/unarynorm:Anormalizednormig:Ito|normalizeobl:Asingleokul:Aone-eyedomatric:Ounit|matrixon:Awholeop:Asingleopolinom:Ounit|polynomialperson:Aone-persont:Ounisontag:Asingle-dayterm:Omonomialton:A3tonousvocx:Aunanimousaupup:Ohoopoeauragan:Ohurricaneaurani:Ouraniumgurb:OcityAurbandom:Ocity|hall/town|halleg:Ometropolis/big|cityestr:Omayoret:Otownsxtat:Ocity-stateaureter:Oureterauretr:O3hraeurgx:Ito|hurry/urgeAurgentE5lyec:O4cyigx:Ito|hurry/rushdurin:Ito|urinateO3ead:O3ationuj:Ochamber|potaurogal:Ocapercaillieburs:Obearin:Oshe-bearaurtik:Onettlecurugvaj:AUruguayanan:O8anin:O8|womanbuskl:Ocase/upper|or|lower|caseec:O9|or|lower|casecuson:AAmericanan:O7anin:O7|womanauter:Outeruseutil:Ito|(useful)|beOusefulness/benefitA5ig:Ito|(use|of/useful)|makeprogram:Outilityautopi:A1opianauvertur:Oovertureauxat:Owattouz:Ito|useO2ad:O2ant:O2rant:A1ingat:Ito|(used)|bebek:OUzbekbekin:O4|womanebl:Ausable/suitableigx:Ito|(used)|bein:Ofactory/millit:Ausedofin:Ito|discardur:Ousuryurp:Ito|usurpZva:Fowd:Ito|wadedbird:O2ing|birddej:Ofordfl:Owaffleflet:O2er/coneg:Ito|wandergin:Ovaginagon:Otrain|car/coach/wagongonar:O4gul:Ovagabondjc:Ovicek:Ito|(available)|bek:Aavailablekcin:Ito|vaccinatekcin:O5ekcinad:O5ationkcini:Oblueberry/cranberryker:Ocowboyks:Owaxksflav:Aas|yellow|as|waxkskandel:Owax|candlekstol:Ooilclothku:Ovacuumkuig:Ito|(a|vacuum)|makel:Ovalleylent:O2encelerian:O3rianlet:Oglenlid:Ito|(valid)|belid:Avalidlidig:Ito|validateliz:Osuitcaselkir:OValkyrielon:OWalloonlon:A4nianlor:Ito|(worth|¯¯it¯¯/worthy|of)|belor:Ovaluelor:A3ableloriz:Ito|assignloriz:O5mentlorizat:O9|destinationls:Owaltzlut:Ocurrencylv:Ovalvempir:O1mpiren:Afutile/uselessn:Ein|vain/futilelynad:Ovanadiumnadi:O7nd:Opartitionndal:Ovandalavandalism:O5ismavanec:Ofutilityavanel:Olapwingdvang:Ocheekhar:Osideburnobarb:O7ofrap:Oslapavanig:Ito|frustrate/thwartavanil:Ovanillaevant:Afrivolous/silly/vainajx:O5ity/sillinessam:Ovanityec:O5em:O5ivapor:Osteam/vaporban:O4bathig:Ito|evaporateigx:Ito|evaporatekaldron:Osteam-boilerkovrigx:Ito|(blurry)|getmotor:Osteam|enginepurigej:Odry|cleaner's|shopsxip:OsteamshipJvar:Omerchandiseang:Ofloor|plate/timberb:Ito|recruitbigx:Ito|enlistbit:Orecruitf:Owharf/pieri:Ito|varyi:O2ietyi:A3ableiabl:O7iad:Ochange/variationiajx:Ovariationianc:O4nceiant:Odifferent|form/variant|textiant:Avariantiete:O3ety|entertainmentiol:Osmallpoxiolet:Ochicken|poxm:Oheatm:Awarmm:E3lymal:Athermicmbotel:O4osmec:Oheatmeg:O3meg:Ahotmegsang:Apassionatemet:Alukewarmmig:Ito|(up)|warmmsang:Awarm-blooded/haematothermalp:O2pt:Ito|(after)|babysit/looktant:Obaby-sittertantin:Ofemale|baby-sittertist:Onannytistin:O4bvask:OBasqueA5cvast:Awide/hugeeg:Agigantic/immenseigajx:O(of|a|mapping)|continuation/extensionevat:Ito|padOwatt/cotton-woolhor:O3-hourikan:AVaticant:Owattcvaz:Ocontainerelin:Ovaselinelavil:Odishwasherbved:OVedaism:O2ismaveft:Oweftcvegan:OveganA4ism:O4ismjveget:Ito|vegetateOgrowthad:O5ajx:Ovegetationajxar:O9al:O5blealar:O5tionar:A5rianaran:O9arism:O9ismbvejcxi:Ito|(a|game|of|go)|playOthe|game|of|gobvejn:Ito|grain/veinOveinevek:Ito|awakenhorlogx:Oalarm-clockigx:Ito|(up)|waketor:Ovectortor:A5/vectorialgvel:Ito|sailO3d:Ito|weldfaden:Oseaming|twinek:Ito|fade/witherstang:Osparur:OvelvetRven:Ito|comed:Ito|selld:Osaleda:OVendadej:Ostoredig:Ito|(sold)|havedimpost:Osales|taxdist:O4mandistin:O4womandoplac:Omarketplacedotabl:Ocounterdred:OFriday'ec:AVenetianecan:O7eci:A7ecian:O7en:Ito|poisonen:O5en:A5ousere:Asexually|transmitted/venerealezuel:AVenezuelanezuelan:O9ezuelanin:O9|womangx:Ito|avengegx:Orevengeig:Ito|(for)|sendk:Ito|win/defeatk:Ovictorykigx:Ito|(defeated)|bekint:Ovictorkobat:Ito|conqueront:Anextpren:Ito|(up)|pickt:Ito|blowt:Owindteg:O3stormtet:Obreezetol:Ito|ventilatetolil:Ofan/ventilatortr:Obellytr:Aabdominaltrodolor:Ostomach|achetum:Ito|fan/aeratetumil:O3ventilatorZver:Oreality/truthAtrueEreallyand:Oporch/verandab:Overbbask:Omulleinben:Overbena/vervaind:Ogreend:A4dalg:O4|algadigr:Overdigrisdikt:O4ctdir:Eto|tell|the|truthdont:Agoing|to|be|greenec:Otruthg:Ito|beat/whipg:Otwig/rodget:Orib/rodig:Ito|fullfil/satisfyk:Ito|compose/writek:Oworkkajx:O3kar:Oññworkskil:Oword-processorkint:Oauthorkist:O5/writerm:Owormmborit:Adecrepit/worm-eatenmicxel:Overmicellimut:O3outhnis:Ovarnishs:Ito|(verse)|writes:Oversesajx:O4ser:O(of|verse)|part/footsi:Oversionspied:O3e|footst:O3tsx:Ito|poursxajn:Aprobablesxajn:E6yt:Ocrown|of|the|headtabel:Otruth|tabletag:Odachshundtebr:Overtebratebrar:Ospinetic:Overtextigx:Ito|(dizzy)|feeltigx:Odizziness/vertigotikal:O(of|a|matrix)|vertical|line/columntikal:Averticaltocxap:Oskullcap/spherical|capbveruk:Owartapr:O3hogcverv:Ozest/vivacityAlively/vivaciousalor:Otruth|valueaveselkapitan:Ocaptaingvesp:Owasper:Oeveninger:Ein|the|eveningerigx:Ito|(late)|getermangx:Odinner/suppererrob:Oevening|gown/frockert:Obativest:Ito|dressO(of|clothing)|garment/pieceAclothingajx:O(of|clothing)|garment/pieceal:Ovestal|virginej:Ocloakroomibl:Oentrance|hall/lobbyigx:Ito|(dressed)|getosxrank:Owardrobeavesxt:Ovest/waistcoatqvet:Ito|betO2/wagerer:Oweathereracx:Ofoul|weathereran:Oveteranerinar:O4inarianerinform:Oweather|reporterprognoz:O7forecastkur:Ito|raceo:Ito|vetoo:O3ur:Ito|travel/driveurbilet:Oticketurej:Otraffic|areaurig:Ito|drive/transporturigist:O4ruril:Ovehiclebvezik:Obladder/bubbleet:O1isteravezir:Ovizieraviadukt:O1aductbviand:Omeathaketajx:Ominced|meatcvibr:Ito|vibrateO5ionad:Oflutter/vibrationaviburn:Oguelder|rosekvic:Oline/rowAviceEin|rowsfilin:Ostep-daughterfrat:O4brotherfratin:O4sisterleuxtenant:Osecond|lieutenantpatr:Ostep-fatherpatrin:O4motherprezidant:Ovice-presidentvok:Ito|(row)|callmvid:Ito|seeOsight/viewajx:Oviewam:Asightseeingbend:Ovideotapeebl:A1sibleeobend:O1deotapeigx:Ito|appearind:Aworth|seeingosercxil:Oviewfinderpunkt:O3pointv:Owidowervin:O4cvien:AViennesean:O7anin:O7|womancvigl:Aalertec:Ogusto/spiritig:Ito|encourage/stimulateavikari:Ovicarbviki:Owiking:OVikingaviktim:Ovictimfvil:Otuft|of|hair/villusAshaggya:Ovillaagx:O4geagxestr:Omayoragxet:Ohamlet/townshipavimen:Owicker/osierxvin:O1neagr:Ovinegaragruj:O2ager-bottleber:Ograpeberar:O(of|grapes)|bunchberarb:Ograpevineberej:Ovineyardbergxarden:O7beruj:Ograpevined:Ito|bandage/wrapd:O6das:Owindlassdinfan:Obundled-up|babydist:Onursedistin:O4dotuk:Oswaddling|clothdozul:OWindows-userig:Owine-makingigad:O9gist:Ovintnerk:Operiwinkle/vincakul:Oaccoladetr:Owintertr:A5iviol:OvioletA5ent:E4ntlyet:O4tkolor:O5kolor:A5on:Ito|(the|violin)|playon:Oviolinoncxel:Ocellodvip:Ito|whipO3er:Oviperur:O4Gvir:Oman/maleA1leabel:Odroneacx:Obad|manbov:Obullcerv:Ostagcxeval:O2llionec:Ovirilityg:O2ging:A5algenr:Omasculine|gendergin:Ovirgingul:O5gulin:O5in:Owoman/femalein:Afemaleinsaket:Olady's|baginseks:Afemininekapr:Omale|goatkat:O4catkok:Oroosterkolomb:Omale|pigeonkunikl:O4rabbitlepor:O4harepork:Oboarseks:Amaleseksul:O3sxaf:Oramt:Ovirtuet:A4oustual:A4altuoz:O4osous:O2usavisigot:OVisigothbvisk:Omistletoei:Owhiskeyavist:O3tcvisx:Ito|(off)|wipeebl:Awashabletuk:Odish|cloth/dust|ragjvit:Ograpevineal:Avitalamen:O3minamin:O6ej:O1neyardr:Oglassrajx:Opanerec:Aglassyrin:Oshowcaseriol:Oconcentrated|sulfuric|acid/vitriolqviv:Ito|liveO1feA1vingant:A5dat:Obirth|and|death|dateer:Ocivethistori:Obiographyisekci:Ovivisectionodauxr:Olife-spanoform:O3|formofort:Afull|of|lifeoprotokol:Orésumé/curriculum|vitaesciencist:Obiologisttabel:Oactuarial|tabletemp:Olifetimeten:Ito|supportul:Oliving|beingmviz:Ovisaagx:Ofaceagxacx:Ougly|face/mugagxkolor:Ocomplexioni:Ovisionier:O2orit:Ito|visitit:O4itant:O4oritantregistr:O6's|registeritet:Ito|(in)|dropitkart:Obusiness|cardiul:Ovisionarycvjetnam:OVietnamesean:O9anin:O9|womanavjol:Oviolafvocx:Ito|voteO1ice/voteA1cal/voicedEorallydon:Ito|votekord:O1cal|cordavodk:O1dkasvoj:Oroadagx:Ito|travelagx:O1ipagxagentej:O1avel|agencyagxant:O5eragxem:Ainclined|to|travelborder:Oroad|shoulderelspez:Otravel|costserar:Ito|(astray)|goerarint:Alostet:Opathevod:Oprovincial|governorimpost:Otollir:I1|travelkoneks:Apath-connected/pathwise|connectedkrucigx:Ocrossroadmontril:Osignpostplan:Oroutesulk:Otrailcvok:Ito|callal:Ovowelt:Otaskmasteravolant:Awilling/gladcvolapuk:OVolapukajx:Ogibberishist:OVolapuk|speakeravolb:Ovault/arched|roofavolfram:Otungstenavolism:Ovoluntarismavolitiv:Osubjunctive|moodevolont:Ito|(willing)|beAvoluntary/willingEwillinglyec:O6nessul:Ovolunteeravolt:OVolt");
  prefix = fillDictionary(prefix, "cvolum:Obook|volumeen:Ovolumeenajx:Oaggregatebvolupt:Osensual|pleasureAvoluptuousbvolv:Ito|(up)|wind/rolligx:Ito|(up)|rolldvom:Ito|vomitajx:O4nuks:Ostrychninenuksarb:O9kvort:Owordar:Odictionaryfarad:Oword-formationform:O8/inflected|wordgrup:Ophraseic:Ovortexkunmet:Oword-compoundingobatal:Ito|argueoproviz:Ovocabularyospec:Opart|of|speechvalor:Oword|valueavost:Otailbvot:Ito|vowO2bvual:Ito|veilO3avulgar:Acommon/everyday/vulgarbvulkan:Ovolcanoiz:Ito|vulcanizeavulp:Ofoxavultur:Ovultureavulv:O2vacvund:Ito|injureO4yit:A4ed/woundedawww:FWWW'bzambi:AZambianan:O6bzap:Ito|channel-surfad:O9rfingazebr:Ozebraazebu:OBrahman/zebuazefir:Ozephyrbzeland:AZealandan:O6erazelkov:Ozelkovaazelot:Ofanaticbzen:Ozenit:O2ithazepelin:O1ppelinazeuxgm:O1ugmaazibel:Omarten/sablebzigzag:Ito|zigzagO5azimbalon:Odulcimerazingibr:Ogingerbzink:Ito|galvanize/zinc-plateOzincbzip:Ito|zipO2perazirkoni:O1rconiumazizel:Osuslikazodiak:Ozodiacazombi:O1mbiebzon:Ito|girdObelt/waist/zoneazoofit:Ozoophyteczoolog:O2logisti:O5yiist:O5istizorg:Ito|(care|of)|takeOcare/concernA3fulant:O3takerat:Opupilem:Acarefulem:E6lyet:Oworryplen:Aanxiousazori:Oflip-flop|sandalazosterops:Owhite-eyeazuav:OZouaveczum:Ito|buzz/humad:O7il:O3er");
  totalEntries = ii - 1;
}

// Cx cx Gx gx Hx hx Jx jx Sx sx Ux ux

int _tmain(int argc, _TCHAR* argv[]) {
  cout << "\n\nEsperanto to English Machine Translation, by David Crandall, (C) 2014\n\n";
  cout << "Please wait...\n\n";
  string origText;
  loadDictionary(); // Decompress dictionary entries
  H_Method = false;
  circumflexCorrection = true;
  dontTranslateCapWords = true;
  b = "   ";

  do {
	try {
	  previousPerson = "";
      cout << "Esperanto input? ";
	  getline(cin, origText);
	  if (origText.length() == 0) {
		cout << "\nDone.\n\n";
		return 0;
	  }

	  cout << origText;
	  cout << "\nPlease wait...\n";
      cout << "\nTranslation: \n" + translateEsperanto(origText) + "\n\n";
	  //textBox1.Text = EsperantoAnywhere.textIn2; // Give input text circumflexes
	} catch (exception ee) {
	  exception ee2 = ee;
	  cout << "Untranslatable. Ne tradukebla.";
	}
  } while (true);

	return 0;
}

/**
* Esperanto AnywhereCPP, Version 1.0, Esperanto-to-English Machine Translation
*
* @author David Kenneth Crandall, © 2014.
*/
// Cx cx Gx gx Hx hx Jx jx Sx sx Ux ux
